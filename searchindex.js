Search.setIndex({"docnames": ["01_getting_started", "01_getting_started/02_write", "01_getting_started/03_execute", "01_getting_started/04_variational", "01_getting_started/:myqlm:01_install", "01_getting_started/:myqlm:license", "01_getting_started/:myqlm:macos", "02_user_guide", "02_user_guide/01_write", "02_user_guide/01_write/01_digital_circuit", "02_user_guide/01_write/01_digital_circuit/01_quantum_gates", "02_user_guide/01_write/01_digital_circuit/02_variational", "02_user_guide/01_write/01_digital_circuit/03_program", "02_user_guide/01_write/01_digital_circuit/04_routines", "02_user_guide/01_write/01_digital_circuit/04_routines/01_naming_routines", "02_user_guide/01_write/01_digital_circuit/04_routines/02_ancillae", "02_user_guide/01_write/01_digital_circuit/04_routines/03_oracles", "02_user_guide/01_write/01_digital_circuit/05_aqasm", "02_user_guide/01_write/02_analog_schedule", "02_user_guide/01_write/02_analog_schedule/01_building_schedules", "02_user_guide/01_write/02_analog_schedule/02_manip_schedules", "02_user_guide/01_write/02_analog_schedule/03_an_jobs", "02_user_guide/01_write/03_annealing_problems", "02_user_guide/01_write/03_annealing_problems/01_ising", "02_user_guide/01_write/03_annealing_problems/02_qubo", "02_user_guide/01_write/03_annealing_problems/03_comb_prob", "02_user_guide/01_write/03_observable", "02_user_guide/02_execute", "02_user_guide/02_execute/01_job", "02_user_guide/02_execute/01_job/01_sample_job", "02_user_guide/02_execute/01_job/02_observable_job", "02_user_guide/02_execute/01_job/03_automated_batch_generation", "02_user_guide/02_execute/02_result", "02_user_guide/02_execute/03_qpu", "02_user_guide/02_execute/03_qpu/03_annealing", "02_user_guide/02_execute/03_qpu/04_custom_qpu", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/clinalg", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/pylinalg", "02_user_guide/02_execute/04_plugin", "02_user_guide/02_execute/04_plugin/01_custom_plugin", "02_user_guide/02_execute/04_plugin/02_custom_junction", "02_user_guide/02_execute/04_plugin/03_hardware_specs", "02_user_guide/02_execute/05_variational", "04_api_reference", "04_api_reference/module_qat", "04_api_reference/module_qat/:myqlm:module_interop", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/cirq_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/qlm_to_cirq", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm/oqasmparser", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmengine", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmparser", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquil_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquilqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/qlm_to_pyquil", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/asyncbackendtoqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/backendtoqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskit_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitjob", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitruntimeqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qlm_to_qiskit", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qputobackend", "04_api_reference/module_qat/:myqlm:module_pylinalg", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/mat2nparray", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/measure", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/project", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/raise_break", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/reset", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/simulate", "04_api_reference/module_qat/module_comm", "04_api_reference/module_qat/module_comm/module_datamodel", "04_api_reference/module_qat/module_comm/module_datamodel/gatedefinition", "04_api_reference/module_qat/module_comm/module_datamodel/op", "04_api_reference/module_qat/module_comm/module_exceptions", "04_api_reference/module_qat/module_comm/module_exceptions/errortype", "04_api_reference/module_qat/module_comm/module_exceptions/pluginexception", "04_api_reference/module_qat/module_comm/module_exceptions/qpuexception", "04_api_reference/module_qat/module_comm/module_resource", "04_api_reference/module_qat/module_comm/module_resource/allocationmodel", "04_api_reference/module_qat/module_comm/module_resource/device", "04_api_reference/module_qat/module_comm/module_resource/resourcemodel", "04_api_reference/module_qat/module_comm/module_shared", "04_api_reference/module_qat/module_comm/module_shared/intermediatemeasurement", "04_api_reference/module_qat/module_comm/module_shared/processingtype", "04_api_reference/module_qat/module_core", "04_api_reference/module_qat/module_core/aggregate_data", "04_api_reference/module_qat/module_core/assert_plugin", "04_api_reference/module_qat/module_core/assert_qpu", "04_api_reference/module_qat/module_core/batch", "04_api_reference/module_qat/module_core/batchresult", "04_api_reference/module_qat/module_core/circuit", "04_api_reference/module_qat/module_core/display", "04_api_reference/module_qat/module_core/evaluate", "04_api_reference/module_qat/module_core/hardwarespecs", "04_api_reference/module_qat/module_core/job", "04_api_reference/module_qat/module_core/module_application", "04_api_reference/module_qat/module_core/module_application/application", "04_api_reference/module_qat/module_core/module_application/remoteapplication", "04_api_reference/module_qat/module_core/module_circuit_builder", "04_api_reference/module_qat/module_core/module_circuit_builder/default_gate_set", "04_api_reference/module_qat/module_core/module_circuit_builder/get_param_generator", "04_api_reference/module_qat/module_core/module_circuit_builder/get_predef_generator", "04_api_reference/module_qat/module_core/module_circuit_builder/variablenamenotavailable", "04_api_reference/module_qat/module_core/module_gate_set", "04_api_reference/module_qat/module_core/module_gate_set/gateset", "04_api_reference/module_qat/module_core/module_gate_set/gatesignature", "04_api_reference/module_qat/module_core/module_gate_set/gatesyntaxredefinition", "04_api_reference/module_qat/module_core/module_qpu", "04_api_reference/module_qat/module_core/module_qpu/commonqpu", "04_api_reference/module_qat/module_core/module_spins", "04_api_reference/module_qat/module_core/module_spins/integer_to_spins", "04_api_reference/module_qat/module_core/module_spins/spins_to_integer", "04_api_reference/module_qat/module_core/module_variables", "04_api_reference/module_qat/module_core/module_variables/abso", "04_api_reference/module_qat/module_core/module_variables/angle", "04_api_reference/module_qat/module_core/module_variables/arithexpression", "04_api_reference/module_qat/module_core/module_variables/atan2", "04_api_reference/module_qat/module_core/module_variables/cos", "04_api_reference/module_qat/module_core/module_variables/exp", "04_api_reference/module_qat/module_core/module_variables/get_item", "04_api_reference/module_qat/module_core/module_variables/heaviside", "04_api_reference/module_qat/module_core/module_variables/imag", "04_api_reference/module_qat/module_core/module_variables/ln", "04_api_reference/module_qat/module_core/module_variables/real", "04_api_reference/module_qat/module_core/module_variables/sin", "04_api_reference/module_qat/module_core/module_variables/sqrt", "04_api_reference/module_qat/module_core/module_variables/symbol", "04_api_reference/module_qat/module_core/module_variables/vmax", "04_api_reference/module_qat/module_core/observable", "04_api_reference/module_qat/module_core/parameter", "04_api_reference/module_qat/module_core/plot_in_notebook", "04_api_reference/module_qat/module_core/result", "04_api_reference/module_qat/module_core/sample", "04_api_reference/module_qat/module_core/schedule", "04_api_reference/module_qat/module_core/state", "04_api_reference/module_qat/module_core/term", "04_api_reference/module_qat/module_core/topology", "04_api_reference/module_qat/module_core/topologytype", "04_api_reference/module_qat/module_core/variable", "04_api_reference/module_qat/module_devices", "04_api_reference/module_qat/module_devices/alltoall", "04_api_reference/module_qat/module_devices/google_sycamore", "04_api_reference/module_qat/module_devices/griddevice", "04_api_reference/module_qat/module_devices/ibm_burlington", "04_api_reference/module_qat/module_devices/ibm_johannesburg", "04_api_reference/module_qat/module_devices/ibm_melbourne", "04_api_reference/module_qat/module_devices/ibm_rueschlikon", "04_api_reference/module_qat/module_devices/ibm_singapore", "04_api_reference/module_qat/module_devices/ibm_tokyo", "04_api_reference/module_qat/module_devices/ibm_yorktown", "04_api_reference/module_qat/module_devices/linedevice", "04_api_reference/module_qat/module_devices/rigetti_agave", "04_api_reference/module_qat/module_devices/rigetti_aspen", "04_api_reference/module_qat/module_devices/squaregriddevice", "04_api_reference/module_qat/module_devices/zuchongzhi", "04_api_reference/module_qat/module_fermion", "04_api_reference/module_qat/module_fermion/apply_quantum_subspace_expansion", "04_api_reference/module_qat/module_fermion/compute_active_space_integrals", "04_api_reference/module_qat/module_fermion/construct_ucc_ansatz", "04_api_reference/module_qat/module_fermion/convert_to_h_integrals", "04_api_reference/module_qat/module_fermion/electronicstructurehamiltonian", "04_api_reference/module_qat/module_fermion/fermionichamiltonian", "04_api_reference/module_qat/module_fermion/get_cluster_ops", "04_api_reference/module_qat/module_fermion/get_hf_ket", "04_api_reference/module_qat/module_fermion/guess_init_params", "04_api_reference/module_qat/module_fermion/make_anderson_model", "04_api_reference/module_qat/module_fermion/make_compressed_ldca_circ", "04_api_reference/module_qat/module_fermion/make_embedded_model", "04_api_reference/module_qat/module_fermion/make_general_hwe_circ", "04_api_reference/module_qat/module_fermion/make_hubbard_model", "04_api_reference/module_qat/module_fermion/make_ldca_circ", "04_api_reference/module_qat/module_fermion/make_mr_circ", "04_api_reference/module_qat/module_fermion/make_mrep_circ", "04_api_reference/module_qat/module_fermion/make_shallow_circ", "04_api_reference/module_qat/module_fermion/make_trotterisation_routine", "04_api_reference/module_qat/module_fermion/molecularhamiltonian", "04_api_reference/module_qat/module_fermion/moleculeinfo", "04_api_reference/module_qat/module_fermion/perform_phase_estimation", "04_api_reference/module_qat/module_fermion/perform_pyscf_computation", "04_api_reference/module_qat/module_fermion/select_active_orbitals", "04_api_reference/module_qat/module_fermion/spinhamiltonian", "04_api_reference/module_qat/module_fermion/transform_integrals_to_new_basis", "04_api_reference/module_qat/module_fermion/transform_to_bk_basis", "04_api_reference/module_qat/module_fermion/transform_to_jw_basis", "04_api_reference/module_qat/module_fermion/transform_to_parity_basis", "04_api_reference/module_qat/module_generators", "04_api_reference/module_qat/module_generators/abstractgenerator", "04_api_reference/module_qat/module_generators/combinatorialoptimizergenerator", "04_api_reference/module_qat/module_generators/graphcolouringgenerator", "04_api_reference/module_qat/module_generators/graphpartitioninggenerator", "04_api_reference/module_qat/module_generators/kcliquegenerator", "04_api_reference/module_qat/module_generators/maxcutgenerator", "04_api_reference/module_qat/module_generators/remotebatchgenerator", "04_api_reference/module_qat/module_generators/vertexcovergenerator", "04_api_reference/module_qat/module_hardware", "04_api_reference/module_qat/module_hardware/defaultgatesspecification", "04_api_reference/module_qat/module_hardware/defaulthardwaremodel", "04_api_reference/module_qat/module_hardware/gatesspecification", "04_api_reference/module_qat/module_hardware/hardwaremodel", "04_api_reference/module_qat/module_hardware/make_depolarizing_hardware_model", "04_api_reference/module_qat/module_lang", "04_api_reference/module_qat/module_lang/abstractgate", "04_api_reference/module_qat/module_lang/amplification_step", "04_api_reference/module_qat/module_lang/boolformula", "04_api_reference/module_qat/module_lang/build_gate", "04_api_reference/module_qat/module_lang/cbit", "04_api_reference/module_qat/module_lang/cregister", "04_api_reference/module_qat/module_lang/gate", "04_api_reference/module_qat/module_lang/generate_gate_set", "04_api_reference/module_qat/module_lang/grover_diffusion", "04_api_reference/module_qat/module_lang/householder", "04_api_reference/module_qat/module_lang/kptree", "04_api_reference/module_qat/module_lang/linker", "04_api_reference/module_qat/module_lang/module_arithmetic", "04_api_reference/module_qat/module_lang/module_arithmetic/add_const_mod", "04_api_reference/module_qat/module_lang/module_arithmetic/add_mod", "04_api_reference/module_qat/module_lang/module_arithmetic/modular_exp", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const_mod", "04_api_reference/module_qat/module_lang/module_classarith", "04_api_reference/module_qat/module_lang/module_classarith/add", "04_api_reference/module_qat/module_lang/module_classarith/add_const", "04_api_reference/module_qat/module_lang/module_classarith/cuccaro_add", "04_api_reference/module_qat/module_lang/module_qftarith", "04_api_reference/module_qat/module_lang/module_qftarith/add", "04_api_reference/module_qat/module_lang/module_qftarith/add_const", "04_api_reference/module_qat/module_lang/module_qftarith/mult", "04_api_reference/module_qat/module_lang/module_qftarith/mult_const", "04_api_reference/module_qat/module_lang/module_qftarith/qft", "04_api_reference/module_qat/module_lang/paramgate", "04_api_reference/module_qat/module_lang/phase_estimation", "04_api_reference/module_qat/module_lang/program", "04_api_reference/module_qat/module_lang/qarithexp", "04_api_reference/module_qat/module_lang/qbit", "04_api_reference/module_qat/module_lang/qbool", "04_api_reference/module_qat/module_lang/qboolarray", "04_api_reference/module_qat/module_lang/qclause", "04_api_reference/module_qat/module_lang/qcompexp", "04_api_reference/module_qat/module_lang/qfunc", "04_api_reference/module_qat/module_lang/qint", "04_api_reference/module_qat/module_lang/qregister", "04_api_reference/module_qat/module_lang/qrout", "04_api_reference/module_qat/module_lang/qroutine", "04_api_reference/module_qat/module_lang/quantum_counting", "04_api_reference/module_qat/module_lang/uniform_distribution", "04_api_reference/module_qat/module_opt", "04_api_reference/module_qat/module_opt/ansatzfactory", "04_api_reference/module_qat/module_opt/bilp", "04_api_reference/module_qat/module_opt/circuitgenerator", "04_api_reference/module_qat/module_opt/clause", "04_api_reference/module_qat/module_opt/combinatorialproblem", "04_api_reference/module_qat/module_opt/graphcolouring", "04_api_reference/module_qat/module_opt/graphpartitioning", "04_api_reference/module_qat/module_opt/ising", "04_api_reference/module_qat/module_opt/kclique", "04_api_reference/module_qat/module_opt/maxcut", "04_api_reference/module_qat/module_opt/mixingfactory", "04_api_reference/module_qat/module_opt/module_mixing_factory", "04_api_reference/module_qat/module_opt/module_mixing_factory/independentannealing", "04_api_reference/module_qat/module_opt/module_mixing_factory/initialstatebuilder", "04_api_reference/module_qat/module_opt/module_mixing_factory/simpleinitialstate", "04_api_reference/module_qat/module_opt/module_results", "04_api_reference/module_qat/module_opt/module_results/combinatorialresult", "04_api_reference/module_qat/module_opt/module_results/graphpartitioningresult", "04_api_reference/module_qat/module_opt/module_results/kcliqueresult", "04_api_reference/module_qat/module_opt/module_results/vertexcoverresult", "04_api_reference/module_qat/module_opt/numberpartitioning", "04_api_reference/module_qat/module_opt/qubo", "04_api_reference/module_qat/module_opt/schedulegenerator", "04_api_reference/module_qat/module_opt/var", "04_api_reference/module_qat/module_opt/vertexcover", "04_api_reference/module_qat/module_plugins", "04_api_reference/module_qat/module_plugins/abstractplugin", "04_api_reference/module_qat/module_plugins/adaptvqeplugin", "04_api_reference/module_qat/module_plugins/circuitinliner", "04_api_reference/module_qat/module_plugins/costfunctionplugin", "04_api_reference/module_qat/module_plugins/display", "04_api_reference/module_qat/module_plugins/gradientdescentoptimizer", "04_api_reference/module_qat/module_plugins/junction", "04_api_reference/module_qat/module_plugins/multiplelaunchesanalyzer", "04_api_reference/module_qat/module_plugins/observablesplitter", "04_api_reference/module_qat/module_plugins/optimizer", "04_api_reference/module_qat/module_plugins/psominimizeplugin", "04_api_reference/module_qat/module_plugins/quameleonplugin", "04_api_reference/module_qat/module_plugins/remoteplugin", "04_api_reference/module_qat/module_plugins/scipyminimizeplugin", "04_api_reference/module_qat/module_plugins/seqoptim", "04_api_reference/module_qat/module_plugins/spsaminimizeplugin", "04_api_reference/module_qat/module_plugins/transformobservable", "04_api_reference/module_qat/module_plugins/zeronoiseextrapolator", "04_api_reference/module_qat/module_qpus", "04_api_reference/module_qat/module_qpus/:myqlm:clinalg", "04_api_reference/module_qat/module_qpus/:myqlm:pylinalg", "04_api_reference/module_qat/module_qpus/:myqlm:simulatedannealing", "04_api_reference/module_qat/module_qpus/classicalqpu", "04_api_reference/module_qat/module_qpus/get_current_qpu", "04_api_reference/module_qat/module_qpus/get_default_qpu", "04_api_reference/module_qat/module_qpus/qpuhandler", "04_api_reference/module_qat/module_qpus/remoteqpu", "04_api_reference/module_qat/module_quops", "04_api_reference/module_qat/module_quops/are_equal_up_to_phase", "04_api_reference/module_qat/module_quops/channelrepresentations", "04_api_reference/module_qat/module_quops/convert_density_mat_to_pauli_vec", "04_api_reference/module_qat/module_quops/convert_pauli_vec_to_density_mat", "04_api_reference/module_qat/module_quops/get_average_process_fidelity", "04_api_reference/module_qat/module_quops/get_diamond_norm", "04_api_reference/module_qat/module_quops/get_entanglement_process_fidelity", "04_api_reference/module_qat/module_quops/get_process_distance", "04_api_reference/module_qat/module_quops/get_state_fidelity", "04_api_reference/module_qat/module_quops/get_trace_distance", "04_api_reference/module_qat/module_quops/is_completely_positive", "04_api_reference/module_qat/module_quops/is_trace_preserving", "04_api_reference/module_qat/module_quops/is_trace_reducing", "04_api_reference/module_qat/module_quops/is_unital", "04_api_reference/module_qat/module_quops/make_avg_fid_equiv_depol_channel", "04_api_reference/module_qat/module_quops/make_depolarizing_channel", "04_api_reference/module_qat/module_quops/make_generalized_amplitude_damping", "04_api_reference/module_qat/module_quops/make_pauli_matrix_basis", "04_api_reference/module_qat/module_quops/make_standard_matrix_basis", "04_api_reference/module_qat/module_quops/make_standard_vector_basis", "04_api_reference/module_qat/module_quops/multikron", "04_api_reference/module_qat/module_quops/parametricamplitudedamping", "04_api_reference/module_qat/module_quops/parametricgatenoise", "04_api_reference/module_qat/module_quops/parametricpuredephasing", "04_api_reference/module_qat/module_quops/parametricquantumchannel", "04_api_reference/module_qat/module_quops/partial_trace", "04_api_reference/module_qat/module_quops/quantumchannel", "04_api_reference/module_qat/module_quops/quantumchannelchi", "04_api_reference/module_qat/module_quops/quantumchannelchoi", "04_api_reference/module_qat/module_quops/quantumchannelkraus", "04_api_reference/module_qat/module_quops/quantumchannelptm", "05_demos", "07_release_notes", ":myqlm:06_support", ":myqlm:interoperability", ":myqlm:interoperability/01_qiskit", ":myqlm:interoperability/02_pyquil", ":myqlm:interoperability/03_cirq", ":myqlm:interoperability/04_projectq", ":myqlm:interoperability/05_openqasm", "combinatorial_optim_applic", "combinatorial_optim_applic/01_np_probs_for_annealing", "combinatorial_optim_applic/01_np_probs_for_annealing/bilp_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_colouring_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_partitioning_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/kclique_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/max_cut_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/number_partitioning_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/vertex_cover_ann_prob", "combinatorial_optim_applic/02_qaoa", "combinatorial_optim_applic/03_qa", "combinatorial_optim_applic/04_np_problem_generators", "combinatorial_optim_applic/04_np_problem_generators/01_max_cut_generator", "combinatorial_optim_applic/04_np_problem_generators/02_graph_partitioning_generator", "combinatorial_optim_applic/04_np_problem_generators/03_kclique_generator", "combinatorial_optim_applic/04_np_problem_generators/04_vertex_cover_generator", "combinatorial_optim_applic/04_np_problem_generators/05_graph_colouring_generator", "fermion", "fermion/01_hamiltonians", "fermion/02_algorithms", "fermion/03_plugins", "fermion/04_migrating", "index", "interoperability_annealing"], "filenames": ["01_getting_started.rst", "01_getting_started/02_write.rst", "01_getting_started/03_execute.rst", "01_getting_started/04_variational.rst", "01_getting_started/:myqlm:01_install.rst", "01_getting_started/:myqlm:license.rst", "01_getting_started/:myqlm:macos.rst", "02_user_guide.rst", "02_user_guide/01_write.rst", "02_user_guide/01_write/01_digital_circuit.rst", "02_user_guide/01_write/01_digital_circuit/01_quantum_gates.rst", "02_user_guide/01_write/01_digital_circuit/02_variational.rst", "02_user_guide/01_write/01_digital_circuit/03_program.rst", "02_user_guide/01_write/01_digital_circuit/04_routines.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/01_naming_routines.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/02_ancillae.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/03_oracles.rst", "02_user_guide/01_write/01_digital_circuit/05_aqasm.rst", "02_user_guide/01_write/02_analog_schedule.rst", "02_user_guide/01_write/02_analog_schedule/01_building_schedules.rst", "02_user_guide/01_write/02_analog_schedule/02_manip_schedules.rst", "02_user_guide/01_write/02_analog_schedule/03_an_jobs.rst", "02_user_guide/01_write/03_annealing_problems.rst", "02_user_guide/01_write/03_annealing_problems/01_ising.rst", "02_user_guide/01_write/03_annealing_problems/02_qubo.rst", "02_user_guide/01_write/03_annealing_problems/03_comb_prob.rst", "02_user_guide/01_write/03_observable.rst", "02_user_guide/02_execute.rst", "02_user_guide/02_execute/01_job.rst", "02_user_guide/02_execute/01_job/01_sample_job.rst", "02_user_guide/02_execute/01_job/02_observable_job.rst", "02_user_guide/02_execute/01_job/03_automated_batch_generation.rst", "02_user_guide/02_execute/02_result.rst", "02_user_guide/02_execute/03_qpu.rst", "02_user_guide/02_execute/03_qpu/03_annealing.rst", "02_user_guide/02_execute/03_qpu/04_custom_qpu.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/clinalg.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/pylinalg.rst", "02_user_guide/02_execute/04_plugin.rst", "02_user_guide/02_execute/04_plugin/01_custom_plugin.rst", "02_user_guide/02_execute/04_plugin/02_custom_junction.rst", "02_user_guide/02_execute/04_plugin/03_hardware_specs.rst", "02_user_guide/02_execute/05_variational.rst", "04_api_reference.rst", "04_api_reference/module_qat.rst", "04_api_reference/module_qat/:myqlm:module_interop.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/cirq_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/qlm_to_cirq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm/oqasmparser.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmengine.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmparser.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquil_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquilqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/qlm_to_pyquil.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/asyncbackendtoqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/backendtoqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskit_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitjob.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitruntimeqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qlm_to_qiskit.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qputobackend.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/mat2nparray.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/measure.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/project.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/raise_break.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/reset.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/simulate.rst", "04_api_reference/module_qat/module_comm.rst", "04_api_reference/module_qat/module_comm/module_datamodel.rst", "04_api_reference/module_qat/module_comm/module_datamodel/gatedefinition.rst", "04_api_reference/module_qat/module_comm/module_datamodel/op.rst", "04_api_reference/module_qat/module_comm/module_exceptions.rst", "04_api_reference/module_qat/module_comm/module_exceptions/errortype.rst", "04_api_reference/module_qat/module_comm/module_exceptions/pluginexception.rst", "04_api_reference/module_qat/module_comm/module_exceptions/qpuexception.rst", "04_api_reference/module_qat/module_comm/module_resource.rst", "04_api_reference/module_qat/module_comm/module_resource/allocationmodel.rst", "04_api_reference/module_qat/module_comm/module_resource/device.rst", "04_api_reference/module_qat/module_comm/module_resource/resourcemodel.rst", "04_api_reference/module_qat/module_comm/module_shared.rst", "04_api_reference/module_qat/module_comm/module_shared/intermediatemeasurement.rst", "04_api_reference/module_qat/module_comm/module_shared/processingtype.rst", "04_api_reference/module_qat/module_core.rst", "04_api_reference/module_qat/module_core/aggregate_data.rst", "04_api_reference/module_qat/module_core/assert_plugin.rst", "04_api_reference/module_qat/module_core/assert_qpu.rst", "04_api_reference/module_qat/module_core/batch.rst", "04_api_reference/module_qat/module_core/batchresult.rst", "04_api_reference/module_qat/module_core/circuit.rst", "04_api_reference/module_qat/module_core/display.rst", "04_api_reference/module_qat/module_core/evaluate.rst", "04_api_reference/module_qat/module_core/hardwarespecs.rst", "04_api_reference/module_qat/module_core/job.rst", "04_api_reference/module_qat/module_core/module_application.rst", "04_api_reference/module_qat/module_core/module_application/application.rst", "04_api_reference/module_qat/module_core/module_application/remoteapplication.rst", "04_api_reference/module_qat/module_core/module_circuit_builder.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/default_gate_set.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/get_param_generator.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/get_predef_generator.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/variablenamenotavailable.rst", "04_api_reference/module_qat/module_core/module_gate_set.rst", "04_api_reference/module_qat/module_core/module_gate_set/gateset.rst", "04_api_reference/module_qat/module_core/module_gate_set/gatesignature.rst", "04_api_reference/module_qat/module_core/module_gate_set/gatesyntaxredefinition.rst", "04_api_reference/module_qat/module_core/module_qpu.rst", "04_api_reference/module_qat/module_core/module_qpu/commonqpu.rst", "04_api_reference/module_qat/module_core/module_spins.rst", "04_api_reference/module_qat/module_core/module_spins/integer_to_spins.rst", "04_api_reference/module_qat/module_core/module_spins/spins_to_integer.rst", "04_api_reference/module_qat/module_core/module_variables.rst", "04_api_reference/module_qat/module_core/module_variables/abso.rst", "04_api_reference/module_qat/module_core/module_variables/angle.rst", "04_api_reference/module_qat/module_core/module_variables/arithexpression.rst", "04_api_reference/module_qat/module_core/module_variables/atan2.rst", "04_api_reference/module_qat/module_core/module_variables/cos.rst", "04_api_reference/module_qat/module_core/module_variables/exp.rst", "04_api_reference/module_qat/module_core/module_variables/get_item.rst", "04_api_reference/module_qat/module_core/module_variables/heaviside.rst", "04_api_reference/module_qat/module_core/module_variables/imag.rst", "04_api_reference/module_qat/module_core/module_variables/ln.rst", "04_api_reference/module_qat/module_core/module_variables/real.rst", "04_api_reference/module_qat/module_core/module_variables/sin.rst", "04_api_reference/module_qat/module_core/module_variables/sqrt.rst", "04_api_reference/module_qat/module_core/module_variables/symbol.rst", "04_api_reference/module_qat/module_core/module_variables/vmax.rst", "04_api_reference/module_qat/module_core/observable.rst", "04_api_reference/module_qat/module_core/parameter.rst", "04_api_reference/module_qat/module_core/plot_in_notebook.rst", "04_api_reference/module_qat/module_core/result.rst", "04_api_reference/module_qat/module_core/sample.rst", "04_api_reference/module_qat/module_core/schedule.rst", "04_api_reference/module_qat/module_core/state.rst", "04_api_reference/module_qat/module_core/term.rst", "04_api_reference/module_qat/module_core/topology.rst", "04_api_reference/module_qat/module_core/topologytype.rst", "04_api_reference/module_qat/module_core/variable.rst", "04_api_reference/module_qat/module_devices.rst", "04_api_reference/module_qat/module_devices/alltoall.rst", "04_api_reference/module_qat/module_devices/google_sycamore.rst", "04_api_reference/module_qat/module_devices/griddevice.rst", "04_api_reference/module_qat/module_devices/ibm_burlington.rst", "04_api_reference/module_qat/module_devices/ibm_johannesburg.rst", "04_api_reference/module_qat/module_devices/ibm_melbourne.rst", "04_api_reference/module_qat/module_devices/ibm_rueschlikon.rst", "04_api_reference/module_qat/module_devices/ibm_singapore.rst", "04_api_reference/module_qat/module_devices/ibm_tokyo.rst", "04_api_reference/module_qat/module_devices/ibm_yorktown.rst", "04_api_reference/module_qat/module_devices/linedevice.rst", "04_api_reference/module_qat/module_devices/rigetti_agave.rst", "04_api_reference/module_qat/module_devices/rigetti_aspen.rst", "04_api_reference/module_qat/module_devices/squaregriddevice.rst", "04_api_reference/module_qat/module_devices/zuchongzhi.rst", "04_api_reference/module_qat/module_fermion.rst", "04_api_reference/module_qat/module_fermion/apply_quantum_subspace_expansion.rst", "04_api_reference/module_qat/module_fermion/compute_active_space_integrals.rst", "04_api_reference/module_qat/module_fermion/construct_ucc_ansatz.rst", "04_api_reference/module_qat/module_fermion/convert_to_h_integrals.rst", "04_api_reference/module_qat/module_fermion/electronicstructurehamiltonian.rst", "04_api_reference/module_qat/module_fermion/fermionichamiltonian.rst", "04_api_reference/module_qat/module_fermion/get_cluster_ops.rst", "04_api_reference/module_qat/module_fermion/get_hf_ket.rst", "04_api_reference/module_qat/module_fermion/guess_init_params.rst", "04_api_reference/module_qat/module_fermion/make_anderson_model.rst", "04_api_reference/module_qat/module_fermion/make_compressed_ldca_circ.rst", "04_api_reference/module_qat/module_fermion/make_embedded_model.rst", "04_api_reference/module_qat/module_fermion/make_general_hwe_circ.rst", "04_api_reference/module_qat/module_fermion/make_hubbard_model.rst", "04_api_reference/module_qat/module_fermion/make_ldca_circ.rst", "04_api_reference/module_qat/module_fermion/make_mr_circ.rst", "04_api_reference/module_qat/module_fermion/make_mrep_circ.rst", "04_api_reference/module_qat/module_fermion/make_shallow_circ.rst", "04_api_reference/module_qat/module_fermion/make_trotterisation_routine.rst", "04_api_reference/module_qat/module_fermion/molecularhamiltonian.rst", "04_api_reference/module_qat/module_fermion/moleculeinfo.rst", "04_api_reference/module_qat/module_fermion/perform_phase_estimation.rst", "04_api_reference/module_qat/module_fermion/perform_pyscf_computation.rst", "04_api_reference/module_qat/module_fermion/select_active_orbitals.rst", "04_api_reference/module_qat/module_fermion/spinhamiltonian.rst", "04_api_reference/module_qat/module_fermion/transform_integrals_to_new_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_bk_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_jw_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_parity_basis.rst", "04_api_reference/module_qat/module_generators.rst", "04_api_reference/module_qat/module_generators/abstractgenerator.rst", "04_api_reference/module_qat/module_generators/combinatorialoptimizergenerator.rst", "04_api_reference/module_qat/module_generators/graphcolouringgenerator.rst", "04_api_reference/module_qat/module_generators/graphpartitioninggenerator.rst", "04_api_reference/module_qat/module_generators/kcliquegenerator.rst", "04_api_reference/module_qat/module_generators/maxcutgenerator.rst", "04_api_reference/module_qat/module_generators/remotebatchgenerator.rst", "04_api_reference/module_qat/module_generators/vertexcovergenerator.rst", "04_api_reference/module_qat/module_hardware.rst", "04_api_reference/module_qat/module_hardware/defaultgatesspecification.rst", "04_api_reference/module_qat/module_hardware/defaulthardwaremodel.rst", "04_api_reference/module_qat/module_hardware/gatesspecification.rst", "04_api_reference/module_qat/module_hardware/hardwaremodel.rst", "04_api_reference/module_qat/module_hardware/make_depolarizing_hardware_model.rst", "04_api_reference/module_qat/module_lang.rst", "04_api_reference/module_qat/module_lang/abstractgate.rst", "04_api_reference/module_qat/module_lang/amplification_step.rst", "04_api_reference/module_qat/module_lang/boolformula.rst", "04_api_reference/module_qat/module_lang/build_gate.rst", "04_api_reference/module_qat/module_lang/cbit.rst", "04_api_reference/module_qat/module_lang/cregister.rst", "04_api_reference/module_qat/module_lang/gate.rst", "04_api_reference/module_qat/module_lang/generate_gate_set.rst", "04_api_reference/module_qat/module_lang/grover_diffusion.rst", "04_api_reference/module_qat/module_lang/householder.rst", "04_api_reference/module_qat/module_lang/kptree.rst", "04_api_reference/module_qat/module_lang/linker.rst", "04_api_reference/module_qat/module_lang/module_arithmetic.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/add_const_mod.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/add_mod.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/modular_exp.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const_mod.rst", "04_api_reference/module_qat/module_lang/module_classarith.rst", "04_api_reference/module_qat/module_lang/module_classarith/add.rst", "04_api_reference/module_qat/module_lang/module_classarith/add_const.rst", "04_api_reference/module_qat/module_lang/module_classarith/cuccaro_add.rst", "04_api_reference/module_qat/module_lang/module_qftarith.rst", "04_api_reference/module_qat/module_lang/module_qftarith/add.rst", "04_api_reference/module_qat/module_lang/module_qftarith/add_const.rst", "04_api_reference/module_qat/module_lang/module_qftarith/mult.rst", "04_api_reference/module_qat/module_lang/module_qftarith/mult_const.rst", "04_api_reference/module_qat/module_lang/module_qftarith/qft.rst", "04_api_reference/module_qat/module_lang/paramgate.rst", "04_api_reference/module_qat/module_lang/phase_estimation.rst", "04_api_reference/module_qat/module_lang/program.rst", "04_api_reference/module_qat/module_lang/qarithexp.rst", "04_api_reference/module_qat/module_lang/qbit.rst", "04_api_reference/module_qat/module_lang/qbool.rst", "04_api_reference/module_qat/module_lang/qboolarray.rst", "04_api_reference/module_qat/module_lang/qclause.rst", "04_api_reference/module_qat/module_lang/qcompexp.rst", "04_api_reference/module_qat/module_lang/qfunc.rst", "04_api_reference/module_qat/module_lang/qint.rst", "04_api_reference/module_qat/module_lang/qregister.rst", "04_api_reference/module_qat/module_lang/qrout.rst", "04_api_reference/module_qat/module_lang/qroutine.rst", "04_api_reference/module_qat/module_lang/quantum_counting.rst", "04_api_reference/module_qat/module_lang/uniform_distribution.rst", "04_api_reference/module_qat/module_opt.rst", "04_api_reference/module_qat/module_opt/ansatzfactory.rst", "04_api_reference/module_qat/module_opt/bilp.rst", "04_api_reference/module_qat/module_opt/circuitgenerator.rst", "04_api_reference/module_qat/module_opt/clause.rst", "04_api_reference/module_qat/module_opt/combinatorialproblem.rst", "04_api_reference/module_qat/module_opt/graphcolouring.rst", "04_api_reference/module_qat/module_opt/graphpartitioning.rst", "04_api_reference/module_qat/module_opt/ising.rst", "04_api_reference/module_qat/module_opt/kclique.rst", "04_api_reference/module_qat/module_opt/maxcut.rst", "04_api_reference/module_qat/module_opt/mixingfactory.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/independentannealing.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/initialstatebuilder.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/simpleinitialstate.rst", "04_api_reference/module_qat/module_opt/module_results.rst", "04_api_reference/module_qat/module_opt/module_results/combinatorialresult.rst", "04_api_reference/module_qat/module_opt/module_results/graphpartitioningresult.rst", "04_api_reference/module_qat/module_opt/module_results/kcliqueresult.rst", "04_api_reference/module_qat/module_opt/module_results/vertexcoverresult.rst", "04_api_reference/module_qat/module_opt/numberpartitioning.rst", "04_api_reference/module_qat/module_opt/qubo.rst", "04_api_reference/module_qat/module_opt/schedulegenerator.rst", "04_api_reference/module_qat/module_opt/var.rst", "04_api_reference/module_qat/module_opt/vertexcover.rst", "04_api_reference/module_qat/module_plugins.rst", "04_api_reference/module_qat/module_plugins/abstractplugin.rst", "04_api_reference/module_qat/module_plugins/adaptvqeplugin.rst", "04_api_reference/module_qat/module_plugins/circuitinliner.rst", "04_api_reference/module_qat/module_plugins/costfunctionplugin.rst", "04_api_reference/module_qat/module_plugins/display.rst", "04_api_reference/module_qat/module_plugins/gradientdescentoptimizer.rst", "04_api_reference/module_qat/module_plugins/junction.rst", "04_api_reference/module_qat/module_plugins/multiplelaunchesanalyzer.rst", "04_api_reference/module_qat/module_plugins/observablesplitter.rst", "04_api_reference/module_qat/module_plugins/optimizer.rst", "04_api_reference/module_qat/module_plugins/psominimizeplugin.rst", "04_api_reference/module_qat/module_plugins/quameleonplugin.rst", "04_api_reference/module_qat/module_plugins/remoteplugin.rst", "04_api_reference/module_qat/module_plugins/scipyminimizeplugin.rst", "04_api_reference/module_qat/module_plugins/seqoptim.rst", "04_api_reference/module_qat/module_plugins/spsaminimizeplugin.rst", "04_api_reference/module_qat/module_plugins/transformobservable.rst", "04_api_reference/module_qat/module_plugins/zeronoiseextrapolator.rst", "04_api_reference/module_qat/module_qpus.rst", "04_api_reference/module_qat/module_qpus/:myqlm:clinalg.rst", "04_api_reference/module_qat/module_qpus/:myqlm:pylinalg.rst", "04_api_reference/module_qat/module_qpus/:myqlm:simulatedannealing.rst", "04_api_reference/module_qat/module_qpus/classicalqpu.rst", "04_api_reference/module_qat/module_qpus/get_current_qpu.rst", "04_api_reference/module_qat/module_qpus/get_default_qpu.rst", "04_api_reference/module_qat/module_qpus/qpuhandler.rst", "04_api_reference/module_qat/module_qpus/remoteqpu.rst", "04_api_reference/module_qat/module_quops.rst", "04_api_reference/module_qat/module_quops/are_equal_up_to_phase.rst", "04_api_reference/module_qat/module_quops/channelrepresentations.rst", "04_api_reference/module_qat/module_quops/convert_density_mat_to_pauli_vec.rst", "04_api_reference/module_qat/module_quops/convert_pauli_vec_to_density_mat.rst", "04_api_reference/module_qat/module_quops/get_average_process_fidelity.rst", "04_api_reference/module_qat/module_quops/get_diamond_norm.rst", "04_api_reference/module_qat/module_quops/get_entanglement_process_fidelity.rst", "04_api_reference/module_qat/module_quops/get_process_distance.rst", "04_api_reference/module_qat/module_quops/get_state_fidelity.rst", "04_api_reference/module_qat/module_quops/get_trace_distance.rst", "04_api_reference/module_qat/module_quops/is_completely_positive.rst", "04_api_reference/module_qat/module_quops/is_trace_preserving.rst", "04_api_reference/module_qat/module_quops/is_trace_reducing.rst", "04_api_reference/module_qat/module_quops/is_unital.rst", "04_api_reference/module_qat/module_quops/make_avg_fid_equiv_depol_channel.rst", "04_api_reference/module_qat/module_quops/make_depolarizing_channel.rst", "04_api_reference/module_qat/module_quops/make_generalized_amplitude_damping.rst", "04_api_reference/module_qat/module_quops/make_pauli_matrix_basis.rst", "04_api_reference/module_qat/module_quops/make_standard_matrix_basis.rst", "04_api_reference/module_qat/module_quops/make_standard_vector_basis.rst", "04_api_reference/module_qat/module_quops/multikron.rst", "04_api_reference/module_qat/module_quops/parametricamplitudedamping.rst", "04_api_reference/module_qat/module_quops/parametricgatenoise.rst", "04_api_reference/module_qat/module_quops/parametricpuredephasing.rst", "04_api_reference/module_qat/module_quops/parametricquantumchannel.rst", "04_api_reference/module_qat/module_quops/partial_trace.rst", "04_api_reference/module_qat/module_quops/quantumchannel.rst", "04_api_reference/module_qat/module_quops/quantumchannelchi.rst", "04_api_reference/module_qat/module_quops/quantumchannelchoi.rst", "04_api_reference/module_qat/module_quops/quantumchannelkraus.rst", "04_api_reference/module_qat/module_quops/quantumchannelptm.rst", "05_demos.rst", "07_release_notes.rst", ":myqlm:06_support.rst", ":myqlm:interoperability.rst", ":myqlm:interoperability/01_qiskit.rst", ":myqlm:interoperability/02_pyquil.rst", ":myqlm:interoperability/03_cirq.rst", ":myqlm:interoperability/04_projectq.rst", ":myqlm:interoperability/05_openqasm.rst", "combinatorial_optim_applic.rst", "combinatorial_optim_applic/01_np_probs_for_annealing.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/bilp_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_colouring_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_partitioning_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/kclique_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/max_cut_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/number_partitioning_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/vertex_cover_ann_prob.rst", "combinatorial_optim_applic/02_qaoa.rst", "combinatorial_optim_applic/03_qa.rst", "combinatorial_optim_applic/04_np_problem_generators.rst", "combinatorial_optim_applic/04_np_problem_generators/01_max_cut_generator.rst", "combinatorial_optim_applic/04_np_problem_generators/02_graph_partitioning_generator.rst", "combinatorial_optim_applic/04_np_problem_generators/03_kclique_generator.rst", "combinatorial_optim_applic/04_np_problem_generators/04_vertex_cover_generator.rst", "combinatorial_optim_applic/04_np_problem_generators/05_graph_colouring_generator.rst", "fermion.rst", "fermion/01_hamiltonians.rst", "fermion/02_algorithms.rst", "fermion/03_plugins.rst", "fermion/04_migrating.rst", "index.rst", "interoperability_annealing.rst"], "titles": ["Getting started", "Writing quantum programs", "Executing quantum programs", "Variational algorithms with Qaptiva", "Installing myQLM", "myQLM license", "myQLM Installation on MacOS", "User guide", "Writing quantum programs", "Gate-based programming", "Creating and adding quantum gates to a circuit", "Creating variational circuits", "Quantum programs", "Quantum routines (and Oracles)", "Naming quantum routines", "Ancillae management and compute scopes", "Oracles and quantum types", "Atos Quantum Assembler (AQASM)", "Analog programming", "Building schedules", "Manipulating schedules", "Analog Jobs", "Annealing programming", "Ising Hamiltonians", "Quadratic Unconstrained Binary Optimization (QUBO)", "General Combinatorial Problems", "Creating observables", "Executing / Simulating quantum programs", "Constructing one or multiple Jobs (using Batch)", "Sample Job", "Observable Job", "Automated batch generation", "Result of a quantum program", "Quantum Processing Unit (QPU)", "Annealing computing", "Make your own QPU", "Gate based computing", "CLinalg: C++ Linear-algebra-based simulator", "PyLinalg: Python Linear-algebra-based simulator", "Extending a QPU (by using Plugins)", "Make your own plugin", "Make you own junction", "Getting information from the QPU", "Running variational algorithms", "API reference", "qat", "qat.interop", "qat.interop.cirq", "qat.interop.cirq.cirq_to_qlm", "qat.interop.cirq.qlm_to_cirq", "qat.interop.openqasm", "qat.interop.openqasm.OqasmParser", "qat.interop.projectq", "qat.interop.projectq.AqasmEngine", "qat.interop.projectq.AqasmPrinter", "qat.interop.pyquil", "qat.interop.pyquil.pyquil_to_qlm", "qat.interop.pyquil.PyquilQPU", "qat.interop.pyquil.qlm_to_pyquil", "qat.interop.qiskit", "qat.interop.qiskit.AsyncBackendToQPU", "qat.interop.qiskit.BackendToQPU", "qat.interop.qiskit.qiskit_to_qlm", "qat.interop.qiskit.QiskitJob", "qat.interop.qiskit.runtime.QiskitRuntimeQPU", "qat.interop.qiskit.qlm_to_qiskit", "qat.interop.qiskit.QPUToBackend", "qat.pylinalg", "qat.pylinalg.simulator", "qat.pylinalg.simulator.mat2nparray", "qat.pylinalg.simulator.measure", "qat.pylinalg.simulator.project", "qat.pylinalg.simulator.raise_break", "qat.pylinalg.simulator.reset", "qat.pylinalg.simulator.simulate", "qat.comm", "qat.comm.datamodel", "qat.comm.datamodel.ttypes.GateDefinition", "qat.comm.datamodel.ttypes.Op", "qat.comm.exceptions", "qat.comm.exceptions.ttypes.ErrorType", "qat.comm.exceptions.ttypes.PluginException", "qat.comm.exceptions.ttypes.QPUException", "qat.comm.resource", "qat.comm.resource.ttypes.AllocationModel", "qat.comm.resource.ttypes.Device", "qat.comm.resource.ttypes.ResourceModel", "qat.comm.shared", "qat.comm.shared.ttypes.IntermediateMeasurement", "qat.comm.shared.ttypes.ProcessingType", "qat.core", "qat.core.wrappers.result.aggregate_data", "qat.core.assertion.assert_plugin", "qat.core.assertion.assert_qpu", "qat.core.Batch", "qat.core.BatchResult", "qat.core.Circuit", "qat.core.console.display", "qat.core.formula_eval.evaluate", "qat.core.HardwareSpecs", "qat.core.Job", "qat.core.application", "qat.core.application.Application", "qat.core.application.RemoteApplication", "qat.core.circuit_builder", "qat.core.circuit_builder.matrix_util.default_gate_set", "qat.core.circuit_builder.matrix_util.get_param_generator", "qat.core.circuit_builder.matrix_util.get_predef_generator", "qat.core.circuit_builder.builder.VariableNameNotAvailable", "qat.core.gate_set", "qat.core.gate_set.GateSet", "qat.core.gate_set.GateSignature", "qat.core.gate_set.GateSyntaxRedefinition", "qat.core.qpu", "qat.core.qpu.CommonQPU", "qat.core.spins", "qat.core.spins.integer_to_spins", "qat.core.spins.spins_to_integer", "qat.core.variables", "qat.core.variables.abso", "qat.core.variables.angle", "qat.core.variables.ArithExpression", "qat.core.variables.atan2", "qat.core.variables.cos", "qat.core.variables.exp", "qat.core.variables.get_item", "qat.core.variables.heaviside", "qat.core.variables.imag", "qat.core.variables.ln", "qat.core.variables.real", "qat.core.variables.sin", "qat.core.variables.sqrt", "qat.core.variables.Symbol", "qat.core.variables.vmax", "qat.core.Observable", "qat.core.Parameter", "qat.core.printer.plot_in_notebook", "qat.core.Result", "qat.core.Sample", "qat.core.Schedule", "qat.core.wrappers.result.State", "qat.core.Term", "qat.core.Topology", "qat.core.TopologyType", "qat.core.Variable", "qat.devices", "qat.devices.AllToAll", "qat.devices.GOOGLE_SYCAMORE", "qat.devices.GridDevice", "qat.devices.IBM_BURLINGTON", "qat.devices.IBM_JOHANNESBURG", "qat.devices.IBM_MELBOURNE", "qat.devices.IBM_RUESCHLIKON", "qat.devices.IBM_SINGAPORE", "qat.devices.IBM_TOKYO", "qat.devices.IBM_YORKTOWN", "qat.devices.LineDevice", "qat.devices.RIGETTI_AGAVE", "qat.devices.RIGETTI_ASPEN", "qat.devices.SquareGridDevice", "qat.devices.ZUCHONGZHI", "qat.fermion", "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion", "qat.fermion.chemistry.ucc.compute_active_space_integrals", "qat.fermion.chemistry.ucc.construct_ucc_ansatz", "qat.fermion.chemistry.ucc.convert_to_h_integrals", "qat.fermion.hamiltonians.ElectronicStructureHamiltonian", "qat.fermion.hamiltonians.FermionHamiltonian", "qat.fermion.chemistry.ucc.get_cluster_ops", "qat.fermion.chemistry.ucc.get_hf_ket", "qat.fermion.chemistry.ucc.guess_init_params", "qat.fermion.hamiltonians.make_anderson_model", "qat.fermion.circuits.make_compressed_ldca_circ", "qat.fermion.hamiltonians.make_embedded_model", "qat.fermion.circuits.make_general_hwe_circ", "qat.fermion.hamiltonians.make_hubbard_model", "qat.fermion.circuits.make_ldca_circ", "qat.fermion.circuits.make_mr_circ", "qat.fermion.circuits.make_mrep_circ", "qat.fermion.circuits.make_shallow_circ", "qat.fermion.trotterisation.make_trotterisation_routine", "qat.fermion.chemistry.wrapper.MolecularHamiltonian", "qat.fermion.chemistry.wrapper.MoleculeInfo", "qat.fermion.phase_estimation.perform_phase_estimation", "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation", "qat.fermion.chemistry.ucc.select_active_orbitals", "qat.fermion.hamiltonians.SpinHamiltonian", "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis", "qat.fermion.transforms.transform_to_bk_basis", "qat.fermion.transforms.transform_to_jw_basis", "qat.fermion.transforms.transform_to_parity_basis", "qat.generators", "qat.generators.AbstractGenerator", "qat.generators.CombinatorialOptimizerGenerator", "qat.generators.GraphColouringGenerator", "qat.generators.GraphPartitioningGenerator", "qat.generators.KCliqueGenerator", "qat.generators.MaxCutGenerator", "qat.generators.RemoteBatchGenerator", "qat.generators.VertexCoverGenerator", "qat.hardware", "qat.hardware.DefaultGatesSpecification", "qat.hardware.DefaultHardwareModel", "qat.hardware.GatesSpecification", "qat.hardware.HardwareModel", "qat.hardware.make_depolarizing_hardware_model", "qat.lang", "qat.lang.AbstractGate", "qat.lang.algorithms.amplification_step", "qat.lang.AQASM.bits.BoolFormula", "qat.lang.build_gate", "qat.lang.AQASM.bits.Cbit", "qat.lang.AQASM.bits.CRegister", "qat.lang.AQASM.gates.Gate", "qat.lang.AQASM.misc.generate_gate_set", "qat.lang.algorithms.amplification.grover_diffusion", "qat.lang.algorithms.amplification.householder", "qat.lang.models.KPTree", "qat.lang.linking.Linker", "qat.lang.AQASM.arithmetic", "qat.lang.AQASM.arithmetic.add_const_mod", "qat.lang.AQASM.arithmetic.add_mod", "qat.lang.AQASM.arithmetic.modular_exp", "qat.lang.AQASM.arithmetic.mult_const", "qat.lang.AQASM.arithmetic.mult_const_mod", "qat.lang.AQASM.classarith", "qat.lang.AQASM.classarith.add", "qat.lang.AQASM.classarith.add_const", "qat.lang.AQASM.classarith.cuccaro_add", "qat.lang.AQASM.qftarith", "qat.lang.AQASM.qftarith.add", "qat.lang.AQASM.qftarith.add_const", "qat.lang.AQASM.qftarith.mult", "qat.lang.AQASM.qftarith.mult_const", "qat.lang.AQASM.qftarith.QFT", "qat.lang.AQASM.gates.ParamGate", "qat.lang.algorithms.phase_estimation", "qat.lang.Program", "qat.lang.AQASM.qint.QArithExp", "qat.lang.AQASM.bits.Qbit", "qat.lang.AQASM.qbool.QBool", "qat.lang.AQASM.qbool.QBoolArray", "qat.lang.AQASM.qbool.QClause", "qat.lang.AQASM.qint.QCompExp", "qat.lang.qfunc", "qat.lang.AQASM.qint.QInt", "qat.lang.AQASM.bits.QRegister", "qat.lang.qrout", "qat.lang.QRoutine", "qat.lang.algorithms.quantum_counting", "qat.lang.algorithms.amplification.uniform_distribution", "qat.opt", "qat.vsolve.ansatz.AnsatzFactory", "qat.opt.BILP", "qat.opt.circuit_generator.CircuitGenerator", "qat.opt.boolexpr.Clause", "qat.opt.CombinatorialProblem", "qat.opt.GraphColouring", "qat.opt.GraphPartitioning", "qat.opt.Ising", "qat.opt.KClique", "qat.opt.MaxCut", "qat.opt.MixingFactory", "qat.opt.mixing_factory", "qat.opt.mixing_factory.IndependentAnnealing", "qat.opt.mixing_factory.InitialStateBuilder", "qat.opt.mixing_factory.SimpleInitialState", "qat.opt.results", "qat.opt.results.CombinatorialResult", "qat.opt.results.GraphPartitioningResult", "qat.opt.results.KCliqueResult", "qat.opt.results.VertexCoverResult", "qat.opt.NumberPartitioning", "qat.opt.QUBO", "qat.opt.schedule_generator.ScheduleGenerator", "qat.opt.boolexpr.Var", "qat.opt.VertexCover", "qat.plugins", "qat.plugins.AbstractPlugin", "qat.plugins.AdaptVQEPlugin", "qat.plugins.CircuitInliner", "qat.plugins.CostFunctionPlugin", "qat.plugins.Display", "qat.plugins.GradientDescentOptimizer", "qat.plugins.Junction", "qat.plugins.MultipleLaunchesAnalyzer", "qat.plugins.ObservableSplitter", "qat.plugins.Optimizer", "qat.plugins.PSOMinimizePlugin", "qat.plugins.QuameleonPlugin", "qat.plugins.RemotePlugin", "qat.plugins.ScipyMinimizePlugin", "qat.plugins.SeqOptim", "qat.plugins.SPSAMinimizePlugin", "qat.plugins.TransformObservable", "qat.plugins.ZeroNoiseExtrapolator", "qat.qpus", "qat.qpus.CLinalg", "qat.qpus.PyLinalg", "qat.qpus.SimulatedAnnealing", "qat.qpus.ClassicalQPU", "qat.qpus.get_current_qpu", "qat.qpus.get_default_qpu", "qat.qpus.QPUHandler", "qat.qpus.RemoteQPU", "qat.quops", "qat.quops.math_util.are_equal_up_to_phase", "qat.quops.ChannelRepresentations", "qat.quops.math_util.convert_density_mat_to_pauli_vec", "qat.quops.math_util.convert_pauli_vec_to_density_mat", "qat.quops.metrics.get_average_process_fidelity", "qat.quops.metrics.get_diamond_norm", "qat.quops.metrics.get_entanglement_process_fidelity", "qat.quops.metrics.get_process_distance", "qat.quops.metrics.get_state_fidelity", "qat.quops.metrics.get_trace_distance", "qat.quops.is_completely_positive", "qat.quops.is_trace_preserving", "qat.quops.is_trace_reducing", "qat.quops.is_unital", "qat.quops.make_avg_fid_equiv_depol_channel", "qat.quops.make_depolarizing_channel", "qat.quops.make_generalized_amplitude_damping", "qat.quops.math_util.make_pauli_matrix_basis", "qat.quops.math_util.make_standard_matrix_basis", "qat.quops.math_util.make_standard_vector_basis", "qat.quops.math_util.multikron", "qat.quops.ParametricAmplitudeDamping", "qat.quops.ParametricGateNoise", "qat.quops.ParametricPureDephasing", "qat.quops.ParametricQuantumChannel", "qat.quops.math_util.partial_trace", "qat.quops.QuantumChannel", "qat.quops.QuantumChannelChi", "qat.quops.QuantumChannelChoi", "qat.quops.QuantumChannelKraus", "qat.quops.QuantumChannelPTM", "Demos", "Release notes", "Contributing to myQLM", "Interoperability with gate-based framework", "Qiskit interoperability", "PyQuil interoperability", "Cirq interoperability", "ProjectQ interoperability", "OpenQASM Compiler", "Combinatorial optimization", "NP-hard problems", "Binary Integer Linear Programming (BILP)", "Graph Colouring", "Graph Partitioning", "KClique", "Max Cut", "Number Partitioning", "Vertex Cover", "Quantum Approximate Optimization Algorithm (QAOA)", "Quantum Annealing (QA)", "Problem generators", "Max Cut Generator", "Graph Partitioning Generator", "K-Clique Generator", "Vertex Cover Generator", "Graph Colouring Generator", "Spin and fermionic systems", "Creating and manipulating Hamiltonians", "Quantum application (including Ans\u00e4tze and state preparation)", "Plugins", "Migrating code based on deprecated library qat.dqs", "Welcome page", "Interoperability with annealing framework"], "terms": {"myqlm": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369], "qaptiva": [0, 1, 11, 12, 18, 27, 28, 30, 31, 33, 34, 35, 36, 39, 40, 41, 43, 47, 52, 55, 59, 118, 161, 191, 277, 305, 340, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366], "contain": [0, 1, 2, 4, 5, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 51, 63, 67, 69, 70, 73, 74, 77, 78, 80, 96, 97, 100, 104, 106, 114, 125, 135, 137, 139, 141, 144, 145, 166, 167, 183, 184, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 213, 219, 236, 237, 238, 247, 248, 249, 253, 254, 257, 258, 259, 260, 261, 267, 268, 272, 273, 276, 291, 298, 299, 307, 337, 338, 345, 355, 364, 366], "tool": [0, 1, 8, 9, 11, 12, 16, 31, 39, 43, 51, 161, 347, 363, 364, 368], "write": [0, 3, 5, 7, 10, 11, 16, 17, 23, 24, 41, 43, 161, 162, 207, 222, 244, 281, 337, 364, 365, 368], "optim": [0, 3, 5, 7, 11, 12, 22, 23, 25, 31, 32, 34, 39, 41, 43, 61, 162, 193, 194, 195, 196, 197, 199, 237, 254, 256, 268, 269, 273, 281, 283, 285, 288, 291, 292, 293, 295, 303, 338, 347, 356, 358, 363, 365, 366, 367, 368], "simul": [0, 3, 5, 7, 9, 10, 12, 18, 21, 22, 23, 25, 28, 29, 32, 34, 35, 45, 57, 60, 61, 67, 79, 96, 138, 139, 206, 207, 219, 237, 253, 257, 258, 259, 260, 261, 262, 272, 273, 276, 280, 289, 297, 298, 299, 300, 346, 348, 349, 350, 351, 352, 353, 354, 368], "quantum": [0, 3, 4, 5, 7, 9, 11, 15, 18, 21, 23, 25, 26, 28, 31, 34, 35, 36, 38, 39, 41, 43, 57, 60, 61, 64, 68, 69, 71, 76, 77, 78, 87, 89, 90, 96, 137, 138, 139, 140, 145, 162, 183, 191, 200, 201, 202, 203, 207, 208, 213, 216, 217, 218, 219, 225, 229, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 248, 249, 251, 253, 257, 258, 259, 260, 261, 262, 265, 272, 273, 274, 276, 277, 291, 296, 299, 300, 307, 311, 312, 316, 317, 318, 319, 328, 330, 332, 333, 334, 335, 336, 340, 346, 348, 349, 357, 363, 364, 366, 368], "program": [0, 3, 4, 7, 10, 11, 13, 14, 15, 16, 29, 30, 31, 40, 41, 48, 56, 62, 77, 79, 90, 96, 97, 162, 164, 208, 209, 217, 218, 219, 222, 240, 241, 245, 246, 248, 251, 253, 281, 289, 300, 346, 347, 356, 365, 366, 368], "These": [0, 1, 4, 7, 9, 12, 16, 33, 42, 51, 62, 78, 96, 100, 109, 121, 206, 209, 217, 218, 247, 253, 257, 258, 260, 261, 272, 276, 338, 340, 347, 357, 363, 364, 365, 366], "ar": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 28, 29, 33, 35, 39, 43, 48, 51, 53, 56, 62, 65, 68, 69, 75, 77, 78, 79, 80, 90, 95, 96, 97, 100, 102, 103, 109, 111, 121, 122, 135, 139, 141, 143, 144, 145, 161, 165, 166, 167, 173, 174, 180, 181, 183, 191, 192, 195, 196, 199, 201, 202, 204, 206, 207, 209, 217, 218, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 242, 245, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 260, 261, 263, 272, 276, 277, 278, 280, 281, 282, 283, 284, 289, 290, 292, 293, 296, 297, 298, 303, 304, 305, 306, 321, 327, 329, 335, 337, 338, 340, 346, 347, 351, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367], "packag": [0, 5, 6, 12, 184, 226, 237, 302, 363, 365], "python": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 33, 37, 77, 102, 111, 132, 138, 144, 198, 214, 218, 237, 238, 240, 241, 244, 280, 281, 296, 340, 342, 345, 368], "librari": [0, 1, 4, 9, 10, 12, 14, 36, 38, 39, 46, 118, 122, 206, 256, 259, 273, 337, 363, 365, 369], "name": [0, 5, 8, 10, 13, 17, 21, 23, 35, 39, 51, 60, 61, 63, 64, 77, 78, 79, 86, 94, 95, 96, 97, 99, 100, 104, 108, 111, 112, 121, 136, 137, 139, 142, 144, 206, 210, 213, 218, 235, 237, 247, 252, 256, 259, 294, 300, 305, 327, 329, 333, 334, 335, 336, 338, 364, 369], "qat": [0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 338, 341, 342, 343, 344, 345, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369], "applic": [0, 5, 12, 16, 17, 18, 31, 34, 39, 45, 78, 90, 202, 204, 217, 237, 262, 292, 346, 356, 357, 363], "toolset": [0, 39], "also": [0, 5, 8, 9, 10, 12, 16, 17, 18, 19, 22, 23, 27, 28, 29, 31, 33, 34, 35, 39, 41, 43, 78, 96, 134, 137, 139, 145, 182, 183, 184, 192, 201, 203, 217, 244, 245, 247, 248, 253, 257, 258, 259, 260, 261, 267, 272, 273, 276, 287, 292, 295, 298, 300, 304, 305, 338, 346, 347, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369], "interfac": [0, 4, 5, 8, 9, 11, 26, 34, 36, 37, 41, 60, 113, 114, 192, 237, 251, 254, 262, 263, 265, 274, 278, 284, 287, 296, 299, 303, 338, 355, 365, 368], "applianc": [0, 18, 31, 33, 34, 35, 36, 39, 118, 338, 347, 348, 349, 357, 363], "eviden": [0, 85, 368], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 53, 56, 60, 61, 62, 63, 64, 66, 67, 71, 75, 77, 78, 79, 80, 83, 88, 90, 91, 96, 97, 99, 100, 102, 116, 118, 121, 132, 134, 135, 141, 142, 143, 144, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 166, 167, 168, 171, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 206, 207, 208, 209, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 268, 269, 270, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 293, 295, 297, 298, 300, 302, 303, 305, 307, 312, 327, 329, 337, 338, 339, 341, 342, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 367, 369], "provid": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 19, 26, 28, 31, 35, 39, 40, 41, 42, 51, 57, 60, 61, 64, 66, 68, 74, 75, 78, 83, 90, 96, 111, 118, 145, 161, 162, 164, 183, 206, 207, 229, 237, 252, 256, 259, 269, 273, 279, 281, 283, 284, 287, 288, 289, 291, 292, 293, 297, 298, 303, 338, 339, 340, 341, 342, 343, 344, 345, 347, 355, 357, 363, 364, 365, 367, 368], "power": [0, 3, 5, 9, 27, 34, 135, 206, 217, 329, 368], "semant": [0, 9, 27, 39, 132, 368], "creat": [0, 1, 3, 5, 7, 8, 9, 12, 23, 24, 25, 28, 29, 30, 31, 33, 34, 39, 40, 60, 63, 75, 77, 99, 118, 135, 139, 183, 198, 206, 209, 242, 248, 255, 259, 273, 305, 337, 338, 339, 341, 344, 346, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 365, 369], "circuit": [0, 1, 2, 3, 4, 5, 9, 13, 15, 16, 17, 18, 21, 26, 28, 29, 30, 31, 32, 33, 35, 36, 38, 40, 41, 43, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 68, 69, 74, 77, 78, 79, 80, 88, 90, 97, 100, 111, 121, 136, 141, 162, 164, 207, 210, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 242, 244, 245, 247, 248, 251, 252, 254, 279, 280, 281, 282, 286, 292, 295, 297, 298, 340, 346, 355, 366, 367], "analog": [0, 1, 7, 8, 33, 35, 135, 139, 202, 204, 251, 263, 265, 338, 346, 355, 357, 358, 359, 360, 361, 362, 366, 368], "schedul": [0, 2, 8, 18, 21, 33, 34, 35, 90, 100, 135, 193, 194, 195, 196, 197, 199, 202, 204, 262, 263, 265, 337, 346, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362], "anneal": [0, 1, 7, 8, 23, 24, 25, 33, 35, 193, 194, 195, 196, 197, 199, 251, 253, 257, 258, 259, 260, 261, 262, 264, 265, 266, 272, 273, 274, 276, 299, 337, 346, 348, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 368], "job": [0, 1, 2, 3, 9, 16, 23, 24, 26, 27, 31, 32, 33, 34, 35, 39, 40, 41, 57, 59, 60, 61, 63, 64, 79, 80, 86, 94, 96, 139, 162, 191, 193, 194, 195, 196, 197, 199, 208, 218, 244, 254, 259, 264, 265, 266, 273, 274, 277, 279, 281, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 337, 340, 341, 342, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 368], "object": [0, 1, 2, 5, 8, 9, 12, 14, 15, 16, 17, 18, 19, 28, 29, 31, 32, 33, 35, 39, 40, 41, 42, 49, 51, 60, 61, 63, 65, 66, 75, 78, 94, 95, 96, 99, 100, 102, 121, 125, 134, 137, 138, 141, 142, 143, 144, 145, 171, 174, 192, 198, 200, 204, 206, 209, 210, 214, 217, 218, 237, 240, 247, 248, 251, 255, 256, 259, 262, 265, 273, 277, 278, 284, 287, 296, 297, 303, 338, 363, 364, 366], "can": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 53, 54, 60, 61, 64, 68, 70, 77, 78, 83, 90, 96, 97, 100, 118, 132, 134, 135, 136, 139, 141, 142, 143, 144, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 167, 183, 186, 192, 193, 194, 195, 196, 197, 198, 199, 206, 208, 210, 211, 212, 214, 217, 235, 237, 244, 245, 246, 247, 248, 252, 254, 256, 259, 262, 263, 265, 268, 269, 270, 271, 273, 274, 278, 281, 284, 290, 291, 292, 295, 297, 298, 303, 305, 329, 335, 337, 338, 339, 341, 342, 346, 347, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369], "parametr": [0, 3, 11, 17, 43, 90, 100, 104, 106, 161, 164, 170, 174, 201, 202, 203, 206, 207, 235, 292, 305, 330, 355, 365], "abstract": [0, 10, 14, 16, 17, 18, 23, 39, 41, 43, 51, 96, 132, 191, 192, 193, 206, 207, 219, 235, 237, 247, 254, 265, 274, 277, 278, 284, 287, 303, 305, 346], "paramet": [0, 3, 10, 11, 12, 17, 19, 23, 29, 32, 35, 40, 41, 48, 49, 51, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 73, 74, 77, 81, 82, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 110, 111, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 144, 146, 148, 156, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 338, 341, 347, 350, 351, 352, 353, 354, 355, 357, 365, 366, 367], "variat": [0, 2, 7, 9, 27, 28, 31, 32, 39, 41, 90, 100, 162, 244, 251, 254, 256, 281, 283, 287, 288, 291, 292, 293, 338, 355, 357, 363, 366, 368], "comput": [0, 1, 2, 5, 7, 12, 13, 16, 18, 21, 23, 26, 28, 29, 30, 31, 33, 35, 40, 41, 43, 68, 74, 78, 83, 89, 91, 96, 100, 110, 134, 137, 138, 139, 161, 166, 167, 168, 181, 183, 184, 185, 186, 191, 193, 194, 195, 196, 197, 199, 201, 203, 217, 218, 237, 242, 248, 252, 253, 257, 258, 260, 265, 272, 276, 279, 281, 286, 298, 303, 308, 309, 310, 311, 312, 313, 314, 315, 329, 341, 346, 350, 351, 352, 353, 354, 356, 357, 364, 365, 366, 367], "compos": [0, 3, 9, 10, 16, 20, 26, 31, 32, 35, 39, 40, 42, 48, 51, 53, 56, 62, 64, 73, 74, 77, 80, 94, 99, 102, 134, 183, 191, 206, 211, 217, 281, 284, 294, 335, 338, 341, 342, 344, 345, 348], "user": [0, 1, 4, 5, 27, 28, 31, 32, 33, 39, 40, 41, 46, 48, 53, 56, 57, 60, 62, 74, 75, 96, 97, 118, 137, 161, 191, 200, 206, 277, 279, 282, 292, 296, 304, 305, 357, 365, 368], "defin": [0, 3, 5, 8, 9, 11, 14, 17, 19, 23, 24, 25, 31, 33, 35, 39, 40, 41, 42, 43, 51, 60, 61, 69, 75, 77, 80, 90, 96, 97, 111, 118, 135, 165, 166, 173, 181, 182, 184, 192, 201, 203, 206, 207, 234, 251, 259, 262, 263, 273, 278, 279, 281, 288, 294, 298, 300, 305, 310, 312, 313, 314, 321, 322, 329, 331, 337, 340, 341, 342, 344, 345, 356, 358, 363, 365, 366], "item": [0, 31, 80, 118], "custom": [0, 1, 9, 35, 51, 75, 96, 97, 136, 142, 143, 222, 247, 251, 289, 337, 346, 366, 368], "gate": [0, 1, 2, 7, 8, 13, 15, 16, 18, 25, 31, 33, 35, 37, 39, 40, 42, 51, 65, 68, 69, 71, 73, 74, 76, 77, 78, 79, 80, 90, 96, 97, 99, 104, 105, 106, 107, 109, 110, 111, 136, 142, 143, 174, 178, 180, 201, 202, 203, 204, 205, 207, 208, 214, 216, 217, 218, 219, 222, 236, 237, 240, 244, 248, 249, 251, 252, 254, 279, 281, 286, 287, 289, 292, 295, 298, 300, 305, 328, 333, 334, 336, 337, 338, 344, 345, 346, 366, 368], "time": [0, 1, 4, 5, 10, 11, 13, 16, 18, 19, 20, 22, 28, 30, 32, 35, 36, 37, 40, 77, 90, 96, 102, 135, 139, 171, 180, 183, 192, 200, 201, 203, 220, 221, 222, 224, 227, 228, 232, 233, 237, 259, 264, 273, 278, 292, 293, 298, 299, 303, 305, 327, 328, 329, 331, 337, 341, 347, 348, 356, 366], "depend": [0, 4, 6, 10, 12, 14, 17, 18, 19, 31, 32, 36, 37, 90, 135, 139, 181, 217, 237, 259, 262, 273, 284, 287, 288, 292, 298, 299, 305, 337, 340, 355, 356, 366], "coeffici": [0, 11, 20, 23, 134, 141, 166, 170, 181, 182, 292, 295, 321, 330, 366], "an": [0, 1, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 51, 59, 60, 61, 64, 69, 73, 77, 78, 79, 81, 82, 87, 88, 90, 92, 93, 96, 97, 100, 102, 103, 116, 118, 121, 123, 124, 125, 130, 132, 134, 135, 136, 137, 139, 141, 143, 144, 161, 162, 173, 174, 181, 182, 183, 185, 191, 192, 193, 202, 204, 206, 207, 209, 210, 212, 215, 217, 218, 219, 221, 226, 227, 228, 230, 231, 235, 237, 240, 241, 242, 243, 244, 246, 248, 251, 252, 256, 259, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 279, 280, 281, 284, 286, 287, 288, 289, 290, 295, 298, 299, 302, 303, 304, 305, 332, 335, 337, 338, 341, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369], "etc": [0, 1, 2, 5, 9, 17, 19, 35, 39, 51, 77, 78, 96, 121, 137, 201, 203, 206, 207, 248, 254, 259, 273, 284, 287, 300, 317, 338, 347, 363], "hello": 0, "world": 0, "The": [0, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 46, 51, 60, 61, 62, 65, 68, 69, 70, 71, 74, 77, 78, 80, 90, 96, 97, 100, 102, 118, 123, 125, 130, 134, 138, 139, 142, 145, 162, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 205, 206, 207, 210, 215, 217, 218, 226, 228, 229, 230, 232, 233, 234, 235, 236, 237, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 270, 271, 272, 273, 275, 276, 278, 279, 281, 283, 284, 285, 286, 287, 289, 290, 292, 294, 298, 299, 300, 302, 303, 304, 305, 310, 314, 315, 329, 331, 336, 337, 338, 342, 343, 344, 345, 347, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367], "follow": [0, 1, 4, 5, 12, 14, 16, 17, 18, 22, 23, 24, 30, 31, 32, 34, 35, 39, 40, 41, 77, 80, 90, 96, 100, 102, 118, 132, 141, 145, 170, 173, 191, 192, 205, 206, 207, 208, 215, 217, 218, 220, 222, 224, 240, 247, 248, 251, 254, 262, 263, 277, 289, 295, 296, 297, 298, 305, 307, 321, 342, 343, 345, 355, 356, 357, 363, 365, 366], "code": [0, 1, 3, 5, 14, 16, 17, 23, 28, 31, 34, 35, 39, 40, 41, 51, 68, 71, 79, 80, 81, 82, 94, 96, 100, 118, 161, 240, 247, 248, 254, 281, 289, 339, 341, 342, 345, 356, 363, 365], "snippet": [0, 3, 16], "simpl": [0, 1, 16, 17, 19, 25, 26, 28, 29, 30, 31, 39, 41, 94, 95, 96, 99, 102, 132, 137, 138, 142, 192, 237, 247, 266, 275, 278, 285, 298, 300, 303, 328, 337, 338, 355, 356, 358, 359, 360, 361, 362, 365, 366], "bell": [0, 9, 29, 30, 345], "pair": [0, 9, 19, 29, 30, 42, 141, 142, 143, 201, 203, 262, 295, 337, 345, 366], "function": [0, 1, 3, 5, 9, 10, 11, 15, 16, 17, 22, 23, 24, 31, 34, 35, 40, 43, 48, 53, 56, 62, 70, 71, 77, 90, 96, 97, 99, 102, 111, 116, 117, 118, 122, 123, 124, 130, 132, 135, 136, 162, 164, 166, 167, 168, 180, 181, 183, 184, 185, 186, 192, 193, 201, 206, 207, 210, 213, 214, 237, 244, 247, 254, 256, 259, 268, 269, 270, 271, 273, 274, 281, 284, 287, 291, 292, 293, 298, 299, 305, 327, 329, 341, 342, 343, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367], "mode": [0, 1, 3, 11, 29, 30, 31, 33, 35, 39, 40, 64, 96, 139, 171, 198, 281, 290, 338, 341], "from": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 43, 48, 49, 51, 53, 56, 60, 61, 62, 65, 69, 71, 77, 78, 79, 80, 85, 88, 94, 95, 96, 97, 99, 100, 103, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 170, 171, 177, 181, 182, 183, 185, 186, 188, 189, 190, 193, 195, 196, 199, 206, 207, 208, 209, 214, 217, 218, 219, 222, 235, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 268, 269, 272, 273, 276, 279, 281, 284, 285, 287, 289, 290, 291, 295, 297, 298, 299, 300, 304, 305, 320, 321, 326, 327, 329, 331, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 369], "lang": [0, 1, 2, 3, 8, 9, 10, 11, 12, 14, 15, 16, 17, 29, 30, 31, 40, 41, 42, 43, 44, 45, 51, 77, 79, 90, 96, 97, 162, 174, 281, 289, 300, 338, 365, 366], "import": [0, 1, 2, 3, 5, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 39, 40, 41, 42, 43, 51, 77, 78, 79, 80, 85, 96, 97, 99, 100, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 166, 167, 181, 182, 186, 188, 189, 190, 207, 208, 209, 217, 218, 222, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 252, 253, 254, 256, 257, 258, 260, 261, 262, 272, 276, 281, 289, 291, 297, 300, 305, 320, 321, 327, 329, 335, 338, 341, 342, 343, 344, 345, 347, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 369], "qrout": [0, 1, 2, 9, 10, 11, 40, 41, 43, 206, 244, 338, 365], "h": [0, 1, 2, 3, 9, 10, 11, 12, 14, 16, 17, 18, 19, 23, 29, 30, 31, 34, 40, 43, 65, 77, 96, 100, 139, 162, 165, 166, 167, 171, 173, 175, 180, 181, 183, 186, 188, 189, 190, 195, 196, 199, 201, 203, 208, 217, 218, 222, 247, 248, 253, 255, 258, 259, 260, 261, 262, 272, 273, 276, 283, 286, 299, 338, 344, 345, 356, 364, 365, 369], "cnot": [0, 1, 2, 3, 9, 10, 12, 15, 16, 17, 29, 30, 31, 40, 42, 65, 96, 162, 174, 217, 218, 222, 226, 228, 242, 247, 248, 252, 254, 289, 295, 300, 338, 344, 345, 365, 366], "def": [0, 1, 2, 3, 9, 10, 11, 14, 16, 17, 31, 35, 40, 41, 43, 207, 210, 218, 244, 247, 252, 281, 338], "bell_pair": [0, 2, 9], "0": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 39, 40, 41, 42, 43, 50, 51, 61, 68, 73, 74, 77, 78, 79, 89, 96, 97, 100, 116, 117, 120, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 139, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 164, 166, 167, 170, 172, 176, 178, 180, 181, 182, 183, 185, 186, 188, 189, 190, 201, 203, 206, 207, 208, 209, 216, 217, 218, 222, 234, 235, 237, 240, 241, 242, 244, 245, 247, 248, 250, 252, 253, 255, 256, 257, 258, 259, 260, 262, 268, 272, 273, 276, 279, 281, 283, 289, 293, 295, 297, 298, 300, 307, 318, 320, 321, 322, 327, 329, 335, 342, 344, 345, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 369], "1": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 51, 61, 68, 70, 73, 77, 78, 79, 80, 89, 96, 97, 100, 116, 117, 118, 120, 124, 125, 126, 130, 131, 132, 135, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 171, 173, 174, 180, 181, 182, 186, 188, 189, 190, 195, 196, 199, 201, 203, 207, 208, 209, 212, 217, 218, 220, 221, 222, 227, 228, 229, 234, 237, 241, 242, 245, 246, 247, 248, 252, 253, 255, 256, 257, 258, 259, 260, 262, 268, 272, 273, 275, 276, 281, 283, 288, 292, 293, 295, 297, 298, 299, 300, 307, 315, 318, 320, 321, 322, 323, 327, 329, 331, 334, 335, 336, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 369], "result": [0, 1, 2, 3, 5, 8, 14, 15, 16, 17, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 43, 45, 48, 49, 53, 56, 57, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 78, 79, 80, 88, 95, 96, 100, 101, 102, 116, 126, 139, 162, 180, 183, 191, 192, 193, 194, 195, 196, 197, 198, 199, 208, 217, 223, 226, 228, 230, 231, 232, 233, 236, 237, 242, 243, 245, 247, 248, 249, 251, 254, 255, 257, 258, 260, 261, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 287, 288, 289, 291, 292, 293, 296, 297, 298, 299, 300, 303, 304, 335, 338, 341, 342, 347, 357, 358, 359, 360, 361, 362, 365, 366], "run": [0, 1, 2, 3, 5, 11, 14, 23, 24, 27, 35, 36, 37, 39, 41, 57, 77, 86, 96, 100, 102, 191, 192, 194, 195, 196, 197, 199, 237, 247, 251, 254, 259, 273, 277, 278, 279, 284, 289, 291, 298, 303, 338, 341, 342, 355, 366, 368], "sampl": [0, 1, 2, 8, 9, 11, 16, 21, 26, 28, 30, 31, 32, 33, 35, 39, 40, 42, 64, 68, 70, 71, 89, 90, 96, 100, 116, 134, 135, 137, 139, 193, 208, 240, 241, 244, 245, 247, 257, 258, 260, 261, 267, 268, 269, 270, 271, 276, 277, 281, 286, 295, 297, 298, 300, 338, 339, 341, 350, 351, 352, 353, 354, 357], "print": [0, 1, 2, 3, 5, 9, 11, 16, 19, 20, 23, 24, 25, 26, 29, 30, 31, 40, 41, 43, 51, 53, 77, 79, 96, 99, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 166, 167, 181, 182, 186, 188, 189, 190, 208, 209, 217, 218, 222, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 252, 253, 256, 257, 258, 260, 261, 272, 276, 281, 282, 285, 292, 297, 300, 320, 321, 327, 329, 335, 344, 345, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 364, 365, 366], "f": [0, 1, 2, 3, 9, 30, 31, 40, 51, 77, 118, 135, 166, 167, 173, 186, 188, 189, 190, 198, 244, 281, 295, 310, 312, 313, 314, 320, 329, 364, 365, 366], "state": [0, 1, 2, 3, 5, 8, 9, 11, 12, 13, 15, 16, 18, 21, 23, 26, 28, 29, 31, 32, 33, 34, 35, 36, 38, 40, 68, 70, 71, 73, 74, 87, 89, 90, 91, 96, 100, 116, 117, 134, 137, 138, 139, 161, 162, 164, 169, 177, 183, 184, 200, 201, 203, 208, 216, 217, 234, 236, 240, 242, 244, 245, 247, 248, 249, 250, 255, 256, 262, 263, 264, 265, 266, 281, 295, 297, 298, 300, 305, 314, 335, 338, 350, 351, 352, 353, 354, 355, 356, 363, 366, 367], "amplitud": [0, 1, 9, 16, 28, 29, 32, 36, 37, 96, 100, 135, 137, 138, 139, 234, 305, 322, 327, 337], "00": [0, 2, 3, 9, 28, 29, 30, 31, 139, 247, 281, 297], "7071067811865475": [0, 9, 29, 77], "0j": [0, 9, 16, 29, 188, 189, 190, 364], "11": [0, 2, 4, 5, 9, 16, 28, 29, 30, 31, 43, 79, 80, 145, 147, 150, 151, 152, 153, 154, 158, 160, 237, 247, 281, 338, 352, 358, 359, 365], "first": [0, 1, 3, 6, 10, 14, 15, 16, 28, 31, 34, 36, 38, 41, 57, 61, 64, 77, 96, 100, 102, 133, 137, 142, 148, 161, 173, 180, 183, 192, 200, 206, 217, 221, 226, 228, 230, 232, 233, 236, 237, 242, 248, 249, 260, 262, 279, 283, 288, 289, 291, 292, 293, 297, 298, 303, 305, 310, 312, 313, 314, 315, 343, 350, 352, 353, 358, 359, 365, 366], "line": [0, 1, 3, 5, 12, 16, 17, 23, 51, 79, 81, 82, 96, 100, 247, 300, 335, 343, 357, 364], "decor": [0, 1, 9, 14, 17, 206, 210, 214, 244, 247, 338], "two": [0, 1, 5, 6, 12, 16, 17, 20, 23, 25, 26, 28, 34, 35, 39, 40, 41, 42, 64, 78, 96, 100, 118, 126, 133, 142, 143, 161, 163, 165, 170, 173, 181, 182, 184, 187, 201, 203, 205, 206, 217, 221, 226, 228, 230, 232, 237, 242, 245, 248, 255, 256, 259, 262, 281, 286, 293, 298, 299, 305, 310, 312, 313, 315, 321, 335, 337, 338, 350, 352, 353, 357, 358, 359, 365, 366], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 53, 56, 57, 60, 61, 62, 64, 65, 66, 68, 70, 71, 73, 74, 77, 78, 79, 80, 81, 82, 83, 90, 91, 92, 93, 96, 97, 100, 102, 104, 108, 109, 110, 111, 112, 118, 121, 125, 126, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 195, 196, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 226, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 272, 273, 275, 276, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 300, 302, 303, 304, 305, 310, 312, 314, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 329, 330, 331, 333, 334, 336, 338, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 27, 29, 30, 31, 33, 34, 35, 36, 38, 40, 41, 42, 43, 46, 48, 51, 53, 56, 57, 60, 61, 62, 63, 64, 66, 70, 71, 74, 76, 77, 78, 79, 83, 86, 90, 97, 100, 102, 104, 108, 118, 132, 134, 135, 136, 137, 139, 140, 142, 144, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 165, 166, 167, 170, 172, 180, 181, 183, 184, 186, 187, 192, 194, 195, 196, 197, 199, 202, 204, 206, 207, 208, 209, 210, 212, 213, 217, 218, 219, 220, 221, 222, 226, 227, 228, 230, 232, 237, 240, 241, 242, 243, 245, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 267, 268, 269, 270, 271, 272, 273, 274, 276, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 292, 297, 298, 299, 304, 305, 310, 329, 335, 337, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367], "declar": [0, 5, 8, 15, 16, 17, 19, 25, 26, 90, 96, 132, 207, 212, 240, 244, 245, 246, 251, 256, 341], "describ": [0, 5, 7, 8, 10, 11, 14, 16, 17, 18, 22, 25, 27, 28, 31, 32, 35, 36, 38, 43, 77, 78, 83, 85, 86, 90, 99, 109, 111, 118, 132, 134, 137, 139, 141, 142, 143, 145, 161, 164, 200, 201, 203, 204, 206, 207, 209, 217, 238, 241, 242, 243, 253, 256, 257, 258, 260, 261, 262, 268, 269, 272, 276, 283, 292, 303, 305, 337, 338, 355, 363, 364, 366], "our": [0, 1, 2, 3, 4, 14, 16, 22, 23, 28, 31, 33, 35, 39, 40, 41, 219, 242, 253, 262, 281, 298, 337, 339, 349, 351, 353, 354, 355, 365, 366], "A": [0, 2, 5, 8, 9, 10, 12, 13, 15, 18, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 39, 49, 53, 54, 65, 68, 77, 81, 82, 100, 116, 117, 118, 125, 132, 142, 145, 146, 148, 156, 159, 163, 166, 181, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 206, 210, 217, 218, 219, 225, 237, 242, 247, 251, 253, 255, 256, 257, 258, 260, 262, 263, 265, 266, 272, 275, 276, 278, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 299, 300, 306, 310, 312, 313, 330, 332, 333, 334, 336, 337, 347, 350, 351, 354, 355, 356, 364, 365, 369], "detail": [0, 1, 2, 16, 32, 34, 35, 46, 78, 100, 198, 206, 217, 237, 244, 245, 288, 290, 338, 350, 351, 352, 353, 354, 363, 364, 365, 366], "descript": [0, 5, 17, 35, 36, 37, 42, 99, 135, 137, 146, 148, 156, 159, 297, 347, 356], "gener": [0, 5, 9, 11, 14, 15, 16, 17, 18, 22, 23, 28, 29, 34, 36, 37, 44, 45, 48, 51, 53, 56, 62, 77, 96, 100, 101, 102, 104, 105, 106, 111, 121, 135, 139, 144, 161, 162, 200, 201, 206, 207, 214, 217, 218, 220, 221, 222, 223, 224, 227, 228, 235, 236, 237, 245, 247, 248, 252, 254, 256, 259, 262, 268, 269, 274, 287, 293, 297, 305, 322, 344, 345, 346, 347, 355, 356, 365, 366, 367], "found": [0, 3, 9, 22, 31, 35, 36, 96, 121, 161, 162, 183, 244, 253, 257, 258, 259, 260, 261, 267, 270, 272, 273, 276, 287, 302, 338, 339, 347, 357, 363, 367], "section": [0, 1, 2, 3, 5, 7, 9, 10, 14, 17, 18, 22, 25, 26, 31, 33, 35, 39, 40, 42, 43, 46, 77, 78, 96, 192, 198, 206, 253, 257, 258, 260, 272, 276, 290, 338, 342, 346, 347, 365, 367], "directli": [0, 9, 12, 16, 17, 28, 43, 69, 136, 141, 213, 242, 247, 248, 256, 259, 273, 281, 297, 340, 355, 365, 366, 367], "via": [0, 9, 10, 14, 16, 17, 18, 20, 23, 24, 25, 26, 34, 90, 96, 100, 111, 118, 135, 139, 145, 180, 183, 209, 211, 218, 237, 238, 240, 241, 242, 243, 245, 247, 248, 251, 255, 256, 259, 262, 273, 278, 283, 284, 290, 338, 347, 355, 364, 365, 366, 367], "method": [0, 1, 2, 3, 12, 14, 15, 16, 17, 18, 21, 24, 25, 26, 28, 29, 31, 32, 33, 34, 39, 41, 43, 90, 97, 99, 100, 102, 121, 135, 139, 140, 141, 142, 162, 164, 166, 167, 180, 182, 184, 186, 192, 198, 206, 207, 208, 212, 217, 218, 219, 220, 221, 222, 226, 227, 228, 235, 237, 240, 241, 242, 245, 246, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 269, 272, 273, 274, 276, 278, 279, 281, 283, 284, 286, 287, 288, 291, 292, 294, 297, 298, 303, 305, 320, 321, 330, 332, 338, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369], "look": [0, 1, 4, 14, 16, 23, 30, 34, 35, 40, 139, 259, 273, 295, 298, 338, 356], "avail": [0, 4, 5, 6, 8, 18, 25, 27, 29, 31, 32, 36, 37, 46, 63, 80, 145, 161, 166, 167, 180, 200, 252, 253, 257, 258, 259, 260, 261, 272, 273, 276, 305, 337, 338, 348, 349, 357, 358, 359, 360, 361, 362, 364, 365, 366, 368], "qpu": [0, 1, 2, 3, 7, 8, 9, 14, 16, 18, 23, 24, 27, 28, 29, 30, 31, 32, 34, 38, 40, 41, 44, 45, 55, 57, 59, 60, 61, 64, 66, 67, 75, 79, 80, 82, 83, 85, 86, 90, 96, 99, 100, 102, 135, 137, 139, 162, 183, 191, 194, 195, 196, 197, 199, 202, 204, 208, 254, 259, 273, 278, 279, 281, 283, 284, 286, 288, 289, 291, 292, 293, 337, 340, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 365, 366, 368], "execut": [0, 3, 5, 7, 8, 9, 10, 14, 17, 18, 22, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 57, 60, 61, 64, 80, 86, 90, 96, 100, 102, 139, 183, 191, 194, 195, 196, 197, 198, 199, 237, 240, 241, 245, 267, 277, 280, 284, 287, 289, 290, 296, 297, 298, 299, 303, 337, 338, 340, 341, 346, 347, 357, 358, 359, 360, 361, 362, 366, 368], "more": [0, 1, 3, 5, 9, 11, 16, 17, 21, 23, 25, 26, 27, 31, 34, 35, 39, 41, 48, 53, 56, 62, 78, 90, 96, 100, 141, 182, 183, 193, 205, 217, 218, 240, 241, 244, 245, 252, 288, 295, 297, 320, 338, 341, 347, 356, 364, 365, 366], "inform": [0, 2, 3, 5, 10, 28, 29, 32, 33, 35, 36, 37, 39, 40, 60, 78, 79, 96, 137, 138, 139, 140, 182, 193, 194, 195, 196, 197, 199, 200, 205, 213, 217, 229, 235, 240, 241, 287, 304, 320, 337, 338, 341, 364, 365, 366], "about": [0, 31, 36, 37, 96, 200, 213, 338, 365], "process": [0, 2, 5, 8, 12, 22, 27, 28, 29, 32, 34, 35, 39, 40, 41, 42, 87, 89, 90, 96, 99, 102, 139, 192, 193, 198, 218, 229, 237, 277, 278, 280, 296, 299, 303, 304, 305, 310, 313, 320, 366, 368], "sequenti": [0, 1, 3, 11, 39, 292, 337, 338, 363, 366], "qprog": [0, 29, 30], "number": [0, 1, 2, 10, 15, 16, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 42, 70, 77, 79, 80, 86, 96, 99, 100, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 142, 144, 146, 156, 161, 162, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 180, 181, 182, 183, 184, 185, 186, 194, 217, 221, 222, 226, 228, 230, 231, 232, 233, 234, 236, 237, 238, 247, 248, 249, 250, 251, 253, 256, 257, 258, 260, 261, 262, 272, 276, 279, 281, 283, 285, 287, 288, 292, 293, 295, 297, 298, 299, 320, 321, 323, 335, 337, 338, 347, 349, 350, 352, 354, 355, 358, 359, 361, 362, 364, 365, 366, 369], "qbit": [0, 1, 9, 11, 14, 15, 16, 17, 29, 30, 31, 40, 43, 77, 78, 79, 90, 96, 97, 100, 134, 141, 201, 203, 206, 208, 217, 218, 219, 226, 228, 230, 231, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 281, 286, 289, 300, 320, 321, 335, 336, 365], "nbqbit": [0, 14, 26, 31, 35, 40, 42, 77, 80, 86, 96, 99, 134, 137, 142, 146, 167, 186, 222, 238, 245, 286, 365, 366], "2": [0, 1, 3, 5, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 35, 40, 41, 42, 43, 50, 51, 61, 69, 74, 77, 78, 80, 91, 96, 97, 118, 119, 123, 125, 126, 127, 128, 130, 132, 133, 135, 138, 139, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 170, 171, 173, 174, 175, 180, 181, 182, 183, 184, 186, 188, 189, 190, 199, 206, 208, 209, 215, 216, 217, 218, 220, 221, 222, 226, 228, 230, 231, 232, 233, 234, 237, 240, 241, 242, 244, 247, 248, 252, 255, 256, 257, 258, 260, 261, 262, 272, 273, 275, 276, 279, 281, 283, 286, 289, 292, 295, 297, 298, 307, 309, 314, 315, 320, 321, 323, 327, 329, 334, 335, 336, 344, 345, 349, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 369], "alloc": [0, 9, 10, 15, 51, 96, 220, 221, 222, 223, 224, 227, 228, 237, 240, 241, 242, 245, 248, 335, 343, 345], "some": [0, 4, 5, 7, 9, 11, 14, 15, 16, 17, 18, 20, 21, 26, 28, 29, 31, 33, 34, 35, 39, 40, 41, 68, 79, 96, 100, 134, 135, 136, 139, 161, 178, 192, 206, 207, 213, 216, 217, 220, 223, 224, 235, 236, 237, 240, 241, 245, 247, 248, 249, 252, 254, 259, 263, 265, 266, 273, 278, 280, 284, 305, 338, 346, 347, 356, 358, 359, 360, 361, 362, 365], "qalloc": [0, 1, 3, 9, 10, 11, 12, 14, 15, 16, 29, 30, 31, 77, 79, 96, 97, 162, 208, 217, 218, 219, 222, 237, 240, 241, 245, 246, 248, 281, 289, 300, 365, 366], "appli": [0, 1, 5, 8, 10, 15, 17, 19, 23, 31, 34, 42, 51, 68, 73, 77, 97, 141, 142, 143, 161, 162, 174, 176, 180, 183, 200, 201, 202, 203, 204, 205, 209, 218, 219, 234, 237, 240, 242, 244, 248, 281, 289, 298, 305, 327, 328, 329, 333, 335, 336, 338, 356, 365, 366], "export": [0, 5, 52, 53, 237], "to_circ": [0, 1, 3, 9, 11, 12, 14, 15, 16, 29, 30, 31, 48, 53, 56, 62, 77, 79, 96, 97, 162, 206, 208, 217, 218, 219, 220, 221, 222, 226, 227, 228, 237, 248, 252, 281, 289, 300, 338, 365, 366], "processor": [0, 3, 28, 90, 96, 139, 145, 298, 337, 368], "unit": [0, 2, 8, 27, 28, 34, 299, 305, 319, 327, 329, 368], "factori": [0, 28, 262, 355], "default": [0, 2, 3, 9, 28, 29, 30, 35, 36, 37, 43, 48, 51, 53, 56, 57, 60, 61, 62, 64, 66, 68, 70, 91, 96, 97, 100, 102, 104, 105, 106, 107, 114, 132, 134, 137, 139, 141, 142, 144, 162, 166, 167, 172, 173, 174, 176, 178, 180, 183, 184, 185, 186, 192, 195, 196, 199, 200, 201, 202, 203, 204, 205, 208, 217, 218, 223, 225, 226, 237, 245, 247, 248, 249, 252, 253, 254, 256, 258, 259, 260, 262, 273, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 295, 296, 297, 298, 300, 302, 303, 304, 310, 311, 312, 313, 316, 320, 321, 329, 334, 335, 336, 340, 341, 356, 364], "one": [0, 3, 5, 9, 10, 14, 15, 16, 17, 18, 23, 24, 25, 26, 27, 29, 30, 31, 35, 39, 41, 71, 73, 74, 77, 79, 96, 102, 121, 132, 135, 139, 141, 142, 161, 163, 165, 174, 177, 181, 182, 183, 184, 187, 192, 205, 206, 217, 237, 244, 247, 251, 253, 257, 258, 259, 260, 261, 262, 263, 272, 273, 276, 277, 278, 281, 282, 284, 288, 292, 295, 297, 298, 303, 305, 321, 335, 337, 338, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 365, 366], "get_default_qpu": [0, 1, 2, 3, 16, 28, 29, 30, 31, 40, 41, 43, 96, 99, 100, 162, 208, 281, 296, 338, 357, 358, 359, 360, 361, 362, 365, 366], "to_job": [0, 1, 2, 3, 11, 16, 18, 21, 23, 24, 26, 28, 29, 30, 31, 33, 34, 40, 41, 43, 79, 96, 139, 141, 162, 208, 259, 273, 281, 289, 300, 338, 350, 351, 352, 353, 354, 357, 365, 366], "submit": [0, 1, 2, 3, 5, 16, 27, 28, 29, 30, 31, 34, 35, 39, 40, 41, 43, 57, 60, 61, 63, 64, 79, 96, 100, 162, 208, 281, 284, 289, 291, 297, 298, 300, 303, 304, 338, 341, 342, 350, 351, 352, 353, 354, 357, 365, 366], "iter": [0, 1, 3, 29, 31, 41, 192, 193, 214, 237, 248, 277, 279, 280, 283, 284, 288, 293, 338, 366], "over": [0, 1, 5, 11, 23, 29, 34, 40, 54, 57, 68, 74, 78, 90, 96, 134, 141, 217, 237, 244, 248, 262, 273, 295, 331], "final": [0, 1, 3, 4, 8, 10, 12, 16, 18, 21, 26, 28, 29, 30, 31, 32, 33, 35, 40, 43, 74, 87, 89, 96, 134, 139, 207, 232, 233, 248, 251, 253, 256, 257, 258, 260, 261, 272, 274, 276, 281, 287, 356, 365, 366], "vector": [0, 23, 32, 36, 37, 70, 71, 73, 74, 137, 161, 169, 171, 183, 253, 259, 273, 279, 305, 306, 308, 309, 314, 325, 335, 348], "all": [0, 1, 4, 5, 9, 16, 18, 19, 28, 29, 30, 31, 35, 36, 40, 41, 53, 54, 75, 78, 79, 80, 94, 96, 100, 104, 107, 139, 142, 143, 145, 146, 178, 182, 191, 200, 204, 206, 213, 214, 217, 218, 226, 228, 230, 231, 232, 233, 235, 237, 242, 248, 252, 259, 260, 262, 271, 272, 277, 279, 280, 282, 283, 286, 287, 288, 289, 291, 292, 293, 297, 300, 304, 305, 337, 338, 343, 346, 347, 358, 364, 365], "compon": [0, 35, 135], "": [0, 1, 3, 5, 10, 14, 16, 17, 19, 21, 29, 31, 43, 57, 59, 61, 63, 65, 99, 100, 118, 145, 162, 170, 171, 173, 183, 206, 208, 215, 220, 222, 225, 237, 244, 253, 254, 256, 259, 265, 273, 274, 287, 292, 295, 299, 348, 365, 366, 369], "few": [0, 1, 3, 16, 42, 206, 347, 356], "dedic": [0, 5, 8, 18, 43, 139, 305, 347], "atom": [0, 184, 338, 363, 365], "task": [0, 286, 346], "languag": [0, 5, 17, 337], "Then": [0, 1, 16, 39, 74, 162, 183, 192, 217, 248, 281, 295, 337, 344], "remain": [0, 5, 181, 183, 185, 217, 218, 338], "instanti": [0, 3, 11, 35, 60, 61, 77, 102, 121, 162, 209, 210, 213, 218, 235, 238, 240, 241, 242, 243, 247, 254, 285, 299], "instal": [0, 5, 46, 183, 337, 338, 340], "algorithm": [0, 5, 7, 8, 9, 11, 16, 25, 27, 28, 34, 39, 161, 194, 195, 196, 197, 199, 222, 252, 277, 279, 286, 288, 293, 338, 346, 349, 362, 365, 366, 368], "framework": [1, 2, 3, 4, 7, 8, 9, 11, 12, 18, 31, 33, 35, 39, 40, 41, 43, 75, 90, 118, 207, 259, 281, 356, 368], "advanc": [1, 4, 7, 9, 11, 13, 27, 31, 39, 48, 51, 53, 56, 62, 96, 111, 118, 206, 207, 337, 356], "onli": [1, 4, 5, 12, 15, 16, 17, 18, 21, 25, 26, 28, 29, 30, 32, 35, 40, 41, 42, 43, 96, 97, 100, 118, 132, 137, 138, 142, 143, 161, 162, 167, 172, 176, 183, 184, 205, 212, 218, 221, 226, 228, 230, 232, 233, 235, 237, 240, 242, 243, 246, 248, 254, 259, 269, 273, 286, 292, 296, 297, 298, 300, 310, 329, 338, 345, 346, 347, 358, 359, 360, 361, 362, 365, 366], "support": [1, 2, 4, 5, 6, 7, 12, 15, 28, 30, 34, 35, 39, 42, 65, 79, 96, 99, 100, 111, 141, 217, 259, 273, 297, 338, 345], "sever": [1, 5, 9, 12, 28, 31, 32, 35, 36, 63, 68, 70, 71, 90, 95, 96, 100, 121, 277, 292, 337, 364, 366], "paradigm": [1, 7, 8, 346], "base": [1, 4, 5, 7, 8, 12, 16, 25, 31, 33, 43, 68, 75, 184, 191, 193, 206, 219, 222, 225, 226, 227, 228, 244, 251, 267, 277, 279, 280, 283, 288, 291, 293, 297, 298, 305, 328, 337, 338, 346, 363, 364, 365, 366, 368], "guid": [1, 4, 27, 46, 96, 200, 206, 305, 368], "page": [1, 4, 5, 11, 29, 33, 35, 36, 37, 43, 46, 297, 338, 339, 340, 364, 365], "focu": [1, 281], "modul": [1, 2, 5, 8, 9, 12, 18, 23, 39, 46, 51, 67, 68, 75, 77, 81, 82, 83, 90, 118, 132, 145, 161, 200, 206, 214, 218, 219, 229, 237, 251, 298, 300, 305, 338, 339, 341, 342, 357, 363, 364, 365, 367], "requir": [1, 3, 4, 5, 6, 16, 26, 31, 35, 40, 41, 43, 75, 78, 86, 96, 100, 132, 137, 142, 219, 237, 248, 265, 274, 278, 280, 281, 286, 292, 338, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 369], "which": [1, 3, 5, 9, 12, 13, 16, 18, 19, 20, 24, 29, 31, 33, 34, 35, 39, 40, 41, 42, 43, 53, 54, 60, 64, 68, 71, 77, 78, 81, 82, 90, 96, 102, 116, 134, 135, 136, 139, 142, 143, 170, 173, 181, 183, 192, 195, 196, 199, 201, 203, 206, 226, 228, 230, 231, 236, 237, 240, 241, 245, 249, 251, 253, 254, 256, 258, 259, 260, 262, 268, 273, 276, 278, 279, 281, 291, 292, 295, 297, 298, 303, 329, 330, 331, 335, 336, 337, 341, 346, 347, 354, 355, 361, 364, 365, 366], "includ": [1, 4, 5, 9, 23, 28, 34, 48, 51, 53, 56, 62, 71, 90, 96, 135, 172, 174, 176, 180, 183, 206, 207, 218, 221, 222, 237, 267, 268, 269, 270, 271, 284, 285, 297, 323, 338, 363, 364, 367, 368], "nativ": [1, 15, 28, 96], "reli": [1, 23, 310, 338, 346, 364], "ad": [1, 9, 16, 26, 32, 35, 48, 53, 56, 62, 221, 225, 237, 245, 279, 327, 338], "either": [1, 5, 10, 17, 32, 35, 39, 40, 96, 137, 142, 144, 183, 192, 193, 194, 195, 196, 197, 199, 205, 217, 244, 251, 255, 279, 295, 297, 302, 341, 366], "qfunc": [1, 3, 9, 206, 338], "class": [1, 5, 9, 10, 13, 16, 20, 23, 24, 25, 26, 28, 31, 34, 35, 40, 41, 43, 51, 53, 54, 57, 60, 61, 63, 64, 66, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 94, 95, 96, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 114, 118, 121, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 156, 159, 161, 166, 167, 174, 181, 182, 183, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 213, 217, 218, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 303, 304, 305, 307, 327, 328, 329, 330, 332, 333, 334, 335, 336, 338, 341, 342, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 356, 364, 365, 366], "let": [1, 14, 17, 30, 234, 244, 295, 338, 364, 365, 366], "search": [1, 41, 183, 208, 337, 356], "find": [1, 18, 22, 31, 34, 39, 96, 161, 170, 292, 348, 349, 351, 354, 356, 357, 360, 361, 362, 365], "element": [1, 23, 24, 125, 135, 144, 162, 200, 204, 212, 246, 259, 273, 284, 299, 324, 325, 369], "unstructur": 1, "space": [1, 23, 41, 90, 134, 161, 181, 185, 237, 305, 338, 363, 365, 366], "quadrat": [1, 22, 34, 256, 259, 273, 369], "faster": [1, 19, 36, 37, 262, 338], "than": [1, 5, 25, 28, 31, 34, 35, 90, 100, 134, 141, 181, 245, 248, 252, 260, 276, 293, 338, 364, 366], "random": [1, 11, 21, 23, 24, 34, 181, 182, 205, 217, 244, 272, 285, 288, 291, 292, 293, 297, 299, 300, 320, 321, 347, 353, 366, 369], "classic": [1, 9, 23, 28, 29, 33, 34, 41, 68, 72, 74, 78, 88, 90, 96, 97, 140, 162, 206, 209, 211, 212, 217, 237, 242, 243, 245, 253, 257, 258, 260, 261, 262, 272, 276, 277, 283, 291, 300, 337, 338, 349, 355, 362, 363, 366], "In": [1, 3, 5, 8, 9, 13, 14, 15, 16, 18, 23, 27, 28, 29, 30, 31, 34, 35, 39, 40, 41, 42, 43, 70, 71, 78, 96, 180, 206, 214, 217, 222, 237, 247, 248, 254, 256, 262, 268, 281, 289, 292, 295, 298, 318, 342, 346, 347, 355, 356, 364], "model": [1, 18, 34, 85, 136, 161, 171, 175, 201, 202, 205, 206, 256, 259, 273, 305, 364, 365, 366, 367, 369], "problem": [1, 9, 11, 16, 22, 23, 24, 31, 34, 116, 134, 161, 162, 191, 193, 194, 195, 196, 197, 199, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 267, 268, 269, 270, 271, 272, 273, 274, 276, 292, 299, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 369], "specifi": [1, 2, 3, 14, 16, 17, 18, 19, 25, 28, 34, 60, 61, 68, 70, 71, 73, 96, 135, 141, 142, 183, 200, 201, 202, 203, 204, 206, 208, 217, 218, 226, 228, 230, 231, 232, 233, 237, 243, 244, 247, 253, 256, 259, 263, 273, 281, 286, 299, 338, 350, 351, 352, 353, 354, 355, 356, 369], "e": [1, 3, 5, 7, 9, 10, 11, 13, 15, 16, 17, 19, 22, 23, 24, 25, 28, 31, 33, 34, 35, 39, 40, 41, 42, 43, 51, 64, 68, 71, 77, 86, 91, 96, 100, 121, 132, 134, 139, 143, 162, 164, 167, 173, 180, 181, 183, 187, 201, 202, 203, 209, 212, 214, 217, 220, 221, 223, 234, 237, 240, 241, 242, 245, 246, 248, 251, 252, 254, 256, 259, 262, 273, 281, 283, 284, 287, 291, 292, 294, 295, 305, 310, 312, 313, 319, 321, 329, 333, 334, 335, 336, 338, 341, 348, 349, 350, 351, 352, 354, 355, 358, 359, 360, 361, 362, 365, 366, 368], "mathcal": [1, 163, 168, 170, 181, 295, 310, 312, 313, 319, 320, 321, 333, 334, 335, 336], "x": [1, 3, 6, 9, 10, 11, 12, 16, 17, 19, 20, 26, 51, 65, 68, 73, 100, 122, 126, 132, 141, 154, 162, 163, 165, 175, 181, 183, 184, 186, 188, 190, 222, 234, 247, 253, 262, 273, 286, 300, 309, 315, 323, 338, 344, 348, 356, 364, 366], "rightarrow": 1, "we": [1, 3, 5, 8, 10, 11, 14, 15, 16, 17, 23, 24, 25, 27, 28, 29, 30, 41, 53, 71, 78, 91, 96, 135, 161, 162, 183, 206, 207, 213, 217, 218, 222, 242, 244, 253, 258, 259, 272, 273, 283, 291, 292, 331, 342, 346, 347, 349, 353, 354, 356, 361, 362, 363, 364, 365, 366], "consist": [1, 5, 8, 12, 18, 24, 31, 34, 68, 141, 183, 237, 251, 256, 278, 292, 298, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362], "altern": [1, 10, 36, 37, 43, 174, 305, 338, 355, 364], "oper": [1, 9, 10, 11, 16, 17, 18, 19, 20, 23, 31, 36, 38, 40, 41, 43, 69, 76, 78, 96, 97, 118, 121, 132, 134, 139, 141, 161, 162, 164, 167, 168, 180, 181, 186, 201, 202, 203, 204, 206, 208, 209, 211, 213, 216, 218, 219, 220, 222, 224, 225, 229, 236, 237, 238, 242, 243, 244, 245, 251, 255, 262, 279, 284, 298, 316, 318, 319, 321, 322, 327, 329, 335, 338, 365, 366, 367], "pi": [1, 10, 17, 41, 51, 122, 123, 124, 130, 132, 181, 183, 187, 206, 234, 244, 247, 286, 366], "sqrt": [1, 17, 28, 29, 30, 91, 118, 138, 234, 314, 315, 321, 322, 327, 329, 335], "frac": [1, 17, 24, 100, 135, 166, 170, 171, 173, 180, 181, 183, 217, 234, 258, 262, 283, 315, 321, 329, 334, 336, 347, 356, 364], "4": [1, 5, 10, 11, 14, 16, 17, 21, 24, 25, 26, 31, 42, 43, 51, 79, 96, 104, 106, 118, 141, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 167, 177, 178, 179, 182, 186, 188, 189, 190, 207, 217, 222, 235, 237, 247, 248, 253, 257, 258, 260, 269, 276, 293, 307, 309, 336, 350, 351, 352, 353, 354, 357, 358, 359, 360, 362, 364, 365, 366, 369], "where": [1, 5, 6, 11, 17, 23, 24, 34, 41, 91, 96, 100, 122, 132, 135, 138, 162, 165, 170, 173, 181, 183, 208, 215, 217, 226, 228, 230, 231, 232, 233, 236, 249, 256, 259, 262, 273, 275, 292, 297, 298, 327, 329, 331, 349, 350, 351, 352, 353, 354, 355, 362], "probabl": [1, 2, 14, 29, 31, 32, 34, 35, 40, 70, 71, 73, 88, 91, 96, 100, 137, 138, 139, 183, 205, 208, 247, 281, 298, 321, 327, 329, 356], "uniform": [1, 206, 215, 250], "distribut": [1, 4, 5, 96, 137, 139, 206, 215, 217, 250, 298, 338, 366], "u_f": 1, "rangl": [1, 11, 13, 15, 16, 28, 29, 30, 31, 43, 68, 74, 91, 100, 138, 162, 164, 203, 206, 208, 215, 216, 217, 220, 221, 222, 224, 226, 227, 228, 230, 231, 232, 233, 234, 237, 244, 245, 248, 250, 256, 262, 281, 283, 295, 297, 298, 314, 327, 355, 356], "mapsto": [1, 220, 221, 222, 224, 226, 227, 228, 230, 231, 232, 233], "u_d": 1, "langl": [1, 11, 28, 30, 43, 91, 100, 138, 162, 203, 208, 215, 216, 283, 295, 314, 355, 366], "sum_": [1, 23, 24, 34, 163, 166, 171, 173, 175, 181, 187, 217, 234, 256, 262, 298, 299, 333, 334, 335, 364], "dive": 1, "implement": [1, 9, 10, 13, 14, 15, 16, 17, 18, 34, 35, 41, 66, 76, 77, 78, 90, 96, 97, 111, 132, 134, 161, 164, 167, 180, 181, 185, 186, 206, 208, 210, 215, 216, 217, 218, 219, 225, 226, 227, 228, 229, 237, 249, 252, 262, 264, 265, 274, 279, 280, 281, 284, 286, 287, 292, 303, 327, 328, 330, 332, 335, 338, 355, 364, 366], "To": [1, 5, 10, 17, 18, 21, 23, 24, 28, 96, 97, 143, 161, 181, 206, 253, 257, 258, 260, 261, 272, 276, 281, 282, 285, 340, 341, 353, 354, 361, 363, 364, 365, 366], "keep": [1, 4, 16, 31, 43, 218, 237, 277, 285, 337], "thing": [1, 15, 23, 219, 338], "consid": [1, 10, 14, 16, 17, 28, 42, 100, 217, 234, 237, 248, 252, 297, 341, 364, 366], "2k": [1, 100], "set": [1, 2, 3, 5, 9, 10, 12, 13, 17, 28, 29, 31, 35, 39, 41, 42, 43, 48, 53, 56, 57, 62, 64, 66, 70, 77, 78, 90, 96, 97, 99, 104, 105, 107, 110, 111, 118, 121, 132, 137, 138, 139, 142, 162, 167, 170, 178, 181, 183, 184, 185, 186, 201, 207, 214, 218, 235, 237, 240, 242, 244, 245, 247, 248, 249, 252, 254, 255, 262, 280, 282, 284, 287, 289, 291, 292, 293, 297, 330, 337, 338, 347, 349, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 366, 367], "put": [1, 48, 53, 56, 62, 173], "qubit": [1, 9, 10, 13, 15, 16, 17, 18, 19, 21, 23, 24, 26, 28, 29, 30, 31, 35, 36, 37, 39, 42, 48, 51, 53, 56, 62, 64, 65, 68, 70, 71, 73, 74, 77, 78, 80, 86, 90, 99, 100, 134, 137, 139, 141, 142, 143, 146, 156, 161, 167, 168, 169, 172, 174, 176, 177, 178, 179, 181, 182, 183, 186, 201, 202, 203, 204, 205, 206, 208, 217, 220, 221, 222, 223, 224, 227, 228, 236, 237, 240, 241, 242, 243, 245, 248, 249, 254, 262, 275, 277, 281, 286, 297, 298, 300, 320, 321, 323, 334, 335, 336, 337, 338, 341, 343, 345, 364, 365, 366, 369], "diagon": [1, 23, 24, 162, 175, 183, 252, 254, 255, 256, 259, 275, 286, 355, 365, 369], "basi": [1, 5, 16, 21, 28, 29, 89, 90, 96, 137, 139, 141, 161, 166, 167, 181, 183, 184, 186, 187, 188, 189, 190, 201, 203, 222, 237, 242, 254, 277, 286, 294, 298, 308, 309, 323, 324, 325, 333, 335, 338, 356, 363, 364, 365], "wall": [1, 31], "flip": [1, 12, 16, 34, 96, 240, 242, 243, 245, 256, 262, 365], "control": [1, 5, 9, 16, 17, 18, 41, 68, 77, 78, 97, 142, 184, 206, 213, 217, 237, 248, 337, 338], "z": [1, 2, 6, 10, 16, 17, 19, 20, 21, 23, 25, 26, 28, 29, 31, 65, 141, 184, 188, 189, 190, 237, 240, 254, 256, 286, 323, 364], "undo": 1, "chang": [1, 5, 17, 18, 21, 23, 34, 96, 161, 181, 183, 187, 226, 228, 230, 232, 233, 281, 286, 291, 297, 338, 356, 365, 366], "given": [1, 3, 5, 10, 23, 24, 28, 29, 31, 34, 40, 41, 43, 77, 96, 100, 102, 111, 118, 135, 161, 162, 163, 183, 201, 203, 216, 234, 237, 253, 257, 258, 260, 261, 272, 276, 279, 281, 299, 308, 312, 327, 329, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 365, 366], "k": [1, 4, 73, 91, 100, 138, 173, 175, 180, 196, 217, 234, 236, 247, 249, 251, 260, 262, 267, 283, 335, 337, 347, 351, 357, 364], "return": [1, 3, 9, 10, 14, 16, 17, 27, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 48, 49, 51, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 69, 70, 71, 73, 74, 78, 91, 94, 95, 96, 98, 99, 100, 102, 104, 106, 107, 110, 111, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 205, 207, 208, 210, 215, 216, 217, 218, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 284, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 299, 301, 302, 303, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 333, 334, 335, 336, 338, 341, 357], "routin": [1, 9, 10, 15, 16, 17, 28, 41, 96, 174, 176, 178, 183, 208, 215, 216, 217, 219, 220, 221, 222, 223, 224, 227, 228, 229, 234, 236, 237, 248, 249, 250, 286], "numpi": [1, 3, 10, 11, 21, 23, 24, 31, 36, 38, 41, 68, 69, 70, 71, 73, 74, 111, 116, 117, 132, 134, 135, 137, 162, 166, 167, 181, 182, 217, 244, 247, 253, 257, 258, 259, 260, 262, 264, 266, 272, 273, 276, 288, 291, 299, 335, 338, 350, 351, 352, 353, 354, 360, 362, 364, 365, 366, 369], "np": [1, 3, 10, 11, 21, 23, 24, 25, 31, 34, 41, 74, 100, 111, 132, 134, 139, 162, 163, 165, 166, 167, 170, 171, 173, 175, 181, 182, 184, 185, 186, 187, 207, 217, 244, 247, 253, 257, 258, 259, 260, 272, 273, 276, 287, 291, 292, 293, 298, 308, 309, 323, 324, 325, 326, 331, 333, 334, 335, 336, 346, 350, 351, 352, 353, 354, 356, 360, 362, 364, 365, 366, 369], "everyth": [1, 16, 366], "need": [1, 4, 5, 6, 10, 12, 18, 19, 23, 24, 28, 31, 34, 39, 40, 41, 60, 61, 70, 73, 75, 86, 90, 96, 132, 135, 142, 168, 222, 244, 247, 248, 253, 257, 258, 260, 261, 272, 276, 278, 299, 303, 338, 339, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366], "standard": [1, 23, 28, 29, 30, 66, 91, 118, 138, 200, 205, 207, 243, 262, 284, 297, 324, 325, 366], "unrol": [1, 247], "fals": [1, 16, 35, 40, 48, 51, 53, 56, 62, 64, 78, 79, 92, 93, 96, 97, 118, 132, 137, 142, 162, 166, 167, 172, 176, 178, 183, 184, 186, 206, 214, 218, 237, 245, 247, 249, 252, 254, 256, 257, 258, 260, 261, 262, 268, 269, 276, 280, 281, 282, 283, 284, 285, 287, 288, 291, 292, 293, 297, 300, 311, 334, 335, 336], "wire": [1, 10, 14, 15, 218, 237, 242, 248], "rang": [1, 3, 10, 11, 17, 20, 31, 35, 39, 43, 162, 183, 208, 247, 248, 252, 262, 300, 347], "ctrl": [1, 10, 17, 31, 65, 77, 96, 218, 282], "list": [1, 2, 5, 7, 9, 18, 28, 29, 31, 32, 33, 35, 36, 39, 40, 41, 48, 51, 53, 56, 57, 61, 62, 64, 65, 68, 70, 71, 73, 74, 77, 78, 86, 88, 90, 94, 95, 96, 98, 99, 100, 111, 114, 118, 121, 125, 134, 137, 138, 139, 140, 141, 142, 144, 161, 162, 163, 164, 167, 168, 170, 174, 181, 182, 184, 185, 186, 200, 202, 204, 207, 214, 218, 235, 237, 240, 241, 242, 243, 245, 248, 255, 256, 257, 258, 260, 261, 262, 268, 275, 276, 279, 283, 287, 295, 297, 298, 303, 304, 305, 314, 323, 324, 325, 326, 328, 330, 331, 333, 335, 336, 338, 341, 344, 345, 350, 351, 352, 353, 354, 365, 366, 367], "qroutin": [1, 9, 10, 13, 14, 15, 16, 17, 164, 180, 183, 206, 208, 210, 215, 216, 217, 218, 220, 222, 223, 224, 234, 236, 238, 240, 241, 242, 243, 245, 247, 249, 250, 286, 365], "new_wir": [1, 10, 14, 15, 16, 208, 218, 238, 240, 241, 242, 243, 245, 248], "As": [1, 5, 15, 19, 25, 26, 29, 183, 244, 245, 286, 338, 346, 354, 355, 361], "you": [1, 4, 5, 10, 11, 12, 14, 15, 16, 20, 39, 43, 48, 53, 56, 60, 61, 62, 97, 118, 161, 198, 207, 226, 235, 237, 254, 284, 287, 297, 337, 338, 339, 355, 363, 364, 365, 367], "see": [1, 4, 5, 17, 19, 22, 23, 26, 29, 30, 31, 34, 41, 70, 78, 96, 100, 121, 173, 176, 182, 205, 211, 217, 237, 240, 241, 242, 244, 245, 247, 258, 260, 261, 272, 276, 286, 287, 288, 291, 293, 320, 338, 355, 364, 365, 366], "repeat": [1, 28, 30, 41, 232, 233, 347, 353], "lot": [1, 16, 40, 237, 252], "do": [1, 3, 4, 5, 14, 23, 28, 35, 40, 91, 96, 100, 139, 181, 183, 235, 280, 281, 297, 298, 356, 364, 365, 366], "revert": [1, 96, 137], "them": [1, 2, 4, 5, 6, 8, 13, 15, 16, 18, 20, 22, 96, 102, 168, 191, 206, 248, 292, 347, 353, 365], "simplifi": [1, 13, 205, 206, 364, 365], "uncomput": [1, 13, 16, 218, 248, 337], "block": [1, 16, 28, 77, 247], "notic": [1, 5, 16, 17, 21, 41, 221, 303], "how": [1, 3, 5, 7, 16, 17, 18, 20, 22, 31, 33, 34, 39, 41, 42, 96, 173, 217, 248, 355, 364, 365, 366, 367], "don": [1, 5, 41, 71], "t": [1, 2, 5, 10, 11, 16, 17, 18, 19, 20, 21, 34, 41, 43, 48, 53, 56, 60, 62, 65, 71, 96, 100, 121, 132, 135, 139, 144, 164, 165, 173, 180, 181, 183, 237, 259, 262, 273, 299, 327, 329, 345, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 365, 366], "explicit": [1, 96, 135], "automat": [1, 4, 11, 16, 43, 97, 134, 167, 220, 221, 222, 227, 228, 235, 253, 257, 258, 260, 261, 272, 276, 338, 356, 366], "when": [1, 10, 11, 12, 14, 16, 23, 27, 28, 32, 34, 39, 43, 69, 70, 71, 73, 75, 79, 80, 90, 96, 97, 100, 104, 108, 109, 111, 112, 132, 183, 206, 207, 219, 237, 240, 241, 244, 245, 247, 248, 252, 254, 256, 262, 279, 286, 292, 293, 304, 305, 338, 343, 346, 347, 356, 364, 365, 366], "exit": [1, 16], "clearer": 1, "now": [1, 3, 4, 14, 15, 30, 42, 144, 162, 254, 338, 363, 364, 365, 366, 367], "have": [1, 2, 4, 5, 7, 10, 11, 14, 15, 16, 18, 19, 28, 31, 34, 35, 41, 60, 70, 71, 73, 77, 78, 96, 100, 118, 121, 135, 143, 161, 175, 206, 237, 242, 245, 247, 259, 273, 281, 286, 292, 300, 335, 338, 339, 347, 355, 356, 364, 365, 366, 367], "palindrom": 1, "bit": [1, 4, 9, 12, 14, 16, 17, 20, 40, 68, 78, 88, 96, 137, 183, 206, 222, 234, 236, 237, 245, 249, 262, 297, 300, 356], "string": [1, 17, 51, 78, 96, 98, 121, 139, 141, 183, 201, 203, 235, 237, 262, 283, 294, 320, 321, 327, 329, 335, 336, 356], "own": [1, 5, 9, 10, 14, 18, 31, 33, 39, 77, 90, 135, 161, 263, 284, 287, 337], "mirror": 1, "rememb": 1, "sign": [1, 96, 183, 256, 295], "xor": [1, 16, 209, 242, 255, 256], "b_1": 1, "b_": [1, 234], "b_2": 1, "place": [1, 5, 17, 40, 96, 100, 218, 226, 228, 230, 237, 259, 264, 265, 266, 280, 356], "second": [1, 15, 16, 29, 30, 31, 133, 142, 148, 171, 173, 178, 192, 206, 221, 233, 259, 273, 298, 310, 312, 313, 314, 315, 347, 350, 352, 353, 358, 359], "half": [1, 298, 338], "its": [1, 5, 7, 10, 11, 15, 16, 18, 23, 29, 31, 34, 35, 39, 41, 43, 90, 91, 96, 100, 116, 118, 125, 135, 138, 139, 162, 180, 200, 203, 213, 214, 237, 242, 251, 256, 262, 263, 318, 333, 334, 336, 338, 347, 364, 365, 366], "so": [1, 3, 5, 8, 16, 28, 34, 41, 74, 96, 139, 171, 173, 174, 181, 183, 248, 259, 292, 300, 346, 347, 358, 364, 365, 366], "perform": [1, 3, 5, 9, 16, 18, 28, 30, 34, 35, 36, 38, 39, 41, 43, 68, 83, 96, 100, 139, 161, 180, 183, 184, 206, 208, 217, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 242, 249, 259, 262, 273, 274, 277, 278, 279, 280, 283, 286, 287, 294, 295, 331, 338, 366], "thu": [1, 16, 28, 79, 183, 201, 203, 205, 217, 218, 237, 245, 247, 248, 259, 280, 289, 356, 364, 366], "origin": [1, 5, 366], "onc": [1, 11, 12, 22, 26, 78, 217, 279, 355, 365, 366], "again": [1, 248, 365], "is_palindrom": 1, "first_half": 1, "second_half": 1, "w1": [1, 248], "w2": [1, 248], "zip": [1, 31, 100, 337], "revers": [1, 5, 15, 20, 39, 234, 245, 252, 297, 365], "And": [1, 10], "There": [1, 4, 77, 205, 206], "exactli": [1, 16, 245, 262, 346], "henc": [1, 18, 25, 183, 247, 346], "approx": [1, 180], "good": [1, 5, 16, 35, 183, 347, 366], "diff": [1, 132], "start": [1, 4, 16, 17, 21, 23, 24, 29, 30, 31, 33, 35, 39, 40, 41, 43, 68, 96, 102, 183, 192, 198, 218, 241, 245, 253, 257, 258, 260, 261, 262, 263, 272, 276, 278, 285, 290, 298, 303, 337, 355, 365, 368], "superposit": [1, 139, 242, 262], "nstep": [1, 41], "int": [1, 10, 14, 17, 61, 65, 70, 73, 77, 81, 82, 85, 86, 88, 96, 97, 99, 100, 102, 103, 111, 116, 117, 121, 132, 134, 137, 139, 140, 141, 142, 146, 148, 156, 159, 162, 163, 164, 165, 167, 168, 169, 170, 172, 174, 176, 178, 180, 181, 182, 183, 184, 185, 186, 192, 194, 196, 198, 201, 202, 203, 204, 207, 210, 211, 215, 217, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 245, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 269, 272, 275, 276, 278, 279, 283, 285, 288, 290, 292, 293, 295, 297, 298, 299, 303, 304, 310, 320, 321, 323, 324, 325, 328, 333, 334, 335, 336, 350, 351, 352, 353, 354], "_": [1, 16, 162, 163, 173, 181, 187, 208, 222, 224, 234, 248, 283, 295, 320, 329, 333, 334, 336, 364], "0000": 1, "2499999999999995": [1, 208], "0110": 1, "1001": 1, "1111": 1, "build": [1, 3, 9, 10, 11, 12, 13, 17, 18, 35, 41, 43, 77, 94, 95, 96, 99, 100, 121, 132, 137, 138, 142, 144, 161, 162, 164, 172, 177, 179, 208, 216, 221, 226, 227, 228, 230, 231, 232, 233, 234, 235, 238, 242, 254, 259, 262, 277, 279, 284, 287, 322, 365, 366], "evalu": [1, 21, 41, 68, 72, 78, 90, 96, 100, 118, 126, 132, 135, 137, 183, 237, 238, 240, 241, 242, 243, 244, 245, 255, 275, 287, 295, 298, 338], "output": [1, 3, 16, 31, 32, 33, 35, 51, 74, 78, 96, 100, 137, 139, 183, 234, 238, 240, 242, 243, 248, 298, 311, 337, 347], "decent": 1, "high": [1, 8, 9, 11, 16, 18, 34, 96, 100, 168, 170, 181, 185, 213, 219, 272, 298, 353, 358, 359, 360, 361, 362], "Of": [1, 10, 15, 16, 26, 28, 41], "cours": [1, 10, 15, 16, 26, 28, 356], "particularli": [1, 79], "help": [1, 8, 16, 31, 161, 162, 252, 284, 338, 339, 351, 363, 364, 366], "solv": [1, 22, 24, 25, 34, 161, 162, 191, 193, 194, 195, 196, 197, 199, 251, 253, 257, 258, 260, 261, 267, 268, 272, 274, 276, 337, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 366], "practic": [1, 15, 18, 28, 30, 34, 71, 256, 346, 347, 355, 356], "come": [1, 4, 10, 11, 15, 16, 17, 18, 43, 79, 183, 195, 196, 199, 206, 217, 253, 258, 259, 260, 273, 276, 298, 299, 356, 366], "level": [1, 8, 9, 11, 16, 18, 75, 94, 95, 96, 99, 100, 137, 138, 142, 182, 213, 219, 237, 240, 287, 298, 338, 355, 364, 365, 366, 367], "construct": [1, 3, 8, 14, 16, 17, 19, 26, 27, 41, 121, 134, 141, 161, 162, 165, 171, 174, 175, 176, 178, 181, 205, 207, 217, 237, 240, 245, 273, 279, 289, 316, 320, 321, 323, 324, 325, 326, 338, 355, 363, 365], "If": [1, 4, 5, 17, 24, 28, 31, 33, 35, 39, 40, 41, 48, 53, 56, 57, 60, 61, 62, 64, 77, 96, 100, 110, 118, 132, 134, 135, 137, 139, 142, 162, 167, 180, 183, 184, 192, 205, 207, 208, 217, 218, 226, 235, 237, 243, 247, 248, 254, 256, 262, 268, 278, 279, 283, 284, 288, 289, 291, 292, 293, 297, 298, 302, 303, 324, 325, 329, 335, 338, 339, 350, 351, 352, 353, 354, 355, 364], "curiou": 1, "document": [1, 5, 7, 9, 36, 37, 41, 46, 68, 90, 182, 205, 213, 240, 241, 245, 251, 256, 291, 293, 297, 320, 338, 341, 364, 365], "complic": [1, 16, 237, 240], "data": [1, 31, 33, 35, 40, 41, 43, 51, 54, 69, 75, 77, 88, 90, 91, 94, 95, 96, 100, 137, 138, 142, 183, 217, 249, 284, 338, 357], "structur": [1, 12, 17, 31, 32, 69, 75, 78, 85, 86, 88, 90, 96, 132, 139, 161, 166, 167, 181, 183, 184, 207, 217, 235, 237, 254, 262, 280, 284, 287, 297, 298, 303, 357, 364, 365], "ani": [2, 5, 9, 10, 13, 14, 16, 17, 23, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 53, 54, 60, 61, 66, 77, 78, 96, 100, 102, 111, 137, 142, 143, 144, 192, 198, 206, 220, 221, 223, 235, 237, 247, 248, 285, 287, 291, 317, 339, 347, 356, 365, 367, 368], "must": [2, 5, 9, 31, 40, 41, 97, 100, 143, 163, 165, 166, 168, 173, 174, 281, 283, 285, 286, 292, 303, 330, 332, 338, 341, 367], "lift": [2, 210], "addit": [2, 3, 5, 8, 10, 13, 14, 15, 16, 20, 28, 32, 35, 41, 78, 79, 96, 100, 134, 162, 198, 206, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 237, 238, 268, 287, 338, 354, 361, 364, 365], "shot": [2, 28, 29, 30, 33, 35, 43, 96, 100, 138, 139, 162, 298, 341, 366], "what": [2, 14, 33, 35, 40, 42, 71, 206, 235, 244, 303], "should": [2, 5, 16, 22, 31, 33, 35, 39, 40, 41, 48, 53, 56, 62, 63, 78, 96, 100, 118, 134, 135, 139, 166, 167, 183, 184, 186, 207, 212, 213, 218, 219, 226, 235, 236, 237, 240, 242, 246, 247, 249, 253, 254, 259, 260, 273, 276, 279, 280, 281, 284, 287, 292, 299, 303, 338, 346, 364, 365, 367], "measur": [2, 3, 5, 9, 12, 17, 18, 28, 29, 30, 32, 33, 35, 39, 42, 43, 48, 51, 53, 56, 62, 64, 65, 68, 71, 73, 74, 78, 79, 87, 88, 96, 97, 100, 137, 138, 139, 162, 201, 203, 206, 222, 237, 244, 286, 292, 295, 297, 337, 338, 341, 345, 356, 365, 366], "observ": [2, 3, 8, 9, 11, 18, 20, 21, 25, 28, 31, 32, 33, 35, 39, 41, 42, 43, 64, 89, 96, 100, 139, 141, 162, 202, 204, 244, 252, 254, 255, 256, 259, 262, 264, 273, 275, 277, 279, 281, 285, 286, 294, 295, 298, 299, 337, 338, 341, 364, 365, 366, 368], "call": [2, 3, 9, 10, 12, 15, 16, 17, 19, 22, 23, 28, 35, 36, 38, 39, 41, 51, 96, 97, 99, 100, 121, 132, 135, 167, 174, 186, 192, 198, 206, 207, 210, 217, 220, 221, 222, 223, 224, 237, 247, 248, 253, 257, 258, 259, 260, 261, 272, 273, 276, 280, 284, 287, 300, 305, 312, 327, 329, 330, 338, 346, 347, 357, 364, 366, 367, 369], "select": [2, 100, 161, 181, 185, 279, 338, 363, 365, 366], "take": [2, 4, 12, 16, 21, 29, 31, 33, 34, 35, 39, 40, 41, 43, 79, 118, 123, 124, 130, 140, 183, 200, 207, 217, 244, 247, 248, 281, 287, 298, 335, 355, 356, 365], "argument": [2, 10, 12, 17, 19, 21, 31, 33, 35, 39, 40, 60, 61, 80, 95, 96, 100, 102, 111, 118, 123, 124, 130, 132, 140, 142, 144, 183, 198, 207, 208, 214, 217, 220, 221, 222, 223, 224, 235, 237, 240, 244, 245, 247, 248, 252, 254, 281, 284, 286, 287, 288, 291, 293, 294, 338, 357], "4999999999999999": [2, 16, 29, 40, 247], "context": [2, 16, 23, 296, 301, 305, 365], "clinalg": [2, 6, 33, 99, 296, 302, 338], "extend": [2, 5, 7, 27, 95, 96, 207, 248, 338], "plugin": [2, 3, 27, 28, 30, 31, 32, 35, 41, 42, 43, 44, 45, 57, 60, 61, 75, 79, 81, 90, 96, 99, 100, 114, 162, 191, 192, 194, 195, 196, 197, 199, 254, 298, 303, 304, 338, 355, 357, 358, 359, 360, 361, 362, 363, 365, 368], "capabl": [2, 7, 18, 27, 35, 36, 39, 40, 42, 101, 341, 347], "instanc": [2, 9, 10, 12, 14, 16, 17, 23, 24, 25, 28, 31, 33, 35, 36, 39, 40, 42, 57, 69, 77, 78, 94, 95, 96, 99, 100, 118, 132, 137, 138, 145, 206, 207, 218, 226, 237, 240, 241, 245, 252, 253, 257, 258, 259, 260, 261, 272, 273, 276, 281, 297, 305, 327, 329, 338, 341, 345, 347, 355, 356, 357], "compil": [2, 5, 6, 9, 11, 12, 13, 35, 39, 41, 42, 51, 52, 53, 54, 57, 90, 96, 100, 218, 278, 279, 280, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 303, 304, 338, 340, 368], "befor": [2, 4, 5, 15, 31, 40, 43, 46, 173, 210, 218, 237, 280, 338, 356], "won": [2, 48, 53, 56, 62, 237], "limit": [2, 5, 18, 28, 36, 37, 39], "topologi": [2, 35, 42, 90, 99, 143, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 289], "scipyminimizeplugin": [2, 3, 31, 43, 99, 254, 277, 281, 338, 357, 358, 359, 360, 361, 362, 365, 366], "tri": [2, 31, 34], "minim": [2, 3, 11, 22, 24, 31, 41, 43, 256, 277, 281, 288, 291, 293, 303, 337, 346, 350, 355, 358, 359, 365, 366], "averag": [2, 28, 30, 33, 35, 41, 43, 305, 310, 320, 347], "valu": [2, 3, 5, 9, 10, 17, 23, 28, 30, 32, 33, 34, 35, 39, 41, 43, 57, 66, 68, 71, 73, 74, 78, 89, 95, 96, 98, 100, 116, 118, 119, 120, 122, 132, 133, 135, 137, 139, 140, 142, 144, 162, 183, 206, 207, 208, 222, 224, 226, 228, 230, 232, 235, 237, 240, 241, 242, 243, 244, 245, 247, 255, 256, 259, 263, 266, 268, 273, 275, 279, 283, 285, 287, 291, 292, 293, 295, 297, 298, 299, 300, 307, 348, 356, 365, 366], "rx": [2, 10, 17, 31, 42, 65, 96, 207, 244, 247, 281, 292, 338, 365, 366], "core": [2, 3, 8, 11, 12, 19, 20, 21, 26, 27, 30, 31, 35, 40, 41, 42, 43, 44, 45, 78, 161, 162, 163, 167, 181, 182, 185, 186, 188, 189, 190, 192, 201, 207, 218, 222, 244, 252, 264, 265, 266, 289, 338, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 364, 366], "theta": [2, 3, 10, 11, 17, 43, 96, 100, 162, 164, 207, 244, 247, 283, 292, 338, 365, 366], "angl": [2, 31, 39, 41, 51, 96, 118, 123, 130, 178, 244, 247, 281, 285, 292, 355, 366], "parameter_map": [2, 31, 41, 43, 100, 137, 162, 281], "9999999999999818": 2, "3": [2, 3, 4, 5, 7, 11, 15, 16, 17, 20, 24, 25, 26, 31, 33, 35, 40, 41, 42, 43, 61, 80, 96, 97, 118, 120, 122, 125, 126, 127, 129, 133, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 166, 167, 186, 188, 189, 190, 206, 208, 217, 237, 245, 247, 248, 251, 252, 253, 257, 258, 259, 260, 276, 279, 289, 291, 297, 299, 307, 321, 331, 340, 342, 346, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 369], "1415928449811417": 2, "9999999999766033": 2, "141599494155937": 2, "believ": 3, "well": [3, 5, 17, 34, 41, 90, 200, 259, 273, 338, 347, 355, 364, 365, 367, 368], "suit": [3, 161], "noisi": [3, 5, 36, 162, 200, 295, 366], "intermedi": [3, 9, 16, 31, 32, 74, 87, 88, 137, 138, 206, 338], "scale": 3, "nisq": [3, 368], "thei": [3, 5, 7, 8, 16, 23, 25, 26, 41, 68, 69, 75, 90, 96, 111, 200, 206, 207, 212, 237, 246, 248, 251, 260, 276, 279, 284, 303, 304, 305, 338, 345, 355, 357, 364, 365], "necessarili": [3, 5, 16], "long": [3, 34, 96, 237, 291, 338], "nevertheless": [3, 39, 365, 367], "prepar": [3, 5, 28, 161, 162, 164, 177, 183, 200, 201, 206, 216, 217, 236, 249, 250, 262, 263, 264, 265, 266, 338, 356, 363, 366], "ansatz": [3, 31, 43, 162, 172, 174, 178, 251, 254, 277, 279, 285, 292, 295, 338, 355, 363, 366], "below": [3, 5, 7, 16, 28, 29, 32, 42, 78, 96, 173, 217, 237, 242, 247, 286, 338, 347, 358, 359, 360, 361, 362], "illustr": [3, 29, 43, 182, 281, 365], "hamiltonian": [3, 8, 18, 22, 24, 33, 90, 134, 135, 139, 162, 165, 180, 181, 182, 183, 188, 189, 190, 195, 196, 199, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 272, 273, 274, 276, 294, 299, 338, 355, 356, 363, 365, 366, 367], "here": [3, 4, 10, 12, 14, 15, 16, 17, 19, 25, 29, 30, 68, 78, 79, 161, 173, 181, 217, 218, 240, 244, 248, 289, 298, 305, 338, 346, 347, 357, 358, 359, 360, 361, 362, 365, 366], "antiferromagnet": [3, 34], "heisenberg": 3, "whose": [3, 16, 78, 238, 244, 255, 279, 320, 338, 355, 356, 365], "ground": [3, 18, 23, 31, 162, 184, 256, 262, 355, 356, 365, 366], "energi": [3, 11, 18, 22, 23, 31, 34, 41, 43, 100, 137, 162, 170, 171, 181, 182, 183, 184, 244, 253, 256, 257, 258, 259, 260, 261, 272, 273, 276, 281, 299, 338, 346, 355, 365, 366], "want": [3, 4, 23, 28, 39, 41, 135, 137, 162, 207, 218, 244, 247, 253, 254, 272, 292, 354, 361, 366], "approxim": [3, 25, 32, 36, 138, 162, 180, 183, 257, 258, 260, 261, 262, 276, 277, 293, 327, 337, 346, 349, 362, 366], "theta_i": [3, 283], "stack": [3, 10, 30, 31, 32, 39, 40, 41, 43, 96, 99, 100, 162, 191, 192, 193, 194, 195, 196, 197, 199, 248, 277, 280, 281, 284, 285, 291, 295, 338, 357, 365, 366, 368], "go": [3, 39, 183, 295, 358, 359, 360, 361, 362], "ob": [3, 11, 26, 28, 30, 31, 43, 96, 139, 244, 256, 299, 366], "ry": [3, 10, 11, 17, 41, 43, 65, 96, 162, 174, 207, 217, 286, 292, 365, 366], "arrai": [3, 10, 16, 40, 68, 69, 73, 100, 116, 117, 118, 134, 135, 137, 139, 163, 165, 166, 170, 173, 181, 201, 203, 206, 207, 212, 217, 237, 240, 241, 244, 246, 247, 253, 256, 259, 262, 272, 273, 291, 293, 297, 299, 322, 327, 329, 333, 334, 335, 336, 364, 365], "length": [3, 14, 31, 40, 70, 96, 100, 139, 156, 212, 237, 241, 245, 246, 248, 256, 262], "ans\u00e4tz": [3, 11, 252, 256, 259, 273, 355, 363], "sigma_z": [3, 19, 26, 31, 41, 244, 255, 262, 275, 321], "sigma_x": [3, 11, 19, 26, 43, 262, 321, 355, 356], "sigma_i": [3, 26, 262, 321], "scipi": [3, 39, 43, 134, 277, 291, 337], "re": [3, 5, 16, 35, 39, 40, 77, 96, 283, 365], "x0": [3, 25, 162, 283, 288, 291, 292, 293, 365, 366], "8": [3, 4, 5, 16, 43, 126, 133, 145, 147, 150, 151, 152, 153, 154, 158, 159, 160, 161, 166, 178, 179, 217, 219, 258, 261, 269, 338, 350, 352, 358, 359, 360, 365], "equival": [3, 5, 14, 26, 29, 40, 51, 73, 96, 100, 355, 366], "deleg": [3, 5, 284], "equip": [3, 34], "minimum": [3, 22, 23, 34, 258, 259, 273, 292, 356], "vqe": [3, 39, 43, 162, 279, 285, 337, 338, 363, 366, 368], "messag": [3, 35, 40, 79, 81, 82, 92, 93, 237], "termin": [3, 5, 90, 96, 97, 277], "successfulli": 3, "success": [3, 63, 68, 293], "true": [3, 9, 16, 35, 40, 48, 51, 53, 56, 57, 62, 64, 68, 72, 77, 78, 91, 92, 93, 96, 97, 132, 134, 137, 138, 139, 141, 162, 167, 178, 184, 218, 237, 238, 240, 242, 243, 244, 245, 247, 249, 252, 254, 262, 268, 269, 278, 280, 281, 282, 283, 284, 297, 300, 310, 312, 317, 318, 329, 334, 335, 336, 338, 356, 366], "statu": [3, 63, 338], "fun": [3, 111, 247], "3099330343247272": 3, "810e": 3, "800e": 3, "nit": 3, "jac": 3, "000e": 3, "hess_inv": 3, "nfev": 3, "6": [3, 4, 5, 16, 23, 26, 43, 119, 123, 133, 145, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 166, 253, 257, 258, 260, 261, 269, 272, 276, 311, 335, 340, 342, 347, 350, 352, 354, 357, 358, 359, 360, 361, 364, 365, 369], "njev": 3, "9999999999999982": 3, "No": [3, 9, 15, 61, 70, 244, 338, 340], "gpu": [3, 9, 86, 244], "tpu": [3, 9, 244], "fall": [3, 9, 244], "back": [3, 9, 28, 39, 41, 244, 284, 366], "cpu": [3, 4, 9, 244, 338], "tf_cpp_min_log_level": [3, 9, 244], "rerun": [3, 9, 244], "info": [3, 9, 71, 184, 244, 285, 365], "term": [3, 4, 5, 11, 16, 19, 20, 21, 23, 24, 25, 30, 32, 35, 43, 90, 134, 161, 162, 167, 173, 175, 183, 186, 188, 189, 190, 195, 196, 199, 245, 252, 253, 254, 258, 260, 276, 286, 338, 364, 365, 366], "prog": [3, 9, 11, 14, 15, 16, 31, 77, 79, 96, 97, 162, 209, 217, 218, 219, 237, 248, 281, 289, 300, 338, 365, 366], "reg": [3, 162, 365, 366], "new_var": [3, 11, 25, 31, 90, 96, 162, 237, 256, 281, 365, 366], "float": [3, 10, 11, 17, 31, 73, 88, 91, 96, 100, 111, 134, 135, 137, 138, 139, 141, 144, 162, 163, 166, 167, 168, 170, 171, 173, 175, 180, 181, 182, 183, 184, 185, 186, 201, 202, 203, 205, 207, 237, 247, 256, 259, 262, 264, 273, 279, 281, 283, 287, 288, 292, 293, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 327, 329, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 365, 366], "theta_": [3, 162, 170, 366], "circ": [3, 9, 12, 17, 31, 48, 77, 96, 97, 162, 248, 259, 281, 344, 345, 365, 366], "handl": [3, 16, 34, 161, 162, 206, 251, 254, 289, 300, 355, 364, 368], "optimizer_scipi": 3, "cobyla": [3, 43, 291, 357, 358, 359, 360, 361, 362, 365, 366], "tol": [3, 43, 205, 283, 291, 306, 316, 317, 318, 319, 357, 358, 359, 360, 361, 362, 366], "1e": [3, 31, 43, 91, 162, 205, 237, 279, 283, 291, 293, 306, 311, 316, 317, 318, 319, 357, 358, 359, 360, 361, 362, 366], "option": [3, 18, 28, 31, 33, 35, 40, 43, 48, 51, 53, 56, 57, 61, 62, 64, 65, 70, 77, 78, 81, 82, 85, 86, 88, 91, 96, 97, 100, 102, 103, 111, 114, 121, 132, 134, 135, 137, 138, 139, 140, 142, 162, 166, 167, 168, 170, 172, 173, 174, 176, 178, 180, 181, 182, 183, 184, 185, 186, 192, 195, 196, 198, 199, 201, 202, 203, 204, 205, 208, 217, 218, 221, 222, 237, 238, 240, 241, 242, 243, 247, 248, 249, 252, 253, 254, 256, 258, 259, 260, 262, 268, 269, 273, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 303, 304, 310, 311, 312, 313, 316, 320, 321, 329, 334, 335, 336, 357, 358, 359, 360, 361, 362, 364, 366], "maxit": [3, 43, 283, 291, 293, 357, 358, 359, 360, 361, 362, 366], "200": [3, 283, 357, 358, 359, 360, 361, 362], "exact": [3, 28, 36, 78, 162, 262, 365], "g": [3, 5, 7, 9, 10, 13, 17, 23, 25, 33, 35, 39, 51, 64, 77, 86, 96, 135, 162, 201, 202, 203, 220, 221, 223, 225, 248, 251, 254, 259, 273, 283, 284, 287, 291, 292, 295, 338, 366, 368], "meta_data": [3, 28, 32, 35, 40, 41, 43, 57, 61, 64, 91, 94, 95, 100, 137, 162, 284, 287, 297, 298, 303, 338, 365], "optimizer_data": [3, 287], "9999999999985336": 3, "571e": 3, "142e": 3, "66": 3, "maxcv": 3, "For": [3, 4, 5, 9, 11, 12, 16, 17, 18, 23, 28, 31, 32, 33, 35, 36, 37, 39, 40, 75, 96, 118, 132, 135, 144, 145, 182, 183, 207, 218, 237, 240, 247, 248, 253, 258, 259, 260, 267, 268, 269, 273, 276, 281, 283, 297, 321, 329, 338, 345, 347, 356, 357, 364, 365, 366], "explain": [3, 7, 31, 33, 34, 39, 338, 364, 365, 367], "pleas": [4, 5, 9, 32, 35, 36, 37, 41, 46, 60, 61, 77, 96, 297, 337, 338, 339, 340, 341, 363, 366], "read": [4, 5, 43, 100, 183, 200, 305], "ato": [4, 5, 9, 10, 337, 338], "end": [4, 5, 11, 13, 17, 21, 23, 35, 96, 183, 237, 262, 285, 298, 303, 314, 322, 327, 329, 338], "licenc": 4, "agreement": [4, 5], "eula": [4, 5], "carefulli": [4, 5], "permit": [4, 5], "pursuant": 4, "condit": [4, 5, 12, 17, 192, 237, 242, 245, 347], "between": [4, 18, 23, 25, 35, 40, 42, 78, 118, 122, 142, 173, 198, 205, 221, 223, 242, 251, 259, 262, 274, 279, 281, 293, 295, 299, 305, 310, 312, 313, 314, 315, 318, 321, 338, 355, 366], "individu": [4, 5, 32, 226, 286, 350, 359], "legal": [4, 5], "entiti": [4, 5], "bull": [4, 5], "sa": [4, 5, 23, 25, 34, 253, 257, 258, 259, 260, 261, 272, 273, 276, 347, 350, 351, 352, 353, 354], "By": [4, 5, 10, 28, 96, 97, 208, 223, 237, 242, 247, 288, 340, 341, 366], "download": [4, 5, 337], "otherwis": [4, 5, 40, 57, 64, 96, 100, 142], "render": 4, "your": [4, 5, 6, 9, 10, 12, 14, 33, 36, 37, 39, 41, 77, 96, 97, 118, 142, 161, 254, 278, 284, 287, 338, 339, 341, 344, 363, 364], "agre": [4, 5], "bound": [4, 5, 96, 126, 183, 237, 311], "licens": 4, "copi": [4, 5, 16, 96, 136, 166, 167, 186, 245], "promptli": 4, "delet": [4, 367], "pip": 4, "conda": [4, 6, 338], "check": [4, 10, 31, 35, 40, 83, 92, 93, 134, 141, 292, 305, 318, 335, 338], "displai": [4, 5, 9, 31, 40, 51, 90, 96, 132, 136, 137, 138, 235, 237, 244, 247, 256, 267, 269, 270, 271, 277, 297, 337, 338, 357, 358, 359, 360, 361, 362, 365], "bellow": 4, "o": [4, 23, 24, 28, 30, 90, 162, 163, 168, 170, 181, 262, 295, 342, 349, 362, 366], "64": [4, 160], "9": [4, 5, 10, 15, 16, 17, 43, 96, 145, 147, 150, 151, 152, 153, 154, 158, 160, 237, 245, 252, 258, 281, 321, 347, 350, 352, 353, 357, 358, 359], "10": [4, 10, 12, 14, 15, 16, 19, 23, 28, 43, 79, 80, 91, 102, 145, 146, 147, 150, 151, 152, 153, 154, 158, 160, 162, 182, 192, 210, 219, 225, 229, 237, 238, 243, 245, 252, 253, 258, 262, 278, 281, 283, 288, 291, 292, 293, 298, 300, 303, 316, 338, 347, 350, 352, 353, 356, 358, 359, 361], "cpython": [4, 6], "linux": [4, 338], "x86_64": 4, "window": [4, 183, 338], "maco": [4, 338], "arm64": 4, "org": [4, 5, 6, 23, 219, 225, 229, 293, 310, 338], "brew": [4, 6, 338], "type": [4, 5, 9, 13, 17, 27, 28, 29, 30, 31, 32, 33, 35, 40, 41, 42, 48, 53, 56, 57, 61, 62, 64, 68, 69, 70, 71, 73, 74, 77, 78, 79, 81, 82, 85, 87, 89, 90, 91, 96, 99, 100, 102, 110, 111, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 215, 216, 217, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249, 250, 254, 255, 256, 257, 258, 259, 260, 261, 262, 273, 275, 278, 279, 281, 283, 284, 287, 288, 289, 291, 292, 293, 294, 297, 298, 299, 303, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 333, 334, 335, 336, 337, 338, 346, 357, 358, 359, 360, 361, 362, 364], "command": [4, 12, 17, 53, 337, 345], "prompt": 4, "c": [4, 5, 17, 51, 73, 77, 94, 96, 100, 163, 166, 171, 173, 175, 181, 187, 198, 209, 222, 227, 231, 232, 233, 253, 280, 282, 292, 293, 295, 296, 338, 345, 348, 355, 356, 364, 366], "forg": 4, "dill": [4, 338], "5": [4, 5, 11, 16, 19, 20, 24, 25, 31, 42, 43, 80, 96, 97, 122, 126, 135, 145, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 166, 237, 252, 256, 258, 260, 262, 276, 285, 293, 295, 327, 329, 347, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 369], "abov": [4, 5, 14, 23, 24, 25, 28, 35, 217, 235, 292, 298, 338, 346, 347], "work": [4, 5, 36, 37, 41, 43, 73, 137, 183, 201, 203, 222, 295, 310, 338, 345, 366, 369], "under": [4, 5, 8, 12, 91, 96, 100, 139, 269, 279, 287, 337, 338, 366], "environ": [4, 6, 60, 61, 96, 118, 200, 202, 203, 204, 305, 337, 342], "resolv": 4, "infinit": [4, 28, 29, 30, 138, 139, 162], "complet": [4, 5, 36, 41, 181, 184, 185, 305, 311, 316, 347, 351, 360], "like": [4, 5, 6, 14, 16, 18, 23, 35, 40, 41, 78, 96, 138, 139, 183, 251, 338, 347], "fail": [4, 5, 14, 16, 118, 247, 289, 338], "becaus": [4, 24, 28, 29], "doe": [4, 5, 23, 30, 31, 34, 35, 39, 40, 41, 71, 96, 192, 221, 222, 241, 245, 247, 259, 278, 281, 338, 347], "consequ": [4, 15, 23, 96, 100, 248, 255], "been": [4, 5, 6, 7, 23, 24, 28, 31, 34, 46, 60, 71, 73, 135, 248, 259, 273, 281, 337, 338, 345, 347, 366, 367], "bz2": 4, "file": [4, 5, 6, 12, 23, 28, 32, 51, 60, 63, 79, 81, 82, 94, 95, 96, 99, 100, 137, 139, 142, 237, 259, 300, 335, 337, 338, 345, 357, 364], "instead": [4, 10, 19, 28, 96, 206, 208, 219, 287, 329, 338, 357, 364, 367], "expect": [4, 29, 30, 31, 39, 40, 132, 139, 183, 222, 244, 279, 281, 295, 365, 366], "manual": [4, 9, 28, 57, 77, 365], "pypi": [4, 6, 338], "thrift": [4, 79, 94, 95, 96, 99, 100, 121, 137, 138, 141, 142, 144, 259, 290, 304], "16": [4, 124, 147, 150, 153, 154, 160, 352, 358, 359], "make": [4, 5, 23, 24, 33, 39, 135, 183, 207, 222, 254, 280, 297, 339, 369], "sure": [4, 262], "clean": [4, 16, 35], "avoid": [4, 96], "conflict": [4, 5], "supplementari": 4, "common": [4, 5, 15, 113, 114], "platform": 4, "bitstr": [4, 28, 29, 31, 139, 140, 256, 262, 268, 281], "qutip": 4, "cvxpy": 4, "anytre": 4, "pydo": 4, "svgwrite": 4, "jax": [4, 338], "pyopenssl": 4, "wand": 4, "curs": 4, "coupl": [4, 23, 171, 200, 258, 259, 261, 272, 299, 305, 338, 365, 369], "other": [4, 5, 16, 23, 31, 33, 39, 90, 96, 125, 134, 180, 183, 184, 209, 213, 237, 238, 242, 243, 245, 262, 292, 295, 298, 321, 340, 345, 363, 366], "jupyt": [4, 90, 136, 137, 337, 338, 363, 364, 365, 366], "interact": [4, 23, 35, 167, 184, 251, 297, 364, 365], "tutori": [4, 366], "notebook": [4, 34, 43, 90, 96, 97, 136, 137, 337, 338, 347, 350, 351, 352, 353, 354, 363, 364, 365, 366], "configur": [4, 5, 23, 28, 34, 66, 96, 115, 116, 117, 139, 184, 284, 287, 299, 350, 351, 352, 353, 354], "featur": [4, 5, 8, 9, 13, 16, 27, 32, 39, 43, 366], "design": [4, 5, 7, 8, 12, 13, 14, 23, 27, 31, 33, 39, 40, 46, 77, 96, 102, 121, 191, 206, 209, 238, 240, 241, 242, 243, 245, 248, 281, 338, 341, 355, 357, 365, 368], "imagemagick": 4, "ghostscript": 4, "pdf": [4, 136, 338], "format": [4, 5, 12, 16, 28, 32, 53, 68, 69, 78, 94, 95, 96, 98, 99, 132, 136, 137, 140, 142, 144, 184, 237, 252, 262, 317, 318, 340, 342, 366], "alreadi": [4, 35, 183, 217, 236, 237, 247, 249, 303, 305, 356, 365, 366], "magic": 4, "qatdisplai": 4, "insid": [4, 9, 10, 13, 14, 15, 16, 19, 41, 79, 90, 94, 95, 96, 97, 98, 99, 102, 121, 136, 137, 142, 183, 192, 195, 196, 199, 212, 220, 221, 222, 223, 224, 237, 246, 247, 248, 253, 254, 258, 260, 276, 277, 278, 279, 283, 284, 286, 287, 288, 289, 291, 292, 293, 298, 303, 304, 337], "m": [4, 65, 173, 247, 253, 331, 348], "overview": [4, 12, 337], "ipynb": [4, 337], "tabl": [4, 51, 337, 338], "content": [4, 5, 16, 77, 96, 97, 218, 226, 228, 230, 232, 233, 337, 338], "deprec": [4, 77, 336, 342, 363], "version": [4, 5, 6, 17, 77, 121, 144, 161, 172, 182, 267, 268, 269, 270, 271, 338, 345, 363, 365, 367], "7": [4, 5, 16, 28, 43, 96, 141, 145, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 166, 258, 350, 352, 358, 359, 360, 364, 365, 366], "enabl": [4, 18, 184], "access": [4, 9, 28, 31, 33, 35, 39, 40, 68, 78, 96, 118, 135, 145, 198, 206, 212, 217, 246, 259, 270, 271, 273, 290, 297, 364, 365, 366], "qiskit": [4, 45, 46, 337, 338, 340], "projectq": [4, 45, 46, 337, 338, 340], "pyquil": [4, 45, 46, 337, 338, 340], "cirq": [4, 45, 46, 337, 338, 340, 345], "someon": 4, "who": [4, 5], "mai": [4, 5, 6, 18, 28, 31, 39, 77, 125, 138, 139, 161, 175, 178, 183, 252, 254, 285, 288, 338, 340, 347, 356, 364], "desir": [4, 25, 32, 183, 340, 346, 351], "cherri": 4, "pick": [4, 262, 288, 302, 355, 366], "interop": [4, 44, 45, 337, 338, 341, 342, 343, 344, 345], "qiskit_bind": 4, "projectq_bind": 4, "cirq_bind": 4, "pyquil_bind": 4, "could": [4, 9, 14, 22, 31, 34, 35, 42, 121, 192, 193, 253, 257, 258, 259, 260, 261, 267, 269, 270, 271, 272, 273, 276, 338, 347, 364], "softwar": [5, 33, 338, 368], "FOR": 5, "hereinaft": 5, "refer": [5, 23, 32, 36, 37, 77, 79, 96, 161, 173, 175, 177, 178, 210, 247, 248, 253, 257, 258, 260, 261, 272, 276, 293, 297, 310, 312, 313, 337, 338, 340, 341, 347, 363, 365, 366, 368], "recit": 5, "bind": [5, 28, 41, 96, 100, 235, 254, 287, 288, 291, 293], "compani": 5, "physic": [5, 18, 22, 23, 33, 36, 85, 261, 335, 364], "person": 5, "oblig": 5, "present": [5, 18, 22, 33, 34, 71, 96, 134, 206, 218, 279, 281, 283, 288, 289, 291, 292, 293, 346, 347, 365, 369], "identifi": [5, 51, 85, 170, 275, 294, 305], "footnot": 5, "product": [5, 15, 26, 100, 134, 180, 205, 248, 262, 292, 305, 310, 321, 326, 331, 335, 348, 356, 366], "associ": [5, 35, 41, 100, 173, 183, 256, 285, 365, 366], "media": 5, "materi": [5, 18], "onlin": 5, "electron": [5, 161, 166, 167, 168, 169, 170, 181, 182, 183, 184, 185, 365], "collect": [5, 8, 11, 17, 19, 43, 90, 100, 109, 110, 218, 237, 254, 283, 284, 287, 288, 291, 292, 293, 338, 355, 365], "primari": [5, 213, 338], "allow": [5, 8, 10, 11, 14, 16, 17, 20, 24, 27, 28, 32, 34, 39, 43, 79, 125, 132, 206, 217, 237, 244, 251, 253, 254, 257, 258, 259, 260, 261, 263, 269, 272, 273, 276, 277, 284, 304, 305, 346, 355, 364, 365, 366], "student": 5, "research": 5, "develop": [5, 297, 368], "test": [5, 34, 100, 316, 317, 319, 338, 345, 347], "infrastructur": 5, "learn": [5, 338, 366], "machin": [5, 23, 338, 347, 364], "qlm": [5, 41, 48, 49, 51, 53, 56, 57, 58, 60, 62, 65, 66, 99, 252, 253, 254, 257, 258, 259, 260, 261, 272, 273, 276, 284, 287, 338, 341, 344], "benefit": [5, 289, 338], "combin": [5, 16, 25, 28, 178, 245, 251], "accordingli": [5, 35, 182], "runtim": [5, 59, 338, 341], "apach": 5, "v2": 5, "each": [5, 8, 16, 27, 28, 29, 30, 31, 34, 40, 73, 80, 91, 96, 100, 102, 134, 135, 142, 145, 171, 175, 183, 192, 201, 202, 203, 204, 205, 237, 251, 255, 256, 257, 259, 275, 278, 282, 285, 286, 292, 295, 298, 299, 303, 327, 329, 347, 350, 359, 366], "categori": [5, 36, 338], "root": [5, 118, 131, 222], "folder": 5, "compli": 5, "thereof": 5, "out": [5, 17, 28, 29, 39, 40, 43, 70, 96, 121, 139, 181, 234, 259, 285, 331, 351, 360], "shall": [5, 35], "THE": 5, "AND": [5, 16, 17, 78, 242, 256], "definit": [5, 14, 22, 23, 33, 51, 77, 96, 143, 181, 205, 218, 237, 254, 310, 321, 337, 338, 364], "equal": [5, 10, 28, 39, 40, 201, 223, 288, 305, 306, 338, 350, 353, 359, 364], "b": [5, 16, 96, 118, 121, 144, 168, 170, 195, 196, 199, 221, 224, 226, 228, 230, 232, 233, 253, 255, 258, 260, 276, 295, 306, 348, 350, 351, 354, 366, 369], "mean": [5, 24, 28, 29, 35, 64, 79, 91, 96, 138, 139, 206, 226, 237, 256, 341, 365, 366], "accord": [5, 96, 161, 181, 185, 206, 278, 283, 356], "natur": [5, 28, 61, 118, 124, 128, 161, 168, 170, 177, 181, 182, 185, 277, 283, 337, 338, 363, 365, 366], "wish": [5, 8, 226, 253, 257, 258, 260, 261, 272, 276], "variou": [5, 8, 9, 12, 29, 78, 96, 134, 145, 161, 184, 206, 207, 209, 214, 229, 237, 347, 365], "d": [5, 96, 165, 173, 181, 258, 310, 313, 315, 321, 329, 334, 336, 355], "OF": 5, "grant": 5, "accept": [5, 25, 28, 34, 36, 37, 41, 95, 102, 168, 192, 237, 278, 298, 303, 364], "specif": [5, 18, 23, 31, 32, 161, 201, 203, 226, 282, 295, 298, 329, 338, 355], "both": [5, 6, 16, 42, 64, 110, 135, 273, 276, 341, 353, 355, 357, 363, 364, 366], "author": [5, 96, 139], "repres": [5, 14, 16, 18, 19, 22, 27, 77, 78, 88, 90, 110, 117, 118, 121, 132, 134, 135, 139, 140, 181, 206, 217, 248, 251, 255, 259, 267, 268, 273, 275, 298, 299, 305, 346, 347, 366], "acknowledg": 5, "refrain": 5, "violat": 5, "wai": [5, 6, 8, 10, 12, 18, 25, 39, 40, 41, 43, 77, 78, 90, 96, 134, 207, 234, 297, 338, 347, 365, 366], "whatsoev": 5, "thereund": 5, "confidenti": 5, "subject": [5, 253], "provis": 5, "nondisclosur": 5, "parti": [5, 46], "receiv": [5, 34, 41, 78, 79, 96, 284, 292], "reproduc": [5, 339], "disclos": 5, "purpos": [5, 17, 34, 134, 140, 182, 218, 237, 262, 300, 366], "exercis": 5, "right": [5, 10, 12, 23, 24, 31, 91, 138, 161, 165, 169, 180, 181, 185, 201, 203, 208, 209, 216, 234, 243, 245, 253, 258, 260, 262, 276, 283, 295, 298, 310, 314, 322, 327, 329, 336, 347, 350, 351, 354], "extent": 5, "necessari": [5, 8, 28, 200, 204, 235], "restrict": [5, 23, 161, 163, 181, 262, 356, 365], "disclosur": 5, "employe": 5, "consult": [5, 364], "advisor": 5, "know": [5, 71, 183, 235, 247, 354, 361, 365], "third": [5, 46, 232], "without": [5, 9, 14, 16, 18, 71, 78, 237, 247, 254, 277, 282, 285, 314, 337, 366], "prior": [5, 242, 277], "written": [5, 24, 26, 36, 37, 38, 90, 298, 309, 338, 364], "approv": 5, "forego": 5, "satisfi": [5, 12, 251, 255], "through": [5, 17, 27, 32, 39, 184, 212, 214, 217, 235, 246, 248, 253, 257, 258, 259, 260, 261, 270, 271, 272, 276, 279, 283, 288, 289, 291, 292, 293, 297, 304, 305, 334, 336, 337, 341, 344, 368], "least": [5, 16, 41, 137, 297, 338, 347, 355], "same": [5, 9, 10, 14, 16, 19, 21, 22, 23, 29, 31, 60, 78, 90, 96, 100, 104, 108, 121, 171, 182, 201, 203, 205, 217, 219, 237, 283, 292, 338, 346, 349, 362, 366], "degre": [5, 258], "care": [5, 43, 262, 295, 355, 365], "less": [5, 21, 218], "reason": [5, 96, 364], "whom": 5, "non": [5, 17, 24, 34, 77, 79, 96, 137, 217, 248, 286, 296, 338, 347, 356], "protect": 5, "notwithstand": 5, "breach": 5, "compel": 5, "law": [5, 16], "judici": 5, "government": 5, "investig": [5, 135, 285], "proceed": 5, "ha": [5, 6, 10, 12, 15, 16, 20, 23, 24, 28, 31, 33, 34, 39, 40, 46, 60, 74, 77, 79, 96, 100, 118, 135, 141, 171, 192, 220, 221, 222, 226, 227, 228, 235, 248, 252, 255, 281, 298, 318, 327, 329, 336, 337, 338, 353, 354, 361, 364, 366, 367], "assist": 5, "opportun": 5, "except": [5, 35, 40, 45, 68, 72, 75, 92, 93, 97, 104, 108, 109, 112, 182, 206, 256, 259, 273, 302, 338], "anyth": [5, 41, 337], "contrari": 5, "herein": 5, "neither": [5, 31, 35], "liabl": 5, "prove": 5, "wa": [5, 16, 36, 38, 63, 71, 96, 135, 172, 240, 244, 245, 295, 301, 338, 347], "public": [5, 220, 221, 222, 227, 228, 248, 279, 283, 366], "domain": 5, "enter": [5, 41, 135, 183, 292], "fault": [5, 6, 338], "ii": [5, 163, 181], "known": [5, 12, 31, 34, 74, 111, 118, 292, 349, 362], "demonstr": 5, "exist": [5, 248, 351, 360, 367], "iii": 5, "iv": 5, "independ": [5, 200, 203, 248, 262, 264, 287, 356], "v": [5, 11, 16, 31, 100, 163, 165, 171, 181, 255, 281, 349, 350, 351, 352, 354, 358, 359, 360, 361, 362, 364], "becom": [5, 16, 43, 96], "vi": 5, "similar": [5, 17, 18, 24, 173, 195, 196, 199, 247, 253, 258, 260, 276, 338], "those": [5, 6, 26, 28, 36, 102, 235, 247], "remedi": 5, "immedi": 5, "irrepar": 5, "harm": 5, "monei": 5, "damag": 5, "alon": [5, 18], "inadequ": 5, "compens": 5, "therefor": [5, 6, 12, 14, 16, 18, 31, 33, 34, 39, 183, 347, 349, 358, 359, 360, 361, 362], "event": 5, "entitl": 5, "seek": 5, "equit": 5, "relief": 5, "temporari": [5, 16, 243, 337], "restrain": 5, "order": [5, 10, 14, 17, 18, 23, 26, 28, 39, 78, 96, 100, 132, 137, 161, 167, 168, 170, 173, 180, 181, 183, 184, 185, 206, 207, 222, 234, 242, 245, 248, 252, 254, 264, 265, 266, 297, 338, 343, 347, 355, 364, 365, 367], "injunct": 5, "perman": 5, "post": [5, 32, 39, 40, 41, 96, 100, 139, 192, 193, 198, 277, 278, 304], "bond": 5, "secur": 5, "miscellan": [5, 36, 37], "assign": [5, 71, 255, 268, 275, 300], "sublicens": 5, "transfer": [5, 201, 202, 254, 305, 310, 312, 336], "consent": 5, "trigger": [5, 16, 79, 245], "merg": [5, 20, 42], "consolid": 5, "purchas": 5, "substanti": 5, "asset": 5, "stock": 5, "assigne": 5, "assum": [5, 31, 33, 35, 39, 42, 217, 236, 245, 247, 249, 281, 291, 292, 303, 327, 331, 336, 342, 365, 366], "upon": [5, 15, 16, 29, 41, 79, 170, 275, 284, 287], "enforc": [5, 99], "against": [5, 237, 338], "successor": 5, "unauthor": 5, "null": [5, 28, 100], "void": 5, "constitut": [5, 17, 75], "regul": 5, "underli": [5, 14, 16, 17, 118, 132, 137, 206, 210, 240, 241, 242, 243, 245, 289, 364, 367], "technologi": 5, "full": [5, 14, 18, 34, 36, 70, 71, 73, 97, 183, 184, 217, 226, 234, 284, 338, 347, 348, 349, 357, 366], "complianc": 5, "forc": [5, 263, 266, 334, 336], "majeur": 5, "respons": [5, 66, 83], "delai": [5, 20], "failur": 5, "payment": 5, "connect": [5, 31, 33, 39, 57, 60, 61, 64, 99, 102, 103, 114, 142, 145, 146, 148, 156, 159, 191, 192, 198, 277, 278, 289, 290, 296, 298, 303, 304, 340, 347, 349, 350, 352, 358, 359, 362, 368], "act": [5, 16, 17, 78, 96, 100, 134, 217, 259, 275, 281, 299, 364, 366], "circumst": [5, 338], "beyond": 5, "forese": 5, "Such": [5, 23, 244, 292], "god": 5, "earthquak": 5, "hurrican": 5, "volcan": 5, "erupt": 5, "strike": 5, "lockout": 5, "riot": 5, "civil": 5, "unrest": 5, "protest": 5, "war": 5, "epidem": 5, "communic": 5, "diseas": 5, "outbreak": 5, "health": 5, "emerg": 5, "superimpos": 5, "after": [5, 8, 17, 32, 41, 134, 202, 204, 218, 253, 257, 258, 259, 260, 261, 272, 273, 276, 292, 293, 295], "fact": [5, 16, 18, 78, 96, 346], "fire": 5, "commun": [5, 339], "disast": 5, "whether": [5, 28, 51, 63, 137, 166, 167, 172, 176, 178, 184, 186, 283, 292, 293, 297, 306, 316, 317, 319, 329, 335, 349, 351, 360, 362], "relev": [5, 78], "period": 5, "dure": [5, 12, 17, 19, 31, 33, 39, 181, 185, 219, 221, 237, 248, 356, 366], "opinion": 5, "affect": [5, 184], "prevent": [5, 41], "continu": [5, 31, 252, 356], "six": [5, 139], "month": 5, "date": 5, "initi": [5, 10, 13, 21, 28, 33, 35, 36, 38, 39, 40, 74, 96, 100, 139, 161, 170, 181, 182, 183, 201, 203, 217, 218, 235, 237, 262, 263, 264, 265, 266, 274, 283, 284, 285, 288, 291, 292, 293, 300, 355, 356, 365, 366, 367], "due": [5, 22, 29, 30, 96, 168, 170], "virtu": 5, "aforesaid": 5, "endeavor": 5, "mitig": [5, 337, 338, 363, 366], "effect": [5, 24, 25, 30, 96, 121, 206, 240, 245, 248, 298, 356], "particular": [5, 15, 28, 36, 38, 41, 43, 96, 194, 195, 196, 197, 199, 226, 237, 248, 262, 264, 265, 266, 267, 288, 289, 291, 292, 293], "cooper": 5, "faith": 5, "adopt": [5, 252, 254], "togeth": [5, 39, 96, 100, 139, 251, 347], "decreas": [5, 29, 34, 237, 259, 273, 365, 366], "impact": 5, "remot": [5, 31, 33, 39, 40, 79, 101, 118, 191, 198, 277, 290, 338], "off": [5, 365], "nearshor": 5, "far": [5, 16, 365], "proportion": 5, "adequ": 5, "govern": 5, "disput": 5, "resolut": 5, "interpret": [5, 193, 194, 195, 196, 197, 199], "franc": 5, "give": [5, 12, 18, 40, 41, 192, 346], "rule": [5, 96, 100, 183, 283, 292, 338, 366], "exclus": [5, 338], "jurisdict": 5, "venu": 5, "compet": 5, "court": 5, "pari": 5, "settl": [5, 34], "friendli": [5, 31, 96, 357], "manner": [5, 18], "within": [5, 35, 71, 74, 90, 248, 298, 318, 341], "sixti": 5, "60": [5, 160, 347], "dai": 5, "copyright": 5, "2021": [5, 292, 338, 366], "2022": [5, 338], "reserv": [5, 83], "worldwid": 5, "sub": [5, 10, 96, 97, 220, 221, 222, 223, 224], "forth": [5, 366], "multipl": [5, 16, 20, 27, 35, 77, 184, 219, 223, 229, 232, 233, 238, 338, 366], "locat": [5, 217, 262, 364, 365, 367], "premis": 5, "sole": [5, 10], "intend": [5, 247, 338], "anoth": [5, 9, 13, 16, 41, 43, 46, 77, 79, 110, 206, 226, 237, 240, 248, 278, 305, 338, 340, 365], "network": [5, 219, 225], "modifi": [5, 32, 96, 100, 182, 218, 264, 265, 266], "deriv": [5, 43, 60, 100, 305, 338], "market": 5, "publish": [5, 102, 192, 278, 298, 303], "rent": 5, "leas": 5, "loan": 5, "commerci": 5, "share": [5, 42, 45, 74, 75], "alter": 5, "adapt": [5, 35, 40, 41, 42, 96, 279, 338, 363, 366, 367], "translat": [5, 16, 20, 23, 24, 25, 34, 51, 65, 115, 116, 117, 256, 259, 273, 338, 340, 369], "decompil": 5, "engin": [5, 40, 52, 53, 54, 344], "disassembl": 5, "reduc": [5, 16, 31, 184, 248, 252, 305, 318, 365], "human": [5, 12], "perceiv": 5, "form": [5, 16, 23, 26, 39, 70, 71, 77, 79, 171, 173, 211, 216, 269, 270, 271, 291, 292, 295, 299, 316, 327, 329, 338, 347, 361, 366], "free": [5, 15, 96, 237, 295, 365, 366], "lend": 5, "sell": 5, "resel": 5, "intellectu": 5, "properti": [5, 18, 96, 99, 100, 135, 137, 138, 140, 142, 259, 270, 271, 273, 297, 305, 336, 347], "intern": [5, 15, 69, 184, 218, 255, 268, 279, 280, 290, 304, 338], "treati": 5, "sold": 5, "furthermor": 5, "trademark": 5, "servic": [5, 12, 31, 64, 299, 338], "mark": 5, "pertain": 5, "NO": 5, "warranti": 5, "AS": 5, "ITS": 5, "supplier": 5, "licensor": 5, "TO": 5, "OR": [5, 16, 78], "maximum": [5, 102, 118, 126, 133, 192, 261, 278, 279, 283, 288, 295, 298, 303, 352, 358], "BY": 5, "disclaim": 5, "represent": [5, 12, 36, 70, 73, 90, 116, 121, 134, 140, 162, 164, 166, 167, 180, 186, 188, 189, 190, 195, 196, 199, 201, 202, 206, 253, 257, 258, 259, 260, 261, 269, 272, 273, 276, 305, 307, 312, 313, 329, 333, 334, 335, 336, 346, 365, 366], "express": [5, 8, 14, 17, 19, 24, 39, 118, 121, 132, 135, 139, 144, 234, 235, 238, 240, 241, 242, 243, 245, 264, 329, 338], "impli": [5, 36, 37], "statutori": 5, "BUT": 5, "NOT": [5, 12, 16, 17, 79], "merchant": 5, "satisfactori": 5, "qualiti": [5, 34, 162], "fit": [5, 41, 295, 366], "titl": 5, "infring": 5, "entir": [5, 32, 36, 37, 38, 73, 184, 298], "risk": 5, "aris": [5, 366], "WITH": 5, "liabil": 5, "IN": 5, "BE": 5, "cost": [5, 16, 22, 23, 24, 34, 43, 162, 218, 251, 254, 255, 256, 268, 274, 275, 281, 292, 324, 325, 355, 356, 357, 358, 364, 365], "substitut": 5, "special": [5, 34, 76, 194, 195, 196, 197, 199, 251, 253, 257, 258, 260, 261, 263, 272, 276, 277, 368], "incident": 5, "indirect": 5, "consequenti": 5, "loss": [5, 366], "busi": 5, "profit": 5, "interrupt": [5, 12], "inabl": 5, "even": [5, 11, 14, 18, 23, 24, 31, 34, 39, 168, 174, 182, 183, 206, 338], "IF": 5, "advis": [5, 17, 200, 305], "possibl": [5, 10, 11, 14, 15, 16, 17, 19, 21, 23, 26, 27, 28, 41, 89, 90, 96, 134, 139, 180, 183, 184, 202, 205, 207, 247, 254, 256, 262, 263, 283, 300, 338, 339, 353, 355, 356], "SUCH": 5, "case": [5, 8, 25, 27, 28, 29, 31, 32, 34, 39, 41, 78, 139, 173, 180, 201, 206, 214, 217, 247, 254, 262, 279, 291, 292, 295, 298, 335, 338, 355, 364], "amount": [5, 96, 139], "paid": 5, "THAT": 5, "caus": [5, 6, 183, 200, 338], "exampl": [5, 9, 18, 19, 25, 26, 27, 28, 29, 31, 32, 34, 35, 42, 43, 51, 77, 96, 134, 135, 162, 166, 167, 181, 182, 183, 186, 188, 189, 190, 192, 211, 217, 218, 242, 244, 245, 248, 252, 262, 263, 281, 289, 291, 305, 320, 321, 327, 329, 337, 338, 347, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 365, 366, 369], "bear": 5, "technic": 5, "inaccuraci": 5, "typograph": 5, "error": [5, 14, 29, 30, 32, 35, 40, 79, 80, 81, 82, 91, 92, 93, 137, 138, 205, 320, 327, 338, 366], "updat": [5, 14, 17, 23, 34, 35, 57, 74, 96, 142, 181, 221, 237, 253, 257, 258, 260, 261, 272, 276, 283, 363, 365, 366, 367], "januari": [5, 338], "2004": [5, 225], "http": [5, 23, 219, 225, 229, 293, 310, 342], "www": 5, "reproduct": 5, "owner": 5, "union": [5, 110, 180, 182, 188, 189, 190], "direct": [5, 23, 96, 142, 335, 364, 365], "manag": [5, 13, 16, 280, 337], "contract": [5, 100, 298], "ownership": 5, "fifti": 5, "percent": [5, 320], "50": [5, 28, 31, 41, 147, 160, 262, 353, 366], "outstand": 5, "benefici": 5, "permiss": [5, 338], "prefer": [5, 364, 365], "modif": [5, 28], "mechan": [5, 11, 14, 28, 43, 90], "transform": [5, 18, 39, 41, 77, 166, 167, 180, 181, 183, 187, 208, 215, 216, 229, 234, 237, 256, 259, 273, 277, 294, 333, 337, 338, 363, 364, 365, 366], "convers": [5, 49, 65], "authorship": 5, "made": [5, 15, 34, 174, 213], "indic": [5, 17, 63, 77, 78, 161, 163, 173, 181, 187, 201, 203, 206, 237, 247, 248, 298, 331, 365], "attach": [5, 10, 14, 26, 43, 96, 114, 206, 207, 218, 237, 280], "appendix": 5, "editori": 5, "revis": 5, "annot": [5, 210], "elabor": 5, "whole": [5, 18, 183, 338], "separ": [5, 14, 48, 53, 56, 62, 206, 367], "mere": [5, 29], "link": [5, 10, 13, 15, 16, 31, 46, 61, 142, 206, 219, 222, 225, 226, 237, 254, 337, 338], "contribut": [5, 175, 368], "intention": 5, "inclus": [5, 99], "behalf": 5, "verbal": 5, "sent": [5, 12, 18, 22, 28, 51, 53, 54, 192, 194, 195, 196, 197, 199, 295, 304], "mail": 5, "system": [5, 6, 7, 8, 15, 18, 22, 23, 33, 34, 41, 161, 168, 169, 170, 183, 217, 262, 305, 338, 356, 364, 365, 366], "issu": [5, 338, 366], "track": 5, "discuss": [5, 9, 43], "improv": [5, 35, 39, 162, 170, 338, 363, 366, 367], "exclud": [5, 338], "conspicu": 5, "Not": [5, 134, 137], "contributor": 5, "subsequ": [5, 364], "incorpor": 5, "herebi": 5, "perpetu": 5, "charg": [5, 184, 365], "royalti": 5, "irrevoc": 5, "publicli": 5, "patent": 5, "offer": [5, 8, 10, 11, 32, 41, 191, 277, 296, 347], "claim": 5, "institut": 5, "litig": 5, "cross": 5, "counterclaim": 5, "lawsuit": 5, "alleg": 5, "contributori": 5, "redistribut": 5, "medium": 5, "meet": [5, 12], "recipi": 5, "carri": [5, 9, 16, 28, 70, 181, 206, 217, 219, 225, 235, 242, 285, 368], "promin": 5, "retain": 5, "attribut": [5, 35, 41, 42, 68, 77, 78, 94, 95, 99, 100, 137, 138, 217, 240, 241, 245, 270, 271, 287, 298, 330, 338, 364, 365], "text": [5, 12, 237, 298, 345, 347], "readabl": [5, 12, 23], "along": [5, 22, 28, 258, 261, 272, 347, 355], "wherev": 5, "normal": [5, 48, 53, 56, 62, 167, 217, 338], "appear": [5, 29, 79, 94, 96, 100, 121, 139, 235, 237, 255, 287, 347], "add": [5, 14, 15, 16, 25, 31, 91, 95, 97, 110, 118, 137, 202, 206, 218, 220, 221, 223, 224, 225, 227, 228, 229, 231, 237, 245, 252, 256, 270, 271, 286, 338, 365], "alongsid": 5, "addendum": 5, "cannot": [5, 16], "constru": 5, "statement": [5, 15, 242, 244, 248, 298], "differ": [5, 7, 8, 15, 16, 18, 21, 24, 27, 28, 29, 30, 77, 89, 102, 181, 183, 192, 206, 252, 278, 285, 286, 293, 295, 298, 303, 305, 310, 338, 347, 355, 357, 358, 359, 360, 361, 362, 365, 366], "submiss": [5, 31, 338], "unless": [5, 226, 228, 230, 231, 232, 233], "explicitli": [5, 25], "noth": [5, 35, 40, 202, 241, 245, 281], "supersed": 5, "regard": [5, 22, 35, 96, 183, 262], "trade": 5, "customari": 5, "kind": [5, 284, 288, 365], "determin": [5, 78, 306, 357, 366], "appropri": [5, 100, 111, 217, 262], "theori": [5, 161, 170, 355, 365, 367], "tort": 5, "neglig": [5, 34], "deliber": 5, "grossli": 5, "charact": [5, 141], "goodwil": 5, "stoppag": 5, "malfunct": 5, "while": [5, 8, 25, 28, 31, 96, 139, 289, 310, 338, 341, 364, 365, 366], "choos": [5, 34, 118, 262, 279, 283, 297, 365, 366], "fee": 5, "indemn": 5, "howev": [5, 6, 10, 17, 18, 25, 29, 90, 135, 183, 237, 253, 257, 258, 260, 261, 272, 276, 292, 297, 346, 347, 366], "indemnifi": 5, "defend": 5, "hold": [5, 12, 16, 226, 228, 230, 231, 232, 233], "harmless": 5, "incur": [5, 34], "assert": [5, 31, 35, 40, 90, 146, 300], "boilerpl": 5, "field": [5, 18, 23, 24, 28, 29, 30, 78, 96, 132, 139, 253, 257, 258, 259, 260, 261, 265, 272, 276, 287, 292, 299, 338, 369], "enclos": [5, 126, 183], "bracket": [5, 212, 246], "replac": [5, 6, 96, 206, 218, 244, 247, 295, 341, 366, 367], "comment": [5, 237], "syntax": [5, 9, 17, 77, 96, 206, 235, 335, 338], "recommend": [5, 6, 167, 217, 297], "easier": [5, 281], "identif": 5, "archiv": 5, "obtain": [5, 8, 28, 32, 91, 134, 138, 172, 184, 283, 353, 366, 367], "three": [6, 8, 30, 77, 143, 206, 237, 286, 292, 341, 346, 355, 364], "homebrew": 6, "attent": 6, "mismatch": 6, "segment": [6, 338], "qdldl": 6, "wheel": [6, 338], "cmake": 6, "emul": [6, 28, 33, 79, 96, 277, 280, 289, 337], "libomp": 6, "y": [6, 10, 17, 26, 65, 122, 141, 184, 188, 190, 218, 286, 323, 364, 366], "opt": [6, 23, 24, 25, 44, 45, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 369], "ln": [6, 118], "sf": 6, "cellar": 6, "lib": 6, "dylib": 6, "usr": 6, "local": [6, 23, 34, 79, 114, 292, 303, 304, 342, 366], "part": [7, 14, 15, 18, 23, 24, 41, 90, 118, 127, 129, 161, 183, 192, 213, 284, 338, 363], "clarifi": [7, 367], "main": [7, 8, 35, 78, 183, 218, 237, 262, 280, 289, 298, 300, 341, 342], "concept": [7, 31, 39, 90, 265, 328], "devid": 7, "kei": [7, 35, 51, 78, 142, 201, 203, 235, 237, 253, 257, 258, 260, 261, 272, 276, 287, 329], "It": [7, 9, 13, 16, 17, 19, 23, 29, 32, 34, 36, 37, 38, 41, 70, 71, 73, 74, 96, 100, 134, 135, 141, 181, 183, 185, 200, 202, 205, 206, 207, 217, 244, 247, 248, 253, 256, 257, 258, 259, 260, 261, 272, 273, 274, 276, 288, 291, 292, 299, 300, 301, 305, 312, 338, 355, 356, 365, 366, 367], "procedur": [7, 16, 17, 41, 46, 162, 244], "spin": [7, 23, 34, 45, 90, 162, 166, 167, 168, 170, 173, 175, 180, 184, 186, 188, 189, 190, 253, 257, 258, 259, 260, 261, 272, 273, 276, 299, 338, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 365], "fermion": [7, 44, 45, 90, 294, 366, 367], "combinatori": [7, 9, 11, 22, 34, 193, 194, 195, 196, 197, 199, 256, 259, 268, 269, 273, 347, 355, 356, 357, 358, 359, 360, 361, 362, 369], "interoper": 7, "mainli": [8, 32, 67, 68, 134], "sequenc": [8, 9, 13, 16, 17, 96, 207, 217, 237], "instruct": [8, 9, 12, 79, 96, 209, 265], "comprehens": [8, 19], "mostli": [8, 75, 121, 347], "wrap": [8, 9, 10, 13, 16, 28, 33, 34, 43, 59, 64, 137, 138, 206, 237, 247, 248, 269, 297, 298, 341, 342], "higher": [8, 41, 94, 95, 96, 99, 137, 138, 142, 180, 182, 206, 237, 281, 287, 338], "seri": [8, 28, 183], "manipul": [8, 9, 17, 18, 25, 27, 39, 96, 134, 209, 242, 243, 247, 277, 298, 305, 337, 338, 363], "evolv": [8, 18, 34, 139, 356], "encod": [8, 18, 22, 25, 34, 90, 100, 134, 135, 139, 161, 245, 251, 253, 254, 256, 257, 258, 259, 260, 261, 272, 273, 274, 276, 281, 346, 350, 351, 354, 355, 356, 369], "often": [8, 18, 19, 35, 252, 356, 364], "u": [8, 14, 16, 17, 30, 51, 65, 163, 165, 171, 173, 175, 181, 187, 206, 208, 216, 234, 244, 346, 364, 365, 366], "pure": [9, 12, 13, 94, 100, 206, 305, 329], "built": [9, 11, 19, 96, 103, 162, 217, 238, 243, 244, 255, 290, 304, 364], "hybrid": [9, 173, 277, 291, 338, 363, 366], "nice": [9, 16, 43, 71], "api": [9, 32, 39, 41, 102, 192, 206, 278, 298, 303, 338, 341, 347, 368], "usual": [9, 15, 16, 19, 23, 96, 137, 183, 201, 205, 321, 338, 355, 356, 366], "fed": [9, 19, 29, 96, 202, 204], "note": [9, 17, 20, 96, 164, 175, 180, 205, 286, 314, 318, 320, 366, 368], "qaoa": [9, 25, 193, 194, 195, 196, 197, 199, 252, 254, 259, 273, 346, 357, 358, 359, 360, 361, 362, 368], "batchmod": [9, 97, 244, 247, 282, 338], "oracl": [9, 206, 208, 245, 249, 300], "assembl": [9, 10], "aqasm": [9, 10, 12, 14, 15, 16, 29, 30, 31, 40, 45, 51, 53, 73, 77, 78, 79, 96, 97, 162, 174, 206, 208, 217, 218, 237, 248, 281, 289, 300, 337, 344, 365, 366], "submodul": [9, 206, 367], "pyaqasm": [9, 10, 11, 12, 14, 16, 17, 48, 56, 62, 78, 90, 96, 206, 209, 217, 218, 337], "qftarith": [9, 15, 16, 17, 45, 77, 96, 97, 206, 219, 220, 221, 222, 223], "qft": [9, 10, 16, 17, 77, 96, 206, 219, 222, 229], "arithmet": [9, 15, 17, 18, 19, 26, 45, 118, 121, 132, 144, 225, 229, 238, 245, 338], "itself": [9, 11, 256, 287, 365], "classarith": [9, 15, 16, 45, 206, 219, 220, 221, 223], "unifi": 9, "basic": [10, 11, 26, 31, 34, 43, 51, 66, 141, 207, 256, 281, 298, 338, 364, 365], "Their": [10, 39], "rather": [10, 17, 31, 41, 94, 100, 183, 209, 238, 240, 241, 243, 245, 364], "self": [10, 31, 35, 40, 41, 240, 245, 275, 287], "explanatori": 10, "constant": [10, 16, 17, 23, 104, 107, 121, 134, 135, 163, 166, 167, 181, 182, 184, 186, 195, 196, 199, 201, 206, 219, 220, 221, 223, 224, 225, 227, 231, 233, 253, 258, 260, 262, 276, 288, 295, 356, 365, 366], "ccnot": [10, 17, 65, 300], "csign": [10, 17, 65, 218], "swap": [10, 17, 65, 222], "sqrtswap": [10, 17], "iswap": [10, 17], "rz": [10, 11, 17, 42, 43, 65, 77, 79, 162, 201, 203, 206, 207, 237, 247, 292, 366], "ph": [10, 15, 17, 51, 96, 222, 225, 286, 310], "phase": [10, 17, 183, 206, 208, 236, 240, 242, 243, 245, 305, 306, 337, 338, 363], "shift": [10, 17, 20, 96, 100, 292, 338, 346, 366], "mathemat": [10, 34], "my_program": [10, 12], "qbits_reg": [10, 12, 207], "regist": [10, 13, 16, 28, 51, 96, 137, 138, 140, 201, 203, 212, 217, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 237, 238, 240, 241, 245, 246, 248, 249], "new": [10, 16, 39, 40, 41, 43, 78, 96, 102, 110, 118, 161, 172, 181, 183, 187, 191, 192, 207, 218, 225, 235, 237, 248, 256, 278, 284, 291, 298, 303, 341, 365, 367], "dag": [10, 17, 65, 96, 166, 167, 186, 207, 235, 338], "convent": [10, 22, 23, 96, 137, 139, 171, 175, 297, 298, 310], "outermost": 10, "alwai": [10, 18, 31, 34, 79, 137, 167, 183, 217, 256, 281, 300], "index": [10, 17, 31, 40, 41, 74, 78, 81, 82, 96, 121, 125, 137, 142, 143, 161, 169, 172, 175, 176, 211, 239, 240, 241, 245, 252, 255, 275, 283, 298, 335], "my_routin": 10, "idx": [10, 31, 43, 281], "parameter": [10, 279, 292, 366], "think": [10, 183], "quit": [10, 15, 16, 39, 41], "conveni": [10, 39, 338], "hardwar": [10, 18, 31, 35, 42, 44, 45, 86, 99, 136, 161, 174, 198, 277, 278, 281, 282, 289, 337, 338, 365], "black": 10, "box": [10, 206, 237], "properli": [10, 46], "might": [10, 14, 16, 23, 41, 96, 118, 137, 206, 218, 220, 223, 224, 247, 248, 252, 254, 256, 265, 280, 286, 345, 356, 364, 366], "abl": [10, 16, 18, 31, 52, 207, 237, 247, 254, 259, 280, 296], "simplic": [10, 365, 366], "input": [10, 16, 23, 49, 51, 65, 68, 74, 97, 100, 139, 168, 191, 217, 218, 234, 242, 247, 248, 252, 282, 298, 338, 358, 359, 360, 361, 362, 364, 365], "signatur": [10, 17, 96, 110, 210, 218], "phase_matrix": 10, "diag": [10, 23, 369], "exp": [10, 118, 128, 207, 279, 292, 327, 329], "1j": [10, 124, 131, 207], "phase_g": 10, "matrix_gener": [10, 111, 207], "Or": [10, 242, 341, 342, 343], "set_matrix_gener": [10, 111], "similarli": [10, 12, 16, 17, 21, 212, 245, 246, 259, 304, 358, 359, 360, 361, 362, 364], "c_phase": 10, "c_phase_g": 10, "circuit_gener": [10, 111, 251], "set_circuit_gener": [10, 111], "variabl": [10, 14, 20, 21, 24, 25, 28, 34, 39, 41, 43, 45, 60, 61, 94, 96, 97, 100, 104, 108, 135, 139, 235, 237, 244, 247, 251, 252, 254, 255, 256, 259, 264, 273, 275, 283, 287, 288, 291, 293, 299, 338, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 366], "lambda": [10, 14, 16, 17, 96, 132, 173, 201, 202, 203, 204, 207, 283, 322, 329], "n": [10, 14, 17, 19, 20, 23, 24, 25, 31, 34, 36, 40, 74, 180, 181, 188, 189, 190, 226, 228, 230, 231, 232, 233, 234, 236, 247, 249, 252, 253, 258, 262, 295, 298, 320, 323, 331, 348, 349, 350, 351, 352, 353, 354, 356, 362, 364, 366], "static": [10, 94, 95, 96, 99, 121, 137, 142, 247, 252, 255, 262, 338], "previou": [10, 31, 43, 183, 341, 364], "done": [10, 12, 14, 16, 17, 31, 64, 96, 167, 226, 228, 230, 248, 256, 263, 287, 364, 366], "customg": 10, "mat": [10, 308], "my_minus_z": 10, "effici": [11, 16, 17, 20, 43, 134, 161, 170, 174, 277, 335, 338, 355, 365, 366], "introduc": [11, 27, 31, 43, 365], "scheme": [11, 15, 43], "usag": [11, 16, 83, 96, 137, 198, 207, 217, 237, 247, 289, 290, 337, 364], "most": [11, 14, 17, 18, 23, 25, 28, 41, 51, 75, 90, 100, 161, 219, 234, 245, 262, 297, 300, 338, 346, 347, 357, 364, 366], "interest": [11, 16, 18, 162, 183, 295, 364, 366], "psi": [11, 28, 29, 30, 43, 100, 162, 262, 283, 298, 314, 335], "open": [11, 15, 18, 19, 41, 161, 248, 338, 363], "get_vari": [11, 41, 94, 96, 100, 121, 139, 144, 235, 255, 275, 283, 338], "addition": [11, 79, 121, 145, 206], "sum_i": [11, 18, 100, 139, 175, 217, 262, 299, 321, 355], "qbit_idx": 11, "layer": [11, 174, 176, 252, 355, 365], "tradeoff": 11, "up": [11, 15, 16, 17, 19, 25, 27, 35, 39, 96, 161, 171, 206, 237, 305, 306, 347, 364, 366], "ve": 11, "overload": [11, 20, 41, 96, 114, 121, 132, 140, 245, 251, 255, 330, 338], "__call__": [11, 41, 132], "step": [11, 12, 14, 27, 35, 39, 41, 164, 180, 183, 206, 208, 237, 283, 299, 365, 366], "job_2": 11, "job_3": 11, "op": [11, 16, 40, 68, 72, 76, 77, 96, 141, 162, 217, 218, 248, 252, 338, 344], "iterate_simpl": [11, 16, 35, 40, 51, 96, 217, 218, 252, 344, 345], "18863397258367576": 11, "7351493120241701": 11, "9405972480966804": 11, "13803979612489858": 11, "7574444289111796": 11, "0297777156447183": 11, "store": [12, 15, 16, 17, 41, 42, 68, 74, 77, 78, 96, 98, 100, 134, 137, 139, 144, 161, 169, 213, 232, 236, 237, 242, 243, 249, 253, 257, 258, 260, 261, 272, 276, 287, 298, 338, 341], "serial": [12, 17, 28, 32, 35, 40, 68, 69, 94, 96, 100, 137, 141, 338], "pictur": [12, 34], "path": [12, 337], "figur": [12, 269], "aqasm2circ": [12, 17], "left": [12, 23, 24, 91, 138, 161, 165, 169, 180, 181, 201, 203, 208, 209, 216, 234, 237, 243, 245, 262, 283, 295, 298, 310, 314, 322, 327, 329, 336], "sinc": [12, 16, 28, 60, 79, 206, 213, 218, 219, 240, 244, 248, 329, 346, 356, 358, 366], "mandatori": [12, 31], "facilit": 12, "calloc": [12, 79, 96, 209, 212, 237], "cbits_reg": 12, "reset": [12, 13, 17, 68, 71, 78, 96, 218, 222, 237, 297, 338], "outcom": [12, 87, 88, 201, 203], "cc_appli": [12, 237], "condition": 12, "cbreak": [12, 79, 237], "fine": [12, 262, 347], "tune": [12, 292, 347], "creation": [13, 19, 31, 33, 39, 135, 337], "abstractg": [13, 14, 17, 51, 77, 96, 109, 206, 210, 214, 218, 219, 235, 237], "ancilla": [13, 16, 77, 96, 237, 242, 248, 337], "scope": [13, 16, 40, 214, 238, 239, 240, 241, 242, 243, 245, 246, 248, 337, 338], "moreov": [13, 31, 39, 96, 240, 245, 248, 262], "flag": [13, 16], "reus": [13, 30, 248], "later": [13, 16, 28, 32, 63, 206, 237], "though": [14, 297], "veri": [14, 18, 27, 31, 96, 184, 213, 237, 263, 266, 285, 337, 338, 358, 359, 360, 361, 362, 364, 365, 366], "still": [14, 18, 25, 96, 183, 237, 245, 247, 289, 297, 367], "seem": 14, "clunki": 14, "build_gat": [14, 17, 206, 214, 218], "simplfi": 14, "turn": [14, 16, 21, 41, 90, 96, 206, 237, 244, 247, 277], "walsh_hadamard": 14, "ariti": [14, 15, 16, 17, 36, 37, 51, 69, 77, 96, 111, 118, 132, 174, 207, 210, 213, 215, 218, 219, 220, 221, 222, 227, 228, 235, 236, 237, 248, 249, 255, 286, 298, 333, 334, 336], "wht": 14, "subcircuit": [14, 15, 17, 77, 96, 206, 218, 248], "subroutin": [14, 77, 280], "adder": [14, 16, 206, 219, 225, 226, 229], "n1": 14, "n2": 14, "singl": [14, 16, 17, 20, 28, 31, 34, 41, 42, 57, 60, 61, 64, 78, 90, 102, 144, 161, 167, 171, 181, 192, 205, 206, 208, 217, 265, 278, 279, 283, 286, 287, 288, 289, 291, 292, 293, 297, 298, 303, 364], "attempt": [14, 63, 247], "imagin": [14, 17, 135], "ly": 14, "namespac": [14, 17, 206, 226], "foo": [14, 20, 210], "Its": [14, 132, 140, 184, 213, 262, 327, 329, 356, 366], "my_add": 14, "length1": 14, "length2": 14, "proper": [14, 16, 41, 96, 132, 240, 241, 244, 355, 369], "keyword": [14, 17, 60, 61, 95, 96, 192, 198, 237, 247, 338], "piec": [14, 16, 29, 78, 100, 118, 217, 238, 240, 254, 356], "stai": 14, "had": [14, 16, 70, 71, 73], "mani": [14, 18, 19, 22, 25, 28, 31, 41, 43, 139, 183, 217, 251, 253, 254, 257, 258, 260, 272, 276, 338, 346, 347, 364, 366], "fresh": [15, 39, 96, 104, 105, 218, 235, 237, 248, 256, 284, 287], "set_ancilla": [15, 16, 248], "being": [15, 18, 28, 34, 51, 72, 237, 248, 297], "dynam": [15, 31, 39, 96, 237, 291, 305, 356], "pass": [15, 96, 100, 102, 135, 183, 198, 207, 218, 235, 237, 247, 248, 252, 269, 281, 287, 288, 291, 357, 358, 359, 360, 361, 362], "recurs": [15, 207, 256], "across": 15, "tree": [15, 206, 217, 235, 255, 347], "ensur": [15, 35, 40, 41, 46, 90, 253, 260, 276], "freed": [15, 16, 248], "leav": [15, 19, 66, 78, 255], "20": [15, 16, 36, 37, 147, 160, 237, 347, 352, 358, 359], "resourc": [15, 16, 17, 45, 75, 137, 303], "close": [15, 237, 248, 251, 262, 353, 365], "pop": [15, 41, 248], "last": [15, 16, 23, 31, 51, 173, 236, 249, 300, 301, 357, 364], "dagger": [15, 77, 96, 162, 166, 171, 173, 180, 181, 183, 187, 207, 208, 213, 216, 235, 248, 295, 315, 318, 333, 335, 355, 364, 366], "nest": 15, "aglorithm": 16, "sometim": [16, 23, 314], "hard": [16, 25, 34, 36, 37, 281, 346, 356, 369], "quickli": [16, 244], "overwhelm": 16, "fair": 16, "er": 16, "qint": [16, 206, 208, 237, 240, 248], "comparison": [16, 206, 237, 243, 245], "qint1": [16, 245], "qint2": [16, 245], "unimpl": 16, "circuit_ab": 16, "circuit_qft": [16, 219], "circuit_class": [16, 219], "subsect": 16, "qbool": [16, 206, 237, 248], "simplest": [16, 43, 96], "qboolarrai": [16, 206, 237, 240, 242], "correspond": [16, 17, 18, 24, 27, 29, 35, 40, 51, 53, 57, 60, 61, 64, 71, 77, 78, 91, 96, 99, 100, 111, 117, 132, 135, 142, 166, 167, 171, 173, 181, 186, 201, 203, 207, 217, 253, 256, 257, 258, 260, 261, 262, 272, 276, 284, 287, 295, 297, 298, 301, 303, 327, 329, 338, 345, 355, 366], "rout": [16, 210, 218, 238, 240, 241, 242, 243, 245, 248], "and_expr": [16, 209], "expr1": 16, "expr2": 16, "q": [16, 17, 24, 51, 64, 73, 164, 170, 171, 173, 181, 187, 234, 237, 245, 253, 257, 260, 273, 276, 282, 344, 345], "append": [16, 41, 95, 202, 204, 252], "current": [16, 35, 40, 78, 96, 143, 166, 167, 186, 191, 207, 218, 248, 263, 264, 277, 280, 292, 296, 298, 301, 357, 358, 359, 360, 361, 362], "were": [16, 71, 346, 347], "produc": [16, 23, 24, 26, 96, 100, 183, 217, 245, 251, 259, 268, 273, 289, 355, 356], "q_4": 16, "q_5": 16, "toffoli": [16, 17, 226, 228], "q_3": 16, "de": 16, "morgan": 16, "NOTS": 16, "inde": [16, 24, 41], "mind": [16, 364], "just": [16, 18, 356], "syntact": 16, "sugar": 16, "releas": [16, 96, 218, 237, 248, 368], "free_ancilla": [16, 237, 248], "verifi": [16, 30], "expr": [16, 118, 121, 144], "set_valu": [16, 245], "circuit1": [16, 96], "circuit2": [16, 96], "empti": [16, 17, 96, 100, 137, 218, 237, 303, 336, 365], "did": [16, 17, 139], "qint3": [16, 245], "depth": [16, 96, 97, 121, 136, 252, 254, 355, 365], "mult": [16, 20, 229], "14": [16, 79, 80, 145, 147, 150, 152, 153, 154, 158, 160, 237, 245, 352, 358, 359], "13": [16, 80, 96, 145, 147, 150, 151, 152, 153, 154, 158, 160, 281, 347, 352, 353, 358, 359, 364], "12": [16, 25, 80, 145, 147, 150, 151, 152, 153, 154, 158, 160, 165, 181, 205, 248, 257, 269, 281, 300, 352, 358, 359], "compar": [16, 19, 206, 297, 304], "increment": 16, "cast_to": [16, 240], "cast": [16, 42, 55, 94, 96, 99, 100, 138, 140, 142, 144, 237, 240, 241, 242, 245, 294], "sai": [16, 174, 244], "anc": 16, "3535533905932732": 16, "813961400789805e": 16, "17j": 16, "3535533905932733": 16, "831019179913692e": 16, "35355339059327334": 16, "1180695148086566e": 16, "58020831115014e": 16, "3535533905932734": 16, "231448391212731e": 16, "3535533905932729": 16, "289974949513096e": 16, "16j": 16, "353553390593273": 16, "0594047723252207e": 16, "686323053012687e": 16, "straightforward": [16, 23, 30, 39, 96, 263], "networkx": [16, 42, 99, 142, 194, 195, 196, 197, 199, 257, 258, 260, 261, 269, 276, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 369], "functool": [16, 31], "coloring_oracl": 16, "bitlength": [16, 222], "node": [16, 121, 142, 255, 257, 258, 260, 261, 269, 270, 271, 276, 347, 349, 350, 351, 352, 354, 358, 359, 360, 361, 362], "edg": [16, 347, 349, 350, 351, 352, 354, 358, 359, 360, 361, 362], "nx": [16, 42, 142, 257, 258, 260, 261, 276, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 369], "path_graph": 16, "len": [16, 31, 40, 70, 73, 77, 248, 252, 253, 257, 258, 260, 261, 276, 300, 338, 350, 351, 352, 353, 354, 361], "19": [16, 147, 150, 153, 154, 160, 222, 352, 358, 359], "vertex": [16, 191, 199, 251, 267, 271, 276, 337, 347, 349, 350, 351, 352, 357, 358, 359, 360, 362], "formula": [16, 17, 23, 28, 68, 72, 77, 78, 79, 90, 96, 98, 170, 206, 209, 211, 237, 242, 245, 255], "c_i": 16, "neq": [16, 24, 356], "c_j": [16, 175], "j": [16, 23, 24, 34, 40, 162, 167, 168, 170, 173, 181, 186, 187, 247, 258, 259, 261, 262, 272, 299, 320, 321, 327, 329, 333, 336, 338, 364, 366, 369], "loop": [16, 40, 68, 74, 279, 283, 288, 289, 291, 292, 293, 298], "asymptot": [16, 295], "save": [16, 40, 136, 218, 237, 341], "increas": [16, 34, 96, 97, 183, 218, 295, 355, 356, 366], "counter": 16, "larg": [16, 18, 34, 100, 166, 167, 183, 186, 252, 262, 356], "enough": [16, 34, 83, 365], "count": [16, 96, 206, 249, 252, 254, 281, 337, 338, 347], "number_of_edg": [16, 146], "bit_length": 16, "frugal": 16, "log": [16, 137, 217, 349, 362], "didn": [16, 96], "mention": [16, 26, 292], "strongli": [17, 292], "binari": [17, 22, 28, 32, 34, 60, 63, 70, 73, 94, 95, 96, 99, 100, 116, 117, 137, 139, 142, 251, 253, 256, 259, 273, 366, 369], "dump": [17, 28, 32, 43, 60, 63, 94, 95, 96, 99, 100, 137, 139, 142, 259, 338], "sourc": [17, 41, 51, 68, 161, 338, 347, 363, 365], "potenti": [17, 165, 171, 173, 175, 181, 237, 353], "matric": [17, 51, 69, 90, 96, 104, 107, 162, 201, 206, 218, 237, 254, 292, 305, 310, 312, 314, 315, 321, 323, 324, 326, 331, 366], "constructor": [17, 35, 41, 109, 111, 202, 207, 237, 248, 254, 284, 287, 330, 332, 338, 357, 365], "bodi": [17, 78, 163, 165, 170, 181, 182, 184, 187, 218, 244, 280, 364, 365], "sum": [17, 20, 23, 24, 31, 39, 43, 100, 134, 173, 206, 217, 251, 252, 256, 262, 281, 287, 338, 347, 353, 356], "begin": [17, 23, 31, 34, 314, 322, 327, 329, 338], "cbit": [17, 51, 72, 77, 78, 79, 80, 88, 98, 206, 209, 212, 237, 345], "straightfoward": 17, "matrix": [17, 23, 24, 68, 69, 77, 79, 96, 111, 134, 162, 166, 167, 171, 173, 175, 181, 184, 186, 187, 201, 202, 203, 206, 207, 213, 218, 237, 253, 257, 258, 259, 260, 261, 272, 273, 276, 287, 299, 305, 306, 308, 309, 310, 312, 314, 315, 324, 331, 333, 334, 335, 336, 338, 348, 364, 365, 366, 367, 369], "my_z": 17, "involv": [17, 34, 267, 269, 356], "param": [17, 96, 201, 202, 203, 235, 293, 322], "my_rxrz": 17, "my_qft": 17, "none": [17, 29, 35, 40, 51, 57, 58, 60, 61, 64, 65, 77, 78, 79, 84, 88, 94, 96, 97, 99, 100, 102, 103, 110, 111, 114, 121, 132, 134, 135, 136, 137, 138, 139, 140, 142, 166, 167, 168, 170, 173, 174, 183, 184, 186, 192, 198, 201, 202, 203, 204, 208, 209, 210, 213, 218, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 252, 254, 256, 259, 262, 268, 273, 274, 278, 279, 283, 286, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 303, 304, 310, 312, 313, 329, 330, 331, 335, 357, 358, 359, 360, 361, 362], "ressourc": 17, "constitu": [17, 139], "qbit_list": [17, 241], "referenc": 17, "predefin": 17, "head": 17, "my_cz": 17, "conj": 17, "tran": 17, "mea": [17, 73, 201, 203], "boolean": [17, 25, 40, 63, 72, 78, 209, 211, 237, 240, 241, 242, 245, 255, 275, 316, 319], "logic": [17, 68, 90, 97, 98, 209, 211, 222, 237, 242, 251, 255, 256, 366], "stand": [17, 43, 183], "break": [17, 68, 72, 78, 79, 80, 222, 237, 252], "hadamard": [17, 100, 338], "vmatrix": 17, "pauli": [17, 19, 26, 90, 134, 141, 180, 201, 202, 205, 254, 292, 305, 308, 309, 310, 312, 320, 321, 323, 336, 338, 366], "ident": [17, 237, 295, 310, 312, 313, 321, 323, 366], "foral": [17, 24, 163, 181], "rm": 17, "r": [17, 65, 100, 118, 121, 144, 165, 170, 171, 173, 181, 182, 364], "rotat": [17, 96, 100, 172, 174, 176, 207, 237, 254, 292, 355], "co": [17, 118, 121, 132, 135, 286], "sin": [17, 118, 121, 132], "infil": 17, "outfil": 17, "wrote": 17, "my_lib": 17, "py": [17, 51, 79, 337, 338], "misc": [17, 206], "qb": [17, 31, 96, 252, 281], "inlin": [17, 96, 97, 136, 206, 218, 237, 277, 280, 337, 338], "l": [17, 173, 181, 187, 217, 364, 366], "my_aqasm": 17, "beneath": 18, "everi": [18, 170, 294, 347, 349, 354, 361, 362, 364], "realiz": 18, "digit": [18, 254, 338, 355, 357, 366], "li": [18, 365], "magnet": [18, 23, 24, 253, 257, 258, 259, 260, 261, 272, 276, 299, 338, 369], "experienc": 18, "vari": [18, 366], "devic": [18, 44, 45, 83, 84, 86, 99, 338], "sort": [18, 94, 96, 100, 139, 168, 170, 181, 338], "varieti": [18, 34, 36], "would": [18, 23, 31, 41, 48, 53, 56, 62, 96, 170, 183, 207, 244, 247, 253, 257, 258, 260, 261, 272, 276, 278, 338, 347, 353, 354, 361, 366], "rich": 18, "actual": [18, 28, 29, 68, 346, 357], "chemistri": [18, 161, 337, 364, 367], "scienc": [18, 217], "explor": [18, 41, 96, 262], "door": 18, "answer": [18, 346, 353], "struggl": 18, "evolut": [18, 36, 38, 139, 161, 180, 262, 299, 355], "defect": 18, "steer": 18, "decompos": [18, 39], "lambda_i": [18, 139], "h_i": [18, 100, 139, 299], "hermitian": [18, 134, 139], "send": [18, 35, 40, 54, 90, 118, 139, 338, 350, 351, 352, 353, 354], "simpli": [19, 21, 41, 144, 237, 240, 244, 256, 265, 266, 355, 369], "drive": [19, 20, 21, 139], "t_variabl": [19, 20, 21], "pauli_term": [19, 20, 21, 26, 30, 134, 366], "tmax": [19, 20, 21, 23, 139, 259, 262, 264, 273, 274, 350, 351, 352, 353, 354, 356], "23": [19, 26, 41, 147, 160, 338, 352, 353, 358, 359, 365, 366], "lead": [19, 278, 346, 356, 366], "especi": 19, "ten": 19, "hundr": 19, "straight": [19, 183], "respect": [19, 24, 33, 135, 139, 183, 259, 273, 299, 312, 318, 323, 347, 366, 369], "speed": [19, 161, 364], "tuppl": 19, "scalar": [19, 20, 26, 32, 137, 244, 310], "tmax_expr": 19, "15": [19, 145, 147, 150, 152, 153, 154, 158, 160, 162, 219, 222, 321, 335, 341, 347, 352, 353, 358, 359], "145": 19, "tempor": 20, "composit": [20, 26, 96, 209], "pipe": [20, 40, 41, 60, 102, 191, 192, 284, 303, 338, 357], "schedule1": 20, "schedule2": 20, "heavisid": [20, 118, 338], "ponder": 20, "signal": [20, 135], "filter": [20, 29], "parallel": 20, "rescal": [20, 292], "45": [20, 125, 146, 147, 160], "past": 20, "futur": 20, "bar": [20, 91, 138], "One": [21, 70, 90, 96, 135, 139, 168, 181, 182, 183, 184, 187, 263, 338, 354, 356, 369], "psi_0": [21, 100, 139, 262, 265, 266], "vec": [21, 43, 162, 164, 283], "linalg": [21, 166, 291, 298, 338, 365, 366], "norm": [21, 28, 71, 279, 305, 311, 316, 317, 319], "real": [22, 23, 24, 57, 100, 118, 119, 120, 124, 125, 126, 133, 134, 217, 262, 318, 338, 347, 353], "life": 22, "formul": [22, 23, 24, 25, 251, 253, 257, 258, 260, 272, 274, 276, 346, 347, 364, 369], "maxim": [22, 28, 35, 97, 100, 253, 256, 258, 281, 293, 346, 348], "At": [22, 34, 96, 242], "lowest": [22, 43, 183, 285, 346, 355], "intim": 22, "relat": [22, 28, 234, 305, 329], "qubo": [22, 23, 25, 34, 253, 256, 257, 259, 260, 276, 338, 347, 355, 369], "Ising": [22, 24, 25, 33, 34, 134, 253, 256, 257, 258, 260, 261, 272, 273, 276, 299, 338, 347, 355, 357, 369], "solut": [22, 31, 34, 170, 256, 257, 258, 260, 261, 262, 269, 276, 299, 347, 350, 351, 352, 353, 354, 355, 356, 357], "precis": [22, 41, 78, 88, 183, 293, 297, 365], "unconstrain": [22, 34, 251, 273], "h_": [23, 24, 34, 165, 166, 170, 171, 173, 180, 181, 183, 356, 364], "sigma_": [23, 26, 323], "j_": [23, 24, 34, 299, 331], "ij": [23, 24, 34, 163, 168, 170, 173, 175, 181, 187, 283, 299, 333, 336], "pmatrix": 23, "symmetr": [23, 24, 259, 273, 369], "zero": [23, 24, 29, 77, 96, 139, 166, 170, 183, 201, 259, 277, 295, 338, 363, 364, 365, 366], "quantiz": [23, 171, 173], "s_": [23, 24, 34, 162, 262], "clariti": [23, 367], "offset": [23, 24, 96, 100, 212, 246, 253, 257, 258, 259, 260, 261, 272, 273, 276, 299, 338, 369], "landscap": 23, "match": [23, 96, 237, 247, 255, 275, 292, 335], "convert": [23, 28, 47, 48, 49, 53, 55, 56, 58, 59, 62, 65, 68, 69, 70, 73, 161, 165, 166, 167, 180, 181, 305, 309, 333, 334, 335, 336, 364, 365], "vice": [23, 340, 341, 342, 343], "versa": [23, 340, 341, 343], "typic": [23, 174], "try": [23, 41, 79, 96, 139, 254, 256, 281, 338, 339, 365], "reach": [23, 24, 39, 295, 365], "adiabat": [23, 183, 356], "theorem": [23, 356], "al18": 23, "markov": [23, 34], "chain": [23, 34, 100, 134], "low": [23, 34, 41, 75, 137, 168, 170, 181, 185, 237, 272, 338, 353, 358, 359, 360, 361, 362, 365, 366], "ferromagnet": 23, "align": 23, "onto": [23, 68, 71, 301], "tend": [23, 43], "lower": [23, 28, 34, 35, 100, 126, 181, 182, 185, 206, 219, 254, 284, 293, 297, 355, 365, 367], "closer": 23, "word": [23, 235, 237, 295, 347], "aim": [23, 34, 161, 253, 338, 363], "tackl": [23, 346, 347], "min_": [23, 24], "problem_s": [23, 24, 369], "100": [23, 24, 29, 30, 162, 293, 366], "1000": [23, 24, 30, 283], "seed": [23, 24, 135, 293, 297, 299, 338, 369], "248": [23, 24], "h_field": [23, 369], "rand": [23, 24, 181, 182, 369], "any_mat": [23, 24, 369], "j_mat": [23, 369], "transpos": [23, 24, 77, 166, 167, 186, 369], "18": [23, 147, 150, 153, 154, 160, 352, 353, 358, 359, 369], "problem_is": [23, 369], "offset_i": [23, 259, 299, 369], "magnetic_field_h": [23, 259], "j_coupling_matrix": [23, 259], "problem_ising_job": 23, "gamma_t": [23, 24, 139, 259, 273, 350, 351, 352, 353, 354], "gamma_t_fun": 23, "nan": 23, "readi": [23, 24, 251, 254, 259, 273, 338, 355], "69198662": [23, 24], "48503501": 23, "02913885": 23, "56996588": 23, "84630373": 23, "99216786": 23, "72490608": 23, "36270136": 23, "21518767": 23, "43237698": 23, "53659164": 23, "43329047": 23, "63995666": 23, "75877295": 23, "67301865": 23, "74051823": 23, "84432295": 23, "68663996": 23, "76994591": 23, "78961076": 23, "38143552": 23, "traceback": [23, 51, 300, 357, 364], "recent": [23, 51, 300, 357, 364], "stdin": [23, 24, 51, 300, 335, 350, 351, 352, 353, 354, 357, 364], "30": [23, 36, 37, 147, 160, 338, 347, 352, 353, 358, 359], "nameerror": [23, 51, 300], "to_qubo": [23, 25, 256, 259], "combinatorialproblem": [23, 24, 25, 34, 251, 259, 268, 273, 355, 369], "to_combinatorial_problem": [23, 24, 259, 273], "tameem": 23, "albash": 23, "daniel": 23, "lidar": 23, "review": 23, "modern": 23, "90": 23, "015002": 23, "2018": 23, "url": [23, 102, 219, 225, 229, 278, 298, 303], "journal": [23, 225], "ap": [23, 219, 225], "rmp": 23, "1103": [23, 219, 225], "revmodphi": 23, "x_": [24, 364], "q_": 24, "quad": 24, "linear": [24, 143, 145, 156, 251, 253, 274, 295, 296, 297, 298, 338, 355, 366], "seen": [24, 26, 41, 78, 256, 284, 364, 365, 366], "2x_": 24, "q_mat": 24, "52": [24, 147, 160], "problem_qubo": 24, "offset_q": [24, 273], "q_matrix": [24, 273], "problem_qubo_job": 24, "na": [24, 340], "73860143": 24, "23485743": 24, "65543516": 24, "74898502": 24, "19440743": 24, "55240091": 24, "42782353": 24, "46931252": 24, "9406734": 24, "5541593": 24, "73200663": 24, "65215284": 24, "63773675": 24, "28187286": 24, "22": [24, 96, 147, 160, 252, 281, 352, 353, 358, 359, 365], "userwarn": [24, 350, 351, 352, 353, 354], "sqaqpu": [24, 350, 351, 352, 353, 354], "to_is": [24, 25, 256, 273], "var": [25, 34, 251, 255, 256], "claus": [25, 34, 206, 242, 251, 252, 256], "achiev": [25, 28, 346], "famou": [25, 346], "sat": [25, 251], "comb_prob": 25, "five": 25, "x1": 25, "x2": 25, "x3": 25, "x4": 25, "weight": [25, 251, 256, 262, 281, 288, 335, 356], "add_claus": [25, 256], "75": [25, 365], "86": 25, "comb_prob_ob": 25, "get_observ": [25, 254, 255, 256, 259, 273, 274, 275], "1500000000000001": 25, "1875": 25, "zz": [25, 26, 96, 162, 188, 189, 190, 252, 256, 364], "zzz": [25, 252], "56": [25, 160], "215": 25, "per": [25, 74, 281, 298, 348, 350, 351, 352, 353, 354, 358, 360, 361], "exemplifi": 25, "my_observ": 26, "xz": [26, 30, 188, 190, 364], "zxzx": 26, "constant_coeff": [26, 134, 166, 167, 181, 182, 186, 365], "multipli": [26, 195, 196, 199, 232, 233, 253, 258, 260, 276, 366], "obs1": 26, "obs2": 26, "tensor": [26, 141, 171, 205, 217, 283, 292, 331, 336, 366], "__xor__": 26, "zzx": 26, "commut": [26, 279, 286, 364, 366], "__or__": 26, "2j": [26, 119, 120, 127, 129, 131], "yz": [26, 188, 190], "shorthand": 26, "notat": [26, 206], "obs3": 26, "previous": [26, 365, 366], "get": [26, 28, 29, 35, 39, 41, 100, 118, 138, 161, 169, 201, 203, 296, 337, 338, 341, 365, 366, 367, 368], "complex": [26, 77, 100, 118, 119, 120, 124, 125, 127, 128, 129, 131, 137, 138, 139, 287, 349, 362], "ones": [26, 183, 346, 347], "zx": 26, "nbshot": [26, 28, 29, 30, 35, 91, 96, 100, 139, 162, 254, 298, 338], "2048": 26, "retriev": [27, 42, 54, 60, 217, 281, 338], "showcas": 27, "batch": [27, 33, 35, 39, 40, 57, 60, 61, 63, 64, 90, 96, 100, 102, 191, 192, 193, 194, 195, 196, 197, 198, 199, 218, 268, 269, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 303, 304, 357, 358, 359, 360, 361, 362], "view": [28, 338], "memori": [28, 36, 37, 86, 217, 218, 297, 324, 325, 364], "he": 28, "wavefunct": [28, 165, 181], "commonli": [28, 305], "project": [28, 68, 70, 162], "formal": [28, 34, 281], "speak": 28, "axi": [28, 217, 365], "yield": [28, 29, 30, 31, 96, 192, 279, 355], "rest": [28, 31, 34, 40, 41], "statist": [28, 96, 222, 338], "accur": [28, 183], "estim": [28, 29, 30, 64, 91, 137, 138, 183, 206, 236, 337, 338, 341, 363, 366], "frequenc": [28, 29, 91, 96, 135, 138, 139], "01": [28, 139, 281, 293, 320, 338, 354, 369], "repetit": [28, 237], "decid": [28, 29], "subset": [28, 70, 73, 260, 262, 271, 286, 337, 347, 353, 357, 358, 359, 362], "On": [28, 41, 302], "subresult": 28, "absenc": [28, 70], "observablesplitt": [28, 30, 277], "enhanc": 28, "capac": 28, "aggreg": [28, 33, 35, 90, 91, 96, 139, 237, 278], "threshold": [28, 29, 35, 91, 96, 100, 139, 162, 181, 182, 185, 237, 279], "uncertainti": 28, "meant": [28, 94, 100, 183, 184, 255, 365], "request": [28, 64, 83, 137], "metadata": [28, 32], "show": [28, 96, 183, 248, 347, 350, 353, 365, 366], "1024": [28, 35, 96], "reconstruct": [28, 32], "load": [28, 32, 35, 60, 61, 94, 95, 96, 99, 100, 137, 139, 142, 217, 259, 338], "autom": [28, 43, 161], "conduct": 29, "amp_threshold": [29, 96, 100, 139], "certain": [29, 43, 366], "finit": [29, 30, 138], "err": [29, 32, 137, 138, 162], "53": [29, 160], "050161355804659184": 29, "47": [29, 147, 160, 353, 356], "ideal": [29, 30, 36], "nois": [29, 30, 36, 43, 135, 200, 201, 202, 203, 204, 205, 277, 295, 305, 327, 328, 329, 337, 338, 363, 366], "n_": [29, 174, 175, 295, 334, 336, 366], "mathrm": [29, 164, 165, 171, 173, 174, 181, 183, 201, 203, 234, 283, 295, 310, 312, 313, 314, 315, 320, 329, 334, 336, 366], "took": 29, "x_0": 30, "otim": [30, 262, 321, 323, 326, 331, 334, 356], "z_1": 30, "devoid": 30, "10000": [30, 272], "07999999999999999": 30, "10018165319240663": 30, "048000000000000015": 30, "03160213117330372": 30, "020600000000000035": 30, "009998377906244372": 30, "grasp": 31, "understand": 31, "perfectli": 31, "pars": [31, 51, 191, 192, 193, 194, 195, 196, 197, 199, 267, 268, 269, 270, 271, 357, 358, 359, 360, 361, 362], "flexibl": [31, 48, 53, 56, 62], "insert": [31, 43, 96, 295], "my_stack": [31, 39], "batchgener": [31, 102, 338], "post_process": [31, 32, 39, 192, 193, 198, 278], "spec": [31, 40, 42, 96, 99, 100, 192, 193, 194, 195, 196, 197, 198, 199, 278, 281, 282, 285, 289, 290, 294, 295], "cat": 31, "abstractgener": [31, 102, 191, 198, 338], "catstategener": 31, "target": [31, 42, 78, 96, 100, 142, 183, 251, 264, 274, 355, 356], "2f": 31, "000": [31, 40, 347], "111": [31, 40], "advantag": 31, "dummi": [31, 43, 51, 192, 338], "prod": 31, "rx_i": 31, "alpha_i": 31, "best": [31, 41, 43, 96, 139, 253, 256, 257, 258, 259, 260, 261, 267, 268, 269, 270, 271, 272, 273, 276, 277, 298, 337, 346, 347, 349, 357, 362, 366], "fix": [31, 118, 142, 262, 285, 356], "dummyenergyminim": 31, "practis": [31, 35, 281], "better": [31, 35, 183, 278, 338, 355, 365, 367], "enumer": [31, 40, 79, 80, 90, 143, 252, 281, 307, 366], "best_angles_circ": 31, "z_i": 31, "\u03c3": 31, "isclos": 31, "atol": 31, "11111": 31, "nor": [31, 35], "batchresult": [31, 39, 40, 57, 61, 63, 64, 90, 192, 193, 198, 257, 258, 260, 261, 268, 276, 278, 284, 287, 297, 298, 303, 338], "catstateresult": 31, "__init__": [31, 35, 41, 357], "invalid": [31, 35, 80, 335, 338], "server": [31, 33, 35, 39, 40, 64, 79, 102, 191, 192, 198, 277, 278, 290, 296, 298, 303], "synchron": [31, 33, 39, 60, 61, 341], "asynchron": [31, 39, 59, 60, 61, 63, 341], "side": [31, 35, 39, 40, 96, 289], "serv": [31, 33, 39, 102, 192, 198, 278, 298, 303], "port": [31, 33, 39, 102, 103, 192, 198, 278, 290, 298, 303, 304, 342], "ip": [31, 33, 39, 103, 198, 290, 304, 342], "maxcutgener": [31, 191, 352, 357, 358], "1234": [31, 33, 39], "client": [31, 33, 35, 39, 40, 79, 284, 338], "distant": [31, 33, 39, 40], "listen": [31, 33, 39, 102, 192, 278, 298, 303, 342], "127": [31, 33, 39, 342], "remotebatchgener": [31, 191], "disconnect": [31, 33, 39], "lost": [31, 33, 39, 248], "encapsul": 32, "raw_data": [32, 40, 91, 137, 300, 350, 351, 352, 353, 354], "value_data": [32, 40, 137], "statevector": [32, 40, 137, 314, 338], "intermediate_measur": [32, 137, 138], "summar": 32, "trace": [32, 43, 305, 311, 313, 315, 317, 318, 331, 335], "meta": [33, 35, 41, 43, 94, 95, 284, 338], "behavior": [33, 39, 71, 79, 96, 206, 281, 289, 300], "remoteqpu": [33, 296, 338], "albeit": 34, "solver": [34, 41, 253, 257, 258, 260, 261, 272, 276, 299, 347, 367], "resembl": 34, "simulatedann": [34, 116, 296, 338, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362], "sqa": [34, 253, 257, 258, 259, 260, 261, 272, 273, 276], "benchmark": [34, 253, 257, 258, 259, 260, 261, 272, 273, 276], "98": [34, 347], "histor": 34, "heurist": [34, 254, 297, 355], "stochast": [34, 135, 138, 277, 293, 366], "temperatur": [34, 253, 257, 258, 259, 260, 261, 272, 273, 276, 299, 329, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362], "jump": [34, 202, 204], "barrier": 34, "escap": 34, "optima": 34, "hopefulli": 34, "global": [34, 305, 356, 366], "optimum": 34, "p_": [34, 91, 138], "min": [34, 41, 118, 258, 259, 262, 273, 365, 366], "delta": [34, 183], "switch": 34, "wherea": [34, 90, 295], "pseudo": [34, 366], "inherit": [35, 40, 41, 113, 206, 251, 256, 259, 273, 284, 287, 298, 338, 355, 364], "qpuhandl": [35, 66, 96, 100, 113, 162, 289, 296, 297, 298, 304], "hardwarespec": [35, 39, 40, 42, 90, 96, 100, 102, 142, 145, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 194, 195, 196, 197, 198, 199, 281, 282, 289, 294, 303, 338], "integr": [35, 161, 163, 165, 170, 181, 182, 184, 187, 329, 365], "rais": [35, 40, 68, 72, 79, 80, 81, 82, 92, 93, 96, 97, 104, 108, 109, 110, 112, 237, 256, 259, 273, 302, 338], "qpuexcept": [35, 79, 93, 338], "remotli": [35, 40], "assert_qpu": [35, 90], "my_condit": [35, 40], "parent": [35, 41, 206, 213, 253, 257, 258, 259, 260, 261, 272, 273, 276], "myqpu": 35, "super": [35, 41], "_paramet": 35, "dict": [35, 51, 57, 61, 64, 94, 95, 96, 97, 100, 110, 121, 142, 184, 201, 202, 203, 204, 284, 287, 288, 291, 293, 297, 298, 303, 329, 358, 359, 360, 361, 362], "str": [35, 51, 60, 61, 64, 77, 78, 81, 82, 85, 86, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 110, 111, 121, 132, 137, 139, 141, 142, 144, 166, 167, 173, 180, 183, 184, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 218, 235, 237, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 266, 272, 276, 278, 283, 286, 287, 288, 290, 294, 295, 298, 303, 304, 320, 321, 329, 333, 334, 336, 350, 351, 352, 353, 354, 366], "remov": [35, 96, 100, 218, 237, 252, 331, 338], "valid": [35, 90, 248, 347], "overrid": [35, 218, 289], "temporarli": 35, "dictionari": [35, 51, 78, 96, 97, 100, 110, 121, 136, 142, 184, 201, 203, 235, 253, 257, 258, 259, 260, 261, 272, 273, 276, 287, 329], "json": [35, 43], "_default_opt": 35, "_overrid": 35, "split": [35, 36, 286, 367], "correct": [35, 235, 245, 254, 264, 265, 347, 366], "exceut": 35, "add_sampl": [35, 137], "aggregate_data": [35, 90, 96, 100, 139], "card": 35, "underneath": [35, 244, 297], "skeleton": [35, 206], "wrapper": [35, 57, 59, 60, 61, 63, 90, 94, 95, 96, 99, 100, 137, 138, 142, 161, 210, 214, 244, 338], "max_nb_shot": 35, "qpuskeleton": 35, "arg": [35, 53, 54, 66, 96, 102, 111, 192, 193, 198, 201, 202, 203, 204, 207, 214, 237, 248, 252, 269, 270, 271, 278, 282], "nb_shot": 35, "processingtyp": [35, 42, 87, 99, 100, 298], "integ": [35, 70, 71, 73, 77, 78, 96, 116, 117, 125, 140, 164, 238, 240, 241, 243, 245, 247, 248, 251, 253, 288, 347], "measured_qubit": 35, "todo": 35, "compress": [35, 161, 172, 365], "caster": [35, 338], "shorter": 35, "tupl": [35, 48, 53, 56, 62, 70, 71, 73, 74, 96, 135, 139, 162, 163, 165, 181, 183, 184, 185, 187, 201, 202, 203, 259, 269, 273, 299, 338], "size": [35, 40, 78, 171, 181, 183, 196, 217, 220, 221, 222, 223, 224, 226, 227, 228, 230, 231, 232, 233, 237, 248, 253, 258, 260, 261, 269, 272, 283, 288, 331, 335, 347, 348, 350, 351, 353, 359, 360], "compris": 36, "propos": [36, 37, 161, 179], "pybind11": [36, 37], "remark": [36, 37], "exponenti": [36, 37, 118, 124, 222, 295, 366, 367], "around": [36, 37, 59, 60, 61, 63, 174, 183], "ram": [36, 37], "deliv": [36, 38], "unitari": [36, 38, 77, 96, 206, 208, 213, 216, 236, 310, 365, 366], "pylinalg": [37, 44, 45, 79, 237, 281, 289, 296, 297, 302, 338, 341], "my": 39, "transpil": [39, 64], "incom": [39, 41, 96], "aver": 39, "flow": [39, 96, 304], "plugin1": 39, "plugin2": 39, "my_qpu": [39, 40], "overal": [39, 96, 252, 254, 347, 366], "wide": [39, 41, 364], "remap": [39, 77, 78, 96, 222], "remoteplugin": [39, 277, 338], "pre": [39, 40, 206, 356], "subtyp": 39, "junction": [39, 277, 287, 337, 338], "resubmit": [39, 40], "repair": [39, 40], "abstractplugin": [40, 96, 100, 114, 277, 304], "pluginexcept": [40, 79, 92], "assert_plugin": [40, 90], "get_spec": [40, 42, 303], "stage": [40, 41, 42, 183, 237, 242], "myplugin": 40, "hardware_spec": 40, "someth": [40, 338], "batch_result": [40, 198, 278], "do_post_process": [40, 278], "deloc": 40, "debug": [40, 51, 121, 218, 237, 300], "screen": 40, "ghz": 40, "all_result": 40, "need_flip": 40, "lsb_first": [40, 137], "has_statevector": [40, 137], "70710678": 40, "resdata": 40, "_serial": 40, "mem_ptr": 40, "data_typ": 40, "data_s": 40, "qreg": [40, 51, 96, 138, 140, 237, 345], "qregist": [40, 96, 138, 139, 140, 206, 237, 248], "0x15400def8c40": 40, "msb": [40, 140], "_subtype_metadata": 40, "0x15400bb52580": 40, "0x15400bb52430": 40, "0x15400c420f40": 40, "_valu": [40, 235], "error_data": 40, "in_memori": 40, "_parameter_map": 40, "values_data": 40, "emb": [41, 173], "middl": 41, "simpler": [41, 262], "deal": [41, 183, 237], "eigensolv": [41, 337, 338, 363], "until": [41, 183], "satfisfi": 41, "cous": 41, "outsid": [41, 183], "workflow": 41, "architectur": [41, 145, 338], "With": 41, "trivial": [41, 217, 240, 286, 356], "treatment": 41, "iterativeexplor": 41, "naiv": [41, 286], "width": [41, 70, 73, 262], "ecount": 41, "initial_job": 41, "linspac": 41, "all_valu": 41, "val": [41, 240, 241, 245], "current_job": 41, "min_val": 41, "best_index": 41, "best_param": 41, "entri": [41, 78, 96, 262], "point": [41, 122, 135, 247, 285, 287, 295, 298, 338], "recept": [41, 284, 287], "acc": [41, 222], "transmit": [41, 79, 137, 141, 284], "down": [41, 171, 173, 284, 355, 366], "upper": [41, 126, 181, 182, 183, 185], "variational_circ": 41, "beta": [41, 184, 217, 329, 355], "9979453927503363": 41, "077478517802246": 41, "bother": 41, "administr": [41, 237, 287], "burden": [41, 287], "extract": [41, 69, 77, 118, 125, 137, 206, 219, 237, 251, 256, 268, 270, 271, 299, 350, 351, 352, 353, 354, 364], "slightli": [41, 338], "graph": [42, 99, 142, 143, 191, 194, 195, 196, 197, 199, 251, 252, 257, 258, 260, 261, 267, 269, 270, 271, 276, 286, 337, 351, 352, 354, 356, 357, 358, 360, 361, 369], "gateset": [42, 96, 99, 109, 112, 205, 218, 237, 289], "explan": 42, "from_nx": [42, 142], "gate_set": [42, 45, 90, 96, 207, 218, 254, 289], "comm": [42, 44, 45, 68, 69, 74, 338], "ttype": [42, 68, 69, 74, 76, 79, 83, 87], "my_spec": 42, "processing_typ": [42, 99, 338], "exisit": 43, "150": 43, "optimization_trac": 43, "89562716836795": 43, "0789464397529813": 43, "8404604843194783": 43, "488894275877687": 43, "63533861453529": 43, "5567739870806183": 43, "5897071867046181": 43, "9508508799220681": 43, "0065105048238736": 43, "4108106175142451": 43, "6896997015296447": 43, "9524038093886307": 43, "1884738445414933": 43, "2182497953597213": 43, "6343360274915817": 43, "503880432098417": 43, "6474979746208023": 43, "7380760841852467": 43, "885180001260298": 43, "006406856652597": 43, "1474815390022566": 43, "281677477701024": 43, "4167652995447737": 43, "548672020892431": 43, "569327751634531": 43, "7544943305703584": 43, "799474244514867": 43, "9682070371978124": 43, "072283448364885": 43, "220003732098279": 43, "352737773360023": 43, "486435940716627": 43, "610030420067688": 43, "724614307201302": 43, "841680834779259": 43, "898902122849405": 43, "064728628084458": 43, "005698624476446": 43, "062101576888566": 43, "094044148514078": 43, "120374527469179": 43, "024121894944367": 43, "163394338928103": 43, "199119909085369": 43, "2321949059592505": 43, "26594943612896": 43, "299121404294452": 43, "327495026692489": 43, "362989293458524": 43, "396290002635977": 43, "430150086758003": 43, "463553776385807": 43, "493162816512851": 43, "528325761120221": 43, "561644022087729": 43, "595592567945182": 43, "62932392073707": 43, "662020804138743": 43, "696308305676505": 43, "729886874985889": 43, "76400373056741": 43, "798074264748662": 43, "831972587925897": 43, "8630725480071115": 43, "8973807303997265": 43, "931701634219324": 43, "965892239438777": 43, "999990846985177": 43, "034070246118855": 43, "068133253574796": 43, "102213648647753": 43, "136287295816599": 43, "170362465904152": 43, "204436002684624": 43, "23849204366415": 43, "272572537106887": 43, "3066425908129435": 43, "340718927738612": 43, "374794885847524": 43, "408870068700052": 43, "442931391038467": 43, "47701176530996": 43, "511084005324339": 43, "545159716003633": 43, "579235107739551": 43, "613309694534652": 43, "647376796630259": 43, "681443586513792": 43, "715513991640044": 43, "749572549674554": 43, "783274806176131": 43, "817450409842801": 43, "851447703555676": 43, "88551407380093": 43, "919573636549268": 43, "953613227262788": 43, "987435244370877": 43, "021576033443881": 43, "0555110873452955": 43, "08960701427813": 43, "123681423322812": 43, "157756991075001": 43, "191831459614324": 43, "225903450729172": 43, "259979721478664": 43, "294056127735358": 43, "328132354346732": 43, "362208395137258": 43, "396284397938599": 43, "430360305045742": 43, "464435482710636": 43, "498511556424958": 43, "532587649668976": 43, "566663679461911": 43, "600739675241673": 43, "634815674098659": 43, "668891582323487": 43, "702967604246339": 43, "737043594611737": 43, "771119588677479": 43, "805195571513989": 43, "839271213696588": 43, "87334731039558": 43, "907423180958973": 43, "941499194269673": 43, "975575206229069": 43, "00965120612285": 43, "043727204627778": 43, "077803201435108": 43, "111879194529928": 43, "145955194415397": 43, "180031193653026": 43, "214107192633227": 43, "248183191492087": 43, "28225918776398": 43, "316335187454452": 43, "35041118547234": 43, "384487184484389": 43, "41856318352227": 43, "452639182426697": 43, "486715181343762": 43, "520791180266926": 43, "554867179193433": 43, "5889431780135": 43, "623019176973287": 43, "657095175869731": 43, "691171174797175": 43, "725247173726201": 43, "759323172656163": 43, "79339917158584": 43, "827475170514266": 43, "861551169441835": 43, "choic": [43, 305], "optimizer_arg": 43, "627665943893014": 43, "33167882869147": 43, "8404918391172164": 43, "987715789129523": 43, "1930976684689862": 43, "6112585986400006": 43, "504152929819727": 43, "76973196843793": 43, "45273487084784847": 43, "6274169377993013": 43, "1631208538031215": 43, "9178584765212787": 43, "4247770289340873": 43, "6504895520942422": 43, "5027018787396798": 43, "803145130385346": 43, "377975654375508": 43, "9602381984643482": 43, "1014945867151664": 43, "2032119191540143": 43, "3454042682157374": 43, "4833241749502086": 43, "6197796824312576": 43, "7555653242229705": 43, "892055475230719": 43, "027978005271967": 43, "1644045789996142": 43, "3005807363089184": 43, "4369024808322775": 43, "5732299113140864": 43, "7095385698149146": 43, "8458412819310945": 43, "9821318826005188": 43, "118429631593048": 43, "25473317736527": 43, "3910004958928415": 43, "527319368126947": 43, "663610784907347": 43, "79991863957266": 43, "936224270235426": 43, "0725260096600175": 43, "208829212546394": 43, "345132015259038": 43, "481427209265923": 43, "617695737323439": 43, "754007433762406": 43, "890322550514806": 43, "026607463056106": 43, "162914028275716": 43, "299187016400474": 43, "435298781758989": 43, "5716994284689845": 43, "707844581778288": 43, "844236913245165": 43, "979837456945321": 43, "1160678185589825": 43, "251433034277286": 43, "3823314340284165": 43, "521628051516121": 43, "652390143442487": 43, "791961185012825": 43, "916462779139378": 43, "050152460039115": 43, "155841191380464": 43, "211554444386422": 43, "372744387756192": 43, "537527637767775": 43, "64125055460249": 43, "765438172079948": 43, "821014842293005": 43, "930155095199984": 43, "696311854668654": 43, "78561501026204": 43, "97003815879209": 43, "015083188348672": 43, "041010758109353": 43, "001239610811144": 43, "074212629273271": 43, "108288732094554": 43, "141287837855092": 43, "17573439782939": 43, "209065709942358": 43, "243320284026208": 43, "27736032967622": 43, "31142966570701": 43, "345464309487136": 43, "379547303086145": 43, "41361820691011": 43, "44676977622312": 43, "48113382287297": 43, "514888120105395": 43, "548997546874293": 43, "583116432298302": 43, "617208234235486": 43, "651283749271748": 43, "685357387000618": 43, "719433967863619": 43, "753509803958474": 43, "787585754039323": 43, "82166157223049": 43, "855735568575957": 43, "889811811894052": 43, "923886068357195": 43, "957962097355761": 43, "99203716147292": 43, "026113390406321": 43, "060188858388557": 43, "094265012542099": 43, "1283408945153": 43, "162416890442108": 43, "19649288752726": 43, "230568886264491": 43, "264644888360031": 43, "298720897384399": 43, "332796912318575": 43, "366872915639927": 43, "400948913231547": 43, "435024908751286": 43, "469100901559148": 43, "503176901822982": 43, "537252893394736": 43, "571328892889884": 43, "605404890093645": 43, "639480814953943": 43, "67355683561048": 43, "707632828137992": 43, "741708820813878": 43, "77578482052694": 43, "809860811076826": 43, "84393680304612": 43, "878012796760316": 43, "912088778338202": 43, "946164745569407": 43, "980240726529086": 43, "014316675405091": 43, "048391843510284": 43, "082467956323006": 43, "116543144780668": 43, "15061914118893": 43, "184694561438116": 43, "218770596034307": 43, "252846102372326": 43, "286922106394027": 43, "320997712668271": 43, "355073702471724": 43, "389149364423982": 43, "423225291035184": 43, "457300992497949": 43, "491376614813253": 43, "525452374578347": 43, "559527678928404": 43, "593587045205803": 43, "seqoptim": [43, 162, 277, 366], "resili": 43, "gradient": [43, 100, 277, 279, 283, 337, 338, 363, 366], "sensit": [43, 366], "multiplelaunchesanalyz": [43, 277, 366], "quop": [44, 45, 201, 202, 338], "datamodel": [45, 68, 69, 75], "circuit_build": [45, 90, 201], "openqasm": [45, 46, 337, 340], "mixing_factori": [45, 251], "cirq_to_qlm": [47, 343], "qlm_to_cirq": [47, 343], "sep_measur": [48, 53, 56, 62], "kwarg": [48, 51, 53, 54, 56, 62, 66, 95, 96, 99, 100, 102, 137, 138, 139, 142, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 207, 235, 237, 240, 244, 247, 248, 253, 254, 256, 257, 258, 259, 260, 261, 269, 270, 271, 272, 273, 274, 276, 278, 282, 286, 288, 291, 293, 300], "googl": [48, 145, 147, 338, 343], "measureless": [48, 53, 56, 62], "resulting_circuit": [48, 53, 56, 62], "list_qubit": [48, 53, 56, 62], "regular": [48, 53, 56, 62, 145, 283], "qlm_circuit": [49, 58, 65, 341, 342], "oqasmpars": [50, 345], "parser": [50, 51, 345], "include_matric": [51, 79, 218, 237], "bool": [51, 64, 77, 88, 92, 93, 96, 97, 98, 100, 132, 134, 137, 139, 141, 142, 162, 166, 167, 172, 176, 178, 183, 184, 186, 206, 218, 237, 240, 241, 245, 247, 249, 252, 254, 255, 256, 262, 268, 269, 275, 280, 281, 282, 283, 284, 285, 287, 292, 293, 297, 306, 311, 316, 317, 318, 319, 329, 334, 335, 336], "creg": [51, 345], "openqasm_cod": 51, "p": [51, 100, 170, 171, 173, 176, 181, 187, 201, 203, 234, 247, 292, 320, 321, 322, 327, 329, 336, 366], "my_custom_g": 51, "alia": [51, 97], "custom_g": 51, "oqasm_cod": 51, "els": [51, 252, 298, 364], "17": [51, 123, 147, 150, 153, 154, 160, 352, 353, 358, 359], "write_t": 51, "tabmodul": 51, "oqasm_tab": 51, "chunk": 51, "activ": [51, 161, 163, 168, 169, 170, 181, 182, 185, 338, 363, 365], "tab": [51, 98], "aqasmengin": [52, 54, 344], "projectq_to_qlm": [53, 344], "stream": 54, "pyquil_to_qlm": [55, 342], "pyquilqpu": [55, 342], "qlm_to_pyquil": [55, 342], "pyquil_prog": 56, "rigetti": [57, 145, 157, 158], "chip": [57, 60, 61, 145, 160, 338], "tell": [57, 303], "skip": [57, 64, 206, 213, 218, 237], "set_qpu": [57, 66], "embed": [57, 61, 64, 173, 279, 283, 288, 289, 291, 292, 293, 297, 298, 303, 364], "submit_job": [57, 284, 298, 299, 303], "qlm_job": [57, 342], "program_pragma": 58, "asyncbackendtoqpu": [59, 61, 63, 341], "backend": [59, 60, 61, 64, 66, 100], "useabl": 59, "backendtoqpu": [59, 60, 341], "qiskit_to_qlm": [59, 341], "qiskitjob": [59, 60, 341], "qlm_to_qiskit": [59, 341], "qputobackend": [59, 341], "qiskitruntimeqpu": [59, 338, 341], "token": [60, 61, 118, 132, 341], "ibmq_backend": [60, 61, 341], "ibmq_qasm_simul": [60, 61, 64, 341], "ibm": [60, 61, 64, 145, 149, 150, 151, 152, 153, 154, 155, 338, 341], "aer_simul": [60, 61], "argment": [60, 61], "suppos": [60, 61, 66, 81, 82], "ibmq": [60, 61, 341], "login": [60, 61], "suppli": [60, 61, 329], "qiskit_token": [60, 61], "retrieve_job": [60, 63], "file_nam": [60, 63], "qlm_batch": [60, 63], "jobv1": 60, "optimization_level": 61, "despit": 61, "light": 61, "heavi": 61, "highest": [61, 347], "qiskit_circuit": [62, 341], "async_job": 63, "max_shot": 63, "cancel": 63, "job_id": 63, "id": [63, 77], "skip_transpil": 64, "experi": [64, 183, 338], "sampler": [64, 341], "primit": [64, 341], "backend_nam": 64, "qiskitruntimeservic": [64, 341], "rxx": 65, "rzz": 65, "quantumcircuit": 65, "connector": 66, "plugabl": 66, "backendconfigur": 66, "gatetyp": [68, 78, 97], "classicctrl": [68, 78], "clasic": [68, 206], "mat2nparrai": 68, "raise_break": 68, "ndarrai": [69, 70, 71, 73, 74, 100, 111, 134, 139, 162, 163, 165, 166, 167, 170, 171, 173, 175, 181, 182, 184, 185, 186, 187, 217, 264, 266, 287, 288, 292, 298, 308, 309, 323, 324, 325, 326, 331, 335], "shape": [69, 181, 182, 217, 244, 247, 298, 336, 355, 365], "state_vec": [70, 71, 73], "nb_sampl": 70, "thank": [70, 170], "ask": [70, 71, 298, 338, 339], "intprob_list": 70, "occur": [70, 71, 73, 74, 96, 338, 366], "renorm": [70, 71], "afterward": [70, 237], "short": 70, "prob": [70, 73, 321, 322, 327, 329, 330, 365], "intprob": 71, "But": 71, "undergo": 71, "intermediari": [71, 292], "ax": 71, "recomput": 71, "op_po": 72, "nd": 73, "tensordot": [74, 298], "intermediatemeasur": [74, 87, 137, 138], "descriptor": 74, "branch": 74, "gatedefinit": [76, 78], "gated": [77, 78, 96], "writ": 77, "subgat": [77, 96], "ncol": 77, "column": 77, "nrow": 77, "row": 77, "is_ctrl": 77, "is_dag": 77, "is_conj": 77, "conjug": [77, 166, 167, 186, 237], "is_tran": 77, "nbctrl": 77, "signifi": [77, 237], "strict": 77, "posit": [77, 88, 96, 118, 128, 131, 173, 195, 196, 199, 253, 258, 260, 276, 288, 305, 316, 357], "circuit_implement": 77, "complexnumb": [77, 139], "im": 77, "_0": [77, 173, 262], "_2": [77, 96], "distinguish": [78, 205, 321], "uniqu": [78, 85, 275], "identify": 78, "optyp": 78, "rpf": 78, "permut": 78, "prefix": [78, 98, 206], "abort": [78, 80], "formula_ev": [78, 90], "cbit_valu": 78, "rewir": 78, "useful": 79, "cleanli": [79, 248], "catch": 79, "errortyp": 79, "pack": 79, "character": 79, "excp": 79, "modulenam": [79, 81, 82], "103": 79, "encount": 79, "abort_cod": 80, "invalid_arg": 80, "nonresult": 80, "illegal_g": 80, "nbcbit": [80, 96], "not_simulat": 80, "stop": [80, 237, 279, 282, 283, 293], "unknown": [80, 183], "compat": [80, 240, 338, 357, 364], "simulat": [80, 338], "allocationmodel": [83, 303], "resourcemodel": [83, 303], "sequential_round_count": 84, "parallel_job_count": 84, "allocated_thread_count_per_job": 84, "allocated_total_memory_mb": 84, "estimated_batch_completion_tim": 84, "reservation_id": 84, "devicetyp": 85, "manufactur": 85, "qaptivaqpu": 85, "job_count": 86, "exect": 86, "mem_necessary_biggest_job_mb": 86, "biggest": 86, "wished_thread_count": 86, "thread": [86, 102, 192, 278, 297, 298, 303, 335], "gate_po": 88, "hat": [90, 162, 181, 187, 295, 334, 366], "boson": 90, "hilbert": [90, 134], "span": [90, 134], "topologytyp": [90, 142, 289], "quantiti": [90, 281, 355], "arithexpress": [90, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 144, 259, 273, 299, 338], "consol": [90, 96, 282], "ascii": [90, 97], "art": [90, 97], "printer": [90, 96], "plot_in_notebook": [90, 96, 97], "thriftresult": [91, 137], "report": [91, 338, 339], "varepsilon_": [91, 138], "equiv": [91, 138, 165, 175, 181, 234, 310, 334, 336], "f_": [91, 138, 171, 173, 310, 312], "p_k": [91, 138], "math": [91, 118, 122, 123, 124, 128, 130], "f_k": [91, 138], "unicod": [92, 93, 103, 198], "serializ": [94, 95, 96, 99, 137, 138, 142, 144], "fname": [94, 95, 96, 99, 100, 137, 139, 142, 237, 259], "classmethod": [94, 95, 96, 99, 100, 137, 138, 139, 142, 259], "from_byt": [94, 96, 100, 137, 138, 142], "byte": [94, 96, 100, 137, 138, 142], "raw": [94, 96, 100, 137, 138, 142, 267], "from_thrift": [94, 95, 96, 99, 100, 137, 138, 142, 259], "tobject": [94, 95, 96, 99, 100, 137, 138, 142, 259], "to_cpp": [94, 100], "transmiss": [94, 100], "to_thrift": [94, 100, 121, 144], "map": [95, 96, 100, 104, 106, 107, 137, 142, 164, 166, 167, 180, 235, 287, 305, 338], "_gate_set": 96, "has_matric": 96, "var_dic": [96, 121], "ancilla_map": 96, "_serialized_gate_set": 96, "hand": [96, 102, 121, 209, 238, 240, 241, 242, 243, 245], "0x14af51c25820": 96, "bind_vari": [96, 162, 235], "v_name": 96, "v_valu": 96, "fulli": [96, 146, 345, 355], "regener": 96, "portion": 96, "feel": 96, "deepcopi": [96, 166, 167, 186, 280], "beforehand": [96, 280], "freshli": 96, "v_dictionari": 96, "fill": 96, "shuffl": 96, "dagger_from_param": 96, "crawl": [96, 218], "clear": 96, "typeerror": [96, 357], "valueerror": 96, "callabl": [96, 132, 281, 286], "linker": [96, 237], "_10": 96, "_8": 96, "asbtract": 96, "invert": [96, 222], "334": 96, "smarter": 96, "smart_dagg": 96, "gate_tim": [96, 201, 202, 203], "unspecifi": 96, "eval": [96, 100, 162], "fill_matric": 96, "submatrices_onli": [96, 218, 237, 338], "include_default_gate_set": 96, "insert_g": 96, "remove_lock": [96, 237], "lock": [96, 218, 237], "placehold": [96, 303], "shift_qbit": [96, 100], "job_typ": [96, 139, 193, 194, 195, 196, 197, 199, 357, 358, 359, 360, 361, 362, 366], "094947017729282e": 96, "largest": [96, 139], "constain": 96, "apparit": [96, 139], "doubl": [96, 139, 167, 168, 170, 195, 196, 199, 253, 257, 258, 259, 260, 261, 272, 273, 276, 297, 299], "prune": [96, 139], "unlik": [96, 139], "40": [96, 139, 147, 160, 347], "easili": [96, 208, 281, 298, 347, 364], "concaten": 96, "__add__": 96, "cat_circuit": 96, "tensori": 96, "__mult__": 96, "kron_circuit": 96, "among": [96, 205, 257, 258, 260, 261, 283, 320, 321, 338, 347, 363], "deseri": 96, "my_circuit": 96, "new_circuit": 96, "34": [96, 147, 160, 350, 351, 353], "5707963267948966": [96, 120], "7853981633974483": 96, "39269908169872414": 96, "_4": 96, "_6": 96, "total": [96, 167, 181, 182, 186, 248, 295, 338], "extens": [96, 366], "max_depth": 97, "circuit_nam": 97, "renaming_dict": [97, 136], "wait": [97, 282, 341], "visual": [97, 269], "ipython": [97, 136, 338], "detect": 97, "formula_str": 98, "as_graph": 99, "nqbit": [99, 134, 139, 142, 167, 168, 169, 174, 181, 182, 186, 309, 320, 321, 323, 336, 364, 365], "to_nx": [99, 142, 146], "rigetti_aspen": [99, 145], "nx_graph": [99, 142], "as_quameleon": 99, "quameleonplugin": [99, 277, 338], "easi": [99, 281, 368], "quameleon": [99, 289], "differenti": [100, 121, 132, 144, 337, 338], "vname": 100, "equat": [100, 195, 196, 199, 253, 258, 260, 276], "partial": [100, 283, 305, 331, 338], "w": [100, 121, 144, 163, 165, 181], "theta_j": [100, 283], "psi_i": 100, "induc": 100, "twice": 100, "possibli": [100, 124, 127, 129, 139, 140, 201, 202, 203], "unpack": [100, 137], "job_to_run": 100, "group": [100, 173, 286, 339], "icreas": 100, "probail": 100, "remoteappl": 101, "commonqpu": [102, 113], "host_ip": [102, 192, 278, 298, 303], "localhost": [102, 192, 278, 298, 303], "server_typ": [102, 192, 278, 298, 303], "multi": [102, 161, 177, 178, 192, 278, 298, 303, 365], "pool": [102, 192, 248, 278, 279, 298, 303, 366], "fork": [102, 192, 278, 298, 303], "address": [103, 198, 217, 290, 304], "builder": [104, 263, 266], "variablenamenotavail": [104, 237], "redefin": [104, 108, 109, 110, 112], "matrix_util": [104, 201], "default_gate_set": [104, 237], "get_param_gener": [104, 201], "get_predef_gener": [104, 201], "hidden": 109, "behind": 109, "gatesignatur": [109, 110, 207, 214, 218], "gatesyntaxredefinit": [109, 110], "gatesyntax": [109, 112], "dictio": 110, "add_signatur": [110, 218], "signa": 110, "new_gate_set": 110, "arg_typ": 111, "func": [111, 135, 207, 210, 244], "get_circuit": 111, "get_matrix": [111, 166, 167, 186, 365, 366, 367], "gen": 111, "handler": [114, 304], "integer_to_spin": [115, 350, 351, 352, 353, 354], "decim": [115, 116, 117, 365], "spins_to_integ": 115, "n_spin": 116, "1d": [116, 117, 135, 253, 259, 272, 299, 309], "solution_configur": [117, 350, 351, 352, 353, 354], "spins_arrai": 117, "symbol": [118, 121, 125], "label": [118, 121, 132, 175, 255], "ast": [118, 132], "abso": 118, "absolut": [118, 119], "plane": [118, 120], "atan2": 118, "cosinu": [118, 123], "get_item": 118, "imag": [118, 124], "imaginari": [118, 127], "logarithm": [118, 128], "sinu": [118, 130], "squar": [118, 131, 145, 159, 314, 324, 331], "vmax": 118, "numer": [118, 121, 132, 144, 162], "infix": [118, 132], "my_min": 118, "awar": [118, 305], "all_symbol": 118, "constraint": [118, 237, 253, 277, 350, 351, 354, 369], "uminu": 118, "max": [118, 183, 191, 197, 251, 259, 261, 273, 337, 347, 357], "ab": [118, 162, 168, 170, 225, 310], "8284271247461903": 119, "radian": [120, 122, 123, 130], "141592653589793": [120, 122], "children": [121, 255], "arbitrari": [121, 217], "other_var": [121, 144], "from_str": 121, "thrift_str": 121, "rpn": [121, 144], "invers": [121, 257, 258, 260, 261, 268, 276, 329, 366], "pretty_print": 121, "pretti": [121, 132, 138], "arc": 122, "tangent": 122, "coordin": [122, 308, 343], "123233995736766e": 123, "minus_1": 124, "2246467991473532e": 124, "my_list": 125, "6j": 125, "idx_var": 125, "get_item_expr": 125, "lower_bound": 126, "upper_bound": 126, "my_num": [127, 129], "625": 131, "25": [131, 147, 160, 293, 338, 352, 353, 358, 359], "pretty_token": 132, "omit": [132, 249], "wouldn": 132, "dx": 132, "behav": [132, 206, 207, 237, 245, 248, 304], "number_1": 133, "number_2": 133, "ising": [134, 259], "to_matrix": [134, 338], "spars": [134, 166, 167, 186, 297, 335, 338], "spmatrix": 134, "psd": [135, 334, 336], "sampling_frequ": 135, "alpha": [135, 184, 217, 256, 293], "spectral": [135, 327, 329], "densiti": [135, 184, 305, 309, 314, 315, 333, 335, 336], "tild": [135, 210, 234, 329], "cos_expr": 135, "psd_expr": 135, "plot": [135, 136, 137, 244], "versu": 135, "generate_nois": 135, "hardwaremodel": [135, 200], "dependend": 135, "tf": 135, "get_nois": 135, "durat": [135, 201, 202, 203, 259, 262, 273, 305, 327, 329], "fmt": 136, "filenam": 136, "hardware_model": 136, "cell": [136, 364], "shell": 136, "get_ipython": 136, "svg": 136, "timeplot": 136, "alias": 136, "signific": [137, 234, 245, 297], "deviat": [137, 183], "iff": [137, 142, 278], "dictionnari": 137, "histogram": 137, "wrap_sampl": 137, "qreg_list": 137, "set_qreg": 138, "tname": 139, "driven": 139, "halt": 139, "int_msb_valu": 140, "__str__": 140, "lsb_int": 140, "lsb": [140, 297], "reprensent": 140, "pauli_op": 141, "do_validity_check": 141, "coeffcient": 141, "xxy": 141, "front": [141, 338], "concern": [141, 339, 347], "check_valid": 141, "coeff": [141, 292], "is_direct": 142, "thrifttopologi": 142, "undirect": [142, 349, 350, 351, 352, 354, 358, 359, 360, 361, 362], "lnn": [142, 143, 145, 156, 289], "add_edg": [142, 143], "qb1": 142, "qb2": 142, "toplogi": 142, "vmap": 142, "init_non": 142, "getter": 142, "set_nbqbit": 142, "helper": [142, 161, 181, 182, 184, 347, 365], "all_to_al": 143, "consecut": [143, 293], "pm": [143, 295, 366], "init": 143, "var_typ": [144, 237], "ignor": [144, 237, 240, 247, 252, 286, 294, 338], "forbidden": 144, "superconduct": 145, "google_sycamor": 145, "sycamor": [145, 147], "ibm_burlington": 145, "burlington": [145, 149], "ibm_johannesburg": 145, "johannesburg": [145, 150], "ibm_melbourn": 145, "melbourn": [145, 151], "ibm_rueschlikon": 145, "rueschlikon": [145, 152], "ibm_singapor": 145, "singapor": [145, 153], "ibm_tokyo": 145, "tokyo": [145, 154], "ibm_yorktown": 145, "yorktown": [145, 155], "rigetti_agav": 145, "agav": [145, 157], "aspen": [145, 158], "zuchongzhi": [145, 338], "__name__": 145, "alltoal": 145, "griddevic": 145, "grid": [145, 148, 159, 343], "linedevic": 145, "nearest": [145, 156, 174, 178], "neighbor": [145, 156], "squaregriddevic": 145, "35": [147, 160, 188, 189, 190, 353], "44": [147, 160, 338], "31": [147, 160, 338, 353, 354], "49": [147, 160], "27": [147, 160, 347, 352, 353, 358, 359], "36": [147, 160, 252, 353], "24": [147, 160, 252, 347, 352, 358, 359], "32": [147, 160, 222], "41": [147, 160], "28": [147, 160, 352, 358, 359], "37": [147, 160, 353], "46": [147, 160, 353], "33": [147, 160, 238, 243, 353], "42": [147, 160], "51": [147, 160], "21": [147, 160, 347, 352, 358, 359], "29": [147, 160, 352, 358, 359], "38": [147, 160], "26": [147, 160, 352, 358, 359], "43": [147, 160, 252, 338], "39": [147, 160, 353], "48": [147, 160], "dimx": 148, "dimi": 148, "3x2": 148, "dimens": [148, 159, 171, 217, 247, 324, 325, 331], "dim": [159, 324, 325, 331], "3x3": 159, "54": [160, 219, 225], "55": 160, "57": 160, "58": 160, "59": 160, "61": 160, "62": 160, "63": 160, "65": 160, "electronicstructurehamiltonian": [161, 165, 167, 171, 173, 175, 180, 181, 183, 188, 189, 190, 294, 364, 365], "spinhamiltonian": [161, 162, 164, 166, 167, 180, 183, 188, 189, 190, 294, 364, 366], "make_anderson_model": [161, 364], "impur": [161, 171, 173, 364, 367], "anderson": [161, 171, 364], "make_embedded_model": [161, 364], "make_hubbard_model": [161, 364, 365], "hubbard": [161, 175, 337, 364, 365], "transform_to_bk_basi": [161, 294, 364], "bravyi": [161, 166, 167, 180, 183, 188, 294, 338, 363, 364], "kitaev": [161, 166, 167, 180, 183, 188, 294, 338, 363, 364], "transform_to_jw_basi": [161, 294, 364], "jordan": [161, 166, 167, 180, 183, 189, 294, 338, 363, 364], "wigner": [161, 166, 167, 180, 183, 189, 294, 338, 363, 364], "transform_to_parity_basi": [161, 294, 364], "pariti": [161, 166, 167, 180, 183, 190, 294, 338, 363, 364], "make_compressed_ldca_circ": [161, 365], "ldca": [161, 172, 176, 365], "make_general_hwe_circ": [161, 365], "make_ldca_circ": [161, 365], "make_mr_circ": [161, 365], "small": [161, 162, 177, 183, 184, 262], "mr": [161, 177, 365], "make_mrep_circ": [161, 365], "excit": [161, 172, 176, 178, 365], "preserv": [161, 172, 176, 178, 262, 305, 317, 335, 365], "mrep": [161, 178, 365], "make_shallow_circ": [161, 365], "keen": [161, 179], "et": [161, 176, 177, 178, 179, 252, 279, 292, 366], "al": [161, 176, 177, 178, 179, 252, 279, 292, 366], "articl": [161, 176, 177, 178, 179, 366], "2019": [161, 176, 177, 178, 179], "aspect": 161, "molecularhamiltonian": [161, 182, 364], "moleculeinfo": 161, "compute_active_space_integr": 161, "construct_ucc_ansatz": [161, 367], "convert_to_h_integr": [161, 364], "get_cluster_op": [161, 367], "get_hf_ket": [161, 367], "hartre": [161, 164, 169, 170, 184, 366, 367], "fock": [161, 164, 169, 170, 184, 366, 367], "orbit": [161, 165, 168, 169, 170, 173, 175, 177, 181, 182, 184, 185, 277, 365], "guess_init_param": [161, 367], "m\u00f8ller": [161, 170, 365], "plesset": [161, 170, 184, 365, 367], "perturb": [161, 170, 184, 277, 293, 365, 367], "select_active_orbit": 161, "freez": [161, 181, 185], "occup": [161, 168, 170, 181, 182, 185, 365], "transform_integrals_to_new_basi": 161, "qse": 161, "apply_quantum_subspace_expans": [161, 365], "phase_estim": [161, 206, 365], "perform_phase_estim": [161, 365], "trotteris": [161, 365], "make_trotterisation_routin": [161, 365], "trotter": [161, 164, 180, 183, 253, 257, 258, 260, 261, 272, 276, 338, 363], "pyscf_tool": [161, 365], "perform_pyscf_comput": [161, 365], "calcul": [161, 184, 261, 366], "pyscf": [161, 184, 365], "state_prep_circ": 162, "expansion_oper": 162, "return_matric": 162, "subspac": [162, 331, 337, 356], "expans": [162, 337], "star": 162, "_i": [162, 173, 217, 283], "_j": 162, "eigenvalu": [162, 166, 318, 365, 367], "overlap": [162, 262, 355, 356], "o_i": 162, "matrix_h": 162, "matrix_": 162, "e_qs": 162, "xx": [162, 189], "yy": [162, 189], "ncycl": [162, 172, 176, 292], "e_min": 162, "e_vq": 162, "opt_circ": 162, "one_body_integr": [163, 165, 181, 182, 184, 187, 365], "two_body_integr": [163, 165, 170, 181, 182, 184, 187, 365], "active_indic": [163, 365], "occupied_indic": [163, 365], "uv": [163, 165, 181, 182, 364], "i_": [163, 165, 170, 173, 181, 182, 187, 217, 298, 364], "uvwx": [163, 165, 170, 181, 182, 364], "2i_": 163, "ijji": [163, 181], "ijij": [163, 181], "2d": [163, 165, 166, 253, 258, 259, 273, 299], "4d": [163, 165, 166, 170, 171, 173], "occupi": [163, 168, 181, 365], "cluster_op": 164, "ket_hf": 164, "n_step": [164, 299, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362], "cluster": [164, 168, 173, 365, 367], "vert": [164, 298], "hf": 164, "iT": 164, "factor": [164, 195, 196, 199, 222, 253, 258, 260, 276, 358], "uccsd": 164, "pq": [165, 166, 171, 173, 180, 181, 183, 187, 364], "pqr": [165, 166, 171, 173, 180, 181, 187, 364], "sigma": [165, 171, 175, 181, 364], "delta_": [165, 175, 181], "sigma_1": [165, 181], "sigma_2": [165, 181], "phi_": [165, 181], "ux": [165, 181], "vw": [165, 181], "iint": [165, 181], "r_": [165, 181, 336], "resp": [165, 168, 181], "phi_u": [165, 181], "molecular": [165, 170, 181, 184, 365], "hpq": [166, 365], "hpqr": [166, 365], "a_p": [166, 364], "a_q": [166, 364], "a_r": [166, 364], "a_": [166, 171, 234, 298, 331, 364], "mathbb": [166, 173, 181, 364], "h_pq": [166, 364], "h_pqr": [166, 364], "eigval": [166, 365], "eigvalsh": [166, 365, 366], "cc": [166, 167, 173, 188, 189, 190, 322, 327, 329, 364], "cccc": [166, 167, 188, 189, 190, 364], "fermionhamiltonian": [166, 168, 180, 188, 189, 190, 294, 364], "too": [166, 167, 183, 186, 364], "to_fermion": [166, 364], "to_spin": [166, 167, 364, 365], "normal_ord": 167, "wick": [167, 364], "to_electron": [167, 364], "n_electron": [168, 169, 170, 181, 182, 185, 365], "noon": [168, 170, 181, 182, 185, 365], "n_i": [168, 170, 181], "descend": [168, 170, 181, 185], "degeneraci": [168, 170], "t_": [168, 175, 329], "cup": [168, 170, 181], "it_": 168, "inoccupi": 168, "n_qbit": 168, "orbital_energi": [170, 182, 184, 365], "trial": 170, "mp2": 170, "theta_a": 170, "epsilon_i": [170, 171], "epsilon_j": 170, "epsilon_a": 170, "epsilon_b": 170, "theta_list": 170, "mu": [171, 173, 175, 365], "epsilon": 171, "canon": [171, 173, 305, 335], "csq": [171, 173], "f_p": [171, 173], "f_q": [171, 173], "f_r": [171, 173], "n_b": 171, "bath": [171, 173, 364], "siam": 171, "c_": [171, 173, 180, 181, 187, 256, 364], "uparrow": [171, 173, 175], "downarrow": [171, 173, 175], "v_i": 171, "coulomb": [171, 181], "repuls": [171, 173, 181, 182, 184, 365], "intens": [171, 329, 366], "chemic": [171, 173, 175, 180], "tunnel": 171, "2n_b": 171, "f_0": 171, "annihil": 171, "f_1": 171, "f_2": 171, "1st": 171, "f_3": 171, "nb_fermionic_mod": [172, 176], "eigstate_ind": [172, 176], "slater": [172, 176], "pattern": [172, 174], "synthoplin": 172, "cycl": [172, 174, 176, 178, 292], "eigenst": [172, 176, 183, 255], "lambda_c": 173, "t_loc": 173, "int_kernel": 173, "limits_": 173, "2m": 173, "ijkl": [173, 181, 187], "f_j": 173, "_k": 173, "f_l": 173, "loc": 173, "d_": [173, 217], "imp": 173, "onsit": 173, "site": [173, 175, 364], "hop": [173, 175], "correl": [173, 205, 364, 365], "uncorrel": 173, "conv": 173, "2i": [173, 234], "strategi": [173, 206, 252, 254, 355], "_1": [173, 262], "n_cycl": 174, "rotation_g": 174, "entangling_g": 174, "predefg": 174, "thinli": 174, "dress": 174, "entangl": [174, 252, 286, 305, 312], "surround": 174, "four": [174, 365], "neighbour": [174, 178], "odd": 174, "t_mat": [175, 365], "dagger_i": 175, "n_site": 175, "dallair": 176, "demer": 176, "matchgat": 176, "inspir": [177, 219, 229, 355], "sugisaki": [177, 178], "n_fsim_cycl": 178, "set_phi_to_0": 178, "fsim": 178, "phi": [178, 181, 365], "taken": [178, 201], "n_trotter_step": [180, 183, 365], "final_tim": [180, 365], "prod_": 180, "c_p": [180, 183], "c_q": 180, "c_r": 180, "dr": 181, "particl": [181, 277, 288], "chosen": [181, 223, 279, 281, 283, 293], "kin": 181, "pot": 181, "randn": [181, 182], "mol_h": [181, 182, 365], "9605677770978": 181, "get_electronic_hamiltonian": [181, 364, 365], "select_active_spac": [181, 182, 365], "threshold_1": [181, 182, 185, 365], "02": [181, 182, 185, 365], "threshold_2": [181, 182, 185, 365], "001": [181, 182, 185, 279, 283], "ca": [181, 185], "approach": [181, 184, 185, 206, 251, 286, 346], "divid": [181, 185], "inact": [181, 185], "latter": [181, 185, 295, 366], "unchang": [181, 185, 338], "varepsilon_2": [181, 182, 185], "varepsilon_1": [181, 182, 185], "geq": [181, 258], "n_e": 181, "e_": [181, 183, 327, 329], "transform_basi": [181, 365], "transformation_matrix": 181, "u_": [181, 187, 234], "qi": [181, 187], "jq": [181, 187], "qj": [181, 187], "kr": [181, 187], "molecular_hamiltonian": 181, "studi": [182, 184, 338, 363, 365, 366], "molecul": [182, 184, 337, 338, 363, 365, 366], "07983638477953081": 182, "03880887737048": 182, "6082066007534777": 182, "30541453403197055": 182, "38232332760629917": 182, "6649415696702884": 182, "15159087941924204": 182, "8283841664231089": 182, "2606187155362143": 182, "3039233165145979": 182, "10294454189711144": 182, "20612709843257712": 182, "7696538349878299": 182, "4242942257650577": 182, "34654222741418655": 182, "21612448982415736": 182, "2833439579459725": 182, "2987935103491678": 182, "4471184666489071": 182, "1474421764363856": 182, "012916659436950582": 182, "restrict_active_spac": 182, "h_el": 183, "n_phase_bit": 183, "init_vec": 183, "n_adiab_step": 183, "e_target": [183, 365], "size_interv": [183, 365], "basis_transform": 183, "n_shot": 183, "verbos": [183, 285, 292, 311], "qpe": 183, "apriori": 183, "challeng": 183, "preliminari": 183, "collaps": [183, 237], "linearli": [183, 259, 273], "guarante": 183, "lie": 183, "adjust": 183, "suggest": 183, "interv": 183, "unbias": 183, "eigenenergi": [183, 365], "narrow": 183, "mislead": 183, "anymor": 183, "thumb": 183, "consider": [183, 366], "larger": [183, 248, 347, 355], "01101": 183, "fast": 183, "idea": [183, 366], "Will": 183, "_interv": 183, "geometri": [184, 365], "run_fci": 184, "kickstart": 184, "nuclear": [184, 365], "groundstat": 184, "2nd": [184, 367], "m\u00f6ller": 184, "ci": 184, "fci": 184, "expens": 184, "big": [184, 324, 325, 364], "atom1": 184, "atom2": 184, "atomn": 184, "guess": [184, 365, 367], "neutral": 184, "rdm1": [184, 365], "nuclear_repuls": [184, 365], "nel": 184, "active_so": 185, "spatial": 185, "inactive_occupied_so": 185, "zy": [186, 364], "4j": 186, "u_mat": 187, "h_hat_ij": 187, "h_hat_ijkl": 187, "fermion_hamiltonian": [188, 189, 190], "bk": 188, "spin_hamiltonian": [188, 189, 190], "075j": [188, 189, 190], "075": [188, 189, 190], "jw": 189, "yx": 189, "xy": 189, "combinatorialoptimizergener": [191, 194, 195, 196, 197, 199, 267], "graphcolouringgener": [191, 349, 362], "colour": [191, 194, 251, 257, 347, 354, 357, 361], "graphpartitioninggener": [191, 350, 359], "partit": [191, 195, 251, 257, 258, 260, 261, 267, 269, 272, 337, 347, 352, 357, 358], "kcliquegener": [191, 270, 351, 360], "kcliqu": [191, 196, 251, 270, 360], "cut": [191, 197, 251, 258, 261, 337, 347, 357], "vertexcovergener": [191, 271, 354, 361], "cover": [191, 199, 251, 267, 271, 276, 337, 347, 357], "abctract": 192, "met": 192, "hostnam": 192, "wrapper_post_process": 192, "abstractgenetor": 192, "parsedpostprocessedresult": 192, "combinatorialresult": [193, 267], "number_of_colour": [194, 257, 354], "graphpartitioningresult": [194, 195, 197, 257, 258, 260, 261, 267], "h_a": [195, 196, 199, 253, 258, 260, 276], "h_b": [195, 196, 199, 253, 258, 260, 276], "kcliqueresult": [196, 267], "cliqu": [196, 251, 260, 267, 270, 337, 347, 357], "vertexcoverresult": [199, 267], "imperfect": 200, "readout": [200, 205], "channel": [200, 201, 202, 203, 205, 307, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 332, 333, 334, 335, 336, 341, 366], "noise_model": [200, 305], "defaultgatesspecif": 200, "gatesspecif": [200, 201, 202, 204, 328], "perfect": [200, 201, 202, 203, 205, 262, 297], "defaulthardwaremodel": [200, 205], "make_depolarizing_hardware_model": 200, "depolar": [200, 205, 305, 320, 321, 366], "state_prep": [201, 203, 208, 216], "predef_gener": 201, "param_gener": 201, "channel_repr": [201, 202, 327, 329], "channelrepresent": [201, 202, 305, 327, 329], "krau": [201, 202, 305, 307, 310, 311, 312, 313, 316, 318, 321, 322, 327, 329, 333, 334, 335, 336], "wise": [201, 202, 203], "oppos": 201, "quantum_channel": [201, 203, 316, 317, 318, 319], "quantumchannel": [201, 202, 203, 204, 305, 310, 311, 312, 313, 316, 317, 318, 319], "rho_0": [201, 203], "povm": [201, 203], "lbrace": [201, 203, 321, 335], "rbrace": [201, 203], "tr": [201, 203, 295, 314, 315, 331, 336], "rho": [201, 203, 310, 321, 333, 334, 335], "get_gate_tim": [201, 203], "gate_typ": [201, 203, 328], "get_quantum_channel": [201, 203], "gate_d": [201, 203], "quantumchannelkrau": [201, 203, 305, 320, 321, 322, 333, 334, 336], "gate_nois": [202, 204], "idle_nois": [202, 204], "idl": [202, 204, 205], "instantan": 202, "parametricquantumchannel": [202, 204, 305, 328], "gates_specif": [202, 204, 328], "params_specif": [202, 204], "jump_oper": [202, 204], "lindblad": [202, 204, 327], "eps1": 205, "eps2": 205, "correl_typ": 205, "single_qubit": 205, "depol_typ": [205, 320, 321], "rate": [205, 320, 366], "multi_qubit": 205, "multiqubit": [205, 337, 338, 363, 366], "make_depolarizing_channel": [205, 305, 320], "paramg": [206, 207], "qclaus": [206, 240, 241, 245], "quantul": 206, "qarithexp": [206, 245], "qcompexp": [206, 245], "boolformula": [206, 211, 237], "cregist": [206, 237], "generate_gate_set": 206, "abtract": 206, "diagram": [206, 269], "arrow": 206, "green": 206, "rippl": [206, 225], "indep": 206, "agnost": [206, 219], "indepent": 206, "distinct": 206, "matter": 206, "kptree": [206, 338], "kerinidi": [206, 217], "prakash": [206, 217], "amplification_step": 206, "amplif": [206, 208, 337], "grover": [206, 208, 215, 337], "quantum_count": 206, "grover_diffus": 206, "diffus": [206, 208, 215], "household": [206, 208, 215], "uniform_distribut": 206, "famili": 207, "admiss": 207, "r_z": 207, "my_rz": [207, 235], "matrix_gen": 207, "set_dag": 207, "recip": [207, 355], "assumpt": [207, 366], "nbit": [208, 215, 236, 249, 250, 262], "reg1": 208, "reg2": 208, "neg": [209, 242, 255, 358], "my_gat": 210, "slice": [212, 246, 252], "littl": 213, "mother": [213, 235], "never": [213, 248], "safe": 214, "gather": [214, 338], "kp": 217, "multiplexor": 217, "kerenidi": [217, 338], "kp17": 217, "qram": 217, "k_1": [217, 321], "k_n": 217, "k_i": [217, 321], "pad": 217, "log_2": 217, "understood": [217, 244], "i_1": [217, 323, 331], "i_k": 217, "alpha_": 217, "adress": 217, "i_l": 217, "beta_": 217, "get_routin": 217, "flatten": 217, "rout_0": 217, "rout_1": 217, "rout_2": 217, "proport": 217, "routine_state_prep": 217, "routine_1": 217, "8198480962436316": 217, "2169326427663205": 217, "23590890823942223": 217, "655826798207893": 217, "2036656330363274": 217, "48615508908003074": 217, "3602148646858209": 217, "addresses_count": 217, "mutliplexor": 217, "iordani": 217, "anupam": 217, "8th": 217, "innov": 217, "theoret": [217, 261], "confer": 217, "itc": 217, "2017": [217, 229], "schloss": 217, "dagstuhl": 217, "leibniz": 217, "zentrum": 217, "fuer": 217, "informatik": 217, "include_lock": [218, 237], "cz": 218, "my_cnot_implement": 218, "submatric": [218, 237], "footprint": 218, "gate_signatur": 218, "clear_gate_set": 218, "default_g": 218, "_spec": [218, 280, 286], "happen": [218, 237, 240, 241, 245], "link_gat": 218, "link_matric": 218, "set_gate_set": 218, "vbe96": [219, 225, 227], "reg_siz": [219, 220, 221, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234], "modulo": [219, 221, 222, 226, 228, 230, 231, 232, 233], "add_const_mod": [219, 224], "crash": 219, "modular": 219, "add_mod": 219, "modular_exp": 219, "exponanti": 219, "mult_const_mod": [219, 222], "mult_const": [219, 229], "vlatko": [219, 225], "vedral": [219, 225], "adriano": [219, 225], "barenco": [219, 225], "artur": [219, 225], "ekert": [219, 225], "elementari": [219, 225], "phy": [219, 225, 310, 312, 313], "rev": [219, 225, 310, 312, 313], "147": [219, 225], "153": [219, 225], "jul": [219, 225], "1996": [219, 225], "doi": [219, 225, 229], "physreva": [219, 225], "modulu": [220, 221, 222, 224], "textrm": [220, 222, 224], "mod": [220, 221, 222, 224], "add_const": [220, 221, 223, 225, 229], "reg_control_s": 222, "acc_siz": [222, 223, 224], "shor": 222, "phase_reg": 222, "util": [222, 356, 367], "3720": 222, "8988": 222, "1472": 222, "128": 222, "384": 222, "gate_s": 222, "14853": 222, "expon": 222, "accumul": [222, 223, 224], "euclid": 222, "coprim": 222, "ttk09": [225, 226], "cdkm04": [225, 228], "cuccaro_add": [225, 226], "cuccaro": 225, "steven": 225, "thoma": 225, "draper": 225, "samuel": 225, "kutin": 225, "david": 225, "petri": 225, "moulton": 225, "arxiv": [225, 292, 310, 355], "quant": [225, 310], "0410184": 225, "48550": 225, "miss": [225, 254, 357], "classadd": 225, "reg_size_2": [226, 228, 230, 232, 233], "7n": 226, "2n": [226, 228], "5n": 226, "6n": 228, "4n": 228, "rpge17": 229, "const": 229, "lidia": 229, "ruiz": 229, "perez": 229, "juan": 229, "carlo": [229, 253, 257, 258, 260, 261, 272, 276], "garcia": 229, "escartin": 229, "fourier": [229, 234, 337], "april": [229, 338], "1007": 229, "s11128": 229, "017": 229, "1603": 229, "res_reg_s": 232, "psi_": 234, "dot": [234, 298, 321, 326, 348], "xk": 234, "abstract_g": 235, "member": 235, "ctrlbit": 237, "gate1": 237, "gate2": 237, "get_free_ancilla": [237, 248], "class_nam": [237, 248], "destroi": 237, "usabl": 237, "var_nam": [237, 287], "class_typ": 237, "qblist": 237, "cblist": 237, "do_link": 237, "comparison_ep": 237, "box_routin": 237, "untouch": 237, "demand": 237, "further": 237, "indentif": 237, "correspondig": 237, "systemat": 237, "infer": [237, 295, 338, 366], "operand": [238, 242], "reverse_bit_ord": [238, 245], "substract": [238, 338], "qbool_arrai": [240, 241], "cl": 240, "qbits_list": [240, 241, 242, 243, 245, 246], "implicitli": [242, 327], "toward": 242, "and_formula": 242, "got": 242, "similarili": 244, "love": 244, "my_funct": [244, 281], "some_random_point": 244, "qlm_obj": 244, "06825102122923": 244, "4771903704328286": 244, "smaller": [245, 347], "uniti": 245, "xore": 245, "everytim": 247, "bell_stat": 247, "h_rz": 247, "\u03c0": 247, "rx_rz": 247, "angles_0": 247, "angles_1": 247, "avoir": 247, "yet": 247, "notion": 248, "routop_l": 248, "max_wir": 248, "inbound": 248, "repeatedli": 248, "bl": 248, "unus": 248, "freed_ancilla": 248, "additin": 248, "tag": 248, "contruct": 248, "boolexpr": 251, "themselv": 251, "bilp": 251, "graphcolour": [251, 273, 349, 362], "graphpartit": [251, 350, 359], "maxcut": [251, 259, 352, 356, 358], "numberpartit": [251, 259, 353], "vertexcov": [251, 271, 273, 354, 361, 369], "mixingfactori": [251, 356], "mix": [251, 262, 263, 264, 274, 295, 343, 356], "circuitgener": [251, 256, 259, 273, 355, 357], "schedule_gener": 251, "schedulegener": 251, "vsolv": [251, 254], "ansatzfactori": [251, 355], "regroup": [252, 305], "qaoa_circuit": 252, "to_circ_arg": [252, 254], "line_ob": 252, "add_term": 252, "ansatz_with_cnot": 252, "ansatz_with_rzz": 252, "121": 252, "67": 252, "synthesi": [252, 355], "influenc": [252, 297, 366], "insert_in": 252, "slic": 252, "elif": 252, "ansatz_default": 252, "ansatz_color": 252, "color": [252, 254, 286], "gray_synth": 252, "cnot_count": 252, "ansatz_gray_synth": 252, "grai": 252, "synth": 252, "techniqu": [252, 292, 346, 366], "ami": 252, "graysynth": 252, "synthes": [252, 254], "onlt": 252, "maximis": 253, "obei": [253, 347], "produce_q_and_offset": [253, 257, 260, 276], "gg": [253, 295, 366], "luca": [253, 257, 258, 260, 272, 276], "2014": [253, 257, 258, 260, 272, 276, 355], "bilp_problem": 253, "get_best_paramet": [253, 257, 258, 259, 260, 261, 272, 273, 276, 350, 351, 352, 353, 354], "n_monte_carlo_upd": [253, 257, 258, 260, 261, 272, 276], "mont": [253, 257, 258, 260, 261, 272, 276], "n_trotter": [253, 257, 258, 260, 261, 272, 276], "replica": [253, 257, 258, 260, 261, 272, 276], "gamma_max": [253, 257, 258, 260, 261, 272, 276], "gamma_min": [253, 257, 258, 260, 261, 272, 276], "temp_max": [253, 257, 258, 259, 260, 261, 272, 273, 276, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362], "temp_min": [253, 257, 258, 259, 260, 261, 272, 273, 276, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362], "binary_linear_integer_program": 253, "qaoa_ansatz": [254, 357], "get_qaoa_gate_set": 254, "my_plugin": 254, "greedi": [254, 286], "and_claus": 255, "or_claus": 255, "xor_claus": 255, "neg_claus": 255, "subclaus": 255, "induct": 255, "wedg": 255, "vee": 255, "oplu": 255, "negat": 255, "myproblem": 256, "var1": 256, "var2": 256, "125": 256, "w_": 256, "nbvar": 256, "to_bqm": [256, 259, 273, 369], "dwave": [256, 259, 273, 369], "dimod": [256, 259, 273, 369], "binaryquadraticmodel": [256, 259, 273], "add_nodes_from": [257, 258, 260, 276, 350, 351, 354, 360, 362, 369], "arang": [257, 258, 260, 276, 350, 351, 354, 360, 362, 369], "add_edges_from": [257, 258, 260, 276, 350, 351, 354, 360, 362, 369], "graph_colouring_problem": 257, "parse_result": [257, 258, 260, 261, 276], "thatrepres": 257, "graph_colour": 257, "produce_j_h_and_offset": [258, 261, 272], "graph_partitioning_problem": [258, 350], "balanc": 258, "graph_partit": 258, "e_i": [259, 299], "child": [259, 273], "get_j_h_and_offset": 259, "aneal": [259, 273], "gamma": [259, 273, 293, 329, 355], "k_clique_problem": 260, "k_cliqu": 260, "bigger": [260, 276], "wikipedia": [261, 293], "full_rary_tre": [261, 352, 357, 358, 359, 361], "256": 261, "max_cut": 261, "initialstatebuild": [262, 263, 264], "bit_flip": 262, "restrict_to": 262, "h_0": [262, 355, 356], "simpleinitialst": [262, 263], "bit_mov": [262, 356], "hamming_weight": 262, "tmax_psi_0": 262, "move": [262, 356], "ham": [262, 281, 356], "equi": 262, "argu": 262, "gap": 262, "entail": 262, "polynomi": 262, "scalabl": 262, "inexact": 262, "70": 262, "independentann": [262, 263], "prepend": [263, 264, 265], "start_ham": 264, "end_ham": 264, "true_psi_0": 264, "inject_initial_st": [264, 265, 266], "annealing_job": [264, 265, 266, 274, 356], "inject": 265, "setup": 265, "score": 268, "truthi": 268, "falsi": 268, "with_figur": 269, "figsiz": 269, "node_s": 269, "300": [269, 279, 291], "font_siz": 269, "draw_networkx": 269, "matplotlib": 269, "pyplot": 269, "font": 269, "array_of_numb": 272, "array_of_numbers_s": 272, "randint": [272, 353], "number_partitioning_problem": [272, 353], "5507": 272, "numbers_arrai": 272, "number_partit": 272, "e_q": 273, "get_q_and_offset": 273, "interpol": 274, "singleton": 275, "vertex_cover_problem": [276, 354, 369], "vertex_cov": 276, "circuitinlin": 277, "costfunctionplugin": 277, "psominimizeplugin": 277, "swarm": [277, 288], "pso": [277, 288], "spsaminimizeplugin": 277, "simultan": [277, 293], "spsa": [277, 293], "adaptvqeplugin": [277, 338, 366], "gradientdescentoptim": [277, 366], "descent": [277, 283, 366], "transformobserv": 277, "zeronoiseextrapol": [277, 366], "extrapol": [277, 295, 338, 363, 366], "edit": 278, "prost": 278, "operator_pool": 279, "n_iter": [279, 366], "tol_vanishing_grad": 279, "tau_k": 279, "theta_k": 279, "grimslei": 279, "antihermitian": 279, "inplac": 280, "qat_circ": 280, "fly": 280, "worst": 280, "perfom": 280, "weigth": 281, "cost_funct": 281, "job_fixed_angl": 281, "result_fixed_angl": 281, "2e": 281, "3e": 281, "is_result_argu": 281, "6e": 281, "7e": 281, "use_result": 281, "next": 282, "press": 282, "lambda_step": 283, "natural_gradi": [283, 366], "stop_crit": 283, "grad_norm": 283, "user_custom_g": 283, "eta": [283, 366], "nabla": [283, 366], "metric": [283, 366], "g_": 283, "bigg": 283, "criterion": 283, "energy_dist": 283, "toler": [283, 306, 316, 317, 318, 319], "randomli": [283, 293], "saemlessli": 284, "qlm_object": 284, "initial_object": 284, "n_run": 285, "duplic": 285, "upstream": 285, "splitting_method": 286, "x_basis_chang": 286, "y_basis_chang": 286, "clifford": 286, "todai": 286, "coincid": 286, "binding_kwarg": 287, "particul": 287, "variablenam": 287, "fetch": 287, "hood": 287, "triplet": 287, "binding_arg": [288, 291, 293], "choose_inertia_funct": 288, "inertia": 288, "linearly_decreas": 288, "chaotic_random": 288, "name_method_us": 288, "clpso": 288, "fdr_pso": 288, "lip": 288, "hpso_tvac": 288, "max_it": 288, "swarm_numb": 288, "size_initial_vector_spac": 288, "hypercub": 288, "inertia_kwarg": 288, "inertia_funct": 288, "inertia_weight": 288, "univers": [289, 337], "compliant": 289, "lnn_topologi": 289, "initil": 291, "set_opt": 291, "my_job": [291, 338], "rotosolv": 292, "nakanishi": [292, 366], "1903": 292, "12166": 292, "2020": [292, 366], "ostaszewski": [292, 366], "1905": 292, "09692": 292, "leverag": [292, 366], "belong": [292, 347], "converg": [292, 355], "602": 293, "101": 293, "stop_condit": 293, "evalut": 293, "a_calibr": 293, "calibr": 293, "n_calibr": 293, "en": 293, "wiki": 293, "simultaneous_perturbation_stochastic_approxim": 293, "cf": [294, 298], "n_in": 295, "extrap_g": 295, "extrap_method": 295, "decomposit": 295, "occurr": [295, 338], "rho_": [295, 312, 313], "strength": 295, "propto": 295, "ins": 295, "an_": [295, 366], "shown": [295, 347, 358, 359, 360, 361, 362], "Be": [295, 305], "correctli": [295, 338], "classicalqpu": 296, "algebra": [296, 297, 298, 338, 364], "get_current_qpu": 296, "use_nbthreads_heurist": 297, "light_circuit": 297, "tqdm": 297, "readonly_statevector": 297, "omp_num_thread": 297, "progress": 297, "sens": 297, "throught": [297, 342, 343], "resiz": 297, "intuit": 297, "i_0i_1i_2i_3": 297, "i_3i_2i_1i_0": 297, "imbric": 298, "temp_t": [299, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362], "temp": 299, "simulated_ann": [299, 350, 351, 352, 353, 354], "extract_j_and_h_from_ob": 299, "s_i": 299, "s_j": 299, "1111111111": 300, "push": 301, "muqlm": 302, "mininm": 303, "apply_resource_consumption_limit": 303, "allocation_model": 303, "subclass": 303, "estimate_resources_for_batch": 303, "adjunct": 304, "goe": [304, 334, 336], "forward": 304, "extern": 305, "parametricgatenois": 305, "quantumchannelchi": [305, 335], "chi": [305, 307, 333, 334, 335, 336], "quantumchannelchoi": [305, 335, 336], "choi": [305, 307, 310, 311, 312, 313, 334, 335, 336], "jamiolkowski": [305, 313, 334], "quantumchannelptm": [305, 317, 334, 335], "ptm": [305, 307, 310, 311, 312, 313, 334, 335, 336], "to_chi": [305, 335], "exposit": 305, "is_completely_posit": 305, "is_trace_preserv": 305, "is_trace_reduc": 305, "is_unit": 305, "make_avg_fid_equiv_depol_channel": 305, "make_generalized_amplitude_damp": 305, "damp": [305, 322, 327], "parametricamplitudedamp": 305, "parametricpuredephas": 305, "dephas": [305, 329], "distanc": [305, 313, 315, 366], "fidel": [305, 310, 312, 314, 320], "get_average_process_fidel": 305, "get_diamond_norm": 305, "diamond": [305, 311], "get_entanglement_process_fidel": 305, "get_process_dist": 305, "get_state_fidel": [305, 310, 312], "get_trace_dist": [305, 313], "math_util": 305, "convert_density_mat_to_pauli_vec": 305, "convert_pauli_vec_to_density_mat": 305, "make_pauli_matrix_basi": 305, "make_standard_matrix_basi": 305, "make_standard_vector_basi": 305, "are_equal_up_to_phas": 305, "multikron": 305, "kroneck": [305, 326, 335], "partial_trac": 305, "07": [306, 338], "stinespr": 307, "pauli_vec": 309, "chan1": [310, 312, 313, 335], "chan2": [310, 312, 313, 335], "use_formula": 310, "av": [310, 320], "71": [310, 312, 313], "062310": [310, 312, 313], "gilchrist": 310, "0408063": 310, "vfidel": 310, "hilebrt": 310, "schmidt": 310, "qchan": 311, "ep": 311, "06": 311, "aka": 311, "accuraci": 311, "cp": 311, "use_choi": 312, "ent": 312, "rho_i": 312, "pro": [312, 313], "rho1": [314, 315], "rho2": [314, 315], "eqnarrai": 314, "rho_1": [314, 315], "rho_2": [314, 315], "cdot": 315, "08": [317, 318, 319], "quantumchannekrau": 317, "e_k": [318, 335], "sum_k": 318, "rb_ep": 320, "method_2q": [320, 321], "tensor_1q_channel": [320, 321], "epsilon_": 320, "rb": 320, "depol": [320, 321], "015": 320, "99247166": 320, "07071068": 320, "07071068j": 320, "k_0": 321, "k_2": 321, "k_3": 321, "k_j": 321, "rbrace_": [321, 335], "equal_prob": 321, "denot": [321, 323], "p_i": 321, "17320508": 321, "17320508j": 321, "03333333": 321, "03333333j": 321, "lamb": 322, "i_2": 323, "ldot": [323, 331], "i_n": 323, "huge": [324, 325], "mat_list": 326, "a_1": [326, 331], "a_n": [326, 331], "t_1": 327, "langle0": 327, "langle1": 327, "relax": 327, "white": [327, 329], "tau": [327, 329], "amplitudedamp": 327, "81873075": 327, "57417763": 327, "noise_channel": 328, "t_phi": 329, "spectral_funct": 329, "variant": 329, "int_": 329, "infti": 329, "omega": 329, "cotanh": 329, "analyt": 329, "varphi": 329, "w_c": 329, "w_ir": 329, "noise_spectrum": 329, "ohmic": 329, "pd": 329, "9138709": 329, "4060049": 329, "ptild": 329, "schema": [330, 332], "axis1": 331, "axis2": 331, "traced_out_subspac": 331, "a_2": 331, "a_i": 331, "d_i": 331, "i_m": 331, "tr_": 331, "j_1": 331, "d_1": 331, "d_n": 331, "apply_to": [332, 333, 335, 336], "kraus_rank": [332, 335], "matrix_basi": [333, 335], "boldsymbol": [333, 334, 336], "chi_": 333, "to_krau": [333, 334, 336], "to_ptm": [334, 335], "kraus_oper": 335, "check_trace_preserv": 335, "check_trace_reduc": 335, "p1": 335, "p2": 335, "ey": 335, "chan3": 335, "syntaxerror": 335, "rank": 335, "density_matrix": [335, 336], "old_method": 335, "n_thread": 335, "dens": [335, 338], "repr": 335, "apply_to_vector": 335, "full_kroneck": 335, "to_choi": [335, 336], "clone": 337, "github": [337, 338, 339, 363], "repositori": 337, "mybind": 337, "web": 337, "browser": 337, "binder": [337, 338, 341, 342, 343, 344], "beginn": 337, "h2": 337, "ucc": [337, 338, 363, 364, 365, 367], "lih": [337, 365], "multiplelaunchesplugin": 337, "avala": 337, "assembli": 337, "quick": 337, "splitter": 337, "epr": 337, "analyz": 337, "decemb": 338, "2023": 338, "dist": 338, "contrib": 338, "qlmaa": 338, "major": [338, 368], "longer": 338, "novemb": 338, "colab": 338, "touch": 338, "septemb": 338, "bug": [338, 339], "august": 338, "docstr": 338, "juli": 338, "restructur": 338, "highlight": 338, "ticket": [338, 339], "brq": 338, "1487": 338, "redesign": 338, "much": [338, 364], "1482": 338, "html": 338, "1485": 338, "1490": 338, "1492": 338, "symengin": 338, "ration": 338, "mainten": [338, 367], "unexpect": 338, "behaviour": [338, 366], "greater": [338, 355], "03": 338, "modulenotfounderror": 338, "jaxlib": 338, "deprecationwarn": 338, "layout_bas": 338, "pillow": 338, "layout": 338, "getsiz": 338, "getbbox": 338, "getlength": 338, "suppress": 338, "nowarn": 338, "directori": 338, "mayb": 338, "ipython_dir": 338, "home": 338, "profile_default": 338, "startup": 338, "simplefilt": 338, "action": 338, "futurewarn": 338, "restart": 338, "octob": 338, "chines": 338, "qiksit": 338, "throw": 338, "cleaner": 338, "u2": 338, "u3": 338, "june": 338, "nnizer": 338, "remote_stack": 338, "async_result": [338, 341], "join": [338, 339], "stdout": 338, "multivari": 338, "prakashqram": 338, "divis": 338, "sigsegv": 338, "question": 339, "slack": 339, "ye": 340, "your_qiskit_circuit": 341, "your_qlm_circuit": [341, 342], "credenti": 341, "save_account": 341, "qiskit_ibm_runtim": 341, "my_ibm_token": 341, "ibm_quantum": 341, "ibmq_armonk": 341, "async_qpu": 341, "sleep": 341, "qiskit_result": 341, "warn": 342, "vers": 342, "your_pyquil_circuit": 342, "pyquil_circuit": 342, "qvm": 342, "15011": 342, "get_qc": 342, "qcs_settings_applications_pyquil_qvm_url": 342, "9q": 342, "qlm_circ": 343, "your_google_circ": 343, "google_circ": 343, "your_qlm_circ": 343, "linequbit": 343, "gridqubit": 343, "aqasmprint": 344, "cengin": 344, "mainengin": 344, "aq": 344, "eng": 344, "engine_list": 344, "allocate_qureg": 344, "recov": 344, "script": 345, "qasm": 345, "bash": 345, "oqasm2circ": 345, "bell_data": 345, "cx": 345, "flawlessli": 345, "haven": 345, "hint": [346, 347], "qa": 346, "seamless": [346, 368], "criteria": 347, "orient": [347, 368], "record": 347, "although": 347, "planar": 347, "gset": 347, "dataset": 347, "sec": 347, "vertic": [347, 349, 354, 361, 362], "leighton": 347, "dimac": 347, "88": 347, "95": 347, "99": 347, "subgraph": [347, 350, 351, 352, 358, 359, 360, 361], "bhoslib": 347, "450": 347, "4000": 347, "oei": 347, "instantli": 347, "nn": [349, 362], "impos": [350, 351, 354, 369], "problem_parameters_dict": [350, 351, 352, 353, 354], "sa_qpu": [350, 351, 352, 353, 354], "problem_job": [350, 351, 352, 353, 354], "problem_result": [350, 351, 352, 353, 354], "indices_spin_1": [350, 351, 352, 353, 354], "indices_spin_minus_1": [350, 352, 353], "kclique_problem": 351, "max_cut_problem": 352, "numbers_set": 353, "spin_1_subset": 353, "spin_minus_1_subset": 353, "smallest": [354, 361], "ramp": 355, "h_c": [355, 356], "propag": 355, "r_x": 355, "slow": 355, "fgg14": 355, "edward": 355, "farhi": 355, "jeffrei": 355, "goldston": 355, "sam": 355, "gutmann": 355, "1411": 355, "4028": 355, "slowli": 356, "erdos_renyi_graph": 356, "hamitonian": 356, "combintori": 357, "max_cut_appl": [357, 358], "combinatorial_result": [357, 358, 359, 360, 361, 362], "scipy_arg": [358, 359, 360, 361, 362], "sqa_best_paramet": [358, 359, 360, 361, 362], "sqa_best_parameters_dict": [358, 359, 360, 361, 362], "5000": [358, 359, 360, 361, 362], "max_cut_gener": 358, "schedule_batch": [358, 359, 360, 361, 362], "graph_partitioning_appl": 359, "graph_partitioning_gener": 359, "kclique_appl": 360, "kclique_gener": 360, "vertex_cover_appl": 361, "vertex_cover_gener": 361, "graph_colouring_appl": 362, "graph_colouring_gener": 362, "revamp": 363, "dq": 363, "changelog": 363, "spind": 363, "migrat": 363, "z_": 364, "y_": 364, "h_elec": 364, "htype": 364, "attributeerror": 364, "bare": 364, "5j": 364, "h_fermion": 364, "h_spin": 364, "825": 364, "175": 364, "h_fermion1": 364, "h_fermion2": 364, "h_spin1": 364, "h_spin2": 364, "fermion_comutator_matrix": 364, "spin_comutator_matrix": 364, "is_equal_sign": 364, "toi": 364, "strong": 364, "flagship": 365, "hamiltonian_sp": 365, "exact_energi": 365, "eigh": 365, "nenergi": 365, "ntheta": 365, "9999999974320526": 365, "1416940034276815": 365, "2147911128415545": 365, "chemist": 365, "h_2": 365, "thorough": 365, "whatev": 365, "sake": [365, 366], "31g": 365, "9071609330057144": 365, "basis_chang": 365, "mol_h_new_basi": 365, "proce": 365, "mol_h_act": 365, "002": 365, "bring": 365, "eight": 365, "eigenvector": 365, "round": 365, "nqbits_phas": 365, "guess_energi": 365, "1403": 365, "002343750000000089": 365, "earlier": [365, 366], "said": 366, "slower": 366, "cluster_oper": 366, "harre": 366, "hf_init": 366, "char": 366, "adaptvqe_plugin": 366, "theta_init": 366, "1372701679264894": 366, "1372701679265027": 366, "sgd": 366, "adam": 366, "euclidean": 366, "baseless": 366, "fisher": 366, "steepest": 366, "fubini": 366, "devis": 366, "theta_0": 366, "theta_1": 366, "theta_2": 366, "theta_3": 366, "theta_4": 366, "natgrad_opt": 366, "learning_paramet": 366, "8660254037652464": 366, "ic": 366, "outperform": 366, "whch": 366, "regim": 366, "artifici": 366, "2n_": 366, "faulti": 366, "boil": 366, "fold": 366, "endo": 366, "rangle_": 366, "richardson": 366, "giurgica": 366, "tiron": 366, "unclear": 366, "varianc": 366, "qchem": 367, "renam": 367, "fermionic_util": 367, "exact_eigen_energi": 367, "fermionic_hamiltonian_exponenti": 367, "reloc": 367, "ansatz_circuit": 367, "build_ucc_ansatz": 367, "ucc_deprec": 367, "get_initial_params_and_cluster_op": 367, "mollet": 367, "select_excitation_oper": 367, "get_active_space_hamiltonian": 367, "versatil": 368, "demo": 368, "achiv": 369, "316": 369, "bqm_problem": 369}, "objects": {"": [[45, 0, 0, "-", "qat"]], "qat": [[75, 0, 0, "-", "comm"], [90, 0, 0, "-", "core"], [145, 0, 0, "-", "devices"], [161, 0, 0, "-", "fermion"], [191, 0, 0, "-", "generators"], [200, 0, 0, "-", "hardware"], [46, 0, 0, "-", "interop"], [206, 0, 0, "-", "lang"], [251, 0, 0, "-", "opt"], [277, 0, 0, "-", "plugins"], [67, 0, 0, "-", "pylinalg"], [296, 0, 0, "-", "qpus"], [305, 0, 0, "-", "quops"]], "qat.comm": [[76, 0, 0, "-", "datamodel"], [79, 0, 0, "-", "exceptions"], [83, 0, 0, "-", "resource"], [87, 0, 0, "-", "shared"]], "qat.comm.datamodel.ttypes": [[77, 1, 1, "", "GateDefinition"], [78, 1, 1, "", "Op"]], "qat.comm.exceptions.ttypes": [[80, 1, 1, "", "ErrorType"], [81, 1, 1, "", "PluginException"], [82, 1, 1, "", "QPUException"]], "qat.comm.resource.ttypes": [[84, 1, 1, "", "AllocationModel"], [85, 1, 1, "", "Device"], [86, 1, 1, "", "ResourceModel"]], "qat.comm.shared.ttypes": [[88, 1, 1, "", "IntermediateMeasurement"], [89, 1, 1, "", "ProcessingType"]], "qat.core": [[94, 1, 1, "", "Batch"], [95, 1, 1, "", "BatchResult"], [96, 1, 1, "", "Circuit"], [99, 1, 1, "", "HardwareSpecs"], [100, 1, 1, "", "Job"], [134, 1, 1, "", "Observable"], [135, 1, 1, "", "Parameter"], [137, 1, 1, "", "Result"], [138, 1, 1, "", "Sample"], [139, 1, 1, "", "Schedule"], [141, 1, 1, "", "Term"], [142, 1, 1, "", "Topology"], [143, 1, 1, "", "TopologyType"], [144, 1, 1, "", "Variable"], [101, 0, 0, "-", "application"], [104, 0, 0, "-", "circuit_builder"], [109, 0, 0, "-", "gate_set"], [113, 0, 0, "-", "qpu"], [115, 0, 0, "-", "spins"], [118, 0, 0, "-", "variables"]], "qat.core.Batch": [[94, 2, 1, "", "dump"], [94, 2, 1, "", "from_bytes"], [94, 2, 1, "", "from_thrift"], [94, 2, 1, "", "get_variables"], [94, 2, 1, "", "load"], [94, 2, 1, "", "to_cpp"], [94, 2, 1, "", "to_thrift"]], "qat.core.BatchResult": [[95, 2, 1, "", "append"], [95, 2, 1, "", "dump"], [95, 2, 1, "", "extend"], [95, 2, 1, "", "from_thrift"], [95, 2, 1, "", "load"]], "qat.core.Circuit": [[96, 2, 1, "", "bind_variable"], [96, 2, 1, "", "bind_variables"], [96, 2, 1, "", "compile"], [96, 2, 1, "", "count"], [96, 2, 1, "", "dag"], [96, 2, 1, "", "depth"], [96, 2, 1, "", "display"], [96, 2, 1, "", "dump"], [96, 2, 1, "", "empty"], [96, 2, 1, "", "eval"], [96, 2, 1, "", "fill_matrices"], [96, 2, 1, "", "from_bytes"], [96, 2, 1, "", "from_thrift"], [96, 3, 1, "", "gate_set"], [96, 2, 1, "", "get_variables"], [96, 2, 1, "", "insert_gate"], [96, 2, 1, "", "iterate_simple"], [96, 2, 1, "", "load"], [96, 2, 1, "", "remove_locks"], [96, 2, 1, "", "run"], [96, 2, 1, "", "shift_qbits"], [96, 2, 1, "", "statistics"], [96, 2, 1, "", "to_job"]], "qat.core.HardwareSpecs": [[99, 2, 1, "", "as_graph"], [99, 2, 1, "", "as_quameleon"], [99, 2, 1, "", "dump"], [99, 2, 1, "", "from_thrift"], [99, 2, 1, "", "load"], [99, 3, 1, "", "nbqbits"]], "qat.core.Job": [[100, 2, 1, "", "compile"], [100, 2, 1, "", "differentiate"], [100, 2, 1, "", "dump"], [100, 2, 1, "", "eval"], [100, 2, 1, "", "from_bytes"], [100, 2, 1, "", "from_thrift"], [100, 2, 1, "", "get_variables"], [100, 2, 1, "", "gradient"], [100, 2, 1, "", "load"], [100, 3, 1, "", "parameter_map"], [100, 3, 1, "", "psi_0"], [100, 2, 1, "", "run"], [100, 2, 1, "", "shift_qbits"], [100, 3, 1, "", "threshold"], [100, 2, 1, "", "to_cpp"], [100, 2, 1, "", "to_thrift"]], "qat.core.Observable": [[134, 4, 1, "", "constant_coeff"], [134, 4, 1, "", "ising"], [134, 4, 1, "", "nbqbits"], [134, 4, 1, "", "terms"], [134, 2, 1, "", "to_matrix"]], "qat.core.Parameter": [[135, 3, 1, "", "func"], [135, 2, 1, "", "generate_noise"], [135, 2, 1, "", "get_noise"], [135, 3, 1, "", "psd"]], "qat.core.Result": [[137, 2, 1, "", "add_sample"], [137, 2, 1, "", "display"], [137, 2, 1, "", "dump"], [137, 2, 1, "", "from_bytes"], [137, 2, 1, "", "from_thrift"], [137, 2, 1, "", "load"], [137, 3, 1, "", "parameter_map"], [137, 2, 1, "", "plot"], [137, 2, 1, "", "unpack"], [137, 3, 1, "", "value"], [137, 3, 1, "", "values"], [137, 2, 1, "", "wrap_samples"]], "qat.core.Sample": [[138, 3, 1, "", "amplitude"], [138, 2, 1, "", "from_bytes"], [138, 2, 1, "", "from_thrift"], [138, 2, 1, "", "set_qreg"], [138, 3, 1, "", "state"]], "qat.core.Schedule": [[139, 2, 1, "", "dump"], [139, 2, 1, "", "get_variables"], [139, 2, 1, "", "load"], [139, 2, 1, "", "to_job"]], "qat.core.Term": [[141, 4, 1, "", "coeff"], [141, 4, 1, "", "op"], [141, 4, 1, "", "qbits"]], "qat.core.Topology": [[142, 2, 1, "", "add_edge"], [142, 2, 1, "", "dump"], [142, 2, 1, "", "from_bytes"], [142, 2, 1, "", "from_nx"], [142, 2, 1, "", "from_thrift"], [142, 2, 1, "", "load"], [142, 3, 1, "", "nbqbits"], [142, 2, 1, "", "set_nbqbits"], [142, 2, 1, "", "to_nx"]], "qat.core.Variable": [[144, 2, 1, "", "differentiate"], [144, 2, 1, "", "get_variables"], [144, 2, 1, "", "to_thrift"]], "qat.core.application": [[102, 1, 1, "", "Application"], [103, 1, 1, "", "RemoteApplication"]], "qat.core.application.Application": [[102, 2, 1, "", "execute"], [102, 2, 1, "", "serve"]], "qat.core.assertion": [[92, 5, 1, "", "assert_plugin"], [93, 5, 1, "", "assert_qpu"]], "qat.core.circuit_builder.builder": [[108, 1, 1, "", "VariableNameNotAvailable"]], "qat.core.circuit_builder.matrix_util": [[105, 5, 1, "", "default_gate_set"], [106, 5, 1, "", "get_param_generator"], [107, 5, 1, "", "get_predef_generator"]], "qat.core.console": [[97, 5, 1, "", "display"]], "qat.core.formula_eval": [[98, 5, 1, "", "evaluate"]], "qat.core.gate_set": [[110, 1, 1, "", "GateSet"], [111, 1, 1, "", "GateSignature"], [112, 1, 1, "", "GateSyntaxRedefinition"]], "qat.core.gate_set.GateSet": [[110, 2, 1, "", "add_signature"], [110, 2, 1, "", "union"]], "qat.core.gate_set.GateSignature": [[111, 2, 1, "", "get_circuit"], [111, 2, 1, "", "get_matrix"], [111, 2, 1, "", "set_circuit_generator"], [111, 2, 1, "", "set_matrix_generator"]], "qat.core.printer": [[136, 5, 1, "", "plot_in_notebook"]], "qat.core.qpu": [[114, 1, 1, "", "CommonQPU"]], "qat.core.spins": [[116, 5, 1, "", "integer_to_spins"], [117, 5, 1, "", "spins_to_integer"]], "qat.core.variables": [[121, 1, 1, "", "ArithExpression"], [132, 1, 1, "", "Symbol"], [119, 5, 1, "", "abso"], [120, 5, 1, "", "angle"], [122, 5, 1, "", "atan2"], [123, 5, 1, "", "cos"], [124, 5, 1, "", "exp"], [125, 5, 1, "", "get_item"], [126, 5, 1, "", "heaviside"], [127, 5, 1, "", "imag"], [128, 5, 1, "", "ln"], [129, 5, 1, "", "real"], [130, 5, 1, "", "sin"], [131, 5, 1, "", "sqrt"], [133, 5, 1, "", "vmax"]], "qat.core.variables.ArithExpression": [[121, 2, 1, "", "differentiate"], [121, 2, 1, "", "from_string"], [121, 2, 1, "", "get_variables"], [121, 2, 1, "", "pretty_print"], [121, 2, 1, "", "to_thrift"]], "qat.core.wrappers.result": [[140, 1, 1, "", "State"], [91, 5, 1, "", "aggregate_data"]], "qat.core.wrappers.result.State": [[140, 3, 1, "", "bitstring"], [140, 3, 1, "", "int"], [140, 3, 1, "", "lsb_int"], [140, 3, 1, "", "value"]], "qat.devices": [[146, 1, 1, "", "AllToAll"], [147, 6, 1, "", "GOOGLE_SYCAMORE"], [148, 1, 1, "", "GridDevice"], [149, 6, 1, "", "IBM_BURLINGTON"], [150, 6, 1, "", "IBM_JOHANNESBURG"], [151, 6, 1, "", "IBM_MELBOURNE"], [152, 6, 1, "", "IBM_RUESCHLIKON"], [153, 6, 1, "", "IBM_SINGAPORE"], [154, 6, 1, "", "IBM_TOKYO"], [155, 6, 1, "", "IBM_YORKTOWN"], [156, 1, 1, "", "LineDevice"], [157, 6, 1, "", "RIGETTI_AGAVE"], [158, 6, 1, "", "RIGETTI_ASPEN"], [159, 1, 1, "", "SquareGridDevice"], [160, 6, 1, "", "ZUCHONGZHI"]], "qat.fermion": [[161, 0, 0, "-", "chemistry"], [161, 0, 0, "-", "circuits"], [161, 0, 0, "-", "hamiltonians"], [161, 0, 0, "-", "phase_estimation"], [161, 0, 0, "-", "transforms"]], "qat.fermion.chemistry.pyscf_tools": [[184, 5, 1, "", "perform_pyscf_computation"]], "qat.fermion.chemistry": [[161, 0, 0, "-", "qse"], [161, 0, 0, "-", "ucc"]], "qat.fermion.chemistry.qse": [[162, 5, 1, "", "apply_quantum_subspace_expansion"]], "qat.fermion.chemistry.ucc": [[163, 5, 1, "", "compute_active_space_integrals"], [164, 5, 1, "", "construct_ucc_ansatz"], [165, 5, 1, "", "convert_to_h_integrals"], [168, 5, 1, "", "get_cluster_ops"], [169, 5, 1, "", "get_hf_ket"], [170, 5, 1, "", "guess_init_params"], [185, 5, 1, "", "select_active_orbitals"], [187, 5, 1, "", "transform_integrals_to_new_basis"]], "qat.fermion.chemistry.wrapper": [[181, 1, 1, "", "MolecularHamiltonian"], [182, 1, 1, "", "MoleculeInfo"]], "qat.fermion.chemistry.wrapper.MolecularHamiltonian": [[181, 4, 1, "", "constant_coeff"], [181, 2, 1, "", "get_electronic_hamiltonian"], [181, 4, 1, "", "nqbits"], [181, 4, 1, "", "one_body_integrals"], [181, 2, 1, "", "select_active_space"], [181, 2, 1, "", "transform_basis"], [181, 4, 1, "", "two_body_integrals"]], "qat.fermion.chemistry.wrapper.MoleculeInfo": [[182, 4, 1, "", "constant_coeff"], [182, 4, 1, "", "hamiltonian"], [182, 4, 1, "", "n_electrons"], [182, 4, 1, "", "noons"], [182, 4, 1, "", "nqbits"], [182, 4, 1, "", "one_body_integrals"], [182, 4, 1, "", "orbital_energies"], [182, 2, 1, "", "restrict_active_space"], [182, 4, 1, "", "two_body_integrals"]], "qat.fermion.circuits": [[172, 5, 1, "", "make_compressed_ldca_circ"], [174, 5, 1, "", "make_general_hwe_circ"], [176, 5, 1, "", "make_ldca_circ"], [177, 5, 1, "", "make_mr_circ"], [178, 5, 1, "", "make_mrep_circ"], [179, 5, 1, "", "make_shallow_circ"]], "qat.fermion.hamiltonians": [[166, 1, 1, "", "ElectronicStructureHamiltonian"], [167, 1, 1, "", "FermionHamiltonian"], [186, 1, 1, "", "SpinHamiltonian"], [171, 5, 1, "", "make_anderson_model"], [173, 5, 1, "", "make_embedded_model"], [175, 5, 1, "", "make_hubbard_model"]], "qat.fermion.hamiltonians.ElectronicStructureHamiltonian": [[166, 4, 1, "", "constant_coeff"], [166, 2, 1, "", "copy"], [166, 2, 1, "", "dag"], [166, 2, 1, "", "get_matrix"], [166, 4, 1, "", "hpq"], [166, 4, 1, "", "hpqrs"], [166, 2, 1, "", "to_fermion"], [166, 2, 1, "", "to_spin"]], "qat.fermion.hamiltonians.FermionHamiltonian": [[167, 4, 1, "", "constant_coeff"], [167, 2, 1, "", "copy"], [167, 2, 1, "", "dag"], [167, 2, 1, "", "get_matrix"], [167, 4, 1, "", "matrix"], [167, 4, 1, "", "nbqbits"], [167, 4, 1, "", "normal_order"], [167, 4, 1, "", "terms"], [167, 2, 1, "", "to_electronic"], [167, 2, 1, "", "to_spin"]], "qat.fermion.hamiltonians.SpinHamiltonian": [[186, 4, 1, "", "constant_coeff"], [186, 2, 1, "", "copy"], [186, 2, 1, "", "dag"], [186, 2, 1, "", "get_matrix"], [186, 4, 1, "", "matrix"], [186, 4, 1, "", "nbqbits"], [186, 4, 1, "", "terms"]], "qat.fermion.phase_estimation": [[183, 1, 1, "", "perform_phase_estimation"]], "qat.fermion.transforms": [[188, 5, 1, "", "transform_to_bk_basis"], [189, 5, 1, "", "transform_to_jw_basis"], [190, 5, 1, "", "transform_to_parity_basis"]], "qat.fermion.trotterisation": [[180, 5, 1, "", "make_trotterisation_routine"]], "qat.generators": [[192, 1, 1, "", "AbstractGenerator"], [193, 1, 1, "", "CombinatorialOptimizerGenerator"], [194, 1, 1, "", "GraphColouringGenerator"], [195, 1, 1, "", "GraphPartitioningGenerator"], [196, 1, 1, "", "KCliqueGenerator"], [197, 1, 1, "", "MaxCutGenerator"], [198, 1, 1, "", "RemoteBatchGenerator"], [199, 1, 1, "", "VertexCoverGenerator"]], "qat.generators.AbstractGenerator": [[192, 2, 1, "", "generate"], [192, 2, 1, "", "serve"], [192, 2, 1, "", "wrapper_post_process"]], "qat.generators.CombinatorialOptimizerGenerator": [[193, 2, 1, "", "generate"], [193, 2, 1, "", "post_process"]], "qat.generators.GraphColouringGenerator": [[194, 2, 1, "", "generate"]], "qat.generators.GraphPartitioningGenerator": [[195, 2, 1, "", "generate"]], "qat.generators.KCliqueGenerator": [[196, 2, 1, "", "generate"]], "qat.generators.MaxCutGenerator": [[197, 2, 1, "", "generate"]], "qat.generators.RemoteBatchGenerator": [[198, 2, 1, "", "generate"], [198, 2, 1, "", "post_process"]], "qat.generators.VertexCoverGenerator": [[199, 2, 1, "", "generate"]], "qat.hardware": [[201, 1, 1, "", "DefaultGatesSpecification"], [202, 1, 1, "", "DefaultHardwareModel"], [203, 1, 1, "", "GatesSpecification"], [204, 1, 1, "", "HardwareModel"], [205, 5, 1, "", "make_depolarizing_hardware_model"]], "qat.hardware.DefaultGatesSpecification": [[201, 4, 1, "", "gate_times"], [201, 2, 1, "", "get_gate_time"], [201, 2, 1, "", "get_quantum_channel"], [201, 4, 1, "", "meas"], [201, 4, 1, "", "quantum_channels"], [201, 4, 1, "", "state_prep"]], "qat.hardware.DefaultHardwareModel": [[202, 4, 1, "", "gate_noise"], [202, 4, 1, "", "gates_specification"], [202, 4, 1, "", "idle_noise"], [202, 4, 1, "", "jump_operators"], [202, 4, 1, "", "params_specification"]], "qat.hardware.GatesSpecification": [[203, 4, 1, "", "gate_times"], [203, 2, 1, "", "get_gate_time"], [203, 2, 1, "", "get_quantum_channel"], [203, 4, 1, "", "meas"], [203, 4, 1, "", "quantum_channels"], [203, 4, 1, "", "state_prep"]], "qat.hardware.HardwareModel": [[204, 4, 1, "", "gate_noise"], [204, 4, 1, "", "gates_specification"], [204, 4, 1, "", "idle_noise"], [204, 4, 1, "", "jump_operators"], [204, 4, 1, "", "params_specification"]], "qat.interop": [[47, 0, 0, "-", "cirq"], [50, 0, 0, "-", "openqasm"], [52, 0, 0, "-", "projectq"], [55, 0, 0, "-", "pyquil"], [59, 0, 0, "-", "qiskit"]], "qat.interop.cirq": [[48, 5, 1, "", "cirq_to_qlm"], [49, 5, 1, "", "qlm_to_cirq"]], "qat.interop.openqasm": [[51, 1, 1, "", "OqasmParser"]], "qat.interop.openqasm.OqasmParser": [[51, 2, 1, "", "compile"]], "qat.interop.projectq": [[53, 1, 1, "", "AqasmEngine"], [54, 1, 1, "", "AqasmPrinter"]], "qat.interop.projectq.AqasmEngine": [[53, 2, 1, "", "projectq_to_qlm"]], "qat.interop.pyquil": [[57, 1, 1, "", "PyquilQPU"], [56, 5, 1, "", "pyquil_to_qlm"], [58, 5, 1, "", "qlm_to_pyquil"]], "qat.interop.pyquil.PyquilQPU": [[57, 2, 1, "", "set_qpu"], [57, 2, 1, "", "submit"], [57, 2, 1, "", "submit_job"]], "qat.interop.qiskit": [[60, 1, 1, "", "AsyncBackendToQPU"], [61, 1, 1, "", "BackendToQPU"], [66, 1, 1, "", "QPUToBackend"], [63, 1, 1, "", "QiskitJob"], [62, 5, 1, "", "qiskit_to_qlm"], [65, 5, 1, "", "qlm_to_qiskit"]], "qat.interop.qiskit.AsyncBackendToQPU": [[60, 2, 1, "", "retrieve_job"], [60, 2, 1, "", "submit"]], "qat.interop.qiskit.BackendToQPU": [[61, 2, 1, "", "submit"]], "qat.interop.qiskit.QPUToBackend": [[66, 2, 1, "", "set_qpu"]], "qat.interop.qiskit.QiskitJob": [[63, 2, 1, "", "cancel"], [63, 2, 1, "", "dump"], [63, 2, 1, "", "job_id"], [63, 2, 1, "", "result"], [63, 2, 1, "", "status"]], "qat.interop.qiskit.runtime": [[64, 1, 1, "", "QiskitRuntimeQPU"]], "qat.interop.qiskit.runtime.QiskitRuntimeQPU": [[64, 2, 1, "", "submit"]], "qat.lang.AQASM": [[219, 0, 0, "-", "arithmetic"], [225, 0, 0, "-", "classarith"], [229, 0, 0, "-", "qftarith"]], "qat.lang.AQASM.arithmetic": [[220, 5, 1, "", "add_const_mod"], [221, 5, 1, "", "add_mod"], [222, 5, 1, "", "modular_exp"], [223, 5, 1, "", "mult_const"], [224, 5, 1, "", "mult_const_mod"]], "qat.lang.AQASM.bits": [[209, 1, 1, "", "BoolFormula"], [212, 1, 1, "", "CRegister"], [211, 1, 1, "", "Cbit"], [246, 1, 1, "", "QRegister"], [239, 1, 1, "", "Qbit"]], "qat.lang.AQASM.classarith": [[226, 5, 1, "", "add"], [227, 5, 1, "", "add_const"], [228, 5, 1, "", "cuccaro_add"]], "qat.lang.AQASM.gates": [[213, 1, 1, "", "Gate"], [235, 1, 1, "", "ParamGate"]], "qat.lang.AQASM.gates.ParamGate": [[235, 2, 1, "", "bind_variables"], [235, 2, 1, "", "dag"], [235, 2, 1, "", "display"], [235, 2, 1, "", "get_variables"]], "qat.lang.AQASM.misc": [[214, 5, 1, "", "generate_gate_set"]], "qat.lang.AQASM.qbool": [[240, 1, 1, "", "QBool"], [241, 1, 1, "", "QBoolArray"], [242, 1, 1, "", "QClause"]], "qat.lang.AQASM.qbool.QBool": [[240, 2, 1, "", "cast"], [240, 2, 1, "", "cast_to"], [240, 2, 1, "", "evaluate"], [240, 2, 1, "", "phase"], [240, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qbool.QBoolArray": [[241, 2, 1, "", "cast"], [241, 2, 1, "", "evaluate"], [241, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qbool.QClause": [[242, 2, 1, "", "evaluate"], [242, 2, 1, "", "phase"], [242, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qftarith": [[234, 5, 1, "", "QFT"], [230, 5, 1, "", "add"], [231, 5, 1, "", "add_const"], [232, 5, 1, "", "mult"], [233, 5, 1, "", "mult_const"]], "qat.lang.AQASM.qint": [[238, 1, 1, "", "QArithExp"], [243, 1, 1, "", "QCompExp"], [245, 1, 1, "", "QInt"]], "qat.lang.AQASM.qint.QArithExp": [[238, 2, 1, "", "evaluate"]], "qat.lang.AQASM.qint.QCompExp": [[243, 2, 1, "", "evaluate"], [243, 2, 1, "", "phase"], [243, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qint.QInt": [[245, 2, 1, "", "cast"], [245, 2, 1, "", "evaluate"], [245, 2, 1, "", "qbits_list"], [245, 2, 1, "", "set_value"]], "qat.lang": [[207, 1, 1, "", "AbstractGate"], [237, 1, 1, "", "Program"], [248, 1, 1, "", "QRoutine"], [206, 0, 0, "-", "algorithms"], [210, 5, 1, "", "build_gate"], [244, 5, 1, "", "qfunc"], [247, 5, 1, "", "qrout"]], "qat.lang.AbstractGate": [[207, 2, 1, "", "set_dag"]], "qat.lang.Program": [[237, 2, 1, "", "apply"], [237, 2, 1, "", "calloc"], [237, 2, 1, "", "cbreak"], [237, 2, 1, "", "cc_apply"], [237, 2, 1, "", "comment"], [237, 2, 1, "", "conjugate"], [237, 2, 1, "", "display"], [237, 2, 1, "", "export"], [237, 2, 1, "", "free_ancillae"], [237, 2, 1, "", "get_free_ancillae"], [237, 2, 1, "", "logic"], [237, 2, 1, "", "measure"], [237, 2, 1, "", "new_var"], [237, 2, 1, "", "qalloc"], [237, 2, 1, "", "reset"], [237, 2, 1, "", "run"], [237, 2, 1, "", "to_circ"]], "qat.lang.QRoutine": [[248, 2, 1, "", "apply"], [248, 2, 1, "", "compute"], [248, 2, 1, "", "free_ancillae"], [248, 2, 1, "", "get_free_ancillae"], [248, 2, 1, "", "new_wires"], [248, 2, 1, "", "set_ancillae"], [248, 2, 1, "", "uncompute"]], "qat.lang.algorithms.amplification": [[215, 5, 1, "", "grover_diffusion"], [216, 5, 1, "", "householder"], [250, 5, 1, "", "uniform_distribution"]], "qat.lang.algorithms": [[208, 5, 1, "", "amplification_step"], [236, 5, 1, "", "phase_estimation"], [249, 5, 1, "", "quantum_counting"]], "qat.lang.linking": [[218, 1, 1, "", "Linker"]], "qat.lang.linking.Linker": [[218, 2, 1, "", "add_signature"], [218, 2, 1, "", "clear_gate_set"], [218, 2, 1, "", "compile"], [218, 2, 1, "", "link"], [218, 2, 1, "", "link_gates"], [218, 2, 1, "", "link_matrices"], [218, 2, 1, "", "set_gate_set"]], "qat.lang.models": [[217, 1, 1, "", "KPTree"]], "qat.lang.models.KPTree": [[217, 2, 1, "", "get_routine"]], "qat.opt": [[253, 1, 1, "", "BILP"], [256, 1, 1, "", "CombinatorialProblem"], [257, 1, 1, "", "GraphColouring"], [258, 1, 1, "", "GraphPartitioning"], [259, 1, 1, "", "Ising"], [260, 1, 1, "", "KClique"], [261, 1, 1, "", "MaxCut"], [262, 1, 1, "", "MixingFactory"], [272, 1, 1, "", "NumberPartitioning"], [273, 1, 1, "", "QUBO"], [276, 1, 1, "", "VertexCover"], [263, 0, 0, "-", "mixing_factory"], [267, 0, 0, "-", "results"]], "qat.opt.BILP": [[253, 2, 1, "", "get_best_parameters"]], "qat.opt.CombinatorialProblem": [[256, 2, 1, "", "add_clause"], [256, 2, 1, "", "get_observable"], [256, 2, 1, "", "new_var"], [256, 2, 1, "", "new_vars"], [256, 2, 1, "", "to_bqm"], [256, 2, 1, "", "to_ising"], [256, 2, 1, "", "to_qubo"]], "qat.opt.GraphColouring": [[257, 2, 1, "", "get_best_parameters"], [257, 2, 1, "", "parse_result"]], "qat.opt.GraphPartitioning": [[258, 2, 1, "", "get_best_parameters"], [258, 2, 1, "", "parse_result"]], "qat.opt.Ising": [[259, 2, 1, "", "dump"], [259, 2, 1, "", "from_thrift"], [259, 2, 1, "", "get_best_parameters"], [259, 2, 1, "", "get_j_h_and_offset"], [259, 2, 1, "", "get_observable"], [259, 3, 1, "", "j_coupling_matrix"], [259, 2, 1, "", "load"], [259, 3, 1, "", "magnetic_field_h"], [259, 2, 1, "", "to_bqm"], [259, 2, 1, "", "to_combinatorial_problem"], [259, 2, 1, "", "to_job"], [259, 2, 1, "", "to_qubo"]], "qat.opt.KClique": [[260, 2, 1, "", "get_best_parameters"], [260, 2, 1, "", "parse_result"]], "qat.opt.MaxCut": [[261, 2, 1, "", "get_best_parameters"], [261, 2, 1, "", "parse_result"]], "qat.opt.MixingFactory": [[262, 2, 1, "", "bit_flip"], [262, 2, 1, "", "bit_move"]], "qat.opt.NumberPartitioning": [[272, 2, 1, "", "get_best_parameters"]], "qat.opt.QUBO": [[273, 2, 1, "", "get_best_parameters"], [273, 2, 1, "", "get_observable"], [273, 2, 1, "", "get_q_and_offset"], [273, 3, 1, "", "q_matrix"], [273, 2, 1, "", "to_bqm"], [273, 2, 1, "", "to_combinatorial_problem"], [273, 2, 1, "", "to_ising"], [273, 2, 1, "", "to_job"]], "qat.opt.VertexCover": [[276, 2, 1, "", "get_best_parameters"], [276, 2, 1, "", "parse_result"]], "qat.opt.binary_linear_integer_programming": [[253, 5, 1, "", "produce_q_and_offset"]], "qat.opt.boolexpr": [[255, 1, 1, "", "Clause"], [275, 1, 1, "", "Var"]], "qat.opt.boolexpr.Clause": [[255, 2, 1, "", "and_clause"], [255, 2, 1, "", "evaluate"], [255, 2, 1, "", "get_observable"], [255, 2, 1, "", "get_variables"], [255, 2, 1, "", "neg_clause"], [255, 2, 1, "", "or_clause"], [255, 2, 1, "", "xor_clause"]], "qat.opt.boolexpr.Var": [[275, 2, 1, "", "evaluate"], [275, 2, 1, "", "get_observable"], [275, 2, 1, "", "get_variables"], [275, 4, 1, "", "index"]], "qat.opt.circuit_generator": [[254, 1, 1, "", "CircuitGenerator"]], "qat.opt.circuit_generator.CircuitGenerator": [[254, 2, 1, "", "get_observable"], [254, 2, 1, "", "qaoa_ansatz"]], "qat.opt.graph_colouring": [[257, 5, 1, "", "produce_q_and_offset"]], "qat.opt.graph_partitioning": [[258, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.k_clique": [[260, 5, 1, "", "produce_q_and_offset"]], "qat.opt.max_cut": [[261, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.mixing_factory": [[264, 1, 1, "", "IndependentAnnealing"], [265, 1, 1, "", "InitialStateBuilder"], [266, 1, 1, "", "SimpleInitialState"]], "qat.opt.mixing_factory.IndependentAnnealing": [[264, 2, 1, "", "inject_initial_state"]], "qat.opt.mixing_factory.InitialStateBuilder": [[265, 2, 1, "", "inject_initial_state"]], "qat.opt.mixing_factory.SimpleInitialState": [[266, 2, 1, "", "inject_initial_state"]], "qat.opt.number_partitioning": [[272, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.results": [[268, 1, 1, "", "CombinatorialResult"], [269, 1, 1, "", "GraphPartitioningResult"], [270, 1, 1, "", "KCliqueResult"], [271, 1, 1, "", "VertexCoverResult"]], "qat.opt.results.GraphPartitioningResult": [[269, 2, 1, "", "display"]], "qat.opt.results.KCliqueResult": [[270, 3, 1, "", "clique"]], "qat.opt.results.VertexCoverResult": [[271, 3, 1, "", "cover"]], "qat.opt.schedule_generator": [[274, 1, 1, "", "ScheduleGenerator"]], "qat.opt.schedule_generator.ScheduleGenerator": [[274, 2, 1, "", "annealing_job"], [274, 2, 1, "", "get_observable"]], "qat.opt.vertex_cover": [[276, 5, 1, "", "produce_q_and_offset"]], "qat.plugins": [[278, 1, 1, "", "AbstractPlugin"], [279, 1, 1, "", "AdaptVQEPlugin"], [280, 1, 1, "", "CircuitInliner"], [281, 1, 1, "", "CostFunctionPlugin"], [282, 1, 1, "", "Display"], [283, 1, 1, "", "GradientDescentOptimizer"], [284, 1, 1, "", "Junction"], [285, 1, 1, "", "MultipleLaunchesAnalyzer"], [286, 1, 1, "", "ObservableSplitter"], [287, 1, 1, "", "Optimizer"], [288, 1, 1, "", "PSOMinimizePlugin"], [289, 1, 1, "", "QuameleonPlugin"], [290, 1, 1, "", "RemotePlugin"], [293, 1, 1, "", "SPSAMinimizePlugin"], [291, 1, 1, "", "ScipyMinimizePlugin"], [292, 1, 1, "", "SeqOptim"], [294, 1, 1, "", "TransformObservable"], [295, 1, 1, "", "ZeroNoiseExtrapolator"]], "qat.plugins.AbstractPlugin": [[278, 2, 1, "", "compile"], [278, 2, 1, "", "do_post_processing"], [278, 2, 1, "", "post_process"], [278, 2, 1, "", "serve"]], "qat.plugins.AdaptVQEPlugin": [[279, 2, 1, "", "compile"]], "qat.plugins.CircuitInliner": [[280, 2, 1, "", "compile"]], "qat.plugins.CostFunctionPlugin": [[281, 2, 1, "", "compile"]], "qat.plugins.Display": [[282, 2, 1, "", "compile"]], "qat.plugins.GradientDescentOptimizer": [[283, 2, 1, "", "compile"]], "qat.plugins.Junction": [[284, 2, 1, "", "execute"], [284, 2, 1, "", "run"]], "qat.plugins.MultipleLaunchesAnalyzer": [[285, 2, 1, "", "compile"]], "qat.plugins.ObservableSplitter": [[286, 2, 1, "", "compile"]], "qat.plugins.Optimizer": [[287, 2, 1, "", "evaluate"], [287, 2, 1, "", "optimize"]], "qat.plugins.PSOMinimizePlugin": [[288, 2, 1, "", "compile"]], "qat.plugins.QuameleonPlugin": [[289, 2, 1, "", "compile"]], "qat.plugins.RemotePlugin": [[290, 2, 1, "", "compile"]], "qat.plugins.SPSAMinimizePlugin": [[293, 2, 1, "", "compile"]], "qat.plugins.ScipyMinimizePlugin": [[291, 2, 1, "", "compile"], [291, 2, 1, "", "set_options"]], "qat.plugins.SeqOptim": [[292, 2, 1, "", "compile"]], "qat.plugins.TransformObservable": [[294, 2, 1, "", "compile"]], "qat.plugins.ZeroNoiseExtrapolator": [[295, 2, 1, "", "compile"]], "qat.pylinalg": [[68, 0, 0, "-", "simulator"]], "qat.pylinalg.simulator": [[69, 5, 1, "", "mat2nparray"], [70, 5, 1, "", "measure"], [71, 5, 1, "", "project"], [72, 5, 1, "", "raise_break"], [73, 5, 1, "", "reset"], [74, 5, 1, "", "simulate"]], "qat.qpus": [[297, 1, 1, "", "CLinalg"], [300, 1, 1, "", "ClassicalQPU"], [298, 1, 1, "", "PyLinalg"], [303, 1, 1, "", "QPUHandler"], [304, 1, 1, "", "RemoteQPU"], [299, 1, 1, "", "SimulatedAnnealing"], [301, 5, 1, "", "get_current_qpu"], [302, 5, 1, "", "get_default_qpu"]], "qat.qpus.CLinalg": [[297, 2, 1, "", "submit"]], "qat.qpus.PyLinalg": [[298, 2, 1, "", "serve"], [298, 2, 1, "", "submit"], [298, 2, 1, "", "submit_job"]], "qat.qpus.QPUHandler": [[303, 2, 1, "", "apply_resource_consumption_limits"], [303, 2, 1, "", "estimate_resources_for_batch"], [303, 2, 1, "", "get_specs"], [303, 2, 1, "", "serve"], [303, 2, 1, "", "submit"], [303, 2, 1, "", "submit_job"]], "qat.qpus.SimulatedAnnealing": [[299, 2, 1, "", "submit_job"]], "qat.quops": [[307, 1, 1, "", "ChannelRepresentations"], [327, 1, 1, "", "ParametricAmplitudeDamping"], [328, 1, 1, "", "ParametricGateNoise"], [329, 1, 1, "", "ParametricPureDephasing"], [330, 1, 1, "", "ParametricQuantumChannel"], [332, 1, 1, "", "QuantumChannel"], [333, 1, 1, "", "QuantumChannelChi"], [334, 1, 1, "", "QuantumChannelChoi"], [335, 1, 1, "", "QuantumChannelKraus"], [336, 1, 1, "", "QuantumChannelPTM"], [316, 5, 1, "", "is_completely_positive"], [317, 5, 1, "", "is_trace_preserving"], [318, 5, 1, "", "is_trace_reducing"], [319, 5, 1, "", "is_unital"], [320, 5, 1, "", "make_avg_fid_equiv_depol_channel"], [321, 5, 1, "", "make_depolarizing_channel"], [322, 5, 1, "", "make_generalized_amplitude_damping"], [305, 0, 0, "-", "metrics"]], "qat.quops.ParametricAmplitudeDamping": [[327, 4, 1, "", "T_1"], [327, 4, 1, "", "name"], [327, 2, 1, "", "prob"]], "qat.quops.ParametricPureDephasing": [[329, 4, 1, "", "T_phi"], [329, 4, 1, "", "name"], [329, 2, 1, "", "prob"], [329, 2, 1, "", "ptilde"]], "qat.quops.QuantumChannelChi": [[333, 2, 1, "", "apply_to"], [333, 4, 1, "", "arity"], [333, 4, 1, "", "matrix"], [333, 4, 1, "", "matrix_basis"], [333, 4, 1, "", "name"], [333, 2, 1, "", "to_kraus"]], "qat.quops.QuantumChannelChoi": [[334, 4, 1, "", "arity"], [334, 4, 1, "", "matrix"], [334, 4, 1, "", "name"], [334, 2, 1, "", "to_kraus"], [334, 2, 1, "", "to_ptm"]], "qat.quops.QuantumChannelKraus": [[335, 2, 1, "", "apply_to"], [335, 2, 1, "", "apply_to_vector"], [335, 4, 1, "", "kraus_operators"], [335, 2, 1, "id0", "kraus_rank"], [335, 4, 1, "", "name"], [335, 2, 1, "", "to_chi"], [335, 2, 1, "", "to_choi"], [335, 2, 1, "", "to_ptm"]], "qat.quops.QuantumChannelPTM": [[336, 2, 1, "", "apply_to"], [336, 4, 1, "", "arity"], [336, 3, 1, "id0", "matrix"], [336, 4, 1, "", "name"], [336, 3, 1, "", "ptm"], [336, 3, 1, "", "tensor"], [336, 2, 1, "", "to_choi"], [336, 2, 1, "", "to_kraus"]], "qat.quops.math_util": [[306, 5, 1, "", "are_equal_up_to_phase"], [308, 5, 1, "", "convert_density_mat_to_pauli_vec"], [309, 5, 1, "", "convert_pauli_vec_to_density_mat"], [323, 5, 1, "", "make_pauli_matrix_basis"], [324, 5, 1, "", "make_standard_matrix_basis"], [325, 5, 1, "", "make_standard_vector_basis"], [326, 5, 1, "", "multikron"], [331, 5, 1, "", "partial_trace"]], "qat.quops.metrics": [[310, 5, 1, "", "get_average_process_fidelity"], [311, 5, 1, "", "get_diamond_norm"], [312, 5, 1, "", "get_entanglement_process_fidelity"], [313, 5, 1, "", "get_process_distance"], [314, 5, 1, "", "get_state_fidelity"], [315, 5, 1, "", "get_trace_distance"]], "qat.simulated_annealing.service": [[299, 5, 1, "", "extract_j_and_h_from_obs"]], "qat.vsolve.ansatz": [[252, 1, 1, "", "AnsatzFactory"]], "qat.vsolve.ansatz.AnsatzFactory": [[252, 2, 1, "", "qaoa_circuit"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "titleterms": {"get": [0, 42], "start": 0, "write": [1, 8, 90], "quantum": [1, 2, 8, 10, 12, 13, 14, 16, 17, 27, 32, 33, 161, 206, 263, 297, 298, 305, 337, 338, 341, 342, 343, 344, 345, 347, 355, 356, 365], "program": [1, 2, 8, 9, 12, 18, 22, 27, 32, 206, 237, 337, 348], "exampl": [1, 16, 40, 41, 364], "grover": [1, 16], "algorithm": [1, 3, 43, 206, 208, 215, 216, 236, 249, 250, 337, 355], "The": [1, 17, 161, 364], "diffus": 1, "oracl": [1, 13, 16], "execut": [2, 27], "variat": [3, 11, 43, 277, 337, 365], "qaptiva": [3, 7], "instal": [4, 6], "myqlm": [4, 5, 6, 338, 339, 368], "prerequisit": 4, "compat": 4, "matrix": [4, 10], "packag": [4, 338], "interoper": [4, 337, 340, 341, 342, 343, 344, 369], "licens": 5, "proprietari": 5, "part": 5, "open": 5, "sourc": 5, "maco": 6, "user": [7, 10], "guid": 7, "librari": [7, 367], "built": 7, "upon": 7, "gate": [9, 10, 12, 14, 17, 36, 200, 206, 213, 235, 296, 340], "base": [9, 36, 37, 38, 296, 340, 367], "creat": [10, 11, 18, 26, 42, 263, 364], "ad": [10, 337], "circuit": [10, 11, 12, 14, 96, 161, 172, 174, 176, 177, 178, 179, 206, 277, 337, 338, 341, 342, 343, 344, 345, 365], "nativ": 10, "control": 10, "dagger": 10, "defin": [10, 338, 364], "parametr": 10, "abstractg": [10, 207], "definit": 10, "subcircuit": 10, "ariti": 10, "gener": [10, 12, 25, 31, 145, 191, 192, 193, 194, 195, 196, 197, 198, 199, 251, 267, 338, 357, 358, 359, 360, 361, 362], "deprec": [10, 338, 367], "custom": [10, 42, 263], "job": [11, 18, 21, 28, 29, 30, 43, 90, 100, 251, 263, 338], "bind": 11, "variabl": [11, 19, 90, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144], "alloc": [12, 16], "qubit": [12, 96], "classic": [12, 16], "regist": [12, 206], "appli": 12, "advanc": 12, "oper": [12, 26, 305, 364], "export": 12, "routin": [13, 14, 206], "name": 14, "lift": 14, "python": [14, 36, 38, 338], "function": [14, 161, 338], "link": [14, 17, 218], "extract": 14, "ancilla": 15, "manag": [15, 206], "comput": [15, 34, 36, 337, 338], "scope": 15, "autom": [15, 31], "uncomput": 15, "type": [16, 206], "boolean": [16, 206], "condit": 16, "logic": 16, "express": [16, 206], "evalu": [16, 98], "statement": 16, "build": [16, 19], "phase": [16, 161, 365], "integ": [16, 206, 348], "set": [16, 206], "valu": 16, "arithmet": [16, 206, 219, 220, 221, 222, 223, 224], "graph": [16, 347, 349, 350, 359, 362], "color": 16, "ato": 17, "assembl": 17, "aqasm": [17, 209, 211, 212, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 245, 246], "text": 17, "format": 17, "header": 17, "instruct": 17, "list": [17, 19], "compil": [17, 40, 345], "file": 17, "time": 17, "analog": [18, 21], "background": 18, "schedul": [19, 20, 139], "hamiltonian": [19, 23, 161, 166, 167, 171, 173, 175, 186, 364], "coeffici": 19, "observ": [19, 26, 30, 90, 134], "us": [19, 26, 28, 39, 96, 338, 364], "abstract": [19, 296], "one": [19, 28, 364], "manipul": [20, 206, 364], "anneal": [22, 34, 263, 296, 347, 356, 369], "Ising": [23, 251, 259], "bibliographi": [23, 355], "quadrat": [24, 251], "unconstrain": [24, 347], "binari": [24, 348], "optim": [24, 191, 251, 267, 277, 287, 337, 346, 355], "qubo": [24, 251, 273], "combinatori": [25, 191, 251, 267, 337, 346], "problem": [25, 251, 337, 338, 347, 357], "singl": 26, "term": [26, 141], "an": 26, "simul": [27, 36, 37, 38, 68, 69, 70, 71, 72, 73, 74, 296, 337, 338, 347], "construct": 28, "multipl": 28, "batch": [28, 31, 94, 338], "sampl": [29, 138], "result": [32, 90, 91, 137, 140, 267, 268, 269, 270, 271], "process": [33, 297, 298], "unit": [33, 297, 298], "qpu": [33, 35, 36, 39, 42, 43, 113, 114, 296, 297, 298, 299, 300, 301, 302, 303, 304, 338, 341, 342], "inner": 34, "work": 34, "make": [35, 40, 41], "your": [35, 40, 337], "own": [35, 40, 41], "method": [35, 40, 96, 364], "submit_job": 35, "get_spec": 35, "emul": 36, "clinalg": [36, 37, 297], "c": [36, 37, 297], "linear": [36, 37, 38, 348], "algebra": [36, 37, 38], "pylinalg": [36, 38, 67, 68, 69, 70, 71, 72, 73, 74, 298], "extend": [39, 43], "plugin": [39, 40, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 337, 366], "post_process": 40, "A": [40, 41, 338], "concret": [40, 41], "you": 41, "junction": [41, 284], "inform": 42, "from": 42, "specif": [42, 90, 200], "run": [43, 337], "support": [43, 251], "differenti": 43, "test": 43, "sever": 43, "initi": 43, "paramet": [43, 90, 135], "api": 44, "refer": [44, 217, 219, 225, 229], "qat": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 367], "interop": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "cirq": [47, 48, 49, 343], "cirq_to_qlm": 48, "qlm_to_cirq": 49, "openqasm": [50, 51, 345], "oqasmpars": 51, "projectq": [52, 53, 54, 344], "aqasmengin": 53, "aqasmprint": 54, "pyquil": [55, 56, 57, 58, 342], "pyquil_to_qlm": 56, "pyquilqpu": 57, "qlm_to_pyquil": 58, "qiskit": [59, 60, 61, 62, 63, 64, 65, 66, 341], "asyncbackendtoqpu": 60, "backendtoqpu": 61, "qiskit_to_qlm": 62, "qiskitjob": 63, "runtim": 64, "qiskitruntimeqpu": 64, "qlm_to_qiskit": 65, "qputobackend": 66, "mat2nparrai": 69, "measur": 70, "project": 71, "raise_break": 72, "reset": 73, "comm": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "datamodel": [76, 77, 78], "ttype": [77, 78, 80, 81, 82, 84, 85, 86, 88, 89], "gatedefinit": 77, "op": 78, "except": [79, 80, 81, 82], "errortyp": 80, "pluginexcept": 81, "qpuexcept": 82, "resourc": [83, 84, 85, 86], "allocationmodel": 84, "devic": [85, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], "resourcemodel": 86, "share": [87, 88, 89], "intermediatemeasur": 88, "processingtyp": 89, "core": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "object": 90, "pars": 90, "relat": 90, "hardwar": [90, 200, 201, 202, 203, 204, 205], "misc": [90, 214], "util": [90, 161, 191, 277, 296, 305], "wrapper": [91, 140, 181, 182], "aggregate_data": 91, "assert": [92, 93], "assert_plugin": 92, "assert_qpu": 93, "batchresult": 95, "most": 96, "iter": 96, "cbit": [96, 211], "consol": 97, "displai": [97, 282], "formula_ev": 98, "hardwarespec": 99, "applic": [101, 102, 103, 365], "remoteappl": 103, "circuit_build": [104, 105, 106, 107, 108], "matrix_util": [105, 106, 107], "default_gate_set": 105, "get_param_gener": 106, "get_predef_gener": 107, "builder": 108, "variablenamenotavail": 108, "gate_set": [109, 110, 111, 112], "gateset": 110, "gatesignatur": 111, "gatesyntaxredefinit": 112, "commonqpu": 114, "spin": [115, 116, 117, 161, 337, 363, 364], "integer_to_spin": 116, "spins_to_integ": 117, "abso": 119, "angl": 120, "arithexpress": 121, "atan2": 122, "co": 123, "exp": 124, "get_item": 125, "heavisid": 126, "imag": 127, "ln": 128, "real": 129, "sin": 130, "sqrt": 131, "symbol": 132, "vmax": 133, "printer": 136, "plot_in_notebook": 136, "state": [140, 206, 365], "topologi": 142, "topologytyp": 143, "predefin": [145, 200, 305], "alltoal": 146, "google_sycamor": 147, "griddevic": 148, "ibm_burlington": 149, "ibm_johannesburg": 150, "ibm_melbourn": 151, "ibm_rueschlikon": 152, "ibm_singapor": 153, "ibm_tokyo": 154, "ibm_yorktown": 155, "linedevic": 156, "rigetti_agav": 157, "rigetti_aspen": 158, "squaregriddevic": 159, "zuchongzhi": 160, "fermion": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 277, 337, 338, 363, 364, 365], "constructor": [161, 364], "common": 161, "mani": 161, "bodi": 161, "transform": [161, 188, 189, 190], "ansatz": [161, 252, 365], "atom": 161, "molecular": 161, "studi": 161, "unitari": 161, "coupl": 161, "cluster": 161, "ucc": [161, 163, 164, 165, 168, 169, 170, 185, 187], "subspac": [161, 365], "expans": [161, 365], "estim": [161, 365], "chemistri": [162, 163, 164, 165, 168, 169, 170, 181, 182, 184, 185, 187, 365], "qse": 162, "apply_quantum_subspace_expans": 162, "compute_active_space_integr": 163, "construct_ucc_ansatz": 164, "convert_to_h_integr": 165, "electronicstructurehamiltonian": 166, "fermionhamiltonian": 167, "get_cluster_op": 168, "get_hf_ket": 169, "guess_init_param": 170, "make_anderson_model": 171, "make_compressed_ldca_circ": 172, "make_embedded_model": 173, "make_general_hwe_circ": 174, "make_hubbard_model": 175, "make_ldca_circ": 176, "make_mr_circ": 177, "make_mrep_circ": 178, "make_shallow_circ": 179, "trotteris": 180, "make_trotterisation_routin": 180, "molecularhamiltonian": [181, 365], "moleculeinfo": [182, 365], "phase_estim": [183, 236], "perform_phase_estim": 183, "pyscf_tool": 184, "perform_pyscf_comput": 184, "select_active_orbit": 185, "spinhamiltonian": 186, "transform_integrals_to_new_basi": 187, "transform_to_bk_basi": 188, "transform_to_jw_basi": 189, "transform_to_parity_basi": 190, "abstractgener": 192, "combinatorialoptimizergener": 193, "graphcolouringgener": 194, "graphpartitioninggener": 195, "kcliquegener": 196, "maxcutgener": 197, "remotebatchgener": 198, "vertexcovergener": 199, "model": [200, 217], "defaultgatesspecif": 201, "defaulthardwaremodel": 202, "gatesspecif": 203, "hardwaremodel": 204, "make_depolarizing_hardware_model": 205, "lang": [206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 337], "tool": [206, 338, 365], "structur": 206, "linker": [206, 218], "low": [206, 297], "level": [206, 297], "labrari": 206, "basic": [206, 337], "preparat": 206, "qram": 206, "amplification_step": 208, "bit": [209, 211, 212, 239, 246], "boolformula": 209, "build_gat": 210, "cregist": 212, "generate_gate_set": 214, "amplif": [215, 216, 250], "grover_diffus": 215, "household": 216, "kptree": 217, "add_const_mod": 220, "add_mod": 221, "modular_exp": 222, "mult_const": [223, 233], "mult_const_mod": 224, "classarith": [225, 226, 227, 228], "add": [226, 230], "add_const": [227, 231], "cuccaro_add": 228, "qftarith": [229, 230, 231, 232, 233, 234], "mult": 232, "qft": 234, "paramg": 235, "qint": [238, 243, 245], "qarithexp": 238, "qbit": 239, "qbool": [240, 241, 242], "qboolarrai": 241, "qclaus": 242, "qcompexp": 243, "qfunc": 244, "qregist": 246, "qrout": 247, "qroutin": 248, "quantum_count": 249, "uniform_distribut": 250, "opt": [251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276], "class": [251, 296], "np": [251, 347, 357], "hard": [251, 347, 357], "qaoa": [251, 355], "ans\u00e4tz": [251, 365], "qa": [251, 356], "vsolv": 252, "ansatzfactori": 252, "bilp": [253, 348], "circuit_gener": 254, "circuitgener": 254, "boolexpr": [255, 275], "claus": 255, "combinatorialproblem": 256, "graphcolour": 257, "graphpartit": 258, "kcliqu": [260, 351], "maxcut": 261, "mixingfactori": 262, "mixing_factori": [263, 264, 265, 266], "independentann": 264, "initialstatebuild": 265, "simpleinitialst": 266, "combinatorialresult": 268, "graphpartitioningresult": 269, "kcliqueresult": 270, "vertexcoverresult": 271, "numberpartit": 272, "schedule_gener": 274, "schedulegener": 274, "var": 275, "vertexcov": 276, "rewrit": 277, "system": [277, 337, 363], "abstractplugin": 278, "adaptvqeplugin": 279, "circuitinlin": 280, "costfunctionplugin": 281, "gradientdescentoptim": 283, "multiplelaunchesanalyz": 285, "observablesplitt": 286, "psominimizeplugin": 288, "quameleonplugin": 289, "remoteplugin": 290, "scipyminimizeplugin": 291, "seqoptim": 292, "spsaminimizeplugin": 293, "transformobserv": 294, "zeronoiseextrapol": 295, "high": 297, "statevector": 297, "pybind": 297, "interfac": 297, "simulatedann": 299, "classicalqpu": 300, "get_current_qpu": 301, "get_default_qpu": 302, "qpuhandl": 303, "remoteqpu": 304, "quop": [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "channel": 305, "metric": [305, 310, 311, 312, 313, 314, 315], "basi": 305, "mathemat": 305, "math_util": [306, 308, 309, 323, 324, 325, 326, 331], "are_equal_up_to_phas": 306, "channelrepresent": 307, "convert_density_mat_to_pauli_vec": 308, "convert_pauli_vec_to_density_mat": 309, "get_average_process_fidel": 310, "get_diamond_norm": 311, "get_entanglement_process_fidel": 312, "get_process_dist": 313, "get_state_fidel": 314, "get_trace_dist": 315, "is_completely_posit": 316, "is_trace_preserv": 317, "is_trace_reduc": 318, "is_unit": 319, "make_avg_fid_equiv_depol_channel": 320, "make_depolarizing_channel": 321, "make_generalized_amplitude_damp": 322, "make_pauli_matrix_basi": 323, "make_standard_matrix_basi": 324, "make_standard_vector_basi": 325, "multikron": 326, "parametricamplitudedamp": 327, "parametricgatenois": 328, "parametricpuredephas": 329, "parametricquantumchannel": 330, "partial_trac": 331, "quantumchannel": 332, "quantumchannelchi": 333, "quantumchannelchoi": 334, "quantumchannelkrau": 335, "quantumchannelptm": 336, "demo": [337, 363], "tutori": 337, "digit": 337, "stack": 337, "design": 337, "qlm": 337, "first": 337, "step": 337, "introduct": 337, "releas": 338, "note": 338, "what": 338, "": 338, "new": 338, "1": 338, "9": 338, "6": 338, "main": 338, "depend": 338, "5": 338, "4": 338, "3": 338, "other": [338, 347], "2": 338, "updat": 338, "featur": 338, "fix": 338, "7": 338, "warn": 338, "0": 338, "power": 338, "access": 338, "known": 338, "contribut": 339, "framework": [340, 369], "avail": 340, "binder": 340, "translat": [341, 342, 343, 344, 345], "connect": [341, 342], "backend": 341, "constrain": 347, "benchmark": 347, "perform": 347, "colour": [349, 362], "partit": [350, 353, 359], "max": [352, 358], "cut": [352, 358], "number": 353, "vertex": [354, 361], "cover": [354, 361], "approxim": 355, "k": 360, "cliqu": 360, "tabl": [364, 365], "content": [364, 365], "two": 364, "electron": 364, "integr": 364, "get_matrix": 364, "represent": 364, "some": 364, "includ": 365, "prepar": 365, "eigensolv": 365, "vqe": 365, "trotter": 365, "migrat": 367, "code": 367, "dq": 367, "document": 368}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"qat.core.variables.ArithExpression": [[121, "qat-core-variables-arithexpression"]], "qat.core.variables.exp": [[124, "qat-core-variables-exp"]], "qat.core.variables": [[118, "qat-core-variables"]], "qat.core.variables.atan2": [[122, "qat-core-variables-atan2"]], "qat.core.spins.spins_to_integer": [[117, "qat-core-spins-spins-to-integer"]], "qat.core.spins.integer_to_spins": [[116, "qat-core-spins-integer-to-spins"]], "qat.core.spins": [[115, "qat-core-spins"]], "qat.core.qpu.CommonQPU": [[114, "qat-core-qpu-commonqpu"]], "qat.core.gate_set": [[109, "qat-core-gate-set"]], "qat.core.circuit_builder.builder.VariableNameNotAvailable": [[108, "qat-core-circuit-builder-builder-variablenamenotavailable"]], "qat.core.variables.angle": [[120, "qat-core-variables-angle"]], "qat.core.circuit_builder.matrix_util.default_gate_set": [[105, "qat-core-circuit-builder-matrix-util-default-gate-set"]], "qat.core.circuit_builder.matrix_util.get_param_generator": [[106, "qat-core-circuit-builder-matrix-util-get-param-generator"]], "qat.core.variables.abso": [[119, "qat-core-variables-abso"]], "qat.core.variables.cos": [[123, "qat-core-variables-cos"]], "qat.core.gate_set.GateSyntaxRedefinition": [[112, "qat-core-gate-set-gatesyntaxredefinition"]], "qat.core.qpu": [[113, "qat-core-qpu"]], "qat.core.variables.get_item": [[125, "qat-core-variables-get-item"]], "qat.core.circuit_builder.matrix_util.get_predef_generator": [[107, "qat-core-circuit-builder-matrix-util-get-predef-generator"]], "qat.core.gate_set.GateSignature": [[111, "qat-core-gate-set-gatesignature"]], "qat.core.gate_set.GateSet": [[110, "qat-core-gate-set-gateset"]], "qat.comm.resource.ttypes.AllocationModel": [[84, "qat-comm-resource-ttypes-allocationmodel"]], "qat.comm.shared.ttypes.ProcessingType": [[89, "qat-comm-shared-ttypes-processingtype"]], "qat.core.application.Application": [[102, "qat-core-application-application"]], "qat.core": [[90, "qat-core"]], "Objects for writing a job": [[90, "objects-for-writing-a-job"]], "Objects for parsing a job result": [[90, "objects-for-parsing-a-job-result"]], "Observable-related objects": [[90, "observable-related-objects"]], "Hardware specifications": [[90, "hardware-specifications"]], "Variables and Parameters": [[90, "variables-and-parameters"]], "Misc. utilities": [[90, "misc-utilities"]], "qat.comm.shared.ttypes.IntermediateMeasurement": [[88, "qat-comm-shared-ttypes-intermediatemeasurement"]], "qat.core.assertion.assert_plugin": [[92, "qat-core-assertion-assert-plugin"]], "qat.core.formula_eval.evaluate": [[98, "qat-core-formula-eval-evaluate"]], "qat.core.Job": [[100, "qat-core-job"]], "qat.core.application.RemoteApplication": [[103, "qat-core-application-remoteapplication"]], "qat.comm.shared": [[87, "qat-comm-shared"]], "qat.core.console.display": [[97, "qat-core-console-display"]], "qat.core.Batch": [[94, "qat-core-batch"]], "qat.comm.resource.ttypes.ResourceModel": [[86, "qat-comm-resource-ttypes-resourcemodel"]], "qat.comm.resource.ttypes.Device": [[85, "qat-comm-resource-ttypes-device"]], "qat.core.BatchResult": [[95, "qat-core-batchresult"]], "qat.core.Circuit": [[96, "qat-core-circuit"]], "Most useful Circuit methods": [[96, "most-useful-circuit-methods"]], "Iterating of a Circuit": [[96, "iterating-of-a-circuit"]], "Qubits and cbits": [[96, "qubits-and-cbits"]], "qat.core.assertion.assert_qpu": [[93, "qat-core-assertion-assert-qpu"]], "qat.core.application": [[101, "qat-core-application"]], "qat.core.wrappers.result.aggregate_data": [[91, "qat-core-wrappers-result-aggregate-data"]], "qat.core.HardwareSpecs": [[99, "qat-core-hardwarespecs"]], "qat.core.circuit_builder": [[104, "qat-core-circuit-builder"]], "qat.comm.datamodel.ttypes.Op": [[78, "qat-comm-datamodel-ttypes-op"]], "qat.pylinalg": [[67, "qat-pylinalg"]], "qat.comm.exceptions": [[79, "qat-comm-exceptions"]], "qat.pylinalg.simulator.measure": [[70, "qat-pylinalg-simulator-measure"]], "qat.interop.qiskit.runtime.QiskitRuntimeQPU": [[64, "qat-interop-qiskit-runtime-qiskitruntimeqpu"]], "qat.interop.qiskit.QPUToBackend": [[66, "qat-interop-qiskit-qputobackend"]], "qat.comm.exceptions.ttypes.ErrorType": [[80, "qat-comm-exceptions-ttypes-errortype"]], "qat.pylinalg.simulator.reset": [[73, "qat-pylinalg-simulator-reset"]], "qat.interop.qiskit.QiskitJob": [[63, "qat-interop-qiskit-qiskitjob"]], "qat.comm.exceptions.ttypes.PluginException": [[81, "qat-comm-exceptions-ttypes-pluginexception"]], "qat.pylinalg.simulator.raise_break": [[72, "qat-pylinalg-simulator-raise-break"]], "qat.comm.datamodel.ttypes.GateDefinition": [[77, "qat-comm-datamodel-ttypes-gatedefinition"]], "qat.comm.exceptions.ttypes.QPUException": [[82, "qat-comm-exceptions-ttypes-qpuexception"]], "qat.pylinalg.simulator.mat2nparray": [[69, "qat-pylinalg-simulator-mat2nparray"]], "qat.interop.qiskit.qlm_to_qiskit": [[65, "qat-interop-qiskit-qlm-to-qiskit"]], "qat.pylinalg.simulator.simulate": [[74, "qat-pylinalg-simulator-simulate"]], "qat.pylinalg.simulator.project": [[71, "qat-pylinalg-simulator-project"]], "qat.comm": [[75, "qat-comm"]], "qat.comm.datamodel": [[76, "qat-comm-datamodel"]], "qat.comm.resource": [[83, "qat-comm-resource"]], "qat.pylinalg.simulator": [[68, "qat-pylinalg-simulator"]], "qat.core.printer.plot_in_notebook": [[136, "qat-core-printer-plot-in-notebook"]], "qat.devices": [[145, "qat-devices"]], "Predefined devices": [[145, "predefined-devices"]], "Device generators": [[145, "device-generators"]], "qat.core.wrappers.result.State": [[140, "qat-core-wrappers-result-state"]], "qat.core.variables.heaviside": [[126, "qat-core-variables-heaviside"]], "qat.core.Sample": [[138, "qat-core-sample"]], "qat.core.variables.sin": [[130, "qat-core-variables-sin"]], "qat.core.Parameter": [[135, "qat-core-parameter"]], "qat.devices.AllToAll": [[146, "qat-devices-alltoall"]], "qat.core.variables.real": [[129, "qat-core-variables-real"]], "qat.core.Topology": [[142, "qat-core-topology"]], "qat.core.Result": [[137, "qat-core-result"]], "qat.core.Term": [[141, "qat-core-term"]], "qat.core.Observable": [[134, "qat-core-observable"]], "qat.core.variables.vmax": [[133, "qat-core-variables-vmax"]], "qat.core.variables.sqrt": [[131, "qat-core-variables-sqrt"]], "qat.core.Schedule": [[139, "qat-core-schedule"]], "qat.core.TopologyType": [[143, "qat-core-topologytype"]], "qat.core.Variable": [[144, "qat-core-variable"]], "qat.core.variables.imag": [[127, "qat-core-variables-imag"]], "qat.core.variables.ln": [[128, "qat-core-variables-ln"]], "qat.core.variables.Symbol": [[132, "qat-core-variables-symbol"]], "qat.quops.math_util.make_pauli_matrix_basis": [[323, "qat-quops-math-util-make-pauli-matrix-basis"]], "qat.quops.ParametricGateNoise": [[328, "qat-quops-parametricgatenoise"]], "qat.quops.is_unital": [[319, "qat-quops-is-unital"]], "qat.quops.math_util.multikron": [[326, "qat-quops-math-util-multikron"]], "qat.quops.QuantumChannel": [[332, "qat-quops-quantumchannel"]], "qat.quops.is_trace_reducing": [[318, "qat-quops-is-trace-reducing"]], "qat.quops.QuantumChannelChi": [[333, "qat-quops-quantumchannelchi"]], "qat.quops.math_util.make_standard_matrix_basis": [[324, "qat-quops-math-util-make-standard-matrix-basis"]], "qat.quops.math_util.make_standard_vector_basis": [[325, "qat-quops-math-util-make-standard-vector-basis"]], "qat.quops.ParametricAmplitudeDamping": [[327, "qat-quops-parametricamplitudedamping"]], "qat.quops.QuantumChannelChoi": [[334, "qat-quops-quantumchannelchoi"]], "qat.quops.QuantumChannelKraus": [[335, "qat-quops-quantumchannelkraus"]], "qat.quops.ParametricPureDephasing": [[329, "qat-quops-parametricpuredephasing"]], "qat.quops.math_util.partial_trace": [[331, "qat-quops-math-util-partial-trace"]], "qat.quops.make_generalized_amplitude_damping": [[322, "qat-quops-make-generalized-amplitude-damping"]], "qat.quops.make_depolarizing_channel": [[321, "qat-quops-make-depolarizing-channel"]], "qat.quops.ParametricQuantumChannel": [[330, "qat-quops-parametricquantumchannel"]], "qat.quops.metrics.get_trace_distance": [[315, "qat-quops-metrics-get-trace-distance"]], "qat.quops.make_avg_fid_equiv_depol_channel": [[320, "qat-quops-make-avg-fid-equiv-depol-channel"]], "qat.quops.is_trace_preserving": [[317, "qat-quops-is-trace-preserving"]], "qat.quops.is_completely_positive": [[316, "qat-quops-is-completely-positive"]], "qat.qpus.PyLinalg": [[298, "qat-qpus-pylinalg"]], "Quantum Processing Unit": [[298, "quantum-processing-unit"]], "qat.qpus.QPUHandler": [[303, "qat-qpus-qpuhandler"]], "qat.quops.ChannelRepresentations": [[307, "qat-quops-channelrepresentations"]], "qat.qpus.SimulatedAnnealing": [[299, "qat-qpus-simulatedannealing"]], "qat.quops.metrics.get_state_fidelity": [[314, "qat-quops-metrics-get-state-fidelity"]], "qat.qpus.RemoteQPU": [[304, "qat-qpus-remoteqpu"]], "qat.quops.math_util.convert_density_mat_to_pauli_vec": [[308, "qat-quops-math-util-convert-density-mat-to-pauli-vec"]], "qat.qpus.ClassicalQPU": [[300, "qat-qpus-classicalqpu"]], "qat.qpus.CLinalg": [[297, "qat-qpus-clinalg"]], "High-level Quantum Processing Unit": [[297, "high-level-quantum-processing-unit"]], "C++ Low-level Statevector": [[297, "c-low-level-statevector"]], "Pybind interface": [[297, "pybind-interface"]], "qat.plugins.ZeroNoiseExtrapolator": [[295, "qat-plugins-zeronoiseextrapolator"]], "qat.quops.metrics.get_process_distance": [[313, "qat-quops-metrics-get-process-distance"]], "qat.plugins.TransformObservable": [[294, "qat-plugins-transformobservable"]], "qat.quops.metrics.get_average_process_fidelity": [[310, "qat-quops-metrics-get-average-process-fidelity"]], "qat.quops.math_util.convert_pauli_vec_to_density_mat": [[309, "qat-quops-math-util-convert-pauli-vec-to-density-mat"]], "qat.quops": [[305, "qat-quops"]], "Quantum Channels": [[305, "quantum-channels"]], "Predefined quantum channels": [[305, "predefined-quantum-channels"]], "Metrics": [[305, "module-qat.quops.metrics"]], "Operator basis": [[305, "operator-basis"]], "Mathematical utilities": [[305, "mathematical-utilities"]], "qat.quops.metrics.get_entanglement_process_fidelity": [[312, "qat-quops-metrics-get-entanglement-process-fidelity"]], "qat.quops.metrics.get_diamond_norm": [[311, "qat-quops-metrics-get-diamond-norm"]], "qat.qpus.get_default_qpu": [[302, "qat-qpus-get-default-qpu"]], "qat.qpus.get_current_qpu": [[301, "qat-qpus-get-current-qpu"]], "qat.quops.math_util.are_equal_up_to_phase": [[306, "qat-quops-math-util-are-equal-up-to-phase"]], "qat.qpus": [[296, "qat-qpus"]], "Gate-based QPUs": [[296, "gate-based-qpus"]], "Simulated Annealing": [[296, "simulated-annealing"]], "Abstract and utility QPU classes": [[296, "abstract-and-utility-qpu-classes"]], "qat.devices.GridDevice": [[148, "qat-devices-griddevice"]], "qat.devices.IBM_SINGAPORE": [[153, "qat-devices-ibm-singapore"]], "qat.devices.RIGETTI_ASPEN": [[158, "qat-devices-rigetti-aspen"]], "qat.fermion.chemistry.ucc.construct_ucc_ansatz": [[164, "qat-fermion-chemistry-ucc-construct-ucc-ansatz"]], "qat.devices.IBM_MELBOURNE": [[151, "qat-devices-ibm-melbourne"]], "qat.devices.ZUCHONGZHI": [[160, "qat-devices-zuchongzhi"]], "qat.devices.RIGETTI_AGAVE": [[157, "qat-devices-rigetti-agave"]], "qat.devices.IBM_YORKTOWN": [[155, "qat-devices-ibm-yorktown"]], "qat.fermion.chemistry.ucc.convert_to_h_integrals": [[165, "qat-fermion-chemistry-ucc-convert-to-h-integrals"]], "qat.devices.IBM_BURLINGTON": [[149, "qat-devices-ibm-burlington"]], "qat.fermion.hamiltonians.ElectronicStructureHamiltonian": [[166, "qat-fermion-hamiltonians-electronicstructurehamiltonian"]], "qat.devices.IBM_TOKYO": [[154, "qat-devices-ibm-tokyo"]], "qat.fermion.hamiltonians.FermionHamiltonian": [[167, "qat-fermion-hamiltonians-fermionhamiltonian"]], "qat.devices.LineDevice": [[156, "qat-devices-linedevice"]], "qat.devices.SquareGridDevice": [[159, "qat-devices-squaregriddevice"]], "qat.fermion": [[161, "qat-fermion"]], "Hamiltonians constructors": [[161, "hamiltonians-constructors"]], "Common many-body Hamiltonians": [[161, "common-many-body-hamiltonians"]], "The spin-fermion transforms": [[161, "module-qat.fermion.transforms"]], "Fermionic ansatz circuits": [[161, "module-qat.fermion.circuits"], [365, "fermionic-ansatz-circuits"]], "Atomic and molecular studies": [[161, "atomic-and-molecular-studies"]], "Unitary Coupled-Cluster (UCC)": [[161, "unitary-coupled-cluster-ucc"]], "Quantum subspace expansion": [[161, "module-qat.fermion.chemistry.qse"], [365, "quantum-subspace-expansion"]], "Quantum phase estimation": [[161, "module-qat.fermion.phase_estimation"], [365, "quantum-phase-estimation"]], "Utility functions": [[161, "utility-functions"]], "qat.devices.IBM_JOHANNESBURG": [[150, "qat-devices-ibm-johannesburg"]], "qat.fermion.chemistry.ucc.compute_active_space_integrals": [[163, "qat-fermion-chemistry-ucc-compute-active-space-integrals"]], "qat.devices.GOOGLE_SYCAMORE": [[147, "qat-devices-google-sycamore"]], "qat.devices.IBM_RUESCHLIKON": [[152, "qat-devices-ibm-rueschlikon"]], "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion": [[162, "qat-fermion-chemistry-qse-apply-quantum-subspace-expansion"]], "qat.interop.pyquil.pyquil_to_qlm": [[56, "qat-interop-pyquil-pyquil-to-qlm"]], "qat.interop.pyquil.PyquilQPU": [[57, "qat-interop-pyquil-pyquilqpu"]], "qat.interop.cirq": [[47, "qat-interop-cirq"]], "qat.interop.qiskit.qiskit_to_qlm": [[62, "qat-interop-qiskit-qiskit-to-qlm"]], "qat.interop.cirq.qlm_to_cirq": [[49, "qat-interop-cirq-qlm-to-cirq"]], "API reference": [[44, "api-reference"]], "qat.interop.qiskit": [[59, "qat-interop-qiskit"]], "Getting information from the QPU": [[42, "getting-information-from-the-qpu"]], "Creating custom specifications": [[42, "creating-custom-specifications"]], "qat.interop.projectq.AqasmEngine": [[53, "qat-interop-projectq-aqasmengine"]], "qat.interop.pyquil": [[55, "qat-interop-pyquil"]], "qat.interop.pyquil.qlm_to_pyquil": [[58, "qat-interop-pyquil-qlm-to-pyquil"]], "qat.interop.qiskit.AsyncBackendToQPU": [[60, "qat-interop-qiskit-asyncbackendtoqpu"]], "qat.interop.openqasm.OqasmParser": [[51, "qat-interop-openqasm-oqasmparser"]], "qat.interop.openqasm": [[50, "qat-interop-openqasm"]], "qat.interop.projectq.AqasmPrinter": [[54, "qat-interop-projectq-aqasmprinter"]], "qat.interop.projectq": [[52, "qat-interop-projectq"]], "qat.interop": [[46, "qat-interop"]], "qat.interop.qiskit.BackendToQPU": [[61, "qat-interop-qiskit-backendtoqpu"]], "qat": [[45, "qat"]], "Running variational algorithms": [[43, "running-variational-algorithms"]], "Extending a QPU to support variational jobs": [[43, "extending-a-qpu-to-support-variational-jobs"]], "Differentiating jobs": [[43, "differentiating-jobs"]], "Testing for several initializations of the parameters": [[43, "testing-for-several-initializations-of-the-parameters"]], "qat.interop.cirq.cirq_to_qlm": [[48, "qat-interop-cirq-cirq-to-qlm"]], "qat.lang.AQASM.classarith": [[225, "qat-lang-aqasm-classarith"]], "References": [[225, "references"], [219, "references"], [217, "references"], [229, "references"]], "qat.lang.AQASM.misc.generate_gate_set": [[214, "qat-lang-aqasm-misc-generate-gate-set"]], "qat.lang.AQASM.arithmetic.mult_const_mod": [[224, "qat-lang-aqasm-arithmetic-mult-const-mod"]], "qat.lang.linking.Linker": [[218, "qat-lang-linking-linker"]], "qat.lang.AQASM.classarith.add": [[226, "qat-lang-aqasm-classarith-add"]], "qat.lang.AQASM.gates.Gate": [[213, "qat-lang-aqasm-gates-gate"]], "qat.lang.AQASM.qftarith.add": [[230, "qat-lang-aqasm-qftarith-add"]], "qat.lang.AQASM.arithmetic.add_mod": [[221, "qat-lang-aqasm-arithmetic-add-mod"]], "qat.lang.AQASM.arithmetic": [[219, "qat-lang-aqasm-arithmetic"]], "qat.lang.AQASM.arithmetic.mult_const": [[223, "qat-lang-aqasm-arithmetic-mult-const"]], "qat.lang.build_gate": [[210, "qat-lang-build-gate"]], "qat.lang.AQASM.bits.CRegister": [[212, "qat-lang-aqasm-bits-cregister"]], "qat.lang.AQASM.bits.Cbit": [[211, "qat-lang-aqasm-bits-cbit"]], "qat.lang.AQASM.arithmetic.add_const_mod": [[220, "qat-lang-aqasm-arithmetic-add-const-mod"]], "qat.lang.models.KPTree": [[217, "qat-lang-models-kptree"]], "qat.lang.algorithms.amplification.grover_diffusion": [[215, "qat-lang-algorithms-amplification-grover-diffusion"]], "qat.lang.AQASM.qftarith": [[229, "qat-lang-aqasm-qftarith"]], "qat.lang.AQASM.arithmetic.modular_exp": [[222, "qat-lang-aqasm-arithmetic-modular-exp"]], "qat.lang.algorithms.amplification.householder": [[216, "qat-lang-algorithms-amplification-householder"]], "qat.lang.AQASM.classarith.add_const": [[227, "qat-lang-aqasm-classarith-add-const"]], "qat.lang.AQASM.classarith.cuccaro_add": [[228, "qat-lang-aqasm-classarith-cuccaro-add"]], "qat.lang.AQASM.bits.BoolFormula": [[209, "qat-lang-aqasm-bits-boolformula"]], "qat.generators.GraphColouringGenerator": [[194, "qat-generators-graphcolouringgenerator"]], "qat.generators.KCliqueGenerator": [[196, "qat-generators-kcliquegenerator"]], "qat.generators.RemoteBatchGenerator": [[198, "qat-generators-remotebatchgenerator"]], "qat.lang.algorithms.amplification_step": [[208, "qat-lang-algorithms-amplification-step"]], "qat.generators.CombinatorialOptimizerGenerator": [[193, "qat-generators-combinatorialoptimizergenerator"]], "qat.hardware.DefaultGatesSpecification": [[201, "qat-hardware-defaultgatesspecification"]], "qat.lang.AbstractGate": [[207, "qat-lang-abstractgate"]], "qat.generators.AbstractGenerator": [[192, "qat-generators-abstractgenerator"]], "qat.hardware.DefaultHardwareModel": [[202, "qat-hardware-defaulthardwaremodel"]], "qat.generators.GraphPartitioningGenerator": [[195, "qat-generators-graphpartitioninggenerator"]], "qat.generators.MaxCutGenerator": [[197, "qat-generators-maxcutgenerator"]], "qat.fermion.transforms.transform_to_jw_basis": [[189, "qat-fermion-transforms-transform-to-jw-basis"]], "qat.generators.VertexCoverGenerator": [[199, "qat-generators-vertexcovergenerator"]], "qat.lang": [[206, "qat-lang"]], "Programming tools": [[206, "programming-tools"]], "Gate structures": [[206, "gate-structures"]], "Quantum types": [[206, "quantum-types"]], "Quantum boolean and expressions": [[206, "quantum-boolean-and-expressions"]], "Quantum integers": [[206, "quantum-integers"], [16, "quantum-integers"]], "Managing registers": [[206, "managing-registers"]], "Gate set management": [[206, "gate-set-management"]], "Linker and low level circuit manipulation": [[206, "linker-and-low-level-circuit-manipulation"]], "Quantum labraries and basic algorithms": [[206, "quantum-labraries-and-basic-algorithms"]], "Arithmetic routines": [[206, "arithmetic-routines"]], "State preparatation and QRAM": [[206, "state-preparatation-and-qram"]], "Algorithms": [[206, "algorithms"]], "qat.hardware.GatesSpecification": [[203, "qat-hardware-gatesspecification"]], "qat.fermion.transforms.transform_to_parity_basis": [[190, "qat-fermion-transforms-transform-to-parity-basis"]], "qat.hardware": [[200, "qat-hardware"]], "Hardware model and gates specifications": [[200, "hardware-model-and-gates-specifications"]], "Predefined hardware models": [[200, "predefined-hardware-models"]], "qat.generators": [[191, "qat-generators"]], "Combinatorial Optimization Generators": [[191, "combinatorial-optimization-generators"]], "Generator Utilities": [[191, "generator-utilities"]], "qat.hardware.HardwareModel": [[204, "qat-hardware-hardwaremodel"]], "qat.hardware.make_depolarizing_hardware_model": [[205, "qat-hardware-make-depolarizing-hardware-model"]], "qat.opt.boolexpr.Var": [[275, "qat-opt-boolexpr-var"]], "qat.plugins.AbstractPlugin": [[278, "qat-plugins-abstractplugin"]], "qat.plugins": [[277, "qat-plugins"]], "Circuit rewriting plugins": [[277, "circuit-rewriting-plugins"]], "Variational optimization plugins": [[277, "variational-optimization-plugins"]], "Plugin for fermionic systems": [[277, "plugin-for-fermionic-systems"]], "Plugin utilities": [[277, "plugin-utilities"]], "qat.plugins.ScipyMinimizePlugin": [[291, "qat-plugins-scipyminimizeplugin"]], "qat.plugins.Display": [[282, "qat-plugins-display"]], "qat.plugins.RemotePlugin": [[290, "qat-plugins-remoteplugin"]], "qat.plugins.Junction": [[284, "qat-plugins-junction"]], "qat.opt.schedule_generator.ScheduleGenerator": [[274, "qat-opt-schedule-generator-schedulegenerator"]], "qat.plugins.SeqOptim": [[292, "qat-plugins-seqoptim"]], "qat.opt.QUBO": [[273, "qat-opt-qubo"]], "qat.plugins.CircuitInliner": [[280, "qat-plugins-circuitinliner"]], "qat.plugins.MultipleLaunchesAnalyzer": [[285, "qat-plugins-multiplelaunchesanalyzer"]], "qat.opt.VertexCover": [[276, "qat-opt-vertexcover"]], "qat.plugins.Optimizer": [[287, "qat-plugins-optimizer"]], "qat.plugins.CostFunctionPlugin": [[281, "qat-plugins-costfunctionplugin"]], "qat.plugins.GradientDescentOptimizer": [[283, "qat-plugins-gradientdescentoptimizer"]], "qat.plugins.ObservableSplitter": [[286, "qat-plugins-observablesplitter"]], "qat.plugins.PSOMinimizePlugin": [[288, "qat-plugins-psominimizeplugin"]], "qat.plugins.SPSAMinimizePlugin": [[293, "qat-plugins-spsaminimizeplugin"]], "qat.plugins.AdaptVQEPlugin": [[279, "qat-plugins-adaptvqeplugin"]], "qat.plugins.QuameleonPlugin": [[289, "qat-plugins-quameleonplugin"]], "qat.fermion.chemistry.ucc.get_cluster_ops": [[168, "qat-fermion-chemistry-ucc-get-cluster-ops"]], "qat.fermion.circuits.make_shallow_circ": [[179, "qat-fermion-circuits-make-shallow-circ"]], "qat.fermion.hamiltonians.make_anderson_model": [[171, "qat-fermion-hamiltonians-make-anderson-model"]], "qat.fermion.chemistry.ucc.guess_init_params": [[170, "qat-fermion-chemistry-ucc-guess-init-params"]], "qat.fermion.hamiltonians.make_embedded_model": [[173, "qat-fermion-hamiltonians-make-embedded-model"]], "qat.fermion.circuits.make_mr_circ": [[177, "qat-fermion-circuits-make-mr-circ"]], "qat.fermion.circuits.make_general_hwe_circ": [[174, "qat-fermion-circuits-make-general-hwe-circ"]], "qat.fermion.circuits.make_compressed_ldca_circ": [[172, "qat-fermion-circuits-make-compressed-ldca-circ"]], "qat.fermion.circuits.make_ldca_circ": [[176, "qat-fermion-circuits-make-ldca-circ"]], "qat.fermion.hamiltonians.make_hubbard_model": [[175, "qat-fermion-hamiltonians-make-hubbard-model"]], "qat.fermion.trotterisation.make_trotterisation_routine": [[180, "qat-fermion-trotterisation-make-trotterisation-routine"]], "qat.fermion.chemistry.ucc.select_active_orbitals": [[185, "qat-fermion-chemistry-ucc-select-active-orbitals"]], "qat.fermion.phase_estimation.perform_phase_estimation": [[183, "qat-fermion-phase-estimation-perform-phase-estimation"]], "qat.fermion.transforms.transform_to_bk_basis": [[188, "qat-fermion-transforms-transform-to-bk-basis"]], "qat.fermion.chemistry.wrapper.MolecularHamiltonian": [[181, "qat-fermion-chemistry-wrapper-molecularhamiltonian"]], "qat.fermion.chemistry.wrapper.MoleculeInfo": [[182, "qat-fermion-chemistry-wrapper-moleculeinfo"]], "qat.fermion.hamiltonians.SpinHamiltonian": [[186, "qat-fermion-hamiltonians-spinhamiltonian"]], "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation": [[184, "qat-fermion-chemistry-pyscf-tools-perform-pyscf-computation"]], "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis": [[187, "qat-fermion-chemistry-ucc-transform-integrals-to-new-basis"]], "qat.fermion.circuits.make_mrep_circ": [[178, "qat-fermion-circuits-make-mrep-circ"]], "qat.fermion.chemistry.ucc.get_hf_ket": [[169, "qat-fermion-chemistry-ucc-get-hf-ket"]], "qat.lang.AQASM.bits.QRegister": [[246, "qat-lang-aqasm-bits-qregister"]], "qat.lang.AQASM.qftarith.QFT": [[234, "qat-lang-aqasm-qftarith-qft"]], "qat.lang.Program": [[237, "qat-lang-program"]], "qat.lang.AQASM.qbool.QClause": [[242, "qat-lang-aqasm-qbool-qclause"]], "qat.lang.algorithms.quantum_counting": [[249, "qat-lang-algorithms-quantum-counting"]], "qat.lang.AQASM.gates.ParamGate": [[235, "qat-lang-aqasm-gates-paramgate"]], "qat.lang.AQASM.qint.QInt": [[245, "qat-lang-aqasm-qint-qint"]], "qat.lang.algorithms.amplification.uniform_distribution": [[250, "qat-lang-algorithms-amplification-uniform-distribution"]], "qat.lang.AQASM.qint.QArithExp": [[238, "qat-lang-aqasm-qint-qarithexp"]], "qat.lang.AQASM.qbool.QBoolArray": [[241, "qat-lang-aqasm-qbool-qboolarray"]], "qat.lang.AQASM.bits.Qbit": [[239, "qat-lang-aqasm-bits-qbit"]], "qat.opt": [[251, "qat-opt"]], "Generic combinatorial optimization": [[251, "generic-combinatorial-optimization"]], "Quadratic problems: Ising and QUBO": [[251, "quadratic-problems-ising-and-qubo"]], "Classes for the supported NP-Hard problems": [[251, "classes-for-the-supported-np-hard-problems"]], "Generating QAOA Ans\u00e4tze or QA Jobs": [[251, "generating-qaoa-ansatze-or-qa-jobs"]], "qat.lang.AQASM.qftarith.mult": [[232, "qat-lang-aqasm-qftarith-mult"]], "qat.lang.qfunc": [[244, "qat-lang-qfunc"]], "qat.lang.AQASM.qbool.QBool": [[240, "qat-lang-aqasm-qbool-qbool"]], "qat.lang.AQASM.qftarith.add_const": [[231, "qat-lang-aqasm-qftarith-add-const"]], "qat.lang.AQASM.qftarith.mult_const": [[233, "qat-lang-aqasm-qftarith-mult-const"]], "qat.lang.algorithms.phase_estimation": [[236, "qat-lang-algorithms-phase-estimation"]], "qat.lang.QRoutine": [[248, "qat-lang-qroutine"]], "qat.lang.qrout": [[247, "qat-lang-qrout"]], "qat.lang.AQASM.qint.QCompExp": [[243, "qat-lang-aqasm-qint-qcompexp"]], "Annealing computing": [[34, "annealing-computing"]], "Inner workings": [[34, "id10"]], "Analog Jobs": [[21, "analog-jobs"]], "Ising Hamiltonians": [[23, "ising-hamiltonians"]], "Bibliography": [[23, "bibliography"], [355, "bibliography"]], "Make your own QPU": [[35, "make-your-own-qpu"]], "Method submit_job": [[35, "method-submit-job"]], "Method get_specs": [[35, "method-get-specs"]], "Quantum Processing Unit (QPU)": [[33, "quantum-processing-unit-qpu"]], "Quadratic Unconstrained Binary Optimization (QUBO)": [[24, "quadratic-unconstrained-binary-optimization-qubo"]], "Executing / Simulating quantum programs": [[27, "executing-simulating-quantum-programs"]], "Observable Job": [[30, "observable-job"]], "Extending a QPU (by using Plugins)": [[39, "extending-a-qpu-by-using-plugins"]], "PyLinalg: Python Linear-algebra-based simulator": [[38, "pylinalg-python-linear-algebra-based-simulator"], [36, "pylinalg-python-linear-algebra-based-simulator"]], "Make you own junction": [[41, "make-you-own-junction"]], "A concrete example": [[41, "a-concrete-example"], [40, "a-concrete-example"]], "Annealing programming": [[22, "annealing-programming"]], "General Combinatorial Problems": [[25, "general-combinatorial-problems"]], "Constructing one or multiple Jobs (using Batch)": [[28, "constructing-one-or-multiple-jobs-using-batch"]], "CLinalg: C++ Linear-algebra-based simulator": [[37, "clinalg-c-linear-algebra-based-simulator"], [36, "clinalg-c-linear-algebra-based-simulator"]], "Make your own plugin": [[40, "make-your-own-plugin"]], "Method compile": [[40, "method-compile"]], "Method post_process": [[40, "method-post-process"]], "Gate based computing": [[36, "gate-based-computing"]], "QPU Emulators": [[36, "id4"]], "Result of a quantum program": [[32, "result-of-a-quantum-program"]], "Sample Job": [[29, "sample-job"]], "Creating observables": [[26, "creating-observables"]], "Observables": [[26, "observables"]], "Observables operations": [[26, "observables-operations"]], "Single term observables": [[26, "single-term-observables"]], "Using an observable": [[26, "using-an-observable"]], "Automated batch generation": [[31, "automated-batch-generation"]], "Quantum programs": [[12, "quantum-programs"]], "Allocating qubit and classical registers": [[12, "allocating-qubit-and-classical-registers"]], "Applying quantum gate": [[12, "applying-quantum-gate"]], "Advanced operations": [[12, "advanced-operations"]], "Generating the circuit": [[12, "generating-the-circuit"]], "Exporting the circuit": [[12, "exporting-the-circuit"]], "User guide": [[7, "user-guide"]], "Libraries built upon Qaptiva": [[7, "libraries-built-upon-qaptiva"]], "Atos Quantum Assembler (AQASM)": [[17, "atos-quantum-assembler-aqasm"]], "The text format": [[17, "the-text-format"]], "Header": [[17, "header"]], "Instructions": [[17, "instructions"]], "List of gates": [[17, "list-of-gates"]], "Compiling .aqasm files": [[17, "compiling-aqasm-files"]], "Compilation time linking": [[17, "compilation-time-linking"]], "Building schedules": [[19, "building-schedules"]], "Hamiltonian as a list of coefficients and Observables": [[19, "hamiltonian-as-a-list-of-coefficients-and-observables"]], "Using abstract variables": [[19, "using-abstract-variables"]], "Hamiltonian as one Observable": [[19, "hamiltonian-as-one-observable"]], "Quantum routines (and Oracles)": [[13, "quantum-routines-and-oracles"]], "Writing quantum programs": [[1, "writing-quantum-programs"], [8, "writing-quantum-programs"]], "Example of a grover algorithm": [[1, "example-of-a-grover-algorithm"]], "The diffusion": [[1, "the-diffusion"]], "The oracle": [[1, "the-oracle"]], "Manipulating schedules": [[20, "manipulating-schedules"]], "Oracles and quantum types": [[16, "oracles-and-quantum-types"]], "Quantum booleans, quantum conditionals, and quantum oracles": [[16, "quantum-booleans-quantum-conditionals-and-quantum-oracles"]], "Allocation": [[16, "allocation"], [16, "id1"]], "Logical expressions": [[16, "logical-expressions"]], "Evaluating expressions": [[16, "evaluating-expressions"]], "Quantum conditionals and with statements": [[16, "quantum-conditionals-and-with-statements"]], "Building phase oracles": [[16, "building-phase-oracles"]], "Setting a classical value": [[16, "setting-a-classical-value"]], "Arithmetic expressions": [[16, "arithmetic-expressions"]], "Conditionals on quantum integers": [[16, "conditionals-on-quantum-integers"]], "Example: Grover oracle for graph coloring": [[16, "example-grover-oracle-for-graph-coloring"]], "Analog programming": [[18, "analog-programming"]], "Background": [[18, "background"]], "Creating analog Jobs": [[18, "creating-analog-jobs"]], "myQLM Installation on MacOS": [[6, "myqlm-installation-on-macos"]], "Creating and adding quantum gates to a circuit": [[10, "creating-and-adding-quantum-gates-to-a-circuit"]], "Native gates, controls and daggers": [[10, "native-gates-controls-and-daggers"]], "User defined parametrized gates (AbstractGate)": [[10, "user-defined-parametrized-gates-abstractgate"]], "Matrix definition": [[10, "matrix-definition"]], "Subcircuit definition": [[10, "subcircuit-definition"]], "Arity generator": [[10, "arity-generator"]], "Deprecated custom gates": [[10, "deprecated-custom-gates"]], "Creating variational circuits": [[11, "creating-variational-circuits"]], "Variational jobs": [[11, "variational-jobs"]], "Binding variables": [[11, "binding-variables"]], "Ancillae management and compute scopes": [[15, "ancillae-management-and-compute-scopes"]], "Automated ancillae management": [[15, "automated-ancillae-management"]], "Compute/uncompute scopes": [[15, "compute-uncompute-scopes"]], "Gate-based programming": [[9, "gate-based-programming"]], "Getting started": [[0, "id1"]], "Installing myQLM": [[4, "installing-myqlm"]], "Prerequisites": [[4, "prerequisites"]], "Compatibility Matrix": [[4, "compatibility-matrix"]], "Install": [[4, "id4"]], "Install myQLM package": [[4, "install-myqlm-package"]], "Interoperability": [[4, "interoperability"]], "Naming quantum routines": [[14, "naming-quantum-routines"]], "Lifting Python functions into quantum gates": [[14, "lifting-python-functions-into-quantum-gates"]], "Linking at circuit extraction": [[14, "linking-at-circuit-extraction"]], "myQLM license": [[5, "myqlm-license"]], "Proprietary part": [[5, "proprietary-part"]], "Open source part": [[5, "open-source-part"]], "Variational algorithms with Qaptiva": [[3, "variational-algorithms-with-qaptiva"]], "Executing quantum programs": [[2, "executing-quantum-programs"]], "qat.opt.results.VertexCoverResult": [[271, "qat-opt-results-vertexcoverresult"]], "qat.opt.results.GraphPartitioningResult": [[269, "qat-opt-results-graphpartitioningresult"]], "qat.opt.boolexpr.Clause": [[255, "qat-opt-boolexpr-clause"]], "qat.opt.mixing_factory.IndependentAnnealing": [[264, "qat-opt-mixing-factory-independentannealing"]], "qat.opt.MixingFactory": [[262, "qat-opt-mixingfactory"]], "qat.opt.results": [[267, "qat-opt-results"]], "Combinatorial Optimization Generators Results": [[267, "combinatorial-optimization-generators-results"]], "qat.opt.BILP": [[253, "qat-opt-bilp"]], "qat.opt.NumberPartitioning": [[272, "qat-opt-numberpartitioning"]], "qat.opt.KClique": [[260, "qat-opt-kclique"]], "qat.opt.mixing_factory.InitialStateBuilder": [[265, "qat-opt-mixing-factory-initialstatebuilder"]], "qat.opt.mixing_factory": [[263, "qat-opt-mixing-factory"]], "Creating custom Quantum Annealing Jobs": [[263, "creating-custom-quantum-annealing-jobs"]], "qat.opt.GraphColouring": [[257, "qat-opt-graphcolouring"]], "qat.opt.GraphPartitioning": [[258, "qat-opt-graphpartitioning"]], "qat.opt.MaxCut": [[261, "qat-opt-maxcut"]], "qat.opt.results.CombinatorialResult": [[268, "qat-opt-results-combinatorialresult"]], "qat.vsolve.ansatz.AnsatzFactory": [[252, "qat-vsolve-ansatz-ansatzfactory"]], "qat.opt.results.KCliqueResult": [[270, "qat-opt-results-kcliqueresult"]], "qat.opt.circuit_generator.CircuitGenerator": [[254, "qat-opt-circuit-generator-circuitgenerator"]], "qat.opt.Ising": [[259, "qat-opt-ising"]], "qat.opt.CombinatorialProblem": [[256, "qat-opt-combinatorialproblem"]], "qat.opt.mixing_factory.SimpleInitialState": [[266, "qat-opt-mixing-factory-simpleinitialstate"]], "Max Cut": [[352, "max-cut"]], "PyQuil interoperability": [[342, "pyquil-interoperability"]], "Translating quantum circuits": [[342, "translating-quantum-circuits"], [343, "translating-quantum-circuits"], [345, "translating-quantum-circuits"], [344, "translating-quantum-circuits"], [341, "translating-quantum-circuits"]], "Connecting to a QPU": [[342, "connecting-to-a-qpu"]], "Interoperability with gate-based framework": [[340, "interoperability-with-gate-based-framework"]], "Available binders": [[340, "available-binders"]], "qat.quops.QuantumChannelPTM": [[336, "qat-quops-quantumchannelptm"]], "Graph Colouring": [[349, "graph-colouring"]], "Graph Partitioning": [[350, "graph-partitioning"]], "Binary Integer Linear Programming (BILP)": [[348, "binary-integer-linear-programming-bilp"]], "Cirq interoperability": [[343, "cirq-interoperability"]], "KClique": [[351, "kclique"]], "OpenQASM Compiler": [[345, "openqasm-compiler"]], "Quantum Annealing (QA)": [[356, "quantum-annealing-qa"]], "Quantum Approximate Optimization Algorithm (QAOA)": [[355, "quantum-approximate-optimization-algorithm-qaoa"]], "Combinatorial optimization": [[346, "combinatorial-optimization"]], "Contributing to myQLM": [[339, "contributing-to-myqlm"]], "Release notes": [[338, "release-notes"]], "What\u2019s new in myQLM 1.9.6": [[338, "what-s-new-in-myqlm-1-9-6"]], "Main Package": [[338, "main-package"], [338, "id1"], [338, "id3"], [338, "id5"], [338, "id7"], [338, "id10"]], "Dependant Packages": [[338, "dependant-packages"], [338, "id2"], [338, "id4"], [338, "id6"], [338, "id8"], [338, "id11"], [338, "id13"], [338, "id16"], [338, "id20"]], "What\u2019s new in myQLM 1.9.5": [[338, "what-s-new-in-myqlm-1-9-5"]], "What\u2019s new in myQLM 1.9.4": [[338, "what-s-new-in-myqlm-1-9-4"]], "What\u2019s new in myQLM 1.9.3": [[338, "what-s-new-in-myqlm-1-9-3"]], "Other Packages": [[338, "other-packages"], [338, "id9"], [338, "id12"], [338, "id14"], [338, "id17"], [338, "id21"]], "What\u2019s new in myQLM 1.9.2": [[338, "what-s-new-in-myqlm-1-9-2"]], "What\u2019s new in myQLM 1.9.1": [[338, "what-s-new-in-myqlm-1-9-1"]], "Defining quantum circuits / jobs using a Python function": [[338, "defining-quantum-circuits-jobs-using-a-python-function"]], "Updated features": [[338, "updated-features"], [338, "id18"], [338, "id23"], [338, "id26"]], "Fixes": [[338, "fixes"], [338, "id19"], [338, "id24"], [338, "id27"]], "What\u2019s new in myQLM 1.7.3": [[338, "what-s-new-in-myqlm-1-7-3"]], "Main Fixes": [[338, "main-fixes"], [338, "id15"]], "What\u2019s new in myQLM 1.7.2": [[338, "what-s-new-in-myqlm-1-7-2"]], "Deprecation warnings": [[338, "deprecation-warnings"]], "What\u2019s new in myQLM 1.7.1": [[338, "what-s-new-in-myqlm-1-7-1"]], "A new simulated QPU in myQLM": [[338, "a-new-simulated-qpu-in-myqlm"]], "Tools for fermionic computations (myQLM-fermion)": [[338, "tools-for-fermionic-computations-myqlm-fermion"]], "Batch generators in myQLM": [[338, "batch-generators-in-myqlm"]], "New features": [[338, "new-features"], [338, "id22"], [338, "id25"], [338, "id28"]], "What\u2019s new in myQLM 1.6.1": [[338, "what-s-new-in-myqlm-1-6-1"]], "What\u2019s new in myQLM 1.5.1": [[338, "what-s-new-in-myqlm-1-5-1"]], "What\u2019s new in myQLM 1.4.0": [[338, "what-s-new-in-myqlm-1-4-0"]], "myQLM Power Access": [[338, "myqlm-power-access"]], "Known problems": [[338, "known-problems"]], "Vertex Cover": [[354, "vertex-cover"]], "ProjectQ interoperability": [[344, "projectq-interoperability"]], "Qiskit interoperability": [[341, "qiskit-interoperability"]], "Connecting to a QPU/Backend": [[341, "connecting-to-a-qpu-backend"]], "Number Partitioning": [[353, "number-partitioning"]], "NP-hard problems": [[347, "np-hard-problems"]], "Unconstrained Graph Problems": [[347, "unconstrained-graph-problems"]], "Constrained Graph Problems": [[347, "constrained-graph-problems"]], "Other problems": [[347, "other-problems"]], "Simulated Quantum Annealing Benchmarking and Performance": [[347, "simulated-quantum-annealing-benchmarking-and-performance"]], "Demos": [[337, "demos"], [363, "demos"]], "Tutorials": [[337, "tutorials"]], "Running digital quantum simulations for spin and fermionic systems": [[337, "running-digital-quantum-simulations-for-spin-and-fermionic-systems"]], "Programming with qat.lang": [[337, "programming-with-qat-lang"]], "Basic quantum algorithms": [[337, "basic-quantum-algorithms"]], "Adding plugins to your computation stack": [[337, "adding-plugins-to-your-computation-stack"]], "Designing and running variational algorithms in the QLM": [[337, "designing-and-running-variational-algorithms-in-the-qlm"]], "First steps with the QLM": [[337, "first-steps-with-the-qlm"]], "Combinatorial Optimization Problems": [[337, "combinatorial-optimization-problems"]], "interoperability": [[337, "interoperability"]], "Simulation of quantum circuits on the QLM: introduction": [[337, "simulation-of-quantum-circuits-on-the-qlm-introduction"]], "K-Clique Generator": [[360, "k-clique-generator"]], "Max Cut Generator": [[358, "max-cut-generator"]], "Plugins": [[366, "plugins"]], "Spin and fermionic systems": [[363, "spin-and-fermionic-systems"]], "Quantum application (including Ans\u00e4tze and state preparation)": [[365, "quantum-application-including-ansatze-and-state-preparation"]], "Table of Contents": [[365, "table-of-contents"], [364, "table-of-contents"]], "Variational Quantum Eigensolver (VQE)": [[365, "variational-quantum-eigensolver-vqe"]], "Quantum Chemistry tools for VQE": [[365, "quantum-chemistry-tools-for-vqe"]], "MolecularHamiltonian": [[365, "molecularhamiltonian"]], "MoleculeInfo": [[365, "moleculeinfo"]], "Trotterization tools": [[365, "trotterization-tools"]], "Vertex Cover Generator": [[361, "vertex-cover-generator"]], "Creating and manipulating Hamiltonians": [[364, "creating-and-manipulating-hamiltonians"]], "Defining a Hamiltonian": [[364, "defining-a-hamiltonian"]], "Spin Hamiltonians": [[364, "spin-hamiltonians"]], "Fermionic Hamiltonians": [[364, "fermionic-hamiltonians"]], "Fermionic Hamiltonian using one and two-electrons integrals": [[364, "fermionic-hamiltonian-using-one-and-two-electrons-integrals"]], "The get_matrix() method": [[364, "the-get-matrix-method"]], "Fermionic to spin representation": [[364, "fermionic-to-spin-representation"]], "Example": [[364, "example"]], "Spin and fermionic Hamiltonian operations": [[364, "spin-and-fermionic-hamiltonian-operations"]], "Some Hamiltonian constructors": [[364, "some-hamiltonian-constructors"]], "Graph Colouring Generator": [[362, "graph-colouring-generator"]], "Graph Partitioning Generator": [[359, "graph-partitioning-generator"]], "Problem generators": [[357, "problem-generators"]], "NP-hard problems generators": [[357, "np-hard-problems-generators"]], "Migrating code based on deprecated library qat.dqs": [[367, "migrating-code-based-on-deprecated-library-qat-dqs"]], "Interoperability with annealing framework": [[369, "interoperability-with-annealing-framework"]], "myQLM documentation": [[368, "myqlm-documentation"]]}, "indexentries": {"module": [[45, "module-qat"], [46, "module-qat.interop"], [47, "module-qat.interop.cirq"], [50, "module-qat.interop.openqasm"], [52, "module-qat.interop.projectq"], [55, "module-qat.interop.pyquil"], [59, "module-qat.interop.qiskit"], [67, "module-qat.pylinalg"], [68, "module-qat.pylinalg.simulator"], [75, "module-qat.comm"], [76, "module-qat.comm.datamodel"], [79, "module-qat.comm.exceptions"], [83, "module-qat.comm.resource"], [87, "module-qat.comm.shared"], [90, "module-qat.core"], [101, "module-qat.core.application"], [104, "module-qat.core.circuit_builder"], [109, "module-qat.core.gate_set"], [113, "module-qat.core.qpu"], [115, "module-qat.core.spins"], [118, "module-qat.core.variables"], [145, "module-qat.devices"], [161, "module-qat.fermion"], [161, "module-qat.fermion.chemistry"], [161, "module-qat.fermion.chemistry.qse"], [161, "module-qat.fermion.chemistry.ucc"], [161, "module-qat.fermion.circuits"], [161, "module-qat.fermion.hamiltonians"], [161, "module-qat.fermion.phase_estimation"], [161, "module-qat.fermion.transforms"], [191, "module-qat.generators"], [200, "module-qat.hardware"], [206, "module-qat.lang"], [206, "module-qat.lang.algorithms"], [219, "module-qat.lang.AQASM.arithmetic"], [225, "module-qat.lang.AQASM.classarith"], [229, "module-qat.lang.AQASM.qftarith"], [251, "module-qat.opt"], [263, "module-qat.opt.mixing_factory"], [267, "module-qat.opt.results"], [277, "module-qat.plugins"], [296, "module-qat.qpus"], [305, "module-qat.quops"], [305, "module-qat.quops.metrics"]], "qat": [[45, "module-qat"]], "qat.interop": [[46, "module-qat.interop"]], "qat.interop.cirq": [[47, "module-qat.interop.cirq"]], "cirq_to_qlm() (in module qat.interop.cirq)": [[48, "qat.interop.cirq.cirq_to_qlm"]], "qlm_to_cirq() (in module qat.interop.cirq)": [[49, "qat.interop.cirq.qlm_to_cirq"]], "qat.interop.openqasm": [[50, "module-qat.interop.openqasm"]], "oqasmparser (class in qat.interop.openqasm)": [[51, "qat.interop.openqasm.OqasmParser"]], "compile() (qat.interop.openqasm.oqasmparser method)": [[51, "qat.interop.openqasm.OqasmParser.compile"]], "qat.interop.projectq": [[52, "module-qat.interop.projectq"]], "aqasmengine (class in qat.interop.projectq)": [[53, "qat.interop.projectq.AqasmEngine"]], "projectq_to_qlm() (qat.interop.projectq.aqasmengine method)": [[53, "qat.interop.projectq.AqasmEngine.projectq_to_qlm"]], "aqasmprinter (class in qat.interop.projectq)": [[54, "qat.interop.projectq.AqasmPrinter"]], "qat.interop.pyquil": [[55, "module-qat.interop.pyquil"]], "pyquil_to_qlm() (in module qat.interop.pyquil)": [[56, "qat.interop.pyquil.pyquil_to_qlm"]], "pyquilqpu (class in qat.interop.pyquil)": [[57, "qat.interop.pyquil.PyquilQPU"]], "set_qpu() (qat.interop.pyquil.pyquilqpu method)": [[57, "qat.interop.pyquil.PyquilQPU.set_qpu"]], "submit() (qat.interop.pyquil.pyquilqpu method)": [[57, "qat.interop.pyquil.PyquilQPU.submit"]], "submit_job() (qat.interop.pyquil.pyquilqpu method)": [[57, "qat.interop.pyquil.PyquilQPU.submit_job"]], "qlm_to_pyquil() (in module qat.interop.pyquil)": [[58, "qat.interop.pyquil.qlm_to_pyquil"]], "qat.interop.qiskit": [[59, "module-qat.interop.qiskit"]], "asyncbackendtoqpu (class in qat.interop.qiskit)": [[60, "qat.interop.qiskit.AsyncBackendToQPU"]], "retrieve_job() (qat.interop.qiskit.asyncbackendtoqpu method)": [[60, "qat.interop.qiskit.AsyncBackendToQPU.retrieve_job"]], "submit() (qat.interop.qiskit.asyncbackendtoqpu method)": [[60, "qat.interop.qiskit.AsyncBackendToQPU.submit"]], "backendtoqpu (class in qat.interop.qiskit)": [[61, "qat.interop.qiskit.BackendToQPU"]], "submit() (qat.interop.qiskit.backendtoqpu method)": [[61, "qat.interop.qiskit.BackendToQPU.submit"]], "qiskit_to_qlm() (in module qat.interop.qiskit)": [[62, "qat.interop.qiskit.qiskit_to_qlm"]], "qiskitjob (class in qat.interop.qiskit)": [[63, "qat.interop.qiskit.QiskitJob"]], "cancel() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.cancel"]], "dump() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.dump"]], "job_id() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.job_id"]], "result() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.result"]], "status() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.status"]], "qiskitruntimeqpu (class in qat.interop.qiskit.runtime)": [[64, "qat.interop.qiskit.runtime.QiskitRuntimeQPU"]], "submit() (qat.interop.qiskit.runtime.qiskitruntimeqpu method)": [[64, "qat.interop.qiskit.runtime.QiskitRuntimeQPU.submit"]], "qlm_to_qiskit() (in module qat.interop.qiskit)": [[65, "qat.interop.qiskit.qlm_to_qiskit"]], "qputobackend (class in qat.interop.qiskit)": [[66, "qat.interop.qiskit.QPUToBackend"]], "set_qpu() (qat.interop.qiskit.qputobackend method)": [[66, "qat.interop.qiskit.QPUToBackend.set_qpu"]], "qat.pylinalg": [[67, "module-qat.pylinalg"]], "qat.pylinalg.simulator": [[68, "module-qat.pylinalg.simulator"]], "mat2nparray() (in module qat.pylinalg.simulator)": [[69, "qat.pylinalg.simulator.mat2nparray"]], "measure() (in module qat.pylinalg.simulator)": [[70, "qat.pylinalg.simulator.measure"]], "project() (in module qat.pylinalg.simulator)": [[71, "qat.pylinalg.simulator.project"]], "raise_break() (in module qat.pylinalg.simulator)": [[72, "qat.pylinalg.simulator.raise_break"]], "reset() (in module qat.pylinalg.simulator)": [[73, "qat.pylinalg.simulator.reset"]], "simulate() (in module qat.pylinalg.simulator)": [[74, "qat.pylinalg.simulator.simulate"]], "qat.comm": [[75, "module-qat.comm"]], "qat.comm.datamodel": [[76, "module-qat.comm.datamodel"]], "qat.comm.datamodel.ttypes.gatedefinition (built-in class)": [[77, "qat.comm.datamodel.ttypes.GateDefinition"]], "op (class in qat.comm.datamodel.ttypes)": [[78, "qat.comm.datamodel.ttypes.Op"]], "qat.comm.exceptions": [[79, "module-qat.comm.exceptions"]], "qat.comm.exceptions.ttypes.errortype (built-in class)": [[80, "qat.comm.exceptions.ttypes.ErrorType"]], "qat.comm.exceptions.ttypes.pluginexception (built-in class)": [[81, "qat.comm.exceptions.ttypes.PluginException"]], "qat.comm.exceptions.ttypes.qpuexception (built-in class)": [[82, "qat.comm.exceptions.ttypes.QPUException"]], "qat.comm.resource": [[83, "module-qat.comm.resource"]], "allocationmodel (class in qat.comm.resource.ttypes)": [[84, "qat.comm.resource.ttypes.AllocationModel"]], "qat.comm.resource.ttypes.device (built-in class)": [[85, "qat.comm.resource.ttypes.Device"]], "qat.comm.resource.ttypes.resourcemodel (built-in class)": [[86, "qat.comm.resource.ttypes.ResourceModel"]], "qat.comm.shared": [[87, "module-qat.comm.shared"]], "intermediatemeasurement (class in qat.comm.shared.ttypes)": [[88, "qat.comm.shared.ttypes.IntermediateMeasurement"]], "processingtype (class in qat.comm.shared.ttypes)": [[89, "qat.comm.shared.ttypes.ProcessingType"]], "qat.core": [[90, "module-qat.core"]], "aggregate_data() (in module qat.core.wrappers.result)": [[91, "qat.core.wrappers.result.aggregate_data"]], "assert_plugin() (in module qat.core.assertion)": [[92, "qat.core.assertion.assert_plugin"]], "assert_qpu() (in module qat.core.assertion)": [[93, "qat.core.assertion.assert_qpu"]], "batch (class in qat.core)": [[94, "qat.core.Batch"]], "dump() (qat.core.batch method)": [[94, "qat.core.Batch.dump"]], "from_bytes() (qat.core.batch class method)": [[94, "qat.core.Batch.from_bytes"]], "from_thrift() (qat.core.batch class method)": [[94, "qat.core.Batch.from_thrift"]], "get_variables() (qat.core.batch method)": [[94, "qat.core.Batch.get_variables"]], "load() (qat.core.batch static method)": [[94, "qat.core.Batch.load"]], "to_cpp() (qat.core.batch method)": [[94, "qat.core.Batch.to_cpp"]], "to_thrift() (qat.core.batch method)": [[94, "qat.core.Batch.to_thrift"]], "batchresult (class in qat.core)": [[95, "qat.core.BatchResult"]], "append() (qat.core.batchresult method)": [[95, "qat.core.BatchResult.append"]], "dump() (qat.core.batchresult method)": [[95, "qat.core.BatchResult.dump"]], "extend() (qat.core.batchresult method)": [[95, "qat.core.BatchResult.extend"]], "from_thrift() (qat.core.batchresult class method)": [[95, "qat.core.BatchResult.from_thrift"]], "load() (qat.core.batchresult static method)": [[95, "qat.core.BatchResult.load"]], "circuit (class in qat.core)": [[96, "qat.core.Circuit"]], "bind_variable() (qat.core.circuit method)": [[96, "qat.core.Circuit.bind_variable"]], "bind_variables() (qat.core.circuit method)": [[96, "qat.core.Circuit.bind_variables"]], "compile() (qat.core.circuit method)": [[96, "qat.core.Circuit.compile"]], "count() (qat.core.circuit method)": [[96, "qat.core.Circuit.count"]], "dag() (qat.core.circuit method)": [[96, "qat.core.Circuit.dag"]], "depth() (qat.core.circuit method)": [[96, "qat.core.Circuit.depth"]], "display() (qat.core.circuit method)": [[96, "qat.core.Circuit.display"]], "dump() (qat.core.circuit method)": [[96, "qat.core.Circuit.dump"]], "empty() (qat.core.circuit static method)": [[96, "qat.core.Circuit.empty"]], "eval() (qat.core.circuit method)": [[96, "qat.core.Circuit.eval"]], "fill_matrices() (qat.core.circuit method)": [[96, "qat.core.Circuit.fill_matrices"]], "from_bytes() (qat.core.circuit class method)": [[96, "qat.core.Circuit.from_bytes"]], "from_thrift() (qat.core.circuit class method)": [[96, "qat.core.Circuit.from_thrift"]], "gate_set (qat.core.circuit property)": [[96, "qat.core.Circuit.gate_set"]], "get_variables() (qat.core.circuit method)": [[96, "qat.core.Circuit.get_variables"]], "insert_gate() (qat.core.circuit method)": [[96, "qat.core.Circuit.insert_gate"]], "iterate_simple() (qat.core.circuit method)": [[96, "qat.core.Circuit.iterate_simple"]], "load() (qat.core.circuit class method)": [[96, "qat.core.Circuit.load"]], "remove_locks() (qat.core.circuit method)": [[96, "qat.core.Circuit.remove_locks"]], "run() (qat.core.circuit method)": [[96, "qat.core.Circuit.run"]], "shift_qbits() (qat.core.circuit method)": [[96, "qat.core.Circuit.shift_qbits"]], "statistics() (qat.core.circuit method)": [[96, "qat.core.Circuit.statistics"]], "to_job() (qat.core.circuit method)": [[96, "qat.core.Circuit.to_job"]], "display() (in module qat.core.console)": [[97, "qat.core.console.display"]], "evaluate() (in module qat.core.formula_eval)": [[98, "qat.core.formula_eval.evaluate"]], "hardwarespecs (class in qat.core)": [[99, "qat.core.HardwareSpecs"]], "as_graph() (qat.core.hardwarespecs method)": [[99, "qat.core.HardwareSpecs.as_graph"]], "as_quameleon() (qat.core.hardwarespecs method)": [[99, "qat.core.HardwareSpecs.as_quameleon"]], "dump() (qat.core.hardwarespecs method)": [[99, "qat.core.HardwareSpecs.dump"]], "from_thrift() (qat.core.hardwarespecs class method)": [[99, "qat.core.HardwareSpecs.from_thrift"]], "load() (qat.core.hardwarespecs static method)": [[99, "qat.core.HardwareSpecs.load"]], "nbqbits (qat.core.hardwarespecs property)": [[99, "qat.core.HardwareSpecs.nbqbits"]], "job (class in qat.core)": [[100, "qat.core.Job"]], "compile() (qat.core.job method)": [[100, "qat.core.Job.compile"]], "differentiate() (qat.core.job method)": [[100, "qat.core.Job.differentiate"]], "dump() (qat.core.job method)": [[100, "qat.core.Job.dump"]], "eval() (qat.core.job method)": [[100, "qat.core.Job.eval"]], "from_bytes() (qat.core.job class method)": [[100, "qat.core.Job.from_bytes"]], "from_thrift() (qat.core.job class method)": [[100, "qat.core.Job.from_thrift"]], "get_variables() (qat.core.job method)": [[100, "qat.core.Job.get_variables"]], "gradient() (qat.core.job method)": [[100, "qat.core.Job.gradient"]], "load() (qat.core.job class method)": [[100, "qat.core.Job.load"]], "parameter_map (qat.core.job property)": [[100, "qat.core.Job.parameter_map"]], "psi_0 (qat.core.job property)": [[100, "qat.core.Job.psi_0"]], "run() (qat.core.job method)": [[100, "qat.core.Job.run"]], "shift_qbits() (qat.core.job method)": [[100, "qat.core.Job.shift_qbits"]], "threshold (qat.core.job property)": [[100, "qat.core.Job.threshold"]], "to_cpp() (qat.core.job method)": [[100, "qat.core.Job.to_cpp"]], "to_thrift() (qat.core.job method)": [[100, "qat.core.Job.to_thrift"]], "qat.core.application": [[101, "module-qat.core.application"]], "application (class in qat.core.application)": [[102, "qat.core.application.Application"]], "execute() (qat.core.application.application method)": [[102, "qat.core.application.Application.execute"]], "serve() (qat.core.application.application method)": [[102, "qat.core.application.Application.serve"]], "remoteapplication (class in qat.core.application)": [[103, "qat.core.application.RemoteApplication"]], "qat.core.circuit_builder": [[104, "module-qat.core.circuit_builder"]], "default_gate_set() (in module qat.core.circuit_builder.matrix_util)": [[105, "qat.core.circuit_builder.matrix_util.default_gate_set"]], "get_param_generator() (in module qat.core.circuit_builder.matrix_util)": [[106, "qat.core.circuit_builder.matrix_util.get_param_generator"]], "get_predef_generator() (in module qat.core.circuit_builder.matrix_util)": [[107, "qat.core.circuit_builder.matrix_util.get_predef_generator"]], "variablenamenotavailable (class in qat.core.circuit_builder.builder)": [[108, "qat.core.circuit_builder.builder.VariableNameNotAvailable"]], "qat.core.gate_set": [[109, "module-qat.core.gate_set"]], "gateset (class in qat.core.gate_set)": [[110, "qat.core.gate_set.GateSet"]], "add_signature() (qat.core.gate_set.gateset method)": [[110, "qat.core.gate_set.GateSet.add_signature"]], "union() (qat.core.gate_set.gateset method)": [[110, "qat.core.gate_set.GateSet.union"]], "gatesignature (class in qat.core.gate_set)": [[111, "qat.core.gate_set.GateSignature"]], "get_circuit() (qat.core.gate_set.gatesignature method)": [[111, "qat.core.gate_set.GateSignature.get_circuit"]], "get_matrix() (qat.core.gate_set.gatesignature method)": [[111, "qat.core.gate_set.GateSignature.get_matrix"]], "set_circuit_generator() (qat.core.gate_set.gatesignature method)": [[111, "qat.core.gate_set.GateSignature.set_circuit_generator"]], "set_matrix_generator() (qat.core.gate_set.gatesignature method)": [[111, "qat.core.gate_set.GateSignature.set_matrix_generator"]], "gatesyntaxredefinition (class in qat.core.gate_set)": [[112, "qat.core.gate_set.GateSyntaxRedefinition"]], "qat.core.qpu": [[113, "module-qat.core.qpu"]], "commonqpu (class in qat.core.qpu)": [[114, "qat.core.qpu.CommonQPU"]], "qat.core.spins": [[115, "module-qat.core.spins"]], "integer_to_spins() (in module qat.core.spins)": [[116, "qat.core.spins.integer_to_spins"]], "spins_to_integer() (in module qat.core.spins)": [[117, "qat.core.spins.spins_to_integer"]], "qat.core.variables": [[118, "module-qat.core.variables"]], "built-in function": [[119, "qat.core.variables.abso"], [120, "qat.core.variables.angle"], [122, "qat.core.variables.atan2"], [123, "qat.core.variables.cos"], [124, "qat.core.variables.exp"], [125, "qat.core.variables.get_item"], [126, "qat.core.variables.heaviside"], [127, "qat.core.variables.imag"], [128, "qat.core.variables.ln"], [129, "qat.core.variables.real"], [130, "qat.core.variables.sin"], [131, "qat.core.variables.sqrt"], [133, "qat.core.variables.vmax"]], "qat.core.variables.abso()": [[119, "qat.core.variables.abso"]], "qat.core.variables.angle()": [[120, "qat.core.variables.angle"]], "arithexpression (class in qat.core.variables)": [[121, "qat.core.variables.ArithExpression"]], "differentiate() (qat.core.variables.arithexpression method)": [[121, "qat.core.variables.ArithExpression.differentiate"]], "from_string() (qat.core.variables.arithexpression static method)": [[121, "qat.core.variables.ArithExpression.from_string"]], "get_variables() (qat.core.variables.arithexpression method)": [[121, "qat.core.variables.ArithExpression.get_variables"]], "pretty_print() (qat.core.variables.arithexpression method)": [[121, "qat.core.variables.ArithExpression.pretty_print"]], "to_thrift() (qat.core.variables.arithexpression method)": [[121, "qat.core.variables.ArithExpression.to_thrift"]], "qat.core.variables.atan2()": [[122, "qat.core.variables.atan2"]], "qat.core.variables.cos()": [[123, "qat.core.variables.cos"]], "qat.core.variables.exp()": [[124, "qat.core.variables.exp"]], "qat.core.variables.get_item()": [[125, "qat.core.variables.get_item"]], "qat.core.variables.heaviside()": [[126, "qat.core.variables.heaviside"]], "qat.core.variables.imag()": [[127, "qat.core.variables.imag"]], "qat.core.variables.ln()": [[128, "qat.core.variables.ln"]], "qat.core.variables.real()": [[129, "qat.core.variables.real"]], "qat.core.variables.sin()": [[130, "qat.core.variables.sin"]], "qat.core.variables.sqrt()": [[131, "qat.core.variables.sqrt"]], "symbol (class in qat.core.variables)": [[132, "qat.core.variables.Symbol"]], "qat.core.variables.vmax()": [[133, "qat.core.variables.vmax"]], "observable (class in qat.core)": [[134, "qat.core.Observable"]], "constant_coeff (qat.core.observable attribute)": [[134, "qat.core.Observable.constant_coeff"]], "ising (qat.core.observable attribute)": [[134, "qat.core.Observable.ising"]], "nbqbits (qat.core.observable attribute)": [[134, "qat.core.Observable.nbqbits"]], "terms (qat.core.observable attribute)": [[134, "qat.core.Observable.terms"]], "to_matrix() (qat.core.observable method)": [[134, "qat.core.Observable.to_matrix"]], "parameter (class in qat.core)": [[135, "qat.core.Parameter"]], "func (qat.core.parameter property)": [[135, "qat.core.Parameter.func"]], "generate_noise() (qat.core.parameter method)": [[135, "qat.core.Parameter.generate_noise"]], "get_noise() (qat.core.parameter method)": [[135, "qat.core.Parameter.get_noise"]], "psd (qat.core.parameter property)": [[135, "qat.core.Parameter.psd"]], "plot_in_notebook() (in module qat.core.printer)": [[136, "qat.core.printer.plot_in_notebook"]], "result (class in qat.core)": [[137, "qat.core.Result"]], "add_sample() (qat.core.result method)": [[137, "qat.core.Result.add_sample"]], "display() (qat.core.result method)": [[137, "qat.core.Result.display"]], "dump() (qat.core.result method)": [[137, "qat.core.Result.dump"]], "from_bytes() (qat.core.result class method)": [[137, "qat.core.Result.from_bytes"]], "from_thrift() (qat.core.result class method)": [[137, "qat.core.Result.from_thrift"]], "load() (qat.core.result static method)": [[137, "qat.core.Result.load"]], "parameter_map (qat.core.result property)": [[137, "qat.core.Result.parameter_map"]], "plot() (qat.core.result method)": [[137, "qat.core.Result.plot"]], "unpack() (qat.core.result method)": [[137, "qat.core.Result.unpack"]], "value (qat.core.result property)": [[137, "qat.core.Result.value"]], "values (qat.core.result property)": [[137, "qat.core.Result.values"]], "wrap_samples() (qat.core.result method)": [[137, "qat.core.Result.wrap_samples"]], "sample (class in qat.core)": [[138, "qat.core.Sample"]], "amplitude (qat.core.sample property)": [[138, "qat.core.Sample.amplitude"]], "from_bytes() (qat.core.sample class method)": [[138, "qat.core.Sample.from_bytes"]], "from_thrift() (qat.core.sample class method)": [[138, "qat.core.Sample.from_thrift"]], "set_qreg() (qat.core.sample method)": [[138, "qat.core.Sample.set_qreg"]], "state (qat.core.sample property)": [[138, "qat.core.Sample.state"]], "schedule (class in qat.core)": [[139, "qat.core.Schedule"]], "dump() (qat.core.schedule method)": [[139, "qat.core.Schedule.dump"]], "get_variables() (qat.core.schedule method)": [[139, "qat.core.Schedule.get_variables"]], "load() (qat.core.schedule class method)": [[139, "qat.core.Schedule.load"]], "to_job() (qat.core.schedule method)": [[139, "qat.core.Schedule.to_job"]], "state (class in qat.core.wrappers.result)": [[140, "qat.core.wrappers.result.State"]], "bitstring (qat.core.wrappers.result.state property)": [[140, "qat.core.wrappers.result.State.bitstring"]], "int (qat.core.wrappers.result.state property)": [[140, "qat.core.wrappers.result.State.int"]], "lsb_int (qat.core.wrappers.result.state property)": [[140, "qat.core.wrappers.result.State.lsb_int"]], "value (qat.core.wrappers.result.state property)": [[140, "qat.core.wrappers.result.State.value"]], "term (class in qat.core)": [[141, "qat.core.Term"]], "coeff (qat.core.term attribute)": [[141, "qat.core.Term.coeff"]], "op (qat.core.term attribute)": [[141, "qat.core.Term.op"]], "qbits (qat.core.term attribute)": [[141, "qat.core.Term.qbits"]], "topology (class in qat.core)": [[142, "qat.core.Topology"]], "add_edge() (qat.core.topology method)": [[142, "qat.core.Topology.add_edge"]], "dump() (qat.core.topology method)": [[142, "qat.core.Topology.dump"]], "from_bytes() (qat.core.topology class method)": [[142, "qat.core.Topology.from_bytes"]], "from_nx() (qat.core.topology static method)": [[142, "qat.core.Topology.from_nx"]], "from_thrift() (qat.core.topology class method)": [[142, "qat.core.Topology.from_thrift"]], "load() (qat.core.topology static method)": [[142, "qat.core.Topology.load"]], "nbqbits (qat.core.topology property)": [[142, "qat.core.Topology.nbqbits"]], "set_nbqbits() (qat.core.topology method)": [[142, "qat.core.Topology.set_nbqbits"]], "to_nx() (qat.core.topology method)": [[142, "qat.core.Topology.to_nx"]], "topologytype (class in qat.core)": [[143, "qat.core.TopologyType"]], "variable (class in qat.core)": [[144, "qat.core.Variable"]], "differentiate() (qat.core.variable method)": [[144, "qat.core.Variable.differentiate"]], "get_variables() (qat.core.variable method)": [[144, "qat.core.Variable.get_variables"]], "to_thrift() (qat.core.variable method)": [[144, "qat.core.Variable.to_thrift"]], "qat.devices": [[145, "module-qat.devices"]], "alltoall (class in qat.devices)": [[146, "qat.devices.AllToAll"]], "qat.devices.google_sycamore (built-in variable)": [[147, "qat.devices.GOOGLE_SYCAMORE"]], "griddevice (class in qat.devices)": [[148, "qat.devices.GridDevice"]], "qat.devices.ibm_burlington (built-in variable)": [[149, "qat.devices.IBM_BURLINGTON"]], "qat.devices.ibm_johannesburg (built-in variable)": [[150, "qat.devices.IBM_JOHANNESBURG"]], "qat.devices.ibm_melbourne (built-in variable)": [[151, "qat.devices.IBM_MELBOURNE"]], "qat.devices.ibm_rueschlikon (built-in variable)": [[152, "qat.devices.IBM_RUESCHLIKON"]], "qat.devices.ibm_singapore (built-in variable)": [[153, "qat.devices.IBM_SINGAPORE"]], "qat.devices.ibm_tokyo (built-in variable)": [[154, "qat.devices.IBM_TOKYO"]], "qat.devices.ibm_yorktown (built-in variable)": [[155, "qat.devices.IBM_YORKTOWN"]], "linedevice (class in qat.devices)": [[156, "qat.devices.LineDevice"]], "qat.devices.rigetti_agave (built-in variable)": [[157, "qat.devices.RIGETTI_AGAVE"]], "qat.devices.rigetti_aspen (built-in variable)": [[158, "qat.devices.RIGETTI_ASPEN"]], "squaregriddevice (class in qat.devices)": [[159, "qat.devices.SquareGridDevice"]], "qat.devices.zuchongzhi (built-in variable)": [[160, "qat.devices.ZUCHONGZHI"]], "qat.fermion": [[161, "module-qat.fermion"]], "qat.fermion.chemistry": [[161, "module-qat.fermion.chemistry"]], "qat.fermion.chemistry.qse": [[161, "module-qat.fermion.chemistry.qse"]], "qat.fermion.chemistry.ucc": [[161, "module-qat.fermion.chemistry.ucc"]], "qat.fermion.circuits": [[161, "module-qat.fermion.circuits"]], "qat.fermion.hamiltonians": [[161, "module-qat.fermion.hamiltonians"]], "qat.fermion.phase_estimation": [[161, "module-qat.fermion.phase_estimation"]], "qat.fermion.transforms": [[161, "module-qat.fermion.transforms"]], "apply_quantum_subspace_expansion() (in module qat.fermion.chemistry.qse)": [[162, "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion"]], "compute_active_space_integrals() (in module qat.fermion.chemistry.ucc)": [[163, "qat.fermion.chemistry.ucc.compute_active_space_integrals"]], "construct_ucc_ansatz() (in module qat.fermion.chemistry.ucc)": [[164, "qat.fermion.chemistry.ucc.construct_ucc_ansatz"]], "convert_to_h_integrals() (in module qat.fermion.chemistry.ucc)": [[165, "qat.fermion.chemistry.ucc.convert_to_h_integrals"]], "electronicstructurehamiltonian (class in qat.fermion.hamiltonians)": [[166, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian"]], "constant_coeff (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[166, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.constant_coeff"]], "copy() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[166, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.copy"]], "dag() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[166, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.dag"]], "get_matrix() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[166, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.get_matrix"]], "hpq (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[166, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.hpq"]], "hpqrs (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[166, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.hpqrs"]], "to_fermion() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[166, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.to_fermion"]], "to_spin() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[166, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.to_spin"]], "fermionhamiltonian (class in qat.fermion.hamiltonians)": [[167, "qat.fermion.hamiltonians.FermionHamiltonian"]], "constant_coeff (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[167, "qat.fermion.hamiltonians.FermionHamiltonian.constant_coeff"]], "copy() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[167, "qat.fermion.hamiltonians.FermionHamiltonian.copy"]], "dag() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[167, "qat.fermion.hamiltonians.FermionHamiltonian.dag"]], "get_matrix() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[167, "qat.fermion.hamiltonians.FermionHamiltonian.get_matrix"]], "matrix (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[167, "qat.fermion.hamiltonians.FermionHamiltonian.matrix"]], "nbqbits (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[167, "qat.fermion.hamiltonians.FermionHamiltonian.nbqbits"]], "normal_order (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[167, "qat.fermion.hamiltonians.FermionHamiltonian.normal_order"]], "terms (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[167, "qat.fermion.hamiltonians.FermionHamiltonian.terms"]], "to_electronic() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[167, "qat.fermion.hamiltonians.FermionHamiltonian.to_electronic"]], "to_spin() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[167, "qat.fermion.hamiltonians.FermionHamiltonian.to_spin"]], "get_cluster_ops() (in module qat.fermion.chemistry.ucc)": [[168, "qat.fermion.chemistry.ucc.get_cluster_ops"]], "get_hf_ket() (in module qat.fermion.chemistry.ucc)": [[169, "qat.fermion.chemistry.ucc.get_hf_ket"]], "guess_init_params() (in module qat.fermion.chemistry.ucc)": [[170, "qat.fermion.chemistry.ucc.guess_init_params"]], "make_anderson_model() (in module qat.fermion.hamiltonians)": [[171, "qat.fermion.hamiltonians.make_anderson_model"]], "make_compressed_ldca_circ() (in module qat.fermion.circuits)": [[172, "qat.fermion.circuits.make_compressed_ldca_circ"]], "make_embedded_model() (in module qat.fermion.hamiltonians)": [[173, "qat.fermion.hamiltonians.make_embedded_model"]], "make_general_hwe_circ() (in module qat.fermion.circuits)": [[174, "qat.fermion.circuits.make_general_hwe_circ"]], "make_hubbard_model() (in module qat.fermion.hamiltonians)": [[175, "qat.fermion.hamiltonians.make_hubbard_model"]], "make_ldca_circ() (in module qat.fermion.circuits)": [[176, "qat.fermion.circuits.make_ldca_circ"]], "make_mr_circ() (in module qat.fermion.circuits)": [[177, "qat.fermion.circuits.make_mr_circ"]], "make_mrep_circ() (in module qat.fermion.circuits)": [[178, "qat.fermion.circuits.make_mrep_circ"]], "make_shallow_circ() (in module qat.fermion.circuits)": [[179, "qat.fermion.circuits.make_shallow_circ"]], "make_trotterisation_routine() (in module qat.fermion.trotterisation)": [[180, "qat.fermion.trotterisation.make_trotterisation_routine"]], "molecularhamiltonian (class in qat.fermion.chemistry.wrapper)": [[181, "qat.fermion.chemistry.wrapper.MolecularHamiltonian"]], "constant_coeff (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[181, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.constant_coeff"]], "get_electronic_hamiltonian() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[181, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.get_electronic_hamiltonian"]], "nqbits (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[181, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.nqbits"]], "one_body_integrals (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[181, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.one_body_integrals"]], "select_active_space() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[181, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.select_active_space"]], "transform_basis() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[181, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.transform_basis"]], "two_body_integrals (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[181, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.two_body_integrals"]], "moleculeinfo (class in qat.fermion.chemistry.wrapper)": [[182, "qat.fermion.chemistry.wrapper.MoleculeInfo"]], "constant_coeff (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[182, "qat.fermion.chemistry.wrapper.MoleculeInfo.constant_coeff"]], "hamiltonian (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[182, "qat.fermion.chemistry.wrapper.MoleculeInfo.hamiltonian"]], "n_electrons (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[182, "qat.fermion.chemistry.wrapper.MoleculeInfo.n_electrons"]], "noons (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[182, "qat.fermion.chemistry.wrapper.MoleculeInfo.noons"]], "nqbits (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[182, "qat.fermion.chemistry.wrapper.MoleculeInfo.nqbits"]], "one_body_integrals (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[182, "qat.fermion.chemistry.wrapper.MoleculeInfo.one_body_integrals"]], "orbital_energies (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[182, "qat.fermion.chemistry.wrapper.MoleculeInfo.orbital_energies"]], "restrict_active_space() (qat.fermion.chemistry.wrapper.moleculeinfo method)": [[182, "qat.fermion.chemistry.wrapper.MoleculeInfo.restrict_active_space"]], "two_body_integrals (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[182, "qat.fermion.chemistry.wrapper.MoleculeInfo.two_body_integrals"]], "perform_phase_estimation (class in qat.fermion.phase_estimation)": [[183, "qat.fermion.phase_estimation.perform_phase_estimation"]], "perform_pyscf_computation() (in module qat.fermion.chemistry.pyscf_tools)": [[184, "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation"]], "select_active_orbitals() (in module qat.fermion.chemistry.ucc)": [[185, "qat.fermion.chemistry.ucc.select_active_orbitals"]], "spinhamiltonian (class in qat.fermion.hamiltonians)": [[186, "qat.fermion.hamiltonians.SpinHamiltonian"]], "constant_coeff (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[186, "qat.fermion.hamiltonians.SpinHamiltonian.constant_coeff"]], "copy() (qat.fermion.hamiltonians.spinhamiltonian method)": [[186, "qat.fermion.hamiltonians.SpinHamiltonian.copy"]], "dag() (qat.fermion.hamiltonians.spinhamiltonian method)": [[186, "qat.fermion.hamiltonians.SpinHamiltonian.dag"]], "get_matrix() (qat.fermion.hamiltonians.spinhamiltonian method)": [[186, "qat.fermion.hamiltonians.SpinHamiltonian.get_matrix"]], "matrix (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[186, "qat.fermion.hamiltonians.SpinHamiltonian.matrix"]], "nbqbits (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[186, "qat.fermion.hamiltonians.SpinHamiltonian.nbqbits"]], "terms (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[186, "qat.fermion.hamiltonians.SpinHamiltonian.terms"]], "transform_integrals_to_new_basis() (in module qat.fermion.chemistry.ucc)": [[187, "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis"]], "transform_to_bk_basis() (in module qat.fermion.transforms)": [[188, "qat.fermion.transforms.transform_to_bk_basis"]], "transform_to_jw_basis() (in module qat.fermion.transforms)": [[189, "qat.fermion.transforms.transform_to_jw_basis"]], "transform_to_parity_basis() (in module qat.fermion.transforms)": [[190, "qat.fermion.transforms.transform_to_parity_basis"]], "qat.generators": [[191, "module-qat.generators"]], "abstractgenerator (class in qat.generators)": [[192, "qat.generators.AbstractGenerator"]], "generate() (qat.generators.abstractgenerator method)": [[192, "qat.generators.AbstractGenerator.generate"]], "serve() (qat.generators.abstractgenerator method)": [[192, "qat.generators.AbstractGenerator.serve"]], "wrapper_post_process() (qat.generators.abstractgenerator method)": [[192, "qat.generators.AbstractGenerator.wrapper_post_process"]], "combinatorialoptimizergenerator (class in qat.generators)": [[193, "qat.generators.CombinatorialOptimizerGenerator"]], "generate() (qat.generators.combinatorialoptimizergenerator method)": [[193, "qat.generators.CombinatorialOptimizerGenerator.generate"]], "post_process() (qat.generators.combinatorialoptimizergenerator method)": [[193, "qat.generators.CombinatorialOptimizerGenerator.post_process"]], "graphcolouringgenerator (class in qat.generators)": [[194, "qat.generators.GraphColouringGenerator"]], "generate() (qat.generators.graphcolouringgenerator method)": [[194, "qat.generators.GraphColouringGenerator.generate"]], "graphpartitioninggenerator (class in qat.generators)": [[195, "qat.generators.GraphPartitioningGenerator"]], "generate() (qat.generators.graphpartitioninggenerator method)": [[195, "qat.generators.GraphPartitioningGenerator.generate"]], "kcliquegenerator (class in qat.generators)": [[196, "qat.generators.KCliqueGenerator"]], "generate() (qat.generators.kcliquegenerator method)": [[196, "qat.generators.KCliqueGenerator.generate"]], "maxcutgenerator (class in qat.generators)": [[197, "qat.generators.MaxCutGenerator"]], "generate() (qat.generators.maxcutgenerator method)": [[197, "qat.generators.MaxCutGenerator.generate"]], "remotebatchgenerator (class in qat.generators)": [[198, "qat.generators.RemoteBatchGenerator"]], "generate() (qat.generators.remotebatchgenerator method)": [[198, "qat.generators.RemoteBatchGenerator.generate"]], "post_process() (qat.generators.remotebatchgenerator method)": [[198, "qat.generators.RemoteBatchGenerator.post_process"]], "vertexcovergenerator (class in qat.generators)": [[199, "qat.generators.VertexCoverGenerator"]], "generate() (qat.generators.vertexcovergenerator method)": [[199, "qat.generators.VertexCoverGenerator.generate"]], "qat.hardware": [[200, "module-qat.hardware"]], "defaultgatesspecification (class in qat.hardware)": [[201, "qat.hardware.DefaultGatesSpecification"]], "gate_times (qat.hardware.defaultgatesspecification attribute)": [[201, "qat.hardware.DefaultGatesSpecification.gate_times"]], "get_gate_time() (qat.hardware.defaultgatesspecification method)": [[201, "qat.hardware.DefaultGatesSpecification.get_gate_time"]], "get_quantum_channel() (qat.hardware.defaultgatesspecification method)": [[201, "qat.hardware.DefaultGatesSpecification.get_quantum_channel"]], "meas (qat.hardware.defaultgatesspecification attribute)": [[201, "qat.hardware.DefaultGatesSpecification.meas"]], "quantum_channels (qat.hardware.defaultgatesspecification attribute)": [[201, "qat.hardware.DefaultGatesSpecification.quantum_channels"]], "state_prep (qat.hardware.defaultgatesspecification attribute)": [[201, "qat.hardware.DefaultGatesSpecification.state_prep"]], "defaulthardwaremodel (class in qat.hardware)": [[202, "qat.hardware.DefaultHardwareModel"]], "gate_noise (qat.hardware.defaulthardwaremodel attribute)": [[202, "qat.hardware.DefaultHardwareModel.gate_noise"]], "gates_specification (qat.hardware.defaulthardwaremodel attribute)": [[202, "qat.hardware.DefaultHardwareModel.gates_specification"]], "idle_noise (qat.hardware.defaulthardwaremodel attribute)": [[202, "qat.hardware.DefaultHardwareModel.idle_noise"]], "jump_operators (qat.hardware.defaulthardwaremodel attribute)": [[202, "qat.hardware.DefaultHardwareModel.jump_operators"]], "params_specification (qat.hardware.defaulthardwaremodel attribute)": [[202, "qat.hardware.DefaultHardwareModel.params_specification"]], "gatesspecification (class in qat.hardware)": [[203, "qat.hardware.GatesSpecification"]], "gate_times (qat.hardware.gatesspecification attribute)": [[203, "qat.hardware.GatesSpecification.gate_times"]], "get_gate_time() (qat.hardware.gatesspecification method)": [[203, "qat.hardware.GatesSpecification.get_gate_time"]], "get_quantum_channel() (qat.hardware.gatesspecification method)": [[203, "qat.hardware.GatesSpecification.get_quantum_channel"]], "meas (qat.hardware.gatesspecification attribute)": [[203, "qat.hardware.GatesSpecification.meas"]], "quantum_channels (qat.hardware.gatesspecification attribute)": [[203, "qat.hardware.GatesSpecification.quantum_channels"]], "state_prep (qat.hardware.gatesspecification attribute)": [[203, "qat.hardware.GatesSpecification.state_prep"]], "hardwaremodel (class in qat.hardware)": [[204, "qat.hardware.HardwareModel"]], "gate_noise (qat.hardware.hardwaremodel attribute)": [[204, "qat.hardware.HardwareModel.gate_noise"]], "gates_specification (qat.hardware.hardwaremodel attribute)": [[204, "qat.hardware.HardwareModel.gates_specification"]], "idle_noise (qat.hardware.hardwaremodel attribute)": [[204, "qat.hardware.HardwareModel.idle_noise"]], "jump_operators (qat.hardware.hardwaremodel attribute)": [[204, "qat.hardware.HardwareModel.jump_operators"]], "params_specification (qat.hardware.hardwaremodel attribute)": [[204, "qat.hardware.HardwareModel.params_specification"]], "make_depolarizing_hardware_model() (in module qat.hardware)": [[205, "qat.hardware.make_depolarizing_hardware_model"]], "qat.lang": [[206, "module-qat.lang"]], "qat.lang.algorithms": [[206, "module-qat.lang.algorithms"]], "abstractgate (class in qat.lang)": [[207, "qat.lang.AbstractGate"]], "set_dag() (qat.lang.abstractgate method)": [[207, "qat.lang.AbstractGate.set_dag"]], "amplification_step() (in module qat.lang.algorithms)": [[208, "qat.lang.algorithms.amplification_step"]], "boolformula (class in qat.lang.aqasm.bits)": [[209, "qat.lang.AQASM.bits.BoolFormula"]], "build_gate() (in module qat.lang)": [[210, "qat.lang.build_gate"]], "cbit (class in qat.lang.aqasm.bits)": [[211, "qat.lang.AQASM.bits.Cbit"]], "cregister (class in qat.lang.aqasm.bits)": [[212, "qat.lang.AQASM.bits.CRegister"]], "gate (class in qat.lang.aqasm.gates)": [[213, "qat.lang.AQASM.gates.Gate"]], "generate_gate_set() (in module qat.lang.aqasm.misc)": [[214, "qat.lang.AQASM.misc.generate_gate_set"]], "grover_diffusion() (in module qat.lang.algorithms.amplification)": [[215, "qat.lang.algorithms.amplification.grover_diffusion"]], "householder() (in module qat.lang.algorithms.amplification)": [[216, "qat.lang.algorithms.amplification.householder"]], "kptree (class in qat.lang.models)": [[217, "qat.lang.models.KPTree"]], "get_routine() (qat.lang.models.kptree method)": [[217, "qat.lang.models.KPTree.get_routine"]], "linker (class in qat.lang.linking)": [[218, "qat.lang.linking.Linker"]], "add_signature() (qat.lang.linking.linker method)": [[218, "qat.lang.linking.Linker.add_signature"]], "clear_gate_set() (qat.lang.linking.linker method)": [[218, "qat.lang.linking.Linker.clear_gate_set"]], "compile() (qat.lang.linking.linker method)": [[218, "qat.lang.linking.Linker.compile"]], "link() (qat.lang.linking.linker method)": [[218, "qat.lang.linking.Linker.link"]], "link_gates() (qat.lang.linking.linker method)": [[218, "qat.lang.linking.Linker.link_gates"]], "link_matrices() (qat.lang.linking.linker method)": [[218, "qat.lang.linking.Linker.link_matrices"]], "set_gate_set() (qat.lang.linking.linker method)": [[218, "qat.lang.linking.Linker.set_gate_set"]], "qat.lang.aqasm.arithmetic": [[219, "module-qat.lang.AQASM.arithmetic"]], "add_const_mod() (in module qat.lang.aqasm.arithmetic)": [[220, "qat.lang.AQASM.arithmetic.add_const_mod"]], "add_mod() (in module qat.lang.aqasm.arithmetic)": [[221, "qat.lang.AQASM.arithmetic.add_mod"]], "modular_exp() (in module qat.lang.aqasm.arithmetic)": [[222, "qat.lang.AQASM.arithmetic.modular_exp"]], "mult_const() (in module qat.lang.aqasm.arithmetic)": [[223, "qat.lang.AQASM.arithmetic.mult_const"]], "mult_const_mod() (in module qat.lang.aqasm.arithmetic)": [[224, "qat.lang.AQASM.arithmetic.mult_const_mod"]], "qat.lang.aqasm.classarith": [[225, "module-qat.lang.AQASM.classarith"]], "add() (in module qat.lang.aqasm.classarith)": [[226, "qat.lang.AQASM.classarith.add"]], "add_const() (in module qat.lang.aqasm.classarith)": [[227, "qat.lang.AQASM.classarith.add_const"]], "cuccaro_add() (in module qat.lang.aqasm.classarith)": [[228, "qat.lang.AQASM.classarith.cuccaro_add"]], "qat.lang.aqasm.qftarith": [[229, "module-qat.lang.AQASM.qftarith"]], "add() (in module qat.lang.aqasm.qftarith)": [[230, "qat.lang.AQASM.qftarith.add"]], "add_const() (in module qat.lang.aqasm.qftarith)": [[231, "qat.lang.AQASM.qftarith.add_const"]], "mult() (in module qat.lang.aqasm.qftarith)": [[232, "qat.lang.AQASM.qftarith.mult"]], "mult_const() (in module qat.lang.aqasm.qftarith)": [[233, "qat.lang.AQASM.qftarith.mult_const"]], "qft() (in module qat.lang.aqasm.qftarith)": [[234, "qat.lang.AQASM.qftarith.QFT"]], "paramgate (class in qat.lang.aqasm.gates)": [[235, "qat.lang.AQASM.gates.ParamGate"]], "bind_variables() (qat.lang.aqasm.gates.paramgate method)": [[235, "qat.lang.AQASM.gates.ParamGate.bind_variables"]], "dag() (qat.lang.aqasm.gates.paramgate method)": [[235, "qat.lang.AQASM.gates.ParamGate.dag"]], "display() (qat.lang.aqasm.gates.paramgate method)": [[235, "qat.lang.AQASM.gates.ParamGate.display"]], "get_variables() (qat.lang.aqasm.gates.paramgate method)": [[235, "qat.lang.AQASM.gates.ParamGate.get_variables"]], "phase_estimation() (in module qat.lang.algorithms)": [[236, "qat.lang.algorithms.phase_estimation"]], "program (class in qat.lang)": [[237, "qat.lang.Program"]], "apply() (qat.lang.program method)": [[237, "qat.lang.Program.apply"]], "calloc() (qat.lang.program method)": [[237, "qat.lang.Program.calloc"]], "cbreak() (qat.lang.program method)": [[237, "qat.lang.Program.cbreak"]], "cc_apply() (qat.lang.program method)": [[237, "qat.lang.Program.cc_apply"]], "comment() (qat.lang.program method)": [[237, "qat.lang.Program.comment"]], "conjugate() (qat.lang.program method)": [[237, "qat.lang.Program.conjugate"]], "display() (qat.lang.program method)": [[237, "qat.lang.Program.display"]], "export() (qat.lang.program method)": [[237, "qat.lang.Program.export"]], "free_ancillae() (qat.lang.program method)": [[237, "qat.lang.Program.free_ancillae"]], "get_free_ancillae() (qat.lang.program method)": [[237, "qat.lang.Program.get_free_ancillae"]], "logic() (qat.lang.program method)": [[237, "qat.lang.Program.logic"]], "measure() (qat.lang.program method)": [[237, "qat.lang.Program.measure"]], "new_var() (qat.lang.program method)": [[237, "qat.lang.Program.new_var"]], "qalloc() (qat.lang.program method)": [[237, "qat.lang.Program.qalloc"]], "reset() (qat.lang.program method)": [[237, "qat.lang.Program.reset"]], "run() (qat.lang.program method)": [[237, "qat.lang.Program.run"]], "to_circ() (qat.lang.program method)": [[237, "qat.lang.Program.to_circ"]], "qarithexp (class in qat.lang.aqasm.qint)": [[238, "qat.lang.AQASM.qint.QArithExp"]], "evaluate() (qat.lang.aqasm.qint.qarithexp method)": [[238, "qat.lang.AQASM.qint.QArithExp.evaluate"]], "qbit (class in qat.lang.aqasm.bits)": [[239, "qat.lang.AQASM.bits.Qbit"]], "qbool (class in qat.lang.aqasm.qbool)": [[240, "qat.lang.AQASM.qbool.QBool"]], "cast() (qat.lang.aqasm.qbool.qbool method)": [[240, "qat.lang.AQASM.qbool.QBool.cast"]], "cast_to() (qat.lang.aqasm.qbool.qbool method)": [[240, "qat.lang.AQASM.qbool.QBool.cast_to"]], "evaluate() (qat.lang.aqasm.qbool.qbool method)": [[240, "qat.lang.AQASM.qbool.QBool.evaluate"]], "phase() (qat.lang.aqasm.qbool.qbool method)": [[240, "qat.lang.AQASM.qbool.QBool.phase"]], "qbits_list() (qat.lang.aqasm.qbool.qbool method)": [[240, "qat.lang.AQASM.qbool.QBool.qbits_list"]], "qboolarray (class in qat.lang.aqasm.qbool)": [[241, "qat.lang.AQASM.qbool.QBoolArray"]], "cast() (qat.lang.aqasm.qbool.qboolarray method)": [[241, "qat.lang.AQASM.qbool.QBoolArray.cast"]], "evaluate() (qat.lang.aqasm.qbool.qboolarray method)": [[241, "qat.lang.AQASM.qbool.QBoolArray.evaluate"]], "qbits_list() (qat.lang.aqasm.qbool.qboolarray method)": [[241, "qat.lang.AQASM.qbool.QBoolArray.qbits_list"]], "qclause (class in qat.lang.aqasm.qbool)": [[242, "qat.lang.AQASM.qbool.QClause"]], "evaluate() (qat.lang.aqasm.qbool.qclause method)": [[242, "qat.lang.AQASM.qbool.QClause.evaluate"]], "phase() (qat.lang.aqasm.qbool.qclause method)": [[242, "qat.lang.AQASM.qbool.QClause.phase"]], "qbits_list() (qat.lang.aqasm.qbool.qclause method)": [[242, "qat.lang.AQASM.qbool.QClause.qbits_list"]], "qcompexp (class in qat.lang.aqasm.qint)": [[243, "qat.lang.AQASM.qint.QCompExp"]], "evaluate() (qat.lang.aqasm.qint.qcompexp method)": [[243, "qat.lang.AQASM.qint.QCompExp.evaluate"]], "phase() (qat.lang.aqasm.qint.qcompexp method)": [[243, "qat.lang.AQASM.qint.QCompExp.phase"]], "qbits_list() (qat.lang.aqasm.qint.qcompexp method)": [[243, "qat.lang.AQASM.qint.QCompExp.qbits_list"]], "qfunc() (in module qat.lang)": [[244, "qat.lang.qfunc"]], "qint (class in qat.lang.aqasm.qint)": [[245, "qat.lang.AQASM.qint.QInt"]], "cast() (qat.lang.aqasm.qint.qint method)": [[245, "qat.lang.AQASM.qint.QInt.cast"]], "evaluate() (qat.lang.aqasm.qint.qint method)": [[245, "qat.lang.AQASM.qint.QInt.evaluate"]], "qbits_list() (qat.lang.aqasm.qint.qint method)": [[245, "qat.lang.AQASM.qint.QInt.qbits_list"]], "set_value() (qat.lang.aqasm.qint.qint method)": [[245, "qat.lang.AQASM.qint.QInt.set_value"]], "qregister (class in qat.lang.aqasm.bits)": [[246, "qat.lang.AQASM.bits.QRegister"]], "qrout() (in module qat.lang)": [[247, "qat.lang.qrout"]], "qroutine (class in qat.lang)": [[248, "qat.lang.QRoutine"]], "apply() (qat.lang.qroutine method)": [[248, "qat.lang.QRoutine.apply"]], "compute() (qat.lang.qroutine method)": [[248, "qat.lang.QRoutine.compute"]], "free_ancillae() (qat.lang.qroutine method)": [[248, "qat.lang.QRoutine.free_ancillae"]], "get_free_ancillae() (qat.lang.qroutine method)": [[248, "qat.lang.QRoutine.get_free_ancillae"]], "new_wires() (qat.lang.qroutine method)": [[248, "qat.lang.QRoutine.new_wires"]], "set_ancillae() (qat.lang.qroutine method)": [[248, "qat.lang.QRoutine.set_ancillae"]], "uncompute() (qat.lang.qroutine method)": [[248, "qat.lang.QRoutine.uncompute"]], "quantum_counting() (in module qat.lang.algorithms)": [[249, "qat.lang.algorithms.quantum_counting"]], "uniform_distribution() (in module qat.lang.algorithms.amplification)": [[250, "qat.lang.algorithms.amplification.uniform_distribution"]], "qat.opt": [[251, "module-qat.opt"]], "ansatzfactory (class in qat.vsolve.ansatz)": [[252, "qat.vsolve.ansatz.AnsatzFactory"]], "qaoa_circuit() (qat.vsolve.ansatz.ansatzfactory static method)": [[252, "qat.vsolve.ansatz.AnsatzFactory.qaoa_circuit"]], "bilp (class in qat.opt)": [[253, "qat.opt.BILP"]], "get_best_parameters() (qat.opt.bilp method)": [[253, "qat.opt.BILP.get_best_parameters"]], "produce_q_and_offset() (in module qat.opt.binary_linear_integer_programming)": [[253, "qat.opt.binary_linear_integer_programming.produce_q_and_offset"]], "circuitgenerator (class in qat.opt.circuit_generator)": [[254, "qat.opt.circuit_generator.CircuitGenerator"]], "get_observable() (qat.opt.circuit_generator.circuitgenerator method)": [[254, "qat.opt.circuit_generator.CircuitGenerator.get_observable"]], "qaoa_ansatz() (qat.opt.circuit_generator.circuitgenerator method)": [[254, "qat.opt.circuit_generator.CircuitGenerator.qaoa_ansatz"]], "clause (class in qat.opt.boolexpr)": [[255, "qat.opt.boolexpr.Clause"]], "and_clause() (qat.opt.boolexpr.clause static method)": [[255, "qat.opt.boolexpr.Clause.and_clause"]], "evaluate() (qat.opt.boolexpr.clause method)": [[255, "qat.opt.boolexpr.Clause.evaluate"]], "get_observable() (qat.opt.boolexpr.clause method)": [[255, "qat.opt.boolexpr.Clause.get_observable"]], "get_variables() (qat.opt.boolexpr.clause method)": [[255, "qat.opt.boolexpr.Clause.get_variables"]], "neg_clause() (qat.opt.boolexpr.clause static method)": [[255, "qat.opt.boolexpr.Clause.neg_clause"]], "or_clause() (qat.opt.boolexpr.clause static method)": [[255, "qat.opt.boolexpr.Clause.or_clause"]], "xor_clause() (qat.opt.boolexpr.clause static method)": [[255, "qat.opt.boolexpr.Clause.xor_clause"]], "combinatorialproblem (class in qat.opt)": [[256, "qat.opt.CombinatorialProblem"]], "add_clause() (qat.opt.combinatorialproblem method)": [[256, "qat.opt.CombinatorialProblem.add_clause"]], "get_observable() (qat.opt.combinatorialproblem method)": [[256, "qat.opt.CombinatorialProblem.get_observable"]], "new_var() (qat.opt.combinatorialproblem method)": [[256, "qat.opt.CombinatorialProblem.new_var"]], "new_vars() (qat.opt.combinatorialproblem method)": [[256, "qat.opt.CombinatorialProblem.new_vars"]], "to_bqm() (qat.opt.combinatorialproblem method)": [[256, "qat.opt.CombinatorialProblem.to_bqm"]], "to_ising() (qat.opt.combinatorialproblem method)": [[256, "qat.opt.CombinatorialProblem.to_ising"]], "to_qubo() (qat.opt.combinatorialproblem method)": [[256, "qat.opt.CombinatorialProblem.to_qubo"]], "graphcolouring (class in qat.opt)": [[257, "qat.opt.GraphColouring"]], "get_best_parameters() (qat.opt.graphcolouring method)": [[257, "qat.opt.GraphColouring.get_best_parameters"]], "parse_result() (qat.opt.graphcolouring method)": [[257, "qat.opt.GraphColouring.parse_result"]], "produce_q_and_offset() (in module qat.opt.graph_colouring)": [[257, "qat.opt.graph_colouring.produce_q_and_offset"]], "graphpartitioning (class in qat.opt)": [[258, "qat.opt.GraphPartitioning"]], "get_best_parameters() (qat.opt.graphpartitioning method)": [[258, "qat.opt.GraphPartitioning.get_best_parameters"]], "parse_result() (qat.opt.graphpartitioning method)": [[258, "qat.opt.GraphPartitioning.parse_result"]], "produce_j_h_and_offset() (in module qat.opt.graph_partitioning)": [[258, "qat.opt.graph_partitioning.produce_j_h_and_offset"]], "ising (class in qat.opt)": [[259, "qat.opt.Ising"]], "dump() (qat.opt.ising method)": [[259, "qat.opt.Ising.dump"]], "from_thrift() (qat.opt.ising class method)": [[259, "qat.opt.Ising.from_thrift"]], "get_best_parameters() (qat.opt.ising method)": [[259, "qat.opt.Ising.get_best_parameters"]], "get_j_h_and_offset() (qat.opt.ising method)": [[259, "qat.opt.Ising.get_j_h_and_offset"]], "get_observable() (qat.opt.ising method)": [[259, "qat.opt.Ising.get_observable"]], "j_coupling_matrix (qat.opt.ising property)": [[259, "qat.opt.Ising.j_coupling_matrix"]], "load() (qat.opt.ising class method)": [[259, "qat.opt.Ising.load"]], "magnetic_field_h (qat.opt.ising property)": [[259, "qat.opt.Ising.magnetic_field_h"]], "to_bqm() (qat.opt.ising method)": [[259, "qat.opt.Ising.to_bqm"]], "to_combinatorial_problem() (qat.opt.ising method)": [[259, "qat.opt.Ising.to_combinatorial_problem"]], "to_job() (qat.opt.ising method)": [[259, "qat.opt.Ising.to_job"]], "to_qubo() (qat.opt.ising method)": [[259, "qat.opt.Ising.to_qubo"]], "kclique (class in qat.opt)": [[260, "qat.opt.KClique"]], "get_best_parameters() (qat.opt.kclique method)": [[260, "qat.opt.KClique.get_best_parameters"]], "parse_result() (qat.opt.kclique method)": [[260, "qat.opt.KClique.parse_result"]], "produce_q_and_offset() (in module qat.opt.k_clique)": [[260, "qat.opt.k_clique.produce_q_and_offset"]], "maxcut (class in qat.opt)": [[261, "qat.opt.MaxCut"]], "get_best_parameters() (qat.opt.maxcut method)": [[261, "qat.opt.MaxCut.get_best_parameters"]], "parse_result() (qat.opt.maxcut method)": [[261, "qat.opt.MaxCut.parse_result"]], "produce_j_h_and_offset() (in module qat.opt.max_cut)": [[261, "qat.opt.max_cut.produce_j_h_and_offset"]], "mixingfactory (class in qat.opt)": [[262, "qat.opt.MixingFactory"]], "bit_flip() (qat.opt.mixingfactory static method)": [[262, "qat.opt.MixingFactory.bit_flip"]], "bit_move() (qat.opt.mixingfactory static method)": [[262, "qat.opt.MixingFactory.bit_move"]], "qat.opt.mixing_factory": [[263, "module-qat.opt.mixing_factory"]], "independentannealing (class in qat.opt.mixing_factory)": [[264, "qat.opt.mixing_factory.IndependentAnnealing"]], "inject_initial_state() (qat.opt.mixing_factory.independentannealing method)": [[264, "qat.opt.mixing_factory.IndependentAnnealing.inject_initial_state"]], "initialstatebuilder (class in qat.opt.mixing_factory)": [[265, "qat.opt.mixing_factory.InitialStateBuilder"]], "inject_initial_state() (qat.opt.mixing_factory.initialstatebuilder method)": [[265, "qat.opt.mixing_factory.InitialStateBuilder.inject_initial_state"]], "simpleinitialstate (class in qat.opt.mixing_factory)": [[266, "qat.opt.mixing_factory.SimpleInitialState"]], "inject_initial_state() (qat.opt.mixing_factory.simpleinitialstate method)": [[266, "qat.opt.mixing_factory.SimpleInitialState.inject_initial_state"]], "qat.opt.results": [[267, "module-qat.opt.results"]], "combinatorialresult (class in qat.opt.results)": [[268, "qat.opt.results.CombinatorialResult"]], "graphpartitioningresult (class in qat.opt.results)": [[269, "qat.opt.results.GraphPartitioningResult"]], "display() (qat.opt.results.graphpartitioningresult method)": [[269, "qat.opt.results.GraphPartitioningResult.display"]], "kcliqueresult (class in qat.opt.results)": [[270, "qat.opt.results.KCliqueResult"]], "clique (qat.opt.results.kcliqueresult property)": [[270, "qat.opt.results.KCliqueResult.clique"]], "vertexcoverresult (class in qat.opt.results)": [[271, "qat.opt.results.VertexCoverResult"]], "cover (qat.opt.results.vertexcoverresult property)": [[271, "qat.opt.results.VertexCoverResult.cover"]], "numberpartitioning (class in qat.opt)": [[272, "qat.opt.NumberPartitioning"]], "get_best_parameters() (qat.opt.numberpartitioning method)": [[272, "qat.opt.NumberPartitioning.get_best_parameters"]], "produce_j_h_and_offset() (in module qat.opt.number_partitioning)": [[272, "qat.opt.number_partitioning.produce_j_h_and_offset"]], "qubo (class in qat.opt)": [[273, "qat.opt.QUBO"]], "get_best_parameters() (qat.opt.qubo method)": [[273, "qat.opt.QUBO.get_best_parameters"]], "get_observable() (qat.opt.qubo method)": [[273, "qat.opt.QUBO.get_observable"]], "get_q_and_offset() (qat.opt.qubo method)": [[273, "qat.opt.QUBO.get_q_and_offset"]], "q_matrix (qat.opt.qubo property)": [[273, "qat.opt.QUBO.q_matrix"]], "to_bqm() (qat.opt.qubo method)": [[273, "qat.opt.QUBO.to_bqm"]], "to_combinatorial_problem() (qat.opt.qubo method)": [[273, "qat.opt.QUBO.to_combinatorial_problem"]], "to_ising() (qat.opt.qubo method)": [[273, "qat.opt.QUBO.to_ising"]], "to_job() (qat.opt.qubo method)": [[273, "qat.opt.QUBO.to_job"]], "schedulegenerator (class in qat.opt.schedule_generator)": [[274, "qat.opt.schedule_generator.ScheduleGenerator"]], "annealing_job() (qat.opt.schedule_generator.schedulegenerator method)": [[274, "qat.opt.schedule_generator.ScheduleGenerator.annealing_job"]], "get_observable() (qat.opt.schedule_generator.schedulegenerator method)": [[274, "qat.opt.schedule_generator.ScheduleGenerator.get_observable"]], "var (class in qat.opt.boolexpr)": [[275, "qat.opt.boolexpr.Var"]], "evaluate() (qat.opt.boolexpr.var method)": [[275, "qat.opt.boolexpr.Var.evaluate"]], "get_observable() (qat.opt.boolexpr.var method)": [[275, "qat.opt.boolexpr.Var.get_observable"]], "get_variables() (qat.opt.boolexpr.var method)": [[275, "qat.opt.boolexpr.Var.get_variables"]], "index (qat.opt.boolexpr.var attribute)": [[275, "qat.opt.boolexpr.Var.index"]], "vertexcover (class in qat.opt)": [[276, "qat.opt.VertexCover"]], "get_best_parameters() (qat.opt.vertexcover method)": [[276, "qat.opt.VertexCover.get_best_parameters"]], "parse_result() (qat.opt.vertexcover method)": [[276, "qat.opt.VertexCover.parse_result"]], "produce_q_and_offset() (in module qat.opt.vertex_cover)": [[276, "qat.opt.vertex_cover.produce_q_and_offset"]], "qat.plugins": [[277, "module-qat.plugins"]], "abstractplugin (class in qat.plugins)": [[278, "qat.plugins.AbstractPlugin"]], "compile() (qat.plugins.abstractplugin method)": [[278, "qat.plugins.AbstractPlugin.compile"]], "do_post_processing() (qat.plugins.abstractplugin method)": [[278, "qat.plugins.AbstractPlugin.do_post_processing"]], "post_process() (qat.plugins.abstractplugin method)": [[278, "qat.plugins.AbstractPlugin.post_process"]], "serve() (qat.plugins.abstractplugin method)": [[278, "qat.plugins.AbstractPlugin.serve"]], "adaptvqeplugin (class in qat.plugins)": [[279, "qat.plugins.AdaptVQEPlugin"]], "compile() (qat.plugins.adaptvqeplugin method)": [[279, "qat.plugins.AdaptVQEPlugin.compile"]], "circuitinliner (class in qat.plugins)": [[280, "qat.plugins.CircuitInliner"]], "compile() (qat.plugins.circuitinliner method)": [[280, "qat.plugins.CircuitInliner.compile"]], "costfunctionplugin (class in qat.plugins)": [[281, "qat.plugins.CostFunctionPlugin"]], "compile() (qat.plugins.costfunctionplugin method)": [[281, "qat.plugins.CostFunctionPlugin.compile"]], "display (class in qat.plugins)": [[282, "qat.plugins.Display"]], "compile() (qat.plugins.display method)": [[282, "qat.plugins.Display.compile"]], "gradientdescentoptimizer (class in qat.plugins)": [[283, "qat.plugins.GradientDescentOptimizer"]], "compile() (qat.plugins.gradientdescentoptimizer method)": [[283, "qat.plugins.GradientDescentOptimizer.compile"]], "junction (class in qat.plugins)": [[284, "qat.plugins.Junction"]], "execute() (qat.plugins.junction method)": [[284, "qat.plugins.Junction.execute"]], "run() (qat.plugins.junction method)": [[284, "qat.plugins.Junction.run"]], "multiplelaunchesanalyzer (class in qat.plugins)": [[285, "qat.plugins.MultipleLaunchesAnalyzer"]], "compile() (qat.plugins.multiplelaunchesanalyzer method)": [[285, "qat.plugins.MultipleLaunchesAnalyzer.compile"]], "observablesplitter (class in qat.plugins)": [[286, "qat.plugins.ObservableSplitter"]], "compile() (qat.plugins.observablesplitter method)": [[286, "qat.plugins.ObservableSplitter.compile"]], "optimizer (class in qat.plugins)": [[287, "qat.plugins.Optimizer"]], "evaluate() (qat.plugins.optimizer method)": [[287, "qat.plugins.Optimizer.evaluate"]], "optimize() (qat.plugins.optimizer method)": [[287, "qat.plugins.Optimizer.optimize"]], "psominimizeplugin (class in qat.plugins)": [[288, "qat.plugins.PSOMinimizePlugin"]], "compile() (qat.plugins.psominimizeplugin method)": [[288, "qat.plugins.PSOMinimizePlugin.compile"]], "quameleonplugin (class in qat.plugins)": [[289, "qat.plugins.QuameleonPlugin"]], "compile() (qat.plugins.quameleonplugin method)": [[289, "qat.plugins.QuameleonPlugin.compile"]], "remoteplugin (class in qat.plugins)": [[290, "qat.plugins.RemotePlugin"]], "compile() (qat.plugins.remoteplugin method)": [[290, "qat.plugins.RemotePlugin.compile"]], "scipyminimizeplugin (class in qat.plugins)": [[291, "qat.plugins.ScipyMinimizePlugin"]], "compile() (qat.plugins.scipyminimizeplugin method)": [[291, "qat.plugins.ScipyMinimizePlugin.compile"]], "set_options() (qat.plugins.scipyminimizeplugin method)": [[291, "qat.plugins.ScipyMinimizePlugin.set_options"]], "seqoptim (class in qat.plugins)": [[292, "qat.plugins.SeqOptim"]], "compile() (qat.plugins.seqoptim method)": [[292, "qat.plugins.SeqOptim.compile"]], "spsaminimizeplugin (class in qat.plugins)": [[293, "qat.plugins.SPSAMinimizePlugin"]], "compile() (qat.plugins.spsaminimizeplugin method)": [[293, "qat.plugins.SPSAMinimizePlugin.compile"]], "transformobservable (class in qat.plugins)": [[294, "qat.plugins.TransformObservable"]], "compile() (qat.plugins.transformobservable method)": [[294, "qat.plugins.TransformObservable.compile"]], "zeronoiseextrapolator (class in qat.plugins)": [[295, "qat.plugins.ZeroNoiseExtrapolator"]], "compile() (qat.plugins.zeronoiseextrapolator method)": [[295, "qat.plugins.ZeroNoiseExtrapolator.compile"]], "qat.qpus": [[296, "module-qat.qpus"]], "clinalg (class in qat.qpus)": [[297, "qat.qpus.CLinalg"]], "submit() (qat.qpus.clinalg method)": [[297, "qat.qpus.CLinalg.submit"]], "pylinalg (class in qat.qpus)": [[298, "qat.qpus.PyLinalg"]], "serve() (qat.qpus.pylinalg method)": [[298, "qat.qpus.PyLinalg.serve"]], "submit() (qat.qpus.pylinalg method)": [[298, "qat.qpus.PyLinalg.submit"]], "submit_job() (qat.qpus.pylinalg method)": [[298, "qat.qpus.PyLinalg.submit_job"]], "simulatedannealing (class in qat.qpus)": [[299, "qat.qpus.SimulatedAnnealing"]], "extract_j_and_h_from_obs() (in module qat.simulated_annealing.service)": [[299, "qat.simulated_annealing.service.extract_j_and_h_from_obs"]], "submit_job() (qat.qpus.simulatedannealing method)": [[299, "qat.qpus.SimulatedAnnealing.submit_job"]], "classicalqpu (class in qat.qpus)": [[300, "qat.qpus.ClassicalQPU"]], "get_current_qpu() (in module qat.qpus)": [[301, "qat.qpus.get_current_qpu"]], "get_default_qpu() (in module qat.qpus)": [[302, "qat.qpus.get_default_qpu"]], "qpuhandler (class in qat.qpus)": [[303, "qat.qpus.QPUHandler"]], "apply_resource_consumption_limits() (qat.qpus.qpuhandler method)": [[303, "qat.qpus.QPUHandler.apply_resource_consumption_limits"]], "estimate_resources_for_batch() (qat.qpus.qpuhandler method)": [[303, "qat.qpus.QPUHandler.estimate_resources_for_batch"]], "get_specs() (qat.qpus.qpuhandler method)": [[303, "qat.qpus.QPUHandler.get_specs"]], "serve() (qat.qpus.qpuhandler method)": [[303, "qat.qpus.QPUHandler.serve"]], "submit() (qat.qpus.qpuhandler method)": [[303, "qat.qpus.QPUHandler.submit"]], "submit_job() (qat.qpus.qpuhandler method)": [[303, "qat.qpus.QPUHandler.submit_job"]], "remoteqpu (class in qat.qpus)": [[304, "qat.qpus.RemoteQPU"]], "qat.quops": [[305, "module-qat.quops"]], "qat.quops.metrics": [[305, "module-qat.quops.metrics"]], "are_equal_up_to_phase() (in module qat.quops.math_util)": [[306, "qat.quops.math_util.are_equal_up_to_phase"]], "channelrepresentations (class in qat.quops)": [[307, "qat.quops.ChannelRepresentations"]], "convert_density_mat_to_pauli_vec() (in module qat.quops.math_util)": [[308, "qat.quops.math_util.convert_density_mat_to_pauli_vec"]], "convert_pauli_vec_to_density_mat() (in module qat.quops.math_util)": [[309, "qat.quops.math_util.convert_pauli_vec_to_density_mat"]], "get_average_process_fidelity() (in module qat.quops.metrics)": [[310, "qat.quops.metrics.get_average_process_fidelity"]], "get_diamond_norm() (in module qat.quops.metrics)": [[311, "qat.quops.metrics.get_diamond_norm"]], "get_entanglement_process_fidelity() (in module qat.quops.metrics)": [[312, "qat.quops.metrics.get_entanglement_process_fidelity"]], "get_process_distance() (in module qat.quops.metrics)": [[313, "qat.quops.metrics.get_process_distance"]], "get_state_fidelity() (in module qat.quops.metrics)": [[314, "qat.quops.metrics.get_state_fidelity"]], "get_trace_distance() (in module qat.quops.metrics)": [[315, "qat.quops.metrics.get_trace_distance"]], "is_completely_positive() (in module qat.quops)": [[316, "qat.quops.is_completely_positive"]], "is_trace_preserving() (in module qat.quops)": [[317, "qat.quops.is_trace_preserving"]], "is_trace_reducing() (in module qat.quops)": [[318, "qat.quops.is_trace_reducing"]], "is_unital() (in module qat.quops)": [[319, "qat.quops.is_unital"]], "make_avg_fid_equiv_depol_channel() (in module qat.quops)": [[320, "qat.quops.make_avg_fid_equiv_depol_channel"]], "make_depolarizing_channel() (in module qat.quops)": [[321, "qat.quops.make_depolarizing_channel"]], "make_generalized_amplitude_damping() (in module qat.quops)": [[322, "qat.quops.make_generalized_amplitude_damping"]], "make_pauli_matrix_basis() (in module qat.quops.math_util)": [[323, "qat.quops.math_util.make_pauli_matrix_basis"]], "make_standard_matrix_basis() (in module qat.quops.math_util)": [[324, "qat.quops.math_util.make_standard_matrix_basis"]], "make_standard_vector_basis() (in module qat.quops.math_util)": [[325, "qat.quops.math_util.make_standard_vector_basis"]], "multikron() (in module qat.quops.math_util)": [[326, "qat.quops.math_util.multikron"]], "parametricamplitudedamping (class in qat.quops)": [[327, "qat.quops.ParametricAmplitudeDamping"]], "t_1 (qat.quops.parametricamplitudedamping attribute)": [[327, "qat.quops.ParametricAmplitudeDamping.T_1"]], "name (qat.quops.parametricamplitudedamping attribute)": [[327, "qat.quops.ParametricAmplitudeDamping.name"]], "prob() (qat.quops.parametricamplitudedamping method)": [[327, "qat.quops.ParametricAmplitudeDamping.prob"]], "parametricgatenoise (class in qat.quops)": [[328, "qat.quops.ParametricGateNoise"]], "parametricpuredephasing (class in qat.quops)": [[329, "qat.quops.ParametricPureDephasing"]], "t_phi (qat.quops.parametricpuredephasing attribute)": [[329, "qat.quops.ParametricPureDephasing.T_phi"]], "name (qat.quops.parametricpuredephasing attribute)": [[329, "qat.quops.ParametricPureDephasing.name"]], "prob() (qat.quops.parametricpuredephasing method)": [[329, "qat.quops.ParametricPureDephasing.prob"]], "ptilde() (qat.quops.parametricpuredephasing method)": [[329, "qat.quops.ParametricPureDephasing.ptilde"]], "parametricquantumchannel (class in qat.quops)": [[330, "qat.quops.ParametricQuantumChannel"]], "partial_trace() (in module qat.quops.math_util)": [[331, "qat.quops.math_util.partial_trace"]], "quantumchannel (class in qat.quops)": [[332, "qat.quops.QuantumChannel"]], "quantumchannelchi (class in qat.quops)": [[333, "qat.quops.QuantumChannelChi"]], "apply_to() (qat.quops.quantumchannelchi method)": [[333, "qat.quops.QuantumChannelChi.apply_to"]], "arity (qat.quops.quantumchannelchi attribute)": [[333, "qat.quops.QuantumChannelChi.arity"]], "matrix (qat.quops.quantumchannelchi attribute)": [[333, "qat.quops.QuantumChannelChi.matrix"]], "matrix_basis (qat.quops.quantumchannelchi attribute)": [[333, "qat.quops.QuantumChannelChi.matrix_basis"]], "name (qat.quops.quantumchannelchi attribute)": [[333, "qat.quops.QuantumChannelChi.name"]], "to_kraus() (qat.quops.quantumchannelchi method)": [[333, "qat.quops.QuantumChannelChi.to_kraus"]], "quantumchannelchoi (class in qat.quops)": [[334, "qat.quops.QuantumChannelChoi"]], "arity (qat.quops.quantumchannelchoi attribute)": [[334, "qat.quops.QuantumChannelChoi.arity"]], "matrix (qat.quops.quantumchannelchoi attribute)": [[334, "qat.quops.QuantumChannelChoi.matrix"]], "name (qat.quops.quantumchannelchoi attribute)": [[334, "qat.quops.QuantumChannelChoi.name"]], "to_kraus() (qat.quops.quantumchannelchoi method)": [[334, "qat.quops.QuantumChannelChoi.to_kraus"]], "to_ptm() (qat.quops.quantumchannelchoi method)": [[334, "qat.quops.QuantumChannelChoi.to_ptm"]], "quantumchannelkraus (class in qat.quops)": [[335, "qat.quops.QuantumChannelKraus"]], "apply_to() (qat.quops.quantumchannelkraus method)": [[335, "qat.quops.QuantumChannelKraus.apply_to"]], "apply_to_vector() (qat.quops.quantumchannelkraus method)": [[335, "qat.quops.QuantumChannelKraus.apply_to_vector"]], "kraus_operators (qat.quops.quantumchannelkraus attribute)": [[335, "qat.quops.QuantumChannelKraus.kraus_operators"]], "kraus_rank (qat.quops.quantumchannelkraus attribute)": [[335, "qat.quops.QuantumChannelKraus.kraus_rank"]], "kraus_rank() (qat.quops.quantumchannelkraus method)": [[335, "id0"]], "name (qat.quops.quantumchannelkraus attribute)": [[335, "qat.quops.QuantumChannelKraus.name"]], "to_chi() (qat.quops.quantumchannelkraus method)": [[335, "qat.quops.QuantumChannelKraus.to_chi"]], "to_choi() (qat.quops.quantumchannelkraus method)": [[335, "qat.quops.QuantumChannelKraus.to_choi"]], "to_ptm() (qat.quops.quantumchannelkraus method)": [[335, "qat.quops.QuantumChannelKraus.to_ptm"]], "quantumchannelptm (class in qat.quops)": [[336, "qat.quops.QuantumChannelPTM"]], "apply_to() (qat.quops.quantumchannelptm method)": [[336, "qat.quops.QuantumChannelPTM.apply_to"]], "arity (qat.quops.quantumchannelptm attribute)": [[336, "qat.quops.QuantumChannelPTM.arity"]], "matrix (qat.quops.quantumchannelptm attribute)": [[336, "qat.quops.QuantumChannelPTM.matrix"]], "matrix (qat.quops.quantumchannelptm property)": [[336, "id0"]], "name (qat.quops.quantumchannelptm attribute)": [[336, "qat.quops.QuantumChannelPTM.name"]], "ptm (qat.quops.quantumchannelptm property)": [[336, "qat.quops.QuantumChannelPTM.ptm"]], "tensor (qat.quops.quantumchannelptm property)": [[336, "qat.quops.QuantumChannelPTM.tensor"]], "to_choi() (qat.quops.quantumchannelptm method)": [[336, "qat.quops.QuantumChannelPTM.to_choi"]], "to_kraus() (qat.quops.quantumchannelptm method)": [[336, "qat.quops.QuantumChannelPTM.to_kraus"]]}})