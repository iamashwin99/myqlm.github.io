Search.setIndex({"docnames": ["01_getting_started", "01_getting_started/02_write", "01_getting_started/03_execute", "01_getting_started/04_variational", "01_getting_started/:myqlm:01_install", "01_getting_started/:myqlm:license", "01_getting_started/:myqlm:macos", "02_user_guide", "02_user_guide/01_write", "02_user_guide/01_write/01_digital_circuit", "02_user_guide/01_write/01_digital_circuit/01_quantum_gates", "02_user_guide/01_write/01_digital_circuit/02_variational", "02_user_guide/01_write/01_digital_circuit/03_program", "02_user_guide/01_write/01_digital_circuit/04_routines", "02_user_guide/01_write/01_digital_circuit/04_routines/01_naming_routines", "02_user_guide/01_write/01_digital_circuit/04_routines/02_ancillae", "02_user_guide/01_write/01_digital_circuit/04_routines/03_oracles", "02_user_guide/01_write/01_digital_circuit/05_aqasm", "02_user_guide/01_write/02_analog_schedule", "02_user_guide/01_write/02_analog_schedule/01_building_schedules", "02_user_guide/01_write/02_analog_schedule/02_manip_schedules", "02_user_guide/01_write/02_analog_schedule/03_an_jobs", "02_user_guide/01_write/03_annealing_problems", "02_user_guide/01_write/03_annealing_problems/01_ising", "02_user_guide/01_write/03_annealing_problems/02_qubo", "02_user_guide/01_write/03_annealing_problems/03_comb_prob", "02_user_guide/01_write/03_observable", "02_user_guide/02_execute", "02_user_guide/02_execute/01_job", "02_user_guide/02_execute/01_job/01_sample_job", "02_user_guide/02_execute/01_job/02_observable_job", "02_user_guide/02_execute/01_job/03_automated_batch_generation", "02_user_guide/02_execute/02_result", "02_user_guide/02_execute/03_qpu", "02_user_guide/02_execute/03_qpu/03_annealing", "02_user_guide/02_execute/03_qpu/04_custom_qpu", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/clinalg", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/pylinalg", "02_user_guide/02_execute/04_plugin", "02_user_guide/02_execute/04_plugin/01_custom_plugin", "02_user_guide/02_execute/04_plugin/02_custom_junction", "02_user_guide/02_execute/04_plugin/03_hardware_specs", "02_user_guide/02_execute/05_variational", "04_api_reference", "04_api_reference/module_qat", "04_api_reference/module_qat/:myqlm:module_interop", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/cirq_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/qlm_to_cirq", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm/oqasmparser", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmengine", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmparser", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquil_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquilqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/qlm_to_pyquil", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/asyncbackendtoqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/backendtoqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskit_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitjob", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitruntimeqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qlm_to_qiskit", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qputobackend", "04_api_reference/module_qat/:myqlm:module_pylinalg", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/mat2nparray", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/measure", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/project", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/raise_break", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/reset", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/simulate", "04_api_reference/module_qat/module_comm", "04_api_reference/module_qat/module_comm/module_datamodel", "04_api_reference/module_qat/module_comm/module_datamodel/gatedefinition", "04_api_reference/module_qat/module_comm/module_datamodel/op", "04_api_reference/module_qat/module_comm/module_exceptions", "04_api_reference/module_qat/module_comm/module_exceptions/errortype", "04_api_reference/module_qat/module_comm/module_exceptions/pluginexception", "04_api_reference/module_qat/module_comm/module_exceptions/qpuexception", "04_api_reference/module_qat/module_comm/module_resource", "04_api_reference/module_qat/module_comm/module_resource/allocationmodel", "04_api_reference/module_qat/module_comm/module_resource/device", "04_api_reference/module_qat/module_comm/module_resource/resourcemodel", "04_api_reference/module_qat/module_comm/module_shared", "04_api_reference/module_qat/module_comm/module_shared/intermediatemeasurement", "04_api_reference/module_qat/module_comm/module_shared/processingtype", "04_api_reference/module_qat/module_core", "04_api_reference/module_qat/module_core/aggregate_data", "04_api_reference/module_qat/module_core/assert_plugin", "04_api_reference/module_qat/module_core/assert_qpu", "04_api_reference/module_qat/module_core/batch", "04_api_reference/module_qat/module_core/batchresult", "04_api_reference/module_qat/module_core/circuit", "04_api_reference/module_qat/module_core/display", "04_api_reference/module_qat/module_core/evaluate", "04_api_reference/module_qat/module_core/hardwarespecs", "04_api_reference/module_qat/module_core/job", "04_api_reference/module_qat/module_core/module_application", "04_api_reference/module_qat/module_core/module_application/application", "04_api_reference/module_qat/module_core/module_application/remoteapplication", "04_api_reference/module_qat/module_core/module_circuit_builder", "04_api_reference/module_qat/module_core/module_circuit_builder/default_gate_set", "04_api_reference/module_qat/module_core/module_circuit_builder/get_param_generator", "04_api_reference/module_qat/module_core/module_circuit_builder/get_predef_generator", "04_api_reference/module_qat/module_core/module_circuit_builder/variablenamenotavailable", "04_api_reference/module_qat/module_core/module_gate_set", "04_api_reference/module_qat/module_core/module_gate_set/gateset", "04_api_reference/module_qat/module_core/module_gate_set/gatesignature", "04_api_reference/module_qat/module_core/module_gate_set/gatesyntaxredefinition", "04_api_reference/module_qat/module_core/module_qpu", "04_api_reference/module_qat/module_core/module_qpu/commonqpu", "04_api_reference/module_qat/module_core/module_spins", "04_api_reference/module_qat/module_core/module_spins/integer_to_spins", "04_api_reference/module_qat/module_core/module_spins/spins_to_integer", "04_api_reference/module_qat/module_core/module_variables", "04_api_reference/module_qat/module_core/module_variables/arithexpression", "04_api_reference/module_qat/module_core/module_variables/symbol", "04_api_reference/module_qat/module_core/observable", "04_api_reference/module_qat/module_core/parameter", "04_api_reference/module_qat/module_core/plot_in_notebook", "04_api_reference/module_qat/module_core/result", "04_api_reference/module_qat/module_core/sample", "04_api_reference/module_qat/module_core/schedule", "04_api_reference/module_qat/module_core/state", "04_api_reference/module_qat/module_core/term", "04_api_reference/module_qat/module_core/topology", "04_api_reference/module_qat/module_core/topologytype", "04_api_reference/module_qat/module_core/variable", "04_api_reference/module_qat/module_devices", "04_api_reference/module_qat/module_devices/alltoall", "04_api_reference/module_qat/module_devices/google_sycamore", "04_api_reference/module_qat/module_devices/griddevice", "04_api_reference/module_qat/module_devices/ibm_burlington", "04_api_reference/module_qat/module_devices/ibm_johannesburg", "04_api_reference/module_qat/module_devices/ibm_melbourne", "04_api_reference/module_qat/module_devices/ibm_rueschlikon", "04_api_reference/module_qat/module_devices/ibm_singapore", "04_api_reference/module_qat/module_devices/ibm_tokyo", "04_api_reference/module_qat/module_devices/ibm_yorktown", "04_api_reference/module_qat/module_devices/linedevice", "04_api_reference/module_qat/module_devices/rigetti_agave", "04_api_reference/module_qat/module_devices/rigetti_aspen", "04_api_reference/module_qat/module_devices/squaregriddevice", "04_api_reference/module_qat/module_devices/zuchongzhi", "04_api_reference/module_qat/module_fermion", "04_api_reference/module_qat/module_fermion/apply_quantum_subspace_expansion", "04_api_reference/module_qat/module_fermion/compute_active_space_integrals", "04_api_reference/module_qat/module_fermion/construct_ucc_ansatz", "04_api_reference/module_qat/module_fermion/convert_to_h_integrals", "04_api_reference/module_qat/module_fermion/electronicstructurehamiltonian", "04_api_reference/module_qat/module_fermion/fermionichamiltonian", "04_api_reference/module_qat/module_fermion/get_cluster_ops", "04_api_reference/module_qat/module_fermion/get_hf_ket", "04_api_reference/module_qat/module_fermion/guess_init_params", "04_api_reference/module_qat/module_fermion/make_anderson_model", "04_api_reference/module_qat/module_fermion/make_compressed_ldca_circ", "04_api_reference/module_qat/module_fermion/make_embedded_model", "04_api_reference/module_qat/module_fermion/make_general_hwe_circ", "04_api_reference/module_qat/module_fermion/make_hubbard_model", "04_api_reference/module_qat/module_fermion/make_ldca_circ", "04_api_reference/module_qat/module_fermion/make_mr_circ", "04_api_reference/module_qat/module_fermion/make_mrep_circ", "04_api_reference/module_qat/module_fermion/make_shallow_circ", "04_api_reference/module_qat/module_fermion/make_trotterisation_routine", "04_api_reference/module_qat/module_fermion/molecularhamiltonian", "04_api_reference/module_qat/module_fermion/moleculeinfo", "04_api_reference/module_qat/module_fermion/perform_phase_estimation", "04_api_reference/module_qat/module_fermion/perform_pyscf_computation", "04_api_reference/module_qat/module_fermion/select_active_orbitals", "04_api_reference/module_qat/module_fermion/spinhamiltonian", "04_api_reference/module_qat/module_fermion/transform_integrals_to_new_basis", "04_api_reference/module_qat/module_fermion/transform_to_bk_basis", "04_api_reference/module_qat/module_fermion/transform_to_jw_basis", "04_api_reference/module_qat/module_fermion/transform_to_parity_basis", "04_api_reference/module_qat/module_generators", "04_api_reference/module_qat/module_generators/abstractgenerator", "04_api_reference/module_qat/module_generators/combinatorialoptimizergenerator", "04_api_reference/module_qat/module_generators/graphcolouringgenerator", "04_api_reference/module_qat/module_generators/graphpartitioninggenerator", "04_api_reference/module_qat/module_generators/kcliquegenerator", "04_api_reference/module_qat/module_generators/maxcutgenerator", "04_api_reference/module_qat/module_generators/remotebatchgenerator", "04_api_reference/module_qat/module_generators/vertexcovergenerator", "04_api_reference/module_qat/module_hardware", "04_api_reference/module_qat/module_hardware/defaultgatesspecification", "04_api_reference/module_qat/module_hardware/defaulthardwaremodel", "04_api_reference/module_qat/module_hardware/gatesspecification", "04_api_reference/module_qat/module_hardware/hardwaremodel", "04_api_reference/module_qat/module_hardware/make_depolarizing_hardware_model", "04_api_reference/module_qat/module_lang", "04_api_reference/module_qat/module_lang/abstractgate", "04_api_reference/module_qat/module_lang/amplification_step", "04_api_reference/module_qat/module_lang/boolformula", "04_api_reference/module_qat/module_lang/build_gate", "04_api_reference/module_qat/module_lang/cbit", "04_api_reference/module_qat/module_lang/cregister", "04_api_reference/module_qat/module_lang/gate", "04_api_reference/module_qat/module_lang/generate_gate_set", "04_api_reference/module_qat/module_lang/grover_diffusion", "04_api_reference/module_qat/module_lang/householder", "04_api_reference/module_qat/module_lang/kptree", "04_api_reference/module_qat/module_lang/linker", "04_api_reference/module_qat/module_lang/module_arithmetic", "04_api_reference/module_qat/module_lang/module_arithmetic/add_const_mod", "04_api_reference/module_qat/module_lang/module_arithmetic/add_mod", "04_api_reference/module_qat/module_lang/module_arithmetic/modular_exp", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const_mod", "04_api_reference/module_qat/module_lang/module_classarith", "04_api_reference/module_qat/module_lang/module_classarith/add", "04_api_reference/module_qat/module_lang/module_classarith/add_const", "04_api_reference/module_qat/module_lang/module_classarith/cuccaro_add", "04_api_reference/module_qat/module_lang/module_qftarith", "04_api_reference/module_qat/module_lang/module_qftarith/add", "04_api_reference/module_qat/module_lang/module_qftarith/add_const", "04_api_reference/module_qat/module_lang/module_qftarith/mult", "04_api_reference/module_qat/module_lang/module_qftarith/mult_const", "04_api_reference/module_qat/module_lang/module_qftarith/qft", "04_api_reference/module_qat/module_lang/paramgate", "04_api_reference/module_qat/module_lang/phase_estimation", "04_api_reference/module_qat/module_lang/program", "04_api_reference/module_qat/module_lang/qarithexp", "04_api_reference/module_qat/module_lang/qbit", "04_api_reference/module_qat/module_lang/qbool", "04_api_reference/module_qat/module_lang/qboolarray", "04_api_reference/module_qat/module_lang/qclause", "04_api_reference/module_qat/module_lang/qcompexp", "04_api_reference/module_qat/module_lang/qfunc", "04_api_reference/module_qat/module_lang/qint", "04_api_reference/module_qat/module_lang/qregister", "04_api_reference/module_qat/module_lang/qrout", "04_api_reference/module_qat/module_lang/qroutine", "04_api_reference/module_qat/module_lang/quantum_counting", "04_api_reference/module_qat/module_lang/uniform_distribution", "04_api_reference/module_qat/module_opt", "04_api_reference/module_qat/module_opt/ansatzfactory", "04_api_reference/module_qat/module_opt/bilp", "04_api_reference/module_qat/module_opt/circuitgenerator", "04_api_reference/module_qat/module_opt/clause", "04_api_reference/module_qat/module_opt/combinatorialproblem", "04_api_reference/module_qat/module_opt/graphcolouring", "04_api_reference/module_qat/module_opt/graphpartitioning", "04_api_reference/module_qat/module_opt/ising", "04_api_reference/module_qat/module_opt/kclique", "04_api_reference/module_qat/module_opt/maxcut", "04_api_reference/module_qat/module_opt/mixingfactory", "04_api_reference/module_qat/module_opt/module_mixing_factory", "04_api_reference/module_qat/module_opt/module_mixing_factory/independentannealing", "04_api_reference/module_qat/module_opt/module_mixing_factory/initialstatebuilder", "04_api_reference/module_qat/module_opt/module_mixing_factory/simpleinitialstate", "04_api_reference/module_qat/module_opt/module_results", "04_api_reference/module_qat/module_opt/module_results/combinatorialresult", "04_api_reference/module_qat/module_opt/module_results/graphpartitioningresult", "04_api_reference/module_qat/module_opt/module_results/kcliqueresult", "04_api_reference/module_qat/module_opt/module_results/vertexcoverresult", "04_api_reference/module_qat/module_opt/numberpartitioning", "04_api_reference/module_qat/module_opt/qubo", "04_api_reference/module_qat/module_opt/schedulegenerator", "04_api_reference/module_qat/module_opt/var", "04_api_reference/module_qat/module_opt/vertexcover", "04_api_reference/module_qat/module_plugins", "04_api_reference/module_qat/module_plugins/abstractplugin", "04_api_reference/module_qat/module_plugins/adaptvqeplugin", "04_api_reference/module_qat/module_plugins/circuitinliner", "04_api_reference/module_qat/module_plugins/costfunctionplugin", "04_api_reference/module_qat/module_plugins/display", "04_api_reference/module_qat/module_plugins/gradientdescentoptimizer", "04_api_reference/module_qat/module_plugins/junction", "04_api_reference/module_qat/module_plugins/multiplelaunchesanalyzer", "04_api_reference/module_qat/module_plugins/observablesplitter", "04_api_reference/module_qat/module_plugins/optimizer", "04_api_reference/module_qat/module_plugins/psominimizeplugin", "04_api_reference/module_qat/module_plugins/quameleonplugin", "04_api_reference/module_qat/module_plugins/remoteplugin", "04_api_reference/module_qat/module_plugins/scipyminimizeplugin", "04_api_reference/module_qat/module_plugins/seqoptim", "04_api_reference/module_qat/module_plugins/spsaminimizeplugin", "04_api_reference/module_qat/module_plugins/transformobservable", "04_api_reference/module_qat/module_plugins/zeronoiseextrapolator", "04_api_reference/module_qat/module_qpus", "04_api_reference/module_qat/module_qpus/:myqlm:clinalg", "04_api_reference/module_qat/module_qpus/:myqlm:pylinalg", "04_api_reference/module_qat/module_qpus/:myqlm:simulatedannealing", "04_api_reference/module_qat/module_qpus/classicalqpu", "04_api_reference/module_qat/module_qpus/get_current_qpu", "04_api_reference/module_qat/module_qpus/get_default_qpu", "04_api_reference/module_qat/module_qpus/qpuhandler", "04_api_reference/module_qat/module_qpus/remoteqpu", "04_api_reference/module_qat/module_quops", "04_api_reference/module_qat/module_quops/are_equal_up_to_phase", "04_api_reference/module_qat/module_quops/channelrepresentations", "04_api_reference/module_qat/module_quops/convert_density_mat_to_pauli_vec", "04_api_reference/module_qat/module_quops/convert_pauli_vec_to_density_mat", "04_api_reference/module_qat/module_quops/get_average_process_fidelity", "04_api_reference/module_qat/module_quops/get_diamond_norm", "04_api_reference/module_qat/module_quops/get_entanglement_process_fidelity", "04_api_reference/module_qat/module_quops/get_process_distance", "04_api_reference/module_qat/module_quops/get_state_fidelity", "04_api_reference/module_qat/module_quops/get_trace_distance", "04_api_reference/module_qat/module_quops/is_completely_positive", "04_api_reference/module_qat/module_quops/is_trace_preserving", "04_api_reference/module_qat/module_quops/is_trace_reducing", "04_api_reference/module_qat/module_quops/is_unital", "04_api_reference/module_qat/module_quops/make_avg_fid_equiv_depol_channel", "04_api_reference/module_qat/module_quops/make_depolarizing_channel", "04_api_reference/module_qat/module_quops/make_generalized_amplitude_damping", "04_api_reference/module_qat/module_quops/make_pauli_matrix_basis", "04_api_reference/module_qat/module_quops/make_standard_matrix_basis", "04_api_reference/module_qat/module_quops/make_standard_vector_basis", "04_api_reference/module_qat/module_quops/multikron", "04_api_reference/module_qat/module_quops/parametricamplitudedamping", "04_api_reference/module_qat/module_quops/parametricgatenoise", "04_api_reference/module_qat/module_quops/parametricpuredephasing", "04_api_reference/module_qat/module_quops/parametricquantumchannel", "04_api_reference/module_qat/module_quops/partial_trace", "04_api_reference/module_qat/module_quops/quantumchannel", "04_api_reference/module_qat/module_quops/quantumchannelchi", "04_api_reference/module_qat/module_quops/quantumchannelchoi", "04_api_reference/module_qat/module_quops/quantumchannelkraus", "04_api_reference/module_qat/module_quops/quantumchannelptm", "05_demos", "07_release_notes", ":myqlm:06_support", ":myqlm:interoperability", ":myqlm:interoperability/01_qiskit", ":myqlm:interoperability/02_pyquil", ":myqlm:interoperability/03_cirq", ":myqlm:interoperability/04_projectq", ":myqlm:interoperability/05_openqasm", "combinatorial_optim_applic", "combinatorial_optim_applic/01_np_probs_for_annealing", "combinatorial_optim_applic/01_np_probs_for_annealing/bilp_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_colouring_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_partitioning_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/kclique_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/max_cut_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/number_partitioning_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/vertex_cover_ann_prob", "combinatorial_optim_applic/02_qaoa", "combinatorial_optim_applic/03_qa", "combinatorial_optim_applic/04_np_problem_generators", "combinatorial_optim_applic/04_np_problem_generators/01_max_cut_generator", "combinatorial_optim_applic/04_np_problem_generators/02_graph_partitioning_generator", "combinatorial_optim_applic/04_np_problem_generators/03_kclique_generator", "combinatorial_optim_applic/04_np_problem_generators/04_vertex_cover_generator", "combinatorial_optim_applic/04_np_problem_generators/05_graph_colouring_generator", "fermion", "fermion/01_hamiltonians", "fermion/02_algorithms", "fermion/03_plugins", "fermion/04_migrating", "index", "interoperability_annealing"], "filenames": ["01_getting_started.rst", "01_getting_started/02_write.rst", "01_getting_started/03_execute.rst", "01_getting_started/04_variational.rst", "01_getting_started/:myqlm:01_install.rst", "01_getting_started/:myqlm:license.rst", "01_getting_started/:myqlm:macos.rst", "02_user_guide.rst", "02_user_guide/01_write.rst", "02_user_guide/01_write/01_digital_circuit.rst", "02_user_guide/01_write/01_digital_circuit/01_quantum_gates.rst", "02_user_guide/01_write/01_digital_circuit/02_variational.rst", "02_user_guide/01_write/01_digital_circuit/03_program.rst", "02_user_guide/01_write/01_digital_circuit/04_routines.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/01_naming_routines.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/02_ancillae.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/03_oracles.rst", "02_user_guide/01_write/01_digital_circuit/05_aqasm.rst", "02_user_guide/01_write/02_analog_schedule.rst", "02_user_guide/01_write/02_analog_schedule/01_building_schedules.rst", "02_user_guide/01_write/02_analog_schedule/02_manip_schedules.rst", "02_user_guide/01_write/02_analog_schedule/03_an_jobs.rst", "02_user_guide/01_write/03_annealing_problems.rst", "02_user_guide/01_write/03_annealing_problems/01_ising.rst", "02_user_guide/01_write/03_annealing_problems/02_qubo.rst", "02_user_guide/01_write/03_annealing_problems/03_comb_prob.rst", "02_user_guide/01_write/03_observable.rst", "02_user_guide/02_execute.rst", "02_user_guide/02_execute/01_job.rst", "02_user_guide/02_execute/01_job/01_sample_job.rst", "02_user_guide/02_execute/01_job/02_observable_job.rst", "02_user_guide/02_execute/01_job/03_automated_batch_generation.rst", "02_user_guide/02_execute/02_result.rst", "02_user_guide/02_execute/03_qpu.rst", "02_user_guide/02_execute/03_qpu/03_annealing.rst", "02_user_guide/02_execute/03_qpu/04_custom_qpu.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/clinalg.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/pylinalg.rst", "02_user_guide/02_execute/04_plugin.rst", "02_user_guide/02_execute/04_plugin/01_custom_plugin.rst", "02_user_guide/02_execute/04_plugin/02_custom_junction.rst", "02_user_guide/02_execute/04_plugin/03_hardware_specs.rst", "02_user_guide/02_execute/05_variational.rst", "04_api_reference.rst", "04_api_reference/module_qat.rst", "04_api_reference/module_qat/:myqlm:module_interop.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/cirq_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/qlm_to_cirq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm/oqasmparser.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmengine.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmparser.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquil_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquilqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/qlm_to_pyquil.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/asyncbackendtoqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/backendtoqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskit_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitjob.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitruntimeqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qlm_to_qiskit.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qputobackend.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/mat2nparray.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/measure.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/project.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/raise_break.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/reset.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/simulate.rst", "04_api_reference/module_qat/module_comm.rst", "04_api_reference/module_qat/module_comm/module_datamodel.rst", "04_api_reference/module_qat/module_comm/module_datamodel/gatedefinition.rst", "04_api_reference/module_qat/module_comm/module_datamodel/op.rst", "04_api_reference/module_qat/module_comm/module_exceptions.rst", "04_api_reference/module_qat/module_comm/module_exceptions/errortype.rst", "04_api_reference/module_qat/module_comm/module_exceptions/pluginexception.rst", "04_api_reference/module_qat/module_comm/module_exceptions/qpuexception.rst", "04_api_reference/module_qat/module_comm/module_resource.rst", "04_api_reference/module_qat/module_comm/module_resource/allocationmodel.rst", "04_api_reference/module_qat/module_comm/module_resource/device.rst", "04_api_reference/module_qat/module_comm/module_resource/resourcemodel.rst", "04_api_reference/module_qat/module_comm/module_shared.rst", "04_api_reference/module_qat/module_comm/module_shared/intermediatemeasurement.rst", "04_api_reference/module_qat/module_comm/module_shared/processingtype.rst", "04_api_reference/module_qat/module_core.rst", "04_api_reference/module_qat/module_core/aggregate_data.rst", "04_api_reference/module_qat/module_core/assert_plugin.rst", "04_api_reference/module_qat/module_core/assert_qpu.rst", "04_api_reference/module_qat/module_core/batch.rst", "04_api_reference/module_qat/module_core/batchresult.rst", "04_api_reference/module_qat/module_core/circuit.rst", "04_api_reference/module_qat/module_core/display.rst", "04_api_reference/module_qat/module_core/evaluate.rst", "04_api_reference/module_qat/module_core/hardwarespecs.rst", "04_api_reference/module_qat/module_core/job.rst", "04_api_reference/module_qat/module_core/module_application.rst", "04_api_reference/module_qat/module_core/module_application/application.rst", "04_api_reference/module_qat/module_core/module_application/remoteapplication.rst", "04_api_reference/module_qat/module_core/module_circuit_builder.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/default_gate_set.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/get_param_generator.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/get_predef_generator.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/variablenamenotavailable.rst", "04_api_reference/module_qat/module_core/module_gate_set.rst", "04_api_reference/module_qat/module_core/module_gate_set/gateset.rst", "04_api_reference/module_qat/module_core/module_gate_set/gatesignature.rst", "04_api_reference/module_qat/module_core/module_gate_set/gatesyntaxredefinition.rst", "04_api_reference/module_qat/module_core/module_qpu.rst", "04_api_reference/module_qat/module_core/module_qpu/commonqpu.rst", "04_api_reference/module_qat/module_core/module_spins.rst", "04_api_reference/module_qat/module_core/module_spins/integer_to_spins.rst", "04_api_reference/module_qat/module_core/module_spins/spins_to_integer.rst", "04_api_reference/module_qat/module_core/module_variables.rst", "04_api_reference/module_qat/module_core/module_variables/arithexpression.rst", "04_api_reference/module_qat/module_core/module_variables/symbol.rst", "04_api_reference/module_qat/module_core/observable.rst", "04_api_reference/module_qat/module_core/parameter.rst", "04_api_reference/module_qat/module_core/plot_in_notebook.rst", "04_api_reference/module_qat/module_core/result.rst", "04_api_reference/module_qat/module_core/sample.rst", "04_api_reference/module_qat/module_core/schedule.rst", "04_api_reference/module_qat/module_core/state.rst", "04_api_reference/module_qat/module_core/term.rst", "04_api_reference/module_qat/module_core/topology.rst", "04_api_reference/module_qat/module_core/topologytype.rst", "04_api_reference/module_qat/module_core/variable.rst", "04_api_reference/module_qat/module_devices.rst", "04_api_reference/module_qat/module_devices/alltoall.rst", "04_api_reference/module_qat/module_devices/google_sycamore.rst", "04_api_reference/module_qat/module_devices/griddevice.rst", "04_api_reference/module_qat/module_devices/ibm_burlington.rst", "04_api_reference/module_qat/module_devices/ibm_johannesburg.rst", "04_api_reference/module_qat/module_devices/ibm_melbourne.rst", "04_api_reference/module_qat/module_devices/ibm_rueschlikon.rst", "04_api_reference/module_qat/module_devices/ibm_singapore.rst", "04_api_reference/module_qat/module_devices/ibm_tokyo.rst", "04_api_reference/module_qat/module_devices/ibm_yorktown.rst", "04_api_reference/module_qat/module_devices/linedevice.rst", "04_api_reference/module_qat/module_devices/rigetti_agave.rst", "04_api_reference/module_qat/module_devices/rigetti_aspen.rst", "04_api_reference/module_qat/module_devices/squaregriddevice.rst", "04_api_reference/module_qat/module_devices/zuchongzhi.rst", "04_api_reference/module_qat/module_fermion.rst", "04_api_reference/module_qat/module_fermion/apply_quantum_subspace_expansion.rst", "04_api_reference/module_qat/module_fermion/compute_active_space_integrals.rst", "04_api_reference/module_qat/module_fermion/construct_ucc_ansatz.rst", "04_api_reference/module_qat/module_fermion/convert_to_h_integrals.rst", "04_api_reference/module_qat/module_fermion/electronicstructurehamiltonian.rst", "04_api_reference/module_qat/module_fermion/fermionichamiltonian.rst", "04_api_reference/module_qat/module_fermion/get_cluster_ops.rst", "04_api_reference/module_qat/module_fermion/get_hf_ket.rst", "04_api_reference/module_qat/module_fermion/guess_init_params.rst", "04_api_reference/module_qat/module_fermion/make_anderson_model.rst", "04_api_reference/module_qat/module_fermion/make_compressed_ldca_circ.rst", "04_api_reference/module_qat/module_fermion/make_embedded_model.rst", "04_api_reference/module_qat/module_fermion/make_general_hwe_circ.rst", "04_api_reference/module_qat/module_fermion/make_hubbard_model.rst", "04_api_reference/module_qat/module_fermion/make_ldca_circ.rst", "04_api_reference/module_qat/module_fermion/make_mr_circ.rst", "04_api_reference/module_qat/module_fermion/make_mrep_circ.rst", "04_api_reference/module_qat/module_fermion/make_shallow_circ.rst", "04_api_reference/module_qat/module_fermion/make_trotterisation_routine.rst", "04_api_reference/module_qat/module_fermion/molecularhamiltonian.rst", "04_api_reference/module_qat/module_fermion/moleculeinfo.rst", "04_api_reference/module_qat/module_fermion/perform_phase_estimation.rst", "04_api_reference/module_qat/module_fermion/perform_pyscf_computation.rst", "04_api_reference/module_qat/module_fermion/select_active_orbitals.rst", "04_api_reference/module_qat/module_fermion/spinhamiltonian.rst", "04_api_reference/module_qat/module_fermion/transform_integrals_to_new_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_bk_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_jw_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_parity_basis.rst", "04_api_reference/module_qat/module_generators.rst", "04_api_reference/module_qat/module_generators/abstractgenerator.rst", "04_api_reference/module_qat/module_generators/combinatorialoptimizergenerator.rst", "04_api_reference/module_qat/module_generators/graphcolouringgenerator.rst", "04_api_reference/module_qat/module_generators/graphpartitioninggenerator.rst", "04_api_reference/module_qat/module_generators/kcliquegenerator.rst", "04_api_reference/module_qat/module_generators/maxcutgenerator.rst", "04_api_reference/module_qat/module_generators/remotebatchgenerator.rst", "04_api_reference/module_qat/module_generators/vertexcovergenerator.rst", "04_api_reference/module_qat/module_hardware.rst", "04_api_reference/module_qat/module_hardware/defaultgatesspecification.rst", "04_api_reference/module_qat/module_hardware/defaulthardwaremodel.rst", "04_api_reference/module_qat/module_hardware/gatesspecification.rst", "04_api_reference/module_qat/module_hardware/hardwaremodel.rst", "04_api_reference/module_qat/module_hardware/make_depolarizing_hardware_model.rst", "04_api_reference/module_qat/module_lang.rst", "04_api_reference/module_qat/module_lang/abstractgate.rst", "04_api_reference/module_qat/module_lang/amplification_step.rst", "04_api_reference/module_qat/module_lang/boolformula.rst", "04_api_reference/module_qat/module_lang/build_gate.rst", "04_api_reference/module_qat/module_lang/cbit.rst", "04_api_reference/module_qat/module_lang/cregister.rst", "04_api_reference/module_qat/module_lang/gate.rst", "04_api_reference/module_qat/module_lang/generate_gate_set.rst", "04_api_reference/module_qat/module_lang/grover_diffusion.rst", "04_api_reference/module_qat/module_lang/householder.rst", "04_api_reference/module_qat/module_lang/kptree.rst", "04_api_reference/module_qat/module_lang/linker.rst", "04_api_reference/module_qat/module_lang/module_arithmetic.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/add_const_mod.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/add_mod.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/modular_exp.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const_mod.rst", "04_api_reference/module_qat/module_lang/module_classarith.rst", "04_api_reference/module_qat/module_lang/module_classarith/add.rst", "04_api_reference/module_qat/module_lang/module_classarith/add_const.rst", "04_api_reference/module_qat/module_lang/module_classarith/cuccaro_add.rst", "04_api_reference/module_qat/module_lang/module_qftarith.rst", "04_api_reference/module_qat/module_lang/module_qftarith/add.rst", "04_api_reference/module_qat/module_lang/module_qftarith/add_const.rst", "04_api_reference/module_qat/module_lang/module_qftarith/mult.rst", "04_api_reference/module_qat/module_lang/module_qftarith/mult_const.rst", "04_api_reference/module_qat/module_lang/module_qftarith/qft.rst", "04_api_reference/module_qat/module_lang/paramgate.rst", "04_api_reference/module_qat/module_lang/phase_estimation.rst", "04_api_reference/module_qat/module_lang/program.rst", "04_api_reference/module_qat/module_lang/qarithexp.rst", "04_api_reference/module_qat/module_lang/qbit.rst", "04_api_reference/module_qat/module_lang/qbool.rst", "04_api_reference/module_qat/module_lang/qboolarray.rst", "04_api_reference/module_qat/module_lang/qclause.rst", "04_api_reference/module_qat/module_lang/qcompexp.rst", "04_api_reference/module_qat/module_lang/qfunc.rst", "04_api_reference/module_qat/module_lang/qint.rst", "04_api_reference/module_qat/module_lang/qregister.rst", "04_api_reference/module_qat/module_lang/qrout.rst", "04_api_reference/module_qat/module_lang/qroutine.rst", "04_api_reference/module_qat/module_lang/quantum_counting.rst", "04_api_reference/module_qat/module_lang/uniform_distribution.rst", "04_api_reference/module_qat/module_opt.rst", "04_api_reference/module_qat/module_opt/ansatzfactory.rst", "04_api_reference/module_qat/module_opt/bilp.rst", "04_api_reference/module_qat/module_opt/circuitgenerator.rst", "04_api_reference/module_qat/module_opt/clause.rst", "04_api_reference/module_qat/module_opt/combinatorialproblem.rst", "04_api_reference/module_qat/module_opt/graphcolouring.rst", "04_api_reference/module_qat/module_opt/graphpartitioning.rst", "04_api_reference/module_qat/module_opt/ising.rst", "04_api_reference/module_qat/module_opt/kclique.rst", "04_api_reference/module_qat/module_opt/maxcut.rst", "04_api_reference/module_qat/module_opt/mixingfactory.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/independentannealing.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/initialstatebuilder.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/simpleinitialstate.rst", "04_api_reference/module_qat/module_opt/module_results.rst", "04_api_reference/module_qat/module_opt/module_results/combinatorialresult.rst", "04_api_reference/module_qat/module_opt/module_results/graphpartitioningresult.rst", "04_api_reference/module_qat/module_opt/module_results/kcliqueresult.rst", "04_api_reference/module_qat/module_opt/module_results/vertexcoverresult.rst", "04_api_reference/module_qat/module_opt/numberpartitioning.rst", "04_api_reference/module_qat/module_opt/qubo.rst", "04_api_reference/module_qat/module_opt/schedulegenerator.rst", "04_api_reference/module_qat/module_opt/var.rst", "04_api_reference/module_qat/module_opt/vertexcover.rst", "04_api_reference/module_qat/module_plugins.rst", "04_api_reference/module_qat/module_plugins/abstractplugin.rst", "04_api_reference/module_qat/module_plugins/adaptvqeplugin.rst", "04_api_reference/module_qat/module_plugins/circuitinliner.rst", "04_api_reference/module_qat/module_plugins/costfunctionplugin.rst", "04_api_reference/module_qat/module_plugins/display.rst", "04_api_reference/module_qat/module_plugins/gradientdescentoptimizer.rst", "04_api_reference/module_qat/module_plugins/junction.rst", "04_api_reference/module_qat/module_plugins/multiplelaunchesanalyzer.rst", "04_api_reference/module_qat/module_plugins/observablesplitter.rst", "04_api_reference/module_qat/module_plugins/optimizer.rst", "04_api_reference/module_qat/module_plugins/psominimizeplugin.rst", "04_api_reference/module_qat/module_plugins/quameleonplugin.rst", "04_api_reference/module_qat/module_plugins/remoteplugin.rst", "04_api_reference/module_qat/module_plugins/scipyminimizeplugin.rst", "04_api_reference/module_qat/module_plugins/seqoptim.rst", "04_api_reference/module_qat/module_plugins/spsaminimizeplugin.rst", "04_api_reference/module_qat/module_plugins/transformobservable.rst", "04_api_reference/module_qat/module_plugins/zeronoiseextrapolator.rst", "04_api_reference/module_qat/module_qpus.rst", "04_api_reference/module_qat/module_qpus/:myqlm:clinalg.rst", "04_api_reference/module_qat/module_qpus/:myqlm:pylinalg.rst", "04_api_reference/module_qat/module_qpus/:myqlm:simulatedannealing.rst", "04_api_reference/module_qat/module_qpus/classicalqpu.rst", "04_api_reference/module_qat/module_qpus/get_current_qpu.rst", "04_api_reference/module_qat/module_qpus/get_default_qpu.rst", "04_api_reference/module_qat/module_qpus/qpuhandler.rst", "04_api_reference/module_qat/module_qpus/remoteqpu.rst", "04_api_reference/module_qat/module_quops.rst", "04_api_reference/module_qat/module_quops/are_equal_up_to_phase.rst", "04_api_reference/module_qat/module_quops/channelrepresentations.rst", "04_api_reference/module_qat/module_quops/convert_density_mat_to_pauli_vec.rst", "04_api_reference/module_qat/module_quops/convert_pauli_vec_to_density_mat.rst", "04_api_reference/module_qat/module_quops/get_average_process_fidelity.rst", "04_api_reference/module_qat/module_quops/get_diamond_norm.rst", "04_api_reference/module_qat/module_quops/get_entanglement_process_fidelity.rst", "04_api_reference/module_qat/module_quops/get_process_distance.rst", "04_api_reference/module_qat/module_quops/get_state_fidelity.rst", "04_api_reference/module_qat/module_quops/get_trace_distance.rst", "04_api_reference/module_qat/module_quops/is_completely_positive.rst", "04_api_reference/module_qat/module_quops/is_trace_preserving.rst", "04_api_reference/module_qat/module_quops/is_trace_reducing.rst", "04_api_reference/module_qat/module_quops/is_unital.rst", "04_api_reference/module_qat/module_quops/make_avg_fid_equiv_depol_channel.rst", "04_api_reference/module_qat/module_quops/make_depolarizing_channel.rst", "04_api_reference/module_qat/module_quops/make_generalized_amplitude_damping.rst", "04_api_reference/module_qat/module_quops/make_pauli_matrix_basis.rst", "04_api_reference/module_qat/module_quops/make_standard_matrix_basis.rst", "04_api_reference/module_qat/module_quops/make_standard_vector_basis.rst", "04_api_reference/module_qat/module_quops/multikron.rst", "04_api_reference/module_qat/module_quops/parametricamplitudedamping.rst", "04_api_reference/module_qat/module_quops/parametricgatenoise.rst", "04_api_reference/module_qat/module_quops/parametricpuredephasing.rst", "04_api_reference/module_qat/module_quops/parametricquantumchannel.rst", "04_api_reference/module_qat/module_quops/partial_trace.rst", "04_api_reference/module_qat/module_quops/quantumchannel.rst", "04_api_reference/module_qat/module_quops/quantumchannelchi.rst", "04_api_reference/module_qat/module_quops/quantumchannelchoi.rst", "04_api_reference/module_qat/module_quops/quantumchannelkraus.rst", "04_api_reference/module_qat/module_quops/quantumchannelptm.rst", "05_demos.rst", "07_release_notes.rst", ":myqlm:06_support.rst", ":myqlm:interoperability.rst", ":myqlm:interoperability/01_qiskit.rst", ":myqlm:interoperability/02_pyquil.rst", ":myqlm:interoperability/03_cirq.rst", ":myqlm:interoperability/04_projectq.rst", ":myqlm:interoperability/05_openqasm.rst", "combinatorial_optim_applic.rst", "combinatorial_optim_applic/01_np_probs_for_annealing.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/bilp_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_colouring_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_partitioning_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/kclique_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/max_cut_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/number_partitioning_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/vertex_cover_ann_prob.rst", "combinatorial_optim_applic/02_qaoa.rst", "combinatorial_optim_applic/03_qa.rst", "combinatorial_optim_applic/04_np_problem_generators.rst", "combinatorial_optim_applic/04_np_problem_generators/01_max_cut_generator.rst", "combinatorial_optim_applic/04_np_problem_generators/02_graph_partitioning_generator.rst", "combinatorial_optim_applic/04_np_problem_generators/03_kclique_generator.rst", "combinatorial_optim_applic/04_np_problem_generators/04_vertex_cover_generator.rst", "combinatorial_optim_applic/04_np_problem_generators/05_graph_colouring_generator.rst", "fermion.rst", "fermion/01_hamiltonians.rst", "fermion/02_algorithms.rst", "fermion/03_plugins.rst", "fermion/04_migrating.rst", "index.rst", "interoperability_annealing.rst"], "titles": ["Getting started", "Writing quantum programs", "Executing quantum programs", "Variational algorithms with Qaptiva", "Installing myQLM", "myQLM license", "myQLM Installation on MacOS", "User guide", "Writing quantum programs", "Gate-based programming", "Creating and adding quantum gates to a circuit", "Creating variational circuits", "Quantum programs", "Quantum routines (and Oracles)", "Naming quantum routines", "Ancillae management and compute scopes", "Oracles and quantum types", "Atos Quantum Assembler (AQASM)", "Analog programming", "Building schedules", "Manipulating schedules", "Analog Jobs", "Annealing programming", "Ising Hamiltonians", "Quadratic Unconstrained Binary Optimization (QUBO)", "General Combinatorial Problems", "Creating observables", "Executing quantum programs", "Constructing one or multiple Jobs (using Batch)", "Sample Job", "Observable Job", "Automated batch generation", "Result of a quantum program", "Quantum Processing Unit (QPU)", "Annealing computing", "Make your own QPU", "Gate based computing", "CLinalg: C++ Linear-algebra-based simulator", "PyLinalg: Python Linear-algebra-based simulator", "Extending a QPU (by using Plugins)", "Make your own plugin", "Make you own junction", "Getting information from the QPU", "Running variational algorithms", "API reference", "qat", "qat.interop", "qat.interop.cirq", "qat.interop.cirq.cirq_to_qlm", "qat.interop.cirq.qlm_to_cirq", "qat.interop.openqasm", "qat.interop.openqasm.OqasmParser", "qat.interop.projectq", "qat.interop.projectq.AqasmEngine", "qat.interop.projectq.AqasmPrinter", "qat.interop.pyquil", "qat.interop.pyquil.pyquil_to_qlm", "qat.interop.pyquil.PyquilQPU", "qat.interop.pyquil.qlm_to_pyquil", "qat.interop.qiskit", "qat.interop.qiskit.AsyncBackendToQPU", "qat.interop.qiskit.BackendToQPU", "qat.interop.qiskit.qiskit_to_qlm", "qat.interop.qiskit.QiskitJob", "qat.interop.qiskit.runtime.QiskitRuntimeQPU", "qat.interop.qiskit.qlm_to_qiskit", "qat.interop.qiskit.QPUToBackend", "qat.pylinalg", "qat.pylinalg.simulator", "qat.pylinalg.simulator.mat2nparray", "qat.pylinalg.simulator.measure", "qat.pylinalg.simulator.project", "qat.pylinalg.simulator.raise_break", "qat.pylinalg.simulator.reset", "qat.pylinalg.simulator.simulate", "qat.comm", "qat.comm.datamodel", "qat.comm.datamodel.ttypes.GateDefinition", "qat.comm.datamodel.ttypes.Op", "qat.comm.exceptions", "qat.comm.exceptions.ttypes.ErrorType", "qat.comm.exceptions.ttypes.PluginException", "qat.comm.exceptions.ttypes.QPUException", "qat.comm.resource", "qat.comm.resource.ttypes.AllocationModel", "qat.comm.resource.ttypes.Device", "qat.comm.resource.ttypes.ResourceModel", "qat.comm.shared", "qat.comm.shared.ttypes.IntermediateMeasurement", "qat.comm.shared.ttypes.ProcessingType", "qat.core", "qat.core.wrappers.result.aggregate_data", "qat.core.assertion.assert_plugin", "qat.core.assertion.assert_qpu", "qat.core.Batch", "qat.core.BatchResult", "qat.core.Circuit", "qat.core.console.display", "qat.core.formula_eval.evaluate", "qat.core.HardwareSpecs", "qat.core.Job", "qat.core.application", "qat.core.application.Application", "qat.core.application.RemoteApplication", "qat.core.circuit_builder", "qat.core.circuit_builder.matrix_util.default_gate_set", "qat.core.circuit_builder.matrix_util.get_param_generator", "qat.core.circuit_builder.matrix_util.get_predef_generator", "qat.core.circuit_builder.builder.VariableNameNotAvailable", "qat.core.gate_set", "qat.core.gate_set.GateSet", "qat.core.gate_set.GateSignature", "qat.core.gate_set.GateSyntaxRedefinition", "qat.core.qpu", "qat.core.qpu.CommonQPU", "qat.core.spins", "qat.core.spins.integer_to_spins", "qat.core.spins.spins_to_integer", "qat.core.variables", "qat.core.variables.ArithExpression", "qat.core.variables.Symbol", "qat.core.Observable", "qat.core.Parameter", "qat.core.printer.plot_in_notebook", "qat.core.Result", "qat.core.Sample", "qat.core.Schedule", "qat.core.wrappers.result.State", "qat.core.Term", "qat.core.Topology", "qat.core.TopologyType", "qat.core.Variable", "qat.devices", "qat.devices.AllToAll", "qat.devices.GOOGLE_SYCAMORE", "qat.devices.GridDevice", "qat.devices.IBM_BURLINGTON", "qat.devices.IBM_JOHANNESBURG", "qat.devices.IBM_MELBOURNE", "qat.devices.IBM_RUESCHLIKON", "qat.devices.IBM_SINGAPORE", "qat.devices.IBM_TOKYO", "qat.devices.IBM_YORKTOWN", "qat.devices.LineDevice", "qat.devices.RIGETTI_AGAVE", "qat.devices.RIGETTI_ASPEN", "qat.devices.SquareGridDevice", "qat.devices.ZUCHONGZHI", "qat.fermion", "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion", "qat.fermion.chemistry.ucc.compute_active_space_integrals", "qat.fermion.chemistry.ucc.construct_ucc_ansatz", "qat.fermion.chemistry.ucc.convert_to_h_integrals", "qat.fermion.hamiltonians.ElectronicStructureHamiltonian", "qat.fermion.hamiltonians.FermionHamiltonian", "qat.fermion.chemistry.ucc.get_cluster_ops", "qat.fermion.chemistry.ucc.get_hf_ket", "qat.fermion.chemistry.ucc.guess_init_params", "qat.fermion.hamiltonians.make_anderson_model", "qat.fermion.circuits.make_compressed_ldca_circ", "qat.fermion.hamiltonians.make_embedded_model", "qat.fermion.circuits.make_general_hwe_circ", "qat.fermion.hamiltonians.make_hubbard_model", "qat.fermion.circuits.make_ldca_circ", "qat.fermion.circuits.make_mr_circ", "qat.fermion.circuits.make_mrep_circ", "qat.fermion.circuits.make_shallow_circ", "qat.fermion.trotterisation.make_trotterisation_routine", "qat.fermion.chemistry.wrapper.MolecularHamiltonian", "qat.fermion.chemistry.wrapper.MoleculeInfo", "qat.fermion.phase_estimation.perform_phase_estimation", "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation", "qat.fermion.chemistry.ucc.select_active_orbitals", "qat.fermion.hamiltonians.SpinHamiltonian", "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis", "qat.fermion.transforms.transform_to_bk_basis", "qat.fermion.transforms.transform_to_jw_basis", "qat.fermion.transforms.transform_to_parity_basis", "qat.generators", "qat.generators.AbstractGenerator", "qat.generators.CombinatorialOptimizerGenerator", "qat.generators.GraphColouringGenerator", "qat.generators.GraphPartitioningGenerator", "qat.generators.KCliqueGenerator", "qat.generators.MaxCutGenerator", "qat.generators.RemoteBatchGenerator", "qat.generators.VertexCoverGenerator", "qat.hardware", "qat.hardware.DefaultGatesSpecification", "qat.hardware.DefaultHardwareModel", "qat.hardware.GatesSpecification", "qat.hardware.HardwareModel", "qat.hardware.make_depolarizing_hardware_model", "qat.lang", "qat.lang.AbstractGate", "qat.lang.algorithms.amplification_step", "qat.lang.AQASM.bits.BoolFormula", "qat.lang.build_gate", "qat.lang.AQASM.bits.Cbit", "qat.lang.AQASM.bits.CRegister", "qat.lang.AQASM.gates.Gate", "qat.lang.AQASM.misc.generate_gate_set", "qat.lang.algorithms.amplification.grover_diffusion", "qat.lang.algorithms.amplification.householder", "qat.lang.models.KPTree", "qat.lang.linking.Linker", "qat.lang.AQASM.arithmetic", "qat.lang.AQASM.arithmetic.add_const_mod", "qat.lang.AQASM.arithmetic.add_mod", "qat.lang.AQASM.arithmetic.modular_exp", "qat.lang.AQASM.arithmetic.mult_const", "qat.lang.AQASM.arithmetic.mult_const_mod", "qat.lang.AQASM.classarith", "qat.lang.AQASM.classarith.add", "qat.lang.AQASM.classarith.add_const", "qat.lang.AQASM.classarith.cuccaro_add", "qat.lang.AQASM.qftarith", "qat.lang.AQASM.qftarith.add", "qat.lang.AQASM.qftarith.add_const", "qat.lang.AQASM.qftarith.mult", "qat.lang.AQASM.qftarith.mult_const", "qat.lang.AQASM.qftarith.QFT", "qat.lang.AQASM.gates.ParamGate", "qat.lang.algorithms.phase_estimation", "qat.lang.Program", "qat.lang.AQASM.qint.QArithExp", "qat.lang.AQASM.bits.Qbit", "qat.lang.AQASM.qbool.QBool", "qat.lang.AQASM.qbool.QBoolArray", "qat.lang.AQASM.qbool.QClause", "qat.lang.AQASM.qint.QCompExp", "qat.lang.qfunc", "qat.lang.AQASM.qint.QInt", "qat.lang.AQASM.bits.QRegister", "qat.lang.qrout", "qat.lang.QRoutine", "qat.lang.algorithms.quantum_counting", "qat.lang.algorithms.amplification.uniform_distribution", "qat.opt", "qat.vsolve.ansatz.AnsatzFactory", "qat.opt.BILP", "qat.opt.circuit_generator.CircuitGenerator", "qat.opt.boolexpr.Clause", "qat.opt.CombinatorialProblem", "qat.opt.GraphColouring", "qat.opt.GraphPartitioning", "qat.opt.Ising", "qat.opt.KClique", "qat.opt.MaxCut", "qat.opt.MixingFactory", "qat.opt.mixing_factory", "qat.opt.mixing_factory.IndependentAnnealing", "qat.opt.mixing_factory.InitialStateBuilder", "qat.opt.mixing_factory.SimpleInitialState", "qat.opt.results", "qat.opt.results.CombinatorialResult", "qat.opt.results.GraphPartitioningResult", "qat.opt.results.KCliqueResult", "qat.opt.results.VertexCoverResult", "qat.opt.NumberPartitioning", "qat.opt.QUBO", "qat.opt.schedule_generator.ScheduleGenerator", "qat.opt.boolexpr.Var", "qat.opt.VertexCover", "qat.plugins", "qat.plugins.AbstractPlugin", "qat.plugins.AdaptVQEPlugin", "qat.plugins.CircuitInliner", "qat.plugins.CostFunctionPlugin", "qat.plugins.Display", "qat.plugins.GradientDescentOptimizer", "qat.plugins.Junction", "qat.plugins.MultipleLaunchesAnalyzer", "qat.plugins.ObservableSplitter", "qat.plugins.Optimizer", "qat.plugins.PSOMinimizePlugin", "qat.plugins.QuameleonPlugin", "qat.plugins.RemotePlugin", "qat.plugins.ScipyMinimizePlugin", "qat.plugins.SeqOptim", "qat.plugins.SPSAMinimizePlugin", "qat.plugins.TransformObservable", "qat.plugins.ZeroNoiseExtrapolator", "qat.qpus", "qat.qpus.CLinalg", "qat.qpus.PyLinalg", "qat.qpus.SimulatedAnnealing", "qat.qpus.ClassicalQPU", "qat.qpus.get_current_qpu", "qat.qpus.get_default_qpu", "qat.qpus.QPUHandler", "qat.qpus.RemoteQPU", "qat.quops", "qat.quops.math_util.are_equal_up_to_phase", "qat.quops.ChannelRepresentations", "qat.quops.math_util.convert_density_mat_to_pauli_vec", "qat.quops.math_util.convert_pauli_vec_to_density_mat", "qat.quops.metrics.get_average_process_fidelity", "qat.quops.metrics.get_diamond_norm", "qat.quops.metrics.get_entanglement_process_fidelity", "qat.quops.metrics.get_process_distance", "qat.quops.metrics.get_state_fidelity", "qat.quops.metrics.get_trace_distance", "qat.quops.is_completely_positive", "qat.quops.is_trace_preserving", "qat.quops.is_trace_reducing", "qat.quops.is_unital", "qat.quops.make_avg_fid_equiv_depol_channel", "qat.quops.make_depolarizing_channel", "qat.quops.make_generalized_amplitude_damping", "qat.quops.math_util.make_pauli_matrix_basis", "qat.quops.math_util.make_standard_matrix_basis", "qat.quops.math_util.make_standard_vector_basis", "qat.quops.math_util.multikron", "qat.quops.ParametricAmplitudeDamping", "qat.quops.ParametricGateNoise", "qat.quops.ParametricPureDephasing", "qat.quops.ParametricQuantumChannel", "qat.quops.math_util.partial_trace", "qat.quops.QuantumChannel", "qat.quops.QuantumChannelChi", "qat.quops.QuantumChannelChoi", "qat.quops.QuantumChannelKraus", "qat.quops.QuantumChannelPTM", "Demos", "Release notes", "Contributing to myQLM", "Interoperability with gate-based framework", "Qiskit interoperability", "PyQuil interoperability", "Cirq interoperability", "ProjectQ interoperability", "OpenQASM Compiler", "Combinatorial optimization", "NP-hard problems", "Binary Integer Linear Programming (BILP)", "Graph Colouring", "Graph Partitioning", "KClique", "Max Cut", "Number Partitioning", "Vertex Cover", "Quantum Approximate Optimization Algorithm (QAOA)", "Quantum Annealing (QA)", "Problem generators", "Max Cut Generator", "Graph Partitioning Generator", "K-Clique Generator", "Vertex Cover Generator", "Graph Colouring Generator", "Spin and fermionic systems", "Creating and manipulating Hamiltonians", "Quantum application (including Ans\u00e4tze and state preparation)", "Plugins", "Migrating code based on deprecated library qat.dqs", "Welcome page", "Interoperability with annealing framework"], "terms": {"qaptiva": [0, 1, 11, 12, 18, 27, 28, 30, 31, 33, 34, 35, 36, 39, 40, 41, 43, 47, 52, 55, 59, 118, 148, 178, 264, 292, 327, 334, 335, 336, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353], "myqlm": [0, 7, 8, 9, 27, 30, 31, 33, 34, 36, 37, 38, 39, 46, 51, 57, 59, 75, 148, 178, 246, 260, 264, 268, 283, 285, 324, 327, 328, 329, 330, 331, 332, 334, 344, 350, 356], "contain": [0, 1, 2, 4, 5, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 51, 63, 67, 69, 70, 73, 74, 77, 78, 80, 96, 97, 100, 104, 106, 114, 118, 122, 124, 126, 128, 131, 132, 153, 154, 170, 171, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 193, 194, 200, 206, 223, 224, 225, 234, 235, 236, 240, 241, 244, 245, 246, 247, 248, 254, 255, 259, 260, 263, 278, 285, 286, 294, 324, 325, 332, 342, 351, 353], "tool": [0, 1, 8, 9, 11, 12, 16, 31, 39, 43, 51, 148, 334, 350, 351, 355], "write": [0, 3, 5, 7, 10, 11, 16, 17, 23, 24, 41, 43, 148, 149, 194, 209, 231, 268, 324, 351, 352, 355], "optim": [0, 3, 5, 7, 11, 12, 22, 23, 25, 31, 32, 34, 39, 41, 43, 61, 149, 180, 181, 182, 183, 184, 186, 224, 241, 243, 255, 256, 260, 268, 270, 272, 275, 278, 279, 280, 282, 290, 325, 334, 343, 345, 350, 352, 353, 354, 355], "simul": [0, 3, 5, 9, 10, 12, 18, 21, 22, 23, 25, 28, 29, 32, 34, 35, 45, 57, 60, 61, 67, 79, 96, 125, 126, 193, 194, 206, 224, 240, 244, 245, 246, 247, 248, 249, 259, 260, 263, 267, 276, 284, 285, 286, 287, 333, 335, 336, 337, 338, 339, 340, 341, 355], "quantum": [0, 3, 4, 5, 7, 9, 11, 15, 18, 21, 23, 25, 26, 28, 31, 34, 35, 36, 38, 39, 41, 43, 57, 60, 61, 64, 68, 69, 71, 76, 77, 78, 87, 89, 90, 96, 124, 125, 126, 127, 132, 149, 170, 178, 187, 188, 189, 190, 194, 195, 200, 203, 204, 205, 206, 212, 216, 221, 222, 223, 224, 225, 227, 228, 229, 230, 232, 235, 236, 238, 240, 244, 245, 246, 247, 248, 249, 252, 259, 260, 261, 263, 264, 278, 283, 286, 287, 294, 298, 299, 303, 304, 305, 306, 315, 317, 319, 320, 321, 322, 323, 327, 333, 335, 336, 344, 350, 351, 353, 355], "program": [0, 3, 4, 7, 10, 11, 13, 14, 15, 16, 29, 30, 31, 40, 41, 48, 56, 62, 77, 79, 90, 96, 97, 149, 151, 195, 196, 204, 205, 206, 209, 227, 228, 232, 233, 235, 238, 240, 268, 276, 287, 333, 334, 343, 352, 353, 355], "These": [0, 1, 4, 6, 7, 9, 12, 16, 33, 42, 51, 62, 78, 96, 100, 109, 119, 193, 196, 204, 205, 234, 240, 244, 245, 247, 248, 259, 263, 325, 327, 334, 344, 350, 351, 352, 353], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 28, 29, 33, 35, 39, 43, 48, 51, 53, 56, 62, 65, 68, 69, 75, 77, 78, 79, 80, 90, 95, 96, 97, 100, 102, 103, 109, 111, 119, 122, 126, 128, 130, 131, 132, 148, 152, 153, 154, 160, 161, 167, 168, 170, 178, 179, 182, 183, 186, 188, 189, 191, 193, 194, 196, 204, 205, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 229, 232, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 247, 248, 250, 259, 263, 264, 265, 267, 268, 269, 270, 271, 276, 277, 279, 280, 283, 284, 285, 290, 291, 292, 293, 308, 314, 316, 322, 324, 325, 327, 333, 334, 338, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "packag": [0, 5, 12, 171, 213, 224, 289, 350, 352], "python": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 33, 37, 77, 102, 111, 120, 125, 131, 185, 201, 205, 224, 225, 227, 228, 231, 267, 268, 283, 327, 329, 332, 355], "librari": [0, 1, 4, 6, 9, 10, 12, 14, 36, 38, 39, 46, 193, 243, 246, 260, 324, 350, 352, 356], "name": [0, 5, 8, 10, 13, 17, 21, 23, 35, 39, 51, 60, 61, 63, 64, 77, 78, 79, 86, 94, 95, 96, 97, 99, 100, 104, 108, 111, 112, 119, 123, 124, 126, 129, 131, 193, 197, 200, 205, 222, 224, 234, 239, 243, 246, 281, 287, 292, 314, 316, 320, 321, 322, 323, 325, 351, 356], "qat": [0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 325, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356], "applic": [0, 5, 12, 16, 17, 18, 31, 34, 39, 45, 78, 90, 189, 191, 204, 224, 249, 279, 333, 343, 344, 350], "toolset": [0, 39], "also": [0, 5, 8, 9, 10, 12, 16, 17, 18, 19, 22, 23, 27, 28, 29, 31, 33, 34, 35, 39, 41, 43, 78, 96, 121, 124, 126, 132, 169, 170, 171, 179, 188, 190, 204, 231, 232, 234, 235, 240, 244, 245, 246, 247, 248, 254, 259, 260, 263, 279, 282, 285, 287, 291, 292, 325, 333, 334, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356], "interfac": [0, 4, 5, 8, 9, 11, 26, 34, 36, 37, 41, 60, 113, 114, 179, 224, 238, 241, 249, 250, 252, 261, 265, 271, 274, 283, 286, 290, 325, 342, 352, 355], "applianc": [0, 18, 31, 33, 34, 35, 36, 39, 118, 325, 334, 335, 336, 344, 350], "eviden": [0, 85, 355], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 53, 56, 60, 61, 62, 63, 64, 66, 67, 71, 75, 77, 78, 79, 80, 83, 88, 90, 91, 96, 97, 99, 100, 102, 116, 118, 119, 120, 121, 122, 128, 129, 130, 131, 134, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 153, 154, 155, 158, 160, 161, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 182, 183, 185, 186, 187, 189, 191, 193, 194, 195, 196, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 279, 280, 282, 284, 285, 287, 289, 290, 292, 294, 299, 314, 316, 324, 325, 326, 328, 329, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 353, 354, 356], "provid": [0, 1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 19, 26, 28, 31, 35, 39, 40, 41, 42, 51, 57, 60, 61, 64, 66, 68, 74, 75, 78, 83, 90, 96, 111, 132, 148, 149, 151, 170, 193, 194, 216, 224, 239, 243, 246, 256, 260, 266, 268, 270, 271, 274, 275, 276, 278, 279, 280, 284, 285, 290, 325, 326, 327, 328, 329, 330, 331, 332, 334, 342, 344, 350, 351, 352, 354, 355], "power": [0, 3, 5, 9, 27, 34, 122, 193, 204, 316, 355], "semant": [0, 9, 27, 39, 120, 355], "creat": [0, 1, 3, 5, 7, 8, 9, 12, 23, 24, 25, 28, 29, 30, 31, 33, 34, 39, 40, 60, 63, 75, 77, 99, 118, 122, 126, 170, 185, 193, 196, 229, 235, 242, 246, 260, 292, 324, 325, 326, 328, 331, 333, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 352, 356], "circuit": [0, 1, 2, 3, 4, 5, 9, 13, 15, 16, 17, 18, 21, 26, 28, 29, 30, 31, 32, 33, 35, 36, 38, 40, 41, 43, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 68, 69, 74, 77, 78, 79, 80, 88, 90, 97, 100, 111, 119, 123, 128, 149, 151, 194, 197, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 224, 225, 229, 231, 232, 234, 235, 238, 239, 241, 266, 267, 268, 269, 273, 279, 282, 284, 285, 327, 333, 342, 353, 354], "analog": [0, 1, 7, 8, 33, 35, 122, 126, 189, 191, 238, 250, 252, 325, 333, 342, 344, 345, 346, 347, 348, 349, 353, 355], "schedul": [0, 2, 8, 18, 21, 33, 34, 35, 90, 100, 122, 180, 181, 182, 183, 184, 186, 189, 191, 249, 250, 252, 324, 333, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349], "anneal": [0, 1, 7, 8, 23, 24, 25, 33, 35, 180, 181, 182, 183, 184, 186, 238, 240, 244, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 263, 286, 324, 333, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 355], "job": [0, 1, 2, 3, 9, 16, 23, 24, 26, 27, 31, 32, 33, 34, 35, 39, 40, 41, 57, 59, 60, 61, 63, 64, 79, 80, 86, 94, 96, 126, 149, 178, 180, 181, 182, 183, 184, 186, 195, 205, 231, 241, 246, 251, 252, 253, 260, 261, 264, 266, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 324, 327, 328, 329, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 355], "object": [0, 1, 2, 5, 8, 9, 12, 14, 15, 16, 17, 18, 19, 28, 29, 31, 32, 33, 35, 39, 40, 41, 42, 49, 51, 60, 61, 63, 65, 66, 75, 78, 94, 95, 96, 99, 100, 102, 119, 121, 124, 125, 128, 129, 130, 131, 132, 158, 161, 179, 185, 187, 191, 193, 196, 197, 201, 204, 205, 224, 227, 234, 235, 238, 242, 243, 246, 249, 252, 260, 264, 265, 271, 283, 284, 290, 325, 350, 351, 353], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 53, 54, 60, 61, 64, 68, 70, 77, 78, 83, 90, 96, 97, 100, 118, 120, 121, 122, 123, 126, 128, 129, 130, 131, 134, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 154, 170, 173, 179, 180, 181, 182, 183, 184, 185, 186, 193, 195, 197, 198, 199, 201, 204, 222, 224, 231, 232, 233, 234, 235, 239, 241, 243, 246, 249, 250, 252, 255, 256, 257, 258, 260, 261, 265, 268, 271, 277, 278, 279, 282, 284, 285, 290, 292, 316, 322, 324, 325, 326, 328, 329, 333, 334, 336, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356], "parametr": [0, 3, 11, 17, 43, 90, 100, 104, 106, 148, 151, 157, 161, 188, 189, 190, 193, 194, 222, 279, 292, 317, 342, 352], "abstract": [0, 10, 14, 16, 17, 18, 23, 39, 41, 43, 51, 96, 118, 120, 178, 179, 180, 193, 194, 206, 222, 224, 234, 241, 252, 261, 264, 265, 271, 274, 290, 292, 333], "paramet": [0, 3, 10, 11, 12, 17, 19, 23, 29, 32, 35, 40, 41, 48, 49, 51, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 73, 74, 77, 81, 82, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 110, 111, 114, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 133, 135, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 232, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 256, 259, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 325, 328, 334, 337, 338, 339, 340, 341, 342, 344, 352, 353, 354], "variat": [0, 2, 7, 9, 27, 28, 31, 32, 39, 41, 90, 100, 149, 231, 238, 241, 243, 268, 270, 274, 275, 278, 279, 280, 325, 342, 344, 350, 353, 355], "comput": [0, 1, 2, 4, 5, 7, 12, 13, 16, 18, 21, 23, 26, 28, 29, 30, 31, 33, 35, 40, 41, 43, 68, 74, 78, 83, 89, 91, 96, 100, 110, 121, 124, 125, 126, 148, 153, 154, 155, 168, 170, 171, 172, 173, 178, 180, 181, 182, 183, 184, 186, 188, 190, 204, 205, 224, 229, 235, 239, 240, 244, 245, 247, 252, 259, 263, 266, 268, 273, 285, 290, 295, 296, 297, 298, 299, 300, 301, 302, 316, 328, 333, 337, 338, 339, 340, 341, 343, 344, 351, 352, 353, 354], "compos": [0, 3, 9, 10, 16, 20, 26, 31, 32, 35, 39, 40, 42, 48, 51, 53, 56, 62, 73, 74, 77, 80, 94, 99, 102, 121, 170, 178, 193, 198, 204, 268, 271, 281, 322, 325, 328, 329, 331, 332, 335], "user": [0, 1, 4, 5, 6, 27, 28, 31, 32, 33, 39, 40, 41, 46, 48, 53, 56, 57, 60, 62, 74, 75, 96, 97, 124, 148, 178, 187, 193, 264, 266, 269, 279, 283, 291, 292, 344, 352, 355], "defin": [0, 3, 5, 8, 9, 11, 14, 17, 19, 23, 24, 25, 31, 33, 35, 39, 40, 41, 42, 43, 51, 60, 61, 69, 75, 77, 80, 90, 96, 97, 111, 118, 122, 152, 153, 160, 168, 169, 171, 179, 188, 190, 193, 194, 221, 238, 246, 249, 250, 260, 265, 266, 268, 275, 281, 285, 287, 292, 297, 299, 300, 301, 308, 309, 316, 318, 324, 327, 328, 329, 331, 332, 343, 345, 350, 352, 353], "item": [0, 31, 80, 118], "custom": [0, 1, 9, 35, 51, 75, 96, 97, 123, 129, 130, 209, 234, 238, 276, 324, 333, 353, 355], "gate": [0, 1, 2, 7, 8, 13, 15, 16, 18, 25, 31, 33, 35, 37, 39, 40, 42, 51, 65, 68, 69, 71, 73, 74, 76, 77, 78, 79, 80, 90, 96, 97, 99, 104, 105, 106, 107, 109, 110, 111, 123, 129, 130, 161, 165, 167, 188, 189, 190, 191, 192, 194, 195, 201, 203, 204, 205, 206, 209, 223, 224, 227, 231, 235, 236, 238, 239, 241, 266, 268, 273, 274, 276, 279, 282, 285, 287, 292, 315, 320, 321, 323, 324, 325, 331, 332, 333, 353, 355], "time": [0, 1, 5, 6, 10, 11, 13, 16, 18, 19, 20, 22, 28, 30, 32, 35, 36, 37, 40, 77, 90, 96, 102, 122, 126, 158, 167, 170, 179, 187, 188, 190, 207, 208, 209, 211, 214, 215, 219, 220, 224, 246, 251, 260, 265, 279, 280, 285, 286, 290, 292, 314, 315, 316, 318, 324, 328, 334, 335, 343, 353], "depend": [0, 4, 10, 12, 14, 17, 18, 19, 31, 32, 36, 37, 90, 122, 126, 168, 204, 224, 246, 249, 260, 271, 275, 279, 285, 286, 292, 324, 327, 342, 343, 353], "coeffici": [0, 11, 20, 23, 121, 128, 153, 157, 168, 169, 279, 282, 308, 317, 353], "an": [0, 1, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 51, 59, 60, 61, 64, 69, 73, 77, 78, 79, 81, 82, 87, 88, 90, 92, 93, 96, 97, 100, 102, 103, 116, 118, 119, 120, 121, 122, 123, 124, 126, 128, 130, 131, 148, 149, 160, 161, 168, 169, 170, 172, 178, 179, 180, 189, 191, 193, 194, 196, 197, 199, 202, 204, 205, 206, 208, 213, 214, 215, 217, 218, 222, 224, 227, 228, 229, 230, 231, 233, 235, 238, 239, 243, 246, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 266, 267, 268, 271, 273, 275, 276, 277, 282, 285, 286, 289, 290, 291, 292, 319, 322, 324, 325, 328, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], "etc": [0, 1, 2, 5, 6, 9, 17, 19, 35, 39, 51, 77, 78, 96, 119, 124, 188, 190, 193, 194, 235, 241, 246, 260, 271, 274, 287, 304, 325, 334, 350], "hello": 0, "world": 0, "The": [0, 2, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 46, 51, 60, 61, 62, 65, 68, 69, 70, 71, 74, 77, 78, 80, 90, 96, 97, 100, 102, 118, 121, 125, 126, 129, 132, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 192, 193, 194, 197, 202, 204, 205, 213, 215, 216, 217, 219, 220, 221, 222, 223, 224, 231, 232, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 257, 258, 259, 260, 262, 263, 265, 266, 268, 270, 271, 272, 273, 274, 276, 277, 279, 281, 285, 286, 287, 289, 290, 291, 292, 297, 301, 302, 316, 318, 323, 324, 325, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354], "follow": [0, 1, 4, 5, 6, 12, 14, 16, 17, 18, 22, 23, 24, 30, 31, 32, 34, 35, 39, 40, 41, 77, 80, 90, 96, 100, 102, 118, 120, 128, 132, 157, 160, 178, 179, 192, 193, 194, 195, 202, 204, 205, 207, 209, 211, 227, 234, 235, 238, 241, 249, 250, 264, 276, 282, 283, 284, 285, 292, 294, 308, 329, 330, 332, 342, 343, 344, 350, 352, 353], "code": [0, 1, 3, 5, 6, 14, 16, 17, 23, 28, 31, 34, 35, 39, 40, 41, 51, 68, 71, 79, 80, 81, 82, 94, 96, 100, 118, 148, 227, 234, 235, 241, 268, 276, 326, 328, 329, 332, 343, 350, 352], "snippet": [0, 3, 16], "simpl": [0, 1, 16, 17, 19, 25, 26, 28, 29, 30, 31, 39, 41, 94, 95, 96, 99, 102, 120, 124, 125, 129, 179, 224, 234, 253, 262, 265, 272, 285, 287, 290, 315, 324, 325, 342, 343, 345, 346, 347, 348, 349, 352, 353], "bell": [0, 9, 29, 30, 332], "pair": [0, 9, 19, 29, 30, 42, 128, 129, 130, 188, 190, 249, 282, 324, 332, 353], "function": [0, 1, 3, 5, 9, 10, 11, 15, 16, 17, 22, 23, 24, 31, 34, 35, 40, 43, 48, 53, 56, 62, 70, 71, 77, 90, 96, 97, 99, 102, 111, 116, 117, 118, 120, 122, 123, 149, 151, 153, 154, 155, 167, 168, 170, 171, 172, 173, 179, 180, 188, 193, 194, 197, 200, 201, 224, 231, 234, 241, 243, 246, 255, 256, 257, 258, 260, 261, 268, 271, 278, 279, 280, 285, 286, 292, 314, 316, 328, 329, 330, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354], "mode": [0, 1, 3, 11, 29, 30, 31, 33, 35, 39, 40, 64, 96, 126, 158, 185, 268, 277, 325, 328], "from": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 43, 48, 49, 51, 53, 56, 60, 61, 62, 65, 69, 71, 77, 78, 79, 80, 85, 88, 94, 95, 96, 97, 99, 100, 103, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 157, 158, 164, 168, 169, 170, 172, 173, 175, 176, 177, 180, 182, 183, 186, 193, 194, 195, 196, 201, 204, 205, 206, 209, 222, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 255, 256, 259, 260, 263, 266, 268, 271, 272, 276, 277, 278, 282, 284, 285, 286, 287, 291, 292, 307, 308, 313, 314, 316, 318, 322, 324, 325, 327, 328, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356], "lang": [0, 1, 2, 3, 8, 9, 10, 11, 12, 14, 15, 16, 17, 29, 30, 31, 40, 41, 42, 43, 44, 45, 51, 77, 79, 90, 96, 97, 149, 161, 268, 276, 287, 325, 352, 353], "import": [0, 1, 2, 3, 5, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 39, 40, 41, 42, 43, 51, 77, 78, 79, 80, 85, 96, 97, 99, 100, 118, 119, 120, 122, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 153, 154, 168, 169, 173, 175, 176, 177, 194, 195, 196, 204, 205, 209, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 239, 240, 241, 243, 244, 245, 247, 248, 249, 259, 263, 268, 276, 278, 284, 287, 292, 307, 308, 314, 316, 322, 325, 328, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356], "qrout": [0, 1, 2, 9, 10, 11, 40, 41, 43, 193, 231, 325, 352], "h": [0, 1, 2, 3, 9, 10, 11, 12, 14, 16, 17, 18, 19, 23, 29, 30, 31, 34, 40, 43, 65, 77, 96, 100, 126, 149, 152, 153, 154, 158, 160, 162, 167, 168, 170, 173, 175, 176, 177, 182, 183, 186, 188, 190, 195, 204, 205, 209, 234, 235, 240, 242, 245, 246, 247, 248, 249, 259, 260, 263, 270, 273, 286, 325, 331, 332, 343, 351, 352, 356], "cnot": [0, 1, 2, 3, 9, 10, 12, 15, 16, 17, 29, 30, 31, 40, 42, 65, 96, 149, 161, 204, 205, 209, 213, 215, 229, 234, 235, 239, 241, 276, 282, 287, 325, 331, 332, 352, 353], "def": [0, 1, 2, 3, 9, 10, 11, 14, 16, 17, 31, 35, 40, 41, 43, 194, 197, 205, 231, 234, 239, 268, 325], "bell_pair": [0, 2, 9], "0": [0, 1, 2, 3, 5, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 39, 40, 41, 42, 43, 50, 51, 61, 68, 73, 74, 77, 78, 79, 89, 96, 97, 100, 116, 117, 119, 120, 121, 122, 123, 126, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 153, 154, 157, 159, 163, 165, 167, 168, 169, 170, 172, 173, 175, 176, 177, 188, 190, 193, 194, 195, 196, 203, 204, 205, 209, 221, 222, 224, 227, 228, 229, 231, 232, 234, 235, 237, 239, 240, 242, 243, 244, 245, 246, 247, 249, 255, 259, 260, 263, 266, 268, 270, 276, 280, 282, 284, 285, 287, 294, 305, 307, 308, 309, 314, 316, 322, 329, 331, 332, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356], "1": [0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 51, 61, 68, 70, 73, 77, 78, 79, 80, 89, 96, 97, 100, 116, 117, 118, 120, 122, 126, 128, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 158, 160, 161, 167, 168, 169, 173, 175, 176, 177, 182, 183, 186, 188, 190, 194, 195, 196, 199, 204, 205, 207, 208, 209, 214, 215, 216, 221, 224, 228, 229, 232, 233, 234, 235, 239, 240, 242, 243, 244, 245, 246, 247, 249, 255, 259, 260, 262, 263, 268, 270, 275, 279, 280, 282, 284, 285, 286, 287, 294, 302, 305, 307, 308, 309, 310, 314, 316, 318, 321, 322, 323, 328, 329, 331, 332, 334, 335, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356], "result": [0, 1, 2, 3, 5, 8, 14, 15, 16, 17, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 43, 45, 48, 49, 53, 56, 57, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 78, 79, 80, 88, 95, 96, 100, 101, 102, 116, 126, 149, 167, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 195, 204, 210, 213, 215, 217, 218, 219, 220, 223, 224, 229, 230, 232, 234, 235, 236, 238, 241, 242, 244, 245, 247, 248, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 278, 279, 280, 283, 284, 285, 286, 287, 290, 291, 322, 325, 328, 329, 334, 344, 345, 346, 347, 348, 349, 352, 353], "run": [0, 1, 2, 3, 5, 6, 11, 14, 23, 24, 27, 35, 36, 37, 39, 41, 57, 77, 86, 96, 100, 102, 178, 179, 181, 182, 183, 184, 186, 224, 234, 238, 241, 246, 260, 264, 265, 266, 271, 276, 278, 285, 290, 325, 328, 329, 342, 353, 355], "sampl": [0, 1, 2, 8, 9, 11, 16, 21, 26, 28, 30, 31, 32, 33, 35, 39, 40, 42, 64, 68, 70, 71, 89, 90, 96, 100, 116, 121, 122, 124, 126, 180, 195, 227, 228, 231, 232, 234, 244, 245, 247, 248, 254, 255, 256, 257, 258, 263, 264, 268, 273, 282, 284, 285, 287, 325, 326, 328, 337, 338, 339, 340, 341, 344], "print": [0, 1, 2, 3, 5, 9, 11, 16, 19, 20, 23, 24, 25, 26, 29, 30, 31, 40, 41, 43, 51, 53, 77, 79, 96, 99, 118, 119, 120, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 153, 154, 168, 169, 173, 175, 176, 177, 195, 196, 204, 205, 209, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 239, 240, 243, 244, 245, 247, 248, 259, 263, 268, 269, 272, 279, 284, 287, 307, 308, 314, 316, 322, 331, 332, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 351, 352, 353], "f": [0, 1, 2, 3, 9, 30, 31, 40, 51, 77, 122, 153, 154, 160, 173, 175, 176, 177, 185, 231, 268, 282, 297, 299, 300, 301, 307, 316, 351, 352, 353], "state": [0, 1, 2, 3, 5, 8, 9, 11, 12, 13, 15, 16, 18, 21, 23, 26, 28, 29, 31, 32, 33, 34, 35, 36, 38, 40, 68, 70, 71, 73, 74, 87, 89, 90, 91, 96, 100, 116, 117, 121, 124, 125, 126, 148, 149, 151, 156, 164, 170, 171, 187, 188, 190, 195, 203, 204, 221, 223, 227, 229, 231, 232, 234, 235, 236, 237, 242, 243, 249, 250, 251, 252, 253, 268, 282, 284, 285, 287, 292, 301, 322, 325, 337, 338, 339, 340, 341, 342, 343, 350, 353, 354], "amplitud": [0, 1, 9, 16, 28, 29, 32, 36, 37, 96, 100, 122, 124, 125, 126, 221, 292, 309, 314, 324], "00": [0, 2, 3, 9, 28, 29, 30, 31, 126, 234, 284], "7071067811865475": [0, 9, 29, 77], "0j": [0, 9, 16, 29, 175, 176, 177, 351], "11": [0, 2, 4, 5, 9, 16, 28, 29, 30, 31, 79, 80, 132, 134, 137, 138, 139, 140, 141, 145, 147, 224, 234, 268, 339, 340, 345, 346, 352], "first": [0, 1, 3, 10, 14, 15, 16, 28, 31, 34, 36, 38, 41, 57, 61, 64, 77, 96, 100, 102, 124, 129, 135, 148, 160, 167, 170, 179, 187, 193, 204, 208, 213, 215, 217, 219, 220, 223, 224, 229, 235, 236, 247, 249, 266, 270, 274, 275, 276, 278, 279, 280, 284, 285, 290, 292, 297, 299, 300, 301, 302, 330, 337, 339, 340, 345, 346, 352, 353], "line": [0, 1, 3, 5, 6, 12, 16, 17, 23, 51, 79, 81, 82, 96, 100, 234, 287, 322, 330, 344, 351], "decor": [0, 1, 9, 14, 17, 193, 197, 201, 231, 234, 325], "two": [0, 1, 5, 6, 12, 16, 17, 20, 23, 25, 26, 28, 34, 35, 39, 40, 41, 42, 78, 96, 100, 118, 129, 130, 148, 150, 152, 157, 160, 168, 169, 171, 174, 188, 190, 192, 193, 204, 208, 213, 215, 217, 219, 224, 229, 232, 235, 242, 243, 246, 249, 268, 273, 280, 285, 286, 292, 297, 299, 300, 302, 308, 322, 324, 325, 337, 339, 340, 344, 345, 346, 352, 353], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 51, 53, 56, 57, 60, 61, 62, 64, 65, 66, 68, 70, 71, 73, 74, 77, 78, 79, 80, 81, 82, 83, 90, 91, 92, 93, 96, 97, 100, 102, 104, 108, 109, 110, 111, 112, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 259, 260, 262, 263, 266, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 289, 290, 291, 292, 297, 299, 301, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 316, 317, 318, 320, 321, 323, 325, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 27, 29, 30, 31, 33, 34, 35, 36, 38, 40, 41, 42, 43, 46, 48, 51, 53, 56, 57, 60, 61, 62, 63, 64, 66, 70, 71, 74, 76, 77, 78, 79, 83, 86, 90, 97, 100, 102, 104, 108, 120, 121, 122, 123, 124, 126, 127, 129, 131, 134, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 152, 153, 154, 157, 159, 167, 168, 170, 171, 173, 174, 179, 181, 182, 183, 184, 186, 189, 191, 193, 194, 195, 196, 197, 199, 200, 204, 205, 206, 207, 208, 209, 213, 214, 215, 217, 219, 224, 227, 228, 229, 230, 232, 233, 234, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 254, 255, 256, 257, 258, 259, 260, 261, 263, 267, 268, 270, 271, 272, 273, 275, 277, 278, 279, 284, 285, 286, 291, 292, 297, 316, 322, 324, 327, 328, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354], "declar": [0, 5, 8, 15, 16, 17, 19, 25, 26, 90, 96, 120, 194, 199, 227, 231, 232, 233, 238, 243, 328], "describ": [0, 5, 7, 8, 10, 11, 14, 16, 17, 18, 22, 25, 27, 28, 31, 32, 35, 36, 38, 43, 77, 78, 83, 85, 86, 90, 99, 109, 111, 118, 120, 121, 124, 126, 128, 129, 130, 132, 148, 151, 187, 188, 190, 191, 193, 194, 196, 204, 225, 228, 229, 230, 240, 243, 244, 245, 247, 248, 249, 255, 256, 259, 263, 270, 279, 290, 292, 324, 325, 342, 350, 351, 353], "our": [0, 1, 2, 3, 4, 14, 16, 22, 23, 28, 31, 33, 35, 39, 40, 41, 206, 229, 240, 249, 268, 285, 324, 326, 336, 338, 340, 341, 342, 352, 353], "A": [0, 2, 5, 8, 9, 10, 12, 13, 15, 18, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 39, 49, 53, 54, 65, 68, 77, 81, 82, 100, 116, 117, 120, 129, 132, 133, 135, 143, 146, 150, 153, 168, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 193, 197, 204, 205, 206, 212, 224, 229, 234, 238, 240, 242, 243, 244, 245, 247, 249, 250, 252, 253, 259, 262, 263, 265, 267, 268, 272, 273, 274, 275, 276, 277, 278, 280, 286, 287, 293, 297, 299, 300, 317, 319, 320, 321, 323, 324, 334, 337, 338, 341, 342, 343, 351, 352, 356], "detail": [0, 1, 2, 16, 32, 34, 35, 46, 78, 100, 185, 193, 204, 224, 231, 232, 275, 277, 325, 337, 338, 339, 340, 341, 350, 351, 352, 353], "descript": [0, 5, 17, 35, 36, 37, 42, 99, 122, 124, 133, 135, 143, 146, 284, 334, 343], "gener": [0, 5, 9, 11, 14, 15, 16, 17, 18, 22, 23, 28, 29, 34, 36, 37, 44, 45, 48, 51, 53, 56, 62, 77, 96, 100, 101, 102, 104, 105, 106, 111, 119, 122, 126, 131, 148, 149, 187, 188, 193, 194, 201, 204, 205, 207, 208, 209, 210, 211, 214, 215, 222, 223, 224, 232, 234, 235, 239, 241, 243, 246, 249, 255, 256, 261, 274, 280, 284, 292, 309, 331, 332, 333, 334, 342, 343, 352, 353, 354], "found": [0, 3, 9, 22, 31, 35, 36, 96, 119, 148, 149, 170, 231, 240, 244, 245, 246, 247, 248, 254, 257, 259, 260, 263, 289, 325, 326, 334, 344, 350, 354], "section": [0, 1, 2, 3, 5, 7, 9, 10, 14, 17, 18, 22, 25, 26, 31, 33, 35, 39, 40, 42, 43, 46, 77, 78, 96, 179, 185, 193, 240, 244, 245, 247, 259, 263, 277, 325, 329, 333, 334, 352, 354], "directli": [0, 9, 12, 16, 17, 28, 43, 69, 123, 128, 200, 229, 234, 235, 243, 246, 260, 268, 284, 327, 342, 352, 353, 354], "via": [0, 9, 10, 14, 16, 17, 18, 20, 23, 24, 25, 26, 34, 90, 96, 100, 111, 118, 122, 126, 132, 167, 170, 196, 198, 205, 224, 225, 227, 228, 229, 230, 232, 234, 235, 238, 242, 243, 246, 249, 260, 265, 270, 271, 277, 325, 334, 342, 351, 352, 353, 354], "method": [0, 1, 2, 3, 6, 12, 14, 15, 16, 17, 18, 21, 24, 25, 26, 28, 29, 31, 32, 33, 34, 39, 41, 43, 90, 97, 99, 100, 102, 119, 122, 126, 127, 128, 129, 149, 151, 153, 154, 167, 169, 171, 173, 179, 185, 193, 194, 195, 199, 204, 205, 206, 207, 208, 209, 213, 214, 215, 222, 224, 227, 228, 229, 232, 233, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 256, 259, 260, 261, 263, 265, 266, 268, 270, 271, 273, 274, 275, 278, 279, 281, 284, 285, 290, 292, 307, 308, 317, 319, 325, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 352, 353, 354, 355, 356], "look": [0, 1, 4, 14, 16, 23, 30, 34, 35, 40, 126, 246, 260, 282, 285, 325, 343], "avail": [0, 4, 5, 6, 8, 18, 25, 27, 29, 31, 32, 36, 37, 46, 63, 80, 132, 148, 153, 154, 167, 187, 239, 240, 244, 245, 246, 247, 248, 259, 260, 263, 292, 324, 325, 335, 336, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355], "qpu": [0, 1, 2, 3, 7, 8, 9, 14, 16, 18, 23, 24, 27, 28, 29, 30, 31, 32, 34, 38, 40, 41, 44, 45, 55, 57, 59, 60, 61, 64, 66, 67, 75, 79, 80, 82, 83, 85, 86, 90, 96, 99, 100, 102, 122, 124, 126, 149, 170, 178, 181, 182, 183, 184, 186, 189, 191, 195, 241, 246, 260, 265, 266, 268, 270, 271, 273, 274, 275, 276, 278, 279, 280, 324, 327, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 352, 353, 355], "execut": [0, 3, 5, 7, 8, 9, 10, 14, 17, 18, 22, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 57, 60, 61, 64, 80, 86, 90, 96, 100, 102, 126, 170, 178, 181, 182, 183, 184, 185, 186, 224, 227, 228, 232, 254, 264, 267, 271, 274, 276, 277, 283, 284, 285, 286, 290, 324, 325, 327, 328, 333, 334, 344, 345, 346, 347, 348, 349, 353, 355], "more": [0, 1, 3, 5, 9, 11, 16, 17, 21, 23, 25, 26, 27, 31, 34, 35, 39, 41, 48, 53, 56, 62, 78, 90, 96, 100, 128, 169, 170, 180, 192, 204, 205, 227, 228, 231, 232, 239, 275, 282, 284, 307, 325, 328, 334, 343, 351, 352, 353], "inform": [0, 2, 3, 5, 6, 10, 28, 29, 32, 33, 35, 36, 37, 39, 40, 60, 78, 79, 96, 124, 125, 126, 127, 169, 180, 181, 182, 183, 184, 186, 187, 192, 200, 204, 216, 222, 227, 228, 291, 307, 324, 325, 328, 351, 352, 353], "about": [0, 31, 36, 37, 96, 187, 200, 325, 352], "process": [0, 2, 5, 8, 12, 22, 27, 28, 29, 32, 34, 35, 39, 40, 41, 42, 87, 89, 90, 96, 99, 102, 126, 179, 180, 185, 205, 216, 224, 264, 265, 267, 283, 286, 290, 291, 292, 297, 300, 307, 353, 355], "sequenti": [0, 1, 3, 11, 39, 279, 324, 325, 350, 353], "qprog": [0, 29, 30], "number": [0, 1, 2, 6, 10, 15, 16, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 42, 70, 77, 79, 80, 86, 96, 99, 100, 115, 116, 120, 121, 124, 125, 126, 129, 131, 133, 143, 148, 149, 151, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 169, 170, 171, 172, 173, 181, 204, 208, 209, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 234, 235, 236, 237, 238, 240, 243, 244, 245, 247, 248, 249, 259, 263, 266, 268, 270, 272, 275, 279, 280, 282, 284, 285, 286, 307, 308, 310, 322, 324, 325, 334, 336, 337, 339, 341, 342, 345, 346, 348, 349, 351, 352, 353, 356], "qbit": [0, 1, 9, 11, 14, 15, 16, 17, 29, 30, 31, 40, 43, 77, 78, 79, 90, 96, 97, 100, 121, 128, 188, 190, 193, 195, 204, 205, 206, 213, 215, 217, 218, 219, 220, 221, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 239, 268, 273, 276, 287, 307, 308, 322, 323, 352], "nbqbit": [0, 14, 26, 31, 35, 40, 42, 77, 80, 86, 96, 99, 121, 124, 129, 133, 154, 173, 209, 225, 232, 273, 352, 353], "2": [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 35, 40, 41, 42, 43, 50, 51, 61, 69, 74, 77, 78, 80, 91, 96, 97, 118, 120, 122, 125, 126, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 157, 158, 160, 161, 162, 167, 168, 169, 170, 171, 173, 175, 176, 177, 186, 193, 195, 196, 202, 203, 204, 205, 207, 208, 209, 213, 215, 217, 218, 219, 220, 221, 224, 227, 228, 229, 231, 234, 235, 239, 242, 243, 244, 245, 247, 248, 249, 259, 260, 262, 263, 266, 268, 270, 273, 276, 279, 282, 284, 285, 294, 296, 301, 302, 307, 308, 310, 314, 316, 321, 322, 323, 331, 332, 336, 337, 338, 339, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356], "alloc": [0, 9, 10, 15, 51, 96, 207, 208, 209, 210, 211, 214, 215, 224, 227, 228, 229, 232, 235, 322, 330, 332], "some": [0, 5, 7, 9, 11, 14, 15, 16, 17, 18, 20, 21, 26, 28, 29, 31, 33, 34, 35, 39, 40, 41, 68, 79, 96, 100, 121, 122, 123, 126, 148, 165, 179, 193, 194, 200, 203, 204, 207, 210, 211, 222, 223, 224, 227, 228, 232, 234, 235, 236, 239, 241, 246, 250, 252, 253, 260, 265, 267, 271, 292, 325, 333, 334, 343, 345, 346, 347, 348, 349, 352], "qalloc": [0, 1, 3, 9, 10, 11, 12, 14, 15, 16, 29, 30, 31, 77, 79, 96, 97, 149, 195, 204, 205, 206, 209, 224, 227, 228, 232, 233, 235, 268, 276, 287, 352, 353], "appli": [0, 1, 5, 8, 10, 15, 17, 19, 23, 31, 34, 42, 51, 68, 73, 77, 97, 128, 129, 130, 148, 149, 161, 163, 167, 170, 187, 188, 189, 190, 191, 192, 196, 205, 206, 221, 224, 227, 229, 231, 235, 268, 276, 285, 292, 314, 315, 316, 320, 322, 323, 325, 343, 352, 353], "export": [0, 5, 52, 53, 224], "to_circ": [0, 1, 3, 9, 11, 12, 14, 15, 16, 29, 30, 31, 48, 53, 56, 62, 77, 79, 96, 97, 149, 193, 195, 204, 205, 206, 207, 208, 209, 213, 214, 215, 224, 235, 239, 268, 276, 287, 325, 352, 353], "processor": [0, 3, 28, 90, 96, 126, 132, 285, 324, 355], "unit": [0, 2, 8, 27, 28, 34, 286, 292, 306, 314, 316, 355], "factori": [0, 28, 249, 342], "default": [0, 2, 3, 6, 9, 28, 29, 30, 35, 36, 37, 43, 48, 51, 53, 56, 57, 60, 61, 62, 64, 66, 68, 70, 91, 96, 97, 100, 102, 104, 105, 106, 107, 114, 120, 121, 124, 126, 128, 129, 131, 149, 153, 154, 159, 160, 161, 163, 165, 167, 170, 171, 172, 173, 179, 182, 183, 186, 187, 188, 189, 190, 191, 192, 195, 204, 205, 210, 212, 213, 224, 232, 234, 235, 236, 239, 240, 241, 243, 245, 246, 247, 249, 260, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 278, 279, 280, 282, 283, 284, 285, 287, 289, 290, 291, 297, 298, 299, 300, 303, 307, 308, 316, 321, 322, 323, 327, 328, 343, 351], "one": [0, 3, 4, 5, 6, 9, 10, 14, 15, 16, 17, 18, 23, 24, 25, 26, 27, 29, 30, 31, 35, 39, 41, 71, 73, 74, 77, 79, 96, 102, 119, 120, 122, 126, 128, 129, 148, 150, 152, 161, 164, 168, 169, 170, 171, 174, 179, 192, 193, 204, 224, 231, 234, 238, 240, 244, 245, 246, 247, 248, 249, 250, 259, 260, 263, 264, 265, 268, 269, 271, 275, 279, 282, 284, 285, 290, 292, 308, 322, 324, 325, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 352, 353], "get_default_qpu": [0, 1, 2, 3, 16, 28, 29, 30, 31, 40, 41, 43, 96, 99, 100, 149, 195, 268, 283, 325, 344, 345, 346, 347, 348, 349, 352, 353], "to_job": [0, 1, 2, 3, 11, 16, 18, 21, 23, 24, 26, 28, 29, 30, 31, 33, 34, 40, 41, 43, 79, 96, 126, 128, 149, 195, 246, 260, 268, 276, 287, 325, 337, 338, 339, 340, 341, 344, 352, 353], "submit": [0, 1, 2, 3, 5, 16, 27, 28, 29, 30, 31, 34, 35, 39, 40, 41, 43, 57, 60, 61, 63, 64, 79, 96, 100, 149, 195, 268, 271, 276, 278, 284, 285, 287, 290, 291, 325, 328, 329, 337, 338, 339, 340, 341, 344, 352, 353], "iter": [0, 1, 3, 29, 31, 41, 179, 180, 201, 224, 235, 264, 266, 267, 270, 271, 275, 280, 325, 353], "over": [0, 1, 5, 11, 23, 29, 34, 40, 54, 57, 68, 74, 78, 90, 96, 121, 128, 204, 224, 231, 235, 249, 260, 282, 318], "final": [0, 1, 3, 8, 10, 12, 16, 18, 21, 26, 28, 29, 30, 31, 32, 33, 35, 40, 43, 74, 87, 89, 96, 121, 126, 194, 219, 220, 235, 238, 240, 243, 244, 245, 247, 248, 259, 261, 263, 268, 343, 352, 353], "vector": [0, 23, 32, 36, 37, 70, 71, 73, 74, 124, 148, 156, 158, 170, 240, 246, 260, 266, 292, 293, 295, 296, 301, 312, 322, 335], "all": [0, 1, 4, 5, 9, 16, 18, 19, 28, 29, 30, 31, 35, 36, 40, 41, 53, 54, 75, 78, 79, 80, 94, 96, 100, 104, 107, 126, 129, 130, 132, 133, 165, 169, 178, 187, 191, 193, 200, 201, 204, 205, 213, 215, 217, 218, 219, 220, 222, 224, 229, 235, 239, 246, 247, 249, 258, 259, 264, 266, 267, 269, 270, 273, 274, 275, 276, 278, 279, 280, 284, 287, 291, 292, 324, 325, 330, 333, 334, 345, 351, 352], "compon": [0, 35, 122], "": [0, 1, 3, 5, 10, 14, 16, 17, 19, 21, 29, 31, 43, 57, 59, 61, 63, 65, 99, 100, 132, 149, 157, 158, 160, 170, 193, 195, 202, 207, 209, 212, 224, 231, 240, 241, 243, 246, 252, 260, 261, 274, 279, 282, 286, 335, 352, 353, 356], "few": [0, 1, 3, 16, 42, 193, 334, 343], "dedic": [0, 5, 8, 18, 43, 126, 292, 334], "atom": [0, 171, 325, 350, 352], "task": [0, 273, 333], "languag": [0, 5, 17, 324], "Then": [0, 1, 16, 39, 74, 149, 170, 179, 204, 235, 268, 282, 324, 331], "remain": [0, 5, 168, 170, 172, 204, 205, 325], "instanti": [0, 3, 11, 35, 60, 61, 77, 102, 119, 149, 196, 197, 200, 205, 222, 225, 227, 228, 229, 230, 234, 241, 272, 286], "instal": [0, 5, 46, 170, 324, 325, 327], "algorithm": [0, 5, 7, 8, 9, 11, 16, 25, 27, 28, 34, 39, 148, 181, 182, 183, 184, 186, 209, 239, 264, 266, 273, 275, 280, 325, 333, 336, 349, 352, 353, 355], "framework": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 18, 31, 33, 35, 39, 40, 41, 43, 75, 90, 194, 246, 268, 343, 355], "advanc": [1, 4, 7, 9, 11, 13, 27, 31, 39, 48, 51, 53, 56, 62, 96, 111, 118, 193, 194, 324, 343], "onli": [1, 4, 5, 6, 12, 15, 16, 17, 18, 21, 25, 26, 28, 29, 30, 32, 35, 40, 41, 42, 43, 96, 97, 100, 118, 120, 124, 125, 129, 130, 148, 149, 154, 159, 163, 170, 171, 192, 199, 205, 208, 213, 215, 217, 219, 220, 222, 224, 227, 229, 230, 233, 235, 241, 246, 256, 260, 273, 279, 283, 284, 285, 287, 297, 316, 325, 332, 333, 334, 345, 346, 347, 348, 349, 352, 353], "support": [1, 2, 4, 5, 6, 7, 12, 15, 28, 30, 34, 35, 39, 42, 65, 79, 96, 99, 100, 111, 118, 128, 204, 246, 260, 284, 325, 332], "sever": [1, 5, 9, 12, 28, 31, 32, 35, 36, 63, 68, 70, 71, 90, 95, 96, 100, 119, 264, 279, 324, 351, 353], "paradigm": [1, 7, 8, 333], "base": [1, 5, 7, 8, 12, 16, 25, 31, 33, 43, 68, 75, 171, 178, 180, 193, 206, 209, 212, 213, 214, 215, 231, 238, 254, 264, 266, 267, 270, 275, 278, 280, 284, 285, 292, 315, 324, 325, 333, 350, 351, 352, 353, 355], "guid": [1, 4, 27, 46, 96, 187, 193, 292, 355], "page": [1, 4, 5, 11, 29, 33, 35, 36, 37, 43, 46, 284, 326, 327, 351, 352], "focu": [1, 268], "modul": [1, 2, 5, 8, 9, 12, 18, 23, 39, 46, 51, 67, 68, 75, 77, 81, 82, 83, 90, 118, 120, 132, 148, 187, 193, 201, 205, 206, 216, 224, 238, 285, 287, 292, 325, 326, 328, 329, 344, 350, 351, 352, 354], "requir": [1, 3, 5, 6, 16, 26, 31, 35, 40, 41, 43, 75, 78, 86, 96, 100, 120, 124, 129, 206, 224, 235, 252, 261, 265, 267, 268, 273, 279, 325, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 356], "which": [1, 3, 5, 6, 9, 12, 13, 16, 18, 19, 20, 24, 29, 31, 33, 34, 35, 39, 40, 41, 42, 43, 53, 54, 60, 64, 68, 71, 77, 78, 81, 82, 90, 96, 102, 116, 121, 122, 123, 126, 129, 130, 157, 160, 168, 170, 179, 182, 183, 186, 188, 190, 193, 213, 215, 217, 218, 223, 224, 227, 228, 232, 236, 238, 240, 241, 243, 245, 246, 247, 249, 255, 260, 263, 265, 266, 268, 278, 279, 282, 284, 285, 290, 316, 317, 318, 322, 323, 324, 328, 333, 334, 341, 342, 348, 351, 352, 353], "includ": [1, 5, 9, 23, 28, 34, 48, 51, 53, 56, 62, 71, 90, 96, 122, 159, 161, 163, 167, 170, 193, 194, 205, 208, 209, 224, 254, 255, 256, 257, 258, 271, 272, 284, 310, 325, 350, 351, 354, 355], "nativ": [1, 15, 28, 96], "reli": [1, 23, 297, 325, 333, 351], "ad": [1, 9, 16, 26, 32, 35, 48, 53, 56, 62, 208, 212, 224, 232, 266, 314, 325], "either": [1, 5, 10, 17, 32, 35, 39, 40, 96, 124, 129, 131, 170, 179, 180, 181, 182, 183, 184, 186, 192, 204, 231, 238, 242, 266, 282, 284, 289, 328, 353], "qfunc": [1, 3, 9, 193, 325], "class": [1, 5, 9, 10, 13, 16, 20, 23, 24, 25, 26, 28, 31, 34, 35, 40, 41, 43, 51, 53, 54, 57, 60, 61, 63, 64, 66, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 94, 95, 96, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 114, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 143, 146, 148, 153, 154, 161, 168, 169, 170, 173, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 204, 205, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 291, 292, 294, 314, 315, 316, 317, 319, 320, 321, 322, 323, 325, 328, 329, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 351, 352, 353], "let": [1, 14, 17, 30, 221, 231, 282, 325, 351, 352, 353], "search": [1, 41, 170, 195, 324, 343], "find": [1, 18, 22, 31, 34, 39, 96, 148, 157, 279, 335, 336, 338, 341, 343, 344, 347, 348, 349, 352], "element": [1, 23, 24, 122, 131, 149, 187, 191, 199, 233, 246, 260, 271, 286, 311, 312, 356], "unstructur": 1, "space": [1, 23, 41, 90, 121, 148, 168, 172, 224, 292, 325, 350, 352, 353], "quadrat": [1, 22, 34, 243, 246, 260, 356], "faster": [1, 19, 36, 37, 249, 325], "than": [1, 5, 25, 31, 34, 35, 90, 100, 121, 128, 168, 232, 235, 239, 247, 263, 280, 325, 351, 353], "random": [1, 11, 21, 23, 24, 34, 168, 169, 192, 204, 231, 259, 272, 275, 278, 279, 280, 286, 287, 307, 308, 334, 340, 353, 356], "classic": [1, 9, 23, 28, 29, 33, 34, 41, 68, 72, 74, 78, 88, 90, 96, 97, 127, 149, 193, 196, 198, 199, 204, 224, 229, 230, 232, 240, 244, 245, 247, 248, 249, 259, 263, 264, 270, 278, 287, 324, 325, 336, 342, 349, 350, 353], "In": [1, 3, 4, 5, 8, 9, 13, 14, 15, 16, 18, 23, 27, 28, 29, 30, 31, 34, 35, 39, 40, 41, 42, 43, 70, 71, 78, 96, 167, 193, 201, 204, 209, 224, 234, 235, 241, 243, 249, 255, 268, 276, 279, 282, 285, 305, 329, 333, 334, 342, 343, 351], "model": [1, 18, 34, 85, 123, 148, 158, 162, 188, 189, 192, 193, 243, 246, 260, 292, 351, 352, 353, 354, 356], "problem": [1, 9, 11, 16, 22, 23, 24, 31, 34, 116, 121, 148, 149, 178, 180, 181, 182, 183, 184, 186, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 261, 263, 279, 286, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 353, 356], "specifi": [1, 2, 3, 6, 14, 16, 17, 18, 19, 25, 28, 34, 60, 61, 68, 70, 71, 73, 96, 122, 128, 129, 170, 187, 188, 189, 190, 191, 193, 195, 204, 205, 213, 215, 217, 218, 219, 220, 224, 230, 231, 234, 240, 243, 246, 250, 260, 268, 273, 286, 325, 337, 338, 339, 340, 341, 342, 343, 356], "e": [1, 3, 4, 5, 6, 7, 9, 10, 11, 13, 15, 16, 17, 19, 22, 23, 24, 25, 28, 31, 33, 34, 35, 39, 40, 41, 42, 43, 51, 64, 68, 71, 77, 86, 91, 96, 100, 119, 120, 121, 126, 130, 149, 151, 154, 160, 167, 168, 170, 174, 188, 189, 190, 196, 199, 201, 204, 207, 208, 210, 221, 224, 227, 228, 229, 232, 233, 235, 238, 239, 241, 243, 246, 249, 260, 268, 270, 271, 274, 278, 279, 281, 282, 292, 297, 299, 300, 306, 308, 316, 320, 321, 322, 323, 325, 328, 335, 336, 337, 338, 339, 341, 342, 345, 346, 347, 348, 349, 352, 353, 355], "mathcal": [1, 150, 155, 157, 168, 282, 297, 299, 300, 306, 307, 308, 320, 321, 322, 323], "x": [1, 3, 9, 10, 11, 12, 16, 17, 19, 20, 26, 51, 65, 68, 73, 100, 120, 128, 141, 149, 150, 152, 162, 168, 170, 171, 173, 175, 177, 209, 221, 234, 240, 249, 260, 273, 287, 296, 302, 310, 325, 331, 335, 343, 351, 353], "rightarrow": 1, "we": [1, 3, 5, 8, 10, 11, 14, 15, 16, 17, 23, 24, 25, 27, 28, 29, 30, 41, 53, 71, 78, 91, 96, 118, 122, 148, 149, 170, 193, 194, 200, 204, 205, 209, 229, 231, 240, 245, 246, 259, 260, 270, 278, 279, 318, 329, 333, 334, 336, 340, 341, 343, 348, 349, 350, 351, 352, 353], "consist": [1, 5, 8, 12, 18, 24, 31, 34, 68, 128, 170, 224, 238, 243, 265, 279, 285, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349], "altern": [1, 10, 36, 37, 43, 161, 292, 325, 342, 351], "oper": [1, 9, 10, 11, 16, 17, 18, 19, 20, 23, 31, 36, 38, 40, 41, 43, 69, 76, 78, 96, 97, 118, 119, 120, 121, 126, 128, 148, 149, 151, 154, 155, 167, 168, 173, 188, 189, 190, 191, 193, 195, 196, 198, 200, 203, 205, 206, 207, 209, 211, 212, 216, 223, 224, 225, 229, 230, 231, 232, 238, 242, 249, 266, 271, 285, 303, 305, 306, 308, 309, 314, 316, 322, 325, 352, 353, 354], "pi": [1, 10, 17, 41, 51, 120, 168, 170, 174, 193, 221, 231, 234, 273, 353], "sqrt": [1, 17, 28, 29, 30, 91, 118, 125, 221, 301, 302, 308, 309, 314, 316, 322], "frac": [1, 17, 24, 100, 122, 153, 157, 158, 160, 167, 168, 170, 204, 221, 245, 249, 270, 302, 308, 316, 321, 323, 334, 343, 351], "4": [1, 5, 10, 11, 14, 16, 17, 21, 24, 25, 26, 31, 42, 43, 51, 79, 96, 104, 106, 118, 128, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 154, 164, 165, 166, 169, 173, 175, 176, 177, 194, 204, 209, 222, 224, 234, 235, 240, 244, 245, 247, 256, 263, 280, 294, 296, 323, 337, 338, 339, 340, 341, 344, 345, 346, 347, 349, 351, 352, 353, 356], "where": [1, 5, 11, 17, 23, 24, 34, 41, 91, 96, 100, 120, 122, 125, 149, 152, 157, 160, 168, 170, 195, 202, 204, 213, 215, 217, 218, 219, 220, 223, 236, 243, 246, 249, 260, 262, 279, 284, 285, 314, 316, 318, 336, 337, 338, 339, 340, 341, 342, 349], "probabl": [1, 2, 14, 29, 31, 32, 34, 35, 40, 70, 71, 73, 88, 91, 96, 100, 124, 125, 126, 170, 192, 195, 234, 268, 285, 308, 314, 316, 343], "uniform": [1, 193, 202, 237], "distribut": [1, 4, 5, 96, 124, 126, 193, 202, 204, 237, 285, 325, 353], "u_f": 1, "rangl": [1, 11, 13, 15, 16, 28, 29, 30, 31, 43, 68, 74, 91, 100, 125, 149, 151, 190, 193, 195, 202, 203, 204, 207, 208, 209, 211, 213, 214, 215, 217, 218, 219, 220, 221, 224, 231, 232, 235, 237, 243, 249, 268, 270, 282, 284, 285, 301, 314, 342, 343], "mapsto": [1, 207, 208, 209, 211, 213, 214, 215, 217, 218, 219, 220], "u_d": 1, "langl": [1, 11, 28, 30, 43, 91, 100, 125, 149, 190, 195, 202, 203, 270, 282, 301, 342, 353], "sum_": [1, 23, 24, 34, 150, 153, 158, 160, 162, 168, 174, 204, 221, 243, 249, 285, 286, 320, 321, 322, 351], "dive": 1, "implement": [1, 9, 10, 13, 14, 15, 16, 17, 18, 34, 35, 41, 66, 76, 77, 78, 90, 96, 97, 111, 120, 121, 148, 151, 154, 167, 168, 172, 173, 193, 195, 197, 202, 203, 204, 205, 206, 212, 213, 214, 215, 216, 224, 236, 239, 249, 251, 252, 261, 266, 267, 268, 271, 273, 279, 290, 314, 315, 317, 319, 322, 325, 342, 351, 353], "To": [1, 5, 6, 10, 17, 18, 21, 23, 24, 28, 96, 97, 130, 148, 168, 193, 240, 244, 245, 247, 248, 259, 263, 268, 269, 272, 327, 328, 340, 341, 348, 350, 351, 352, 353], "keep": [1, 16, 31, 43, 205, 224, 264, 272, 324], "thing": [1, 15, 23, 206, 325], "consid": [1, 10, 14, 16, 17, 28, 42, 100, 204, 221, 224, 235, 239, 284, 328, 351, 353], "2k": [1, 100], "set": [1, 2, 3, 5, 6, 9, 10, 12, 13, 17, 28, 29, 31, 35, 39, 41, 42, 43, 48, 53, 56, 57, 62, 64, 66, 70, 77, 78, 90, 96, 97, 99, 104, 105, 107, 110, 111, 118, 119, 120, 124, 125, 126, 129, 149, 154, 157, 165, 168, 170, 171, 172, 173, 188, 194, 201, 205, 222, 224, 227, 229, 231, 232, 234, 235, 236, 239, 241, 242, 249, 267, 269, 271, 274, 276, 278, 279, 280, 284, 317, 324, 325, 334, 336, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349, 353, 354], "put": [1, 6, 48, 53, 56, 62, 160], "qubit": [1, 9, 10, 13, 15, 16, 17, 18, 19, 21, 23, 24, 26, 28, 29, 30, 31, 35, 36, 37, 39, 42, 48, 51, 53, 56, 62, 64, 65, 68, 70, 71, 73, 74, 77, 78, 80, 86, 90, 99, 100, 121, 124, 126, 128, 129, 130, 133, 143, 148, 154, 155, 156, 159, 161, 163, 164, 165, 166, 168, 169, 170, 173, 188, 189, 190, 191, 192, 193, 195, 204, 207, 208, 209, 210, 211, 214, 215, 223, 224, 227, 228, 229, 230, 232, 235, 236, 241, 249, 262, 264, 268, 273, 284, 285, 287, 307, 308, 310, 321, 322, 323, 324, 325, 328, 330, 332, 351, 352, 353, 356], "diagon": [1, 23, 24, 149, 162, 170, 239, 241, 242, 243, 246, 262, 273, 342, 352, 356], "basi": [1, 5, 16, 21, 28, 29, 89, 90, 96, 124, 126, 128, 148, 153, 154, 168, 170, 171, 173, 174, 175, 176, 177, 188, 190, 209, 224, 229, 241, 264, 273, 281, 285, 295, 296, 310, 311, 312, 320, 322, 325, 343, 350, 351, 352], "wall": [1, 31], "flip": [1, 12, 16, 34, 96, 227, 229, 230, 232, 243, 249, 352], "control": [1, 5, 9, 16, 17, 18, 41, 68, 77, 78, 97, 129, 171, 193, 200, 204, 224, 235, 324, 325], "z": [1, 2, 10, 16, 17, 19, 20, 21, 23, 25, 26, 28, 29, 31, 65, 128, 171, 175, 176, 177, 224, 227, 241, 243, 273, 310, 351], "undo": 1, "chang": [1, 5, 6, 17, 18, 21, 23, 34, 96, 148, 168, 170, 174, 213, 215, 217, 219, 220, 268, 273, 278, 284, 325, 343, 352, 353], "given": [1, 3, 5, 10, 23, 24, 28, 29, 31, 34, 40, 41, 43, 77, 96, 100, 102, 111, 118, 122, 148, 149, 150, 170, 188, 190, 203, 221, 224, 240, 244, 245, 247, 248, 259, 263, 266, 268, 286, 295, 299, 314, 316, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 352, 353], "k": [1, 73, 91, 100, 125, 160, 162, 167, 183, 204, 221, 223, 234, 236, 238, 247, 249, 254, 270, 322, 324, 334, 338, 344, 351], "return": [1, 3, 9, 10, 14, 16, 17, 27, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 48, 49, 51, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 69, 70, 71, 73, 74, 78, 91, 94, 95, 96, 98, 99, 100, 102, 104, 106, 107, 110, 111, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 129, 131, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 192, 194, 195, 197, 202, 203, 204, 205, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 268, 269, 270, 271, 274, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 320, 321, 322, 323, 325, 328, 344], "routin": [1, 9, 10, 15, 16, 17, 28, 41, 96, 161, 163, 165, 170, 195, 202, 203, 204, 206, 207, 208, 209, 210, 211, 214, 215, 216, 221, 223, 224, 235, 236, 237, 273], "numpi": [1, 3, 10, 11, 21, 23, 24, 31, 36, 38, 41, 68, 69, 70, 71, 73, 74, 111, 116, 117, 120, 121, 122, 124, 149, 153, 154, 168, 169, 204, 231, 234, 240, 244, 245, 246, 247, 249, 251, 253, 259, 260, 263, 275, 278, 286, 322, 325, 337, 338, 339, 340, 341, 347, 349, 351, 352, 353, 356], "np": [1, 3, 10, 11, 21, 23, 24, 25, 31, 34, 41, 74, 100, 111, 120, 121, 126, 149, 150, 152, 153, 154, 157, 158, 160, 162, 168, 169, 171, 172, 173, 174, 194, 204, 231, 234, 240, 244, 245, 246, 247, 259, 260, 263, 278, 279, 280, 285, 295, 296, 310, 311, 312, 313, 318, 320, 321, 322, 323, 333, 337, 338, 339, 340, 341, 343, 347, 349, 351, 352, 353, 356], "everyth": [1, 16, 353], "need": [1, 4, 5, 10, 12, 18, 19, 23, 24, 28, 31, 34, 39, 40, 41, 60, 61, 70, 73, 75, 86, 90, 96, 120, 122, 129, 155, 209, 231, 234, 235, 240, 244, 245, 247, 248, 259, 263, 265, 286, 290, 325, 326, 334, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 351, 352, 353], "standard": [1, 23, 28, 29, 30, 66, 91, 118, 125, 187, 192, 194, 230, 249, 271, 284, 311, 312, 353], "unrol": [1, 234], "fals": [1, 16, 35, 40, 48, 51, 53, 56, 62, 64, 78, 79, 92, 93, 96, 97, 118, 120, 124, 129, 149, 153, 154, 159, 163, 165, 170, 171, 173, 193, 201, 205, 224, 232, 234, 236, 239, 241, 243, 244, 245, 247, 248, 249, 255, 256, 263, 267, 268, 269, 270, 271, 272, 274, 275, 278, 279, 280, 284, 287, 298, 321, 322, 323], "wire": [1, 10, 14, 15, 205, 224, 229, 235], "rang": [1, 3, 10, 11, 17, 20, 31, 35, 39, 43, 149, 170, 195, 234, 235, 239, 249, 287, 334], "ctrl": [1, 10, 17, 31, 65, 77, 96, 205, 269], "list": [1, 2, 5, 7, 9, 18, 28, 29, 31, 32, 33, 35, 36, 39, 40, 41, 48, 51, 53, 56, 57, 61, 62, 64, 65, 68, 70, 71, 73, 74, 77, 78, 86, 88, 90, 94, 95, 96, 98, 99, 100, 111, 114, 118, 119, 121, 124, 125, 126, 127, 128, 129, 131, 148, 149, 150, 151, 154, 155, 157, 161, 168, 169, 171, 172, 173, 187, 189, 191, 194, 201, 205, 222, 224, 227, 228, 229, 230, 232, 235, 242, 243, 244, 245, 247, 248, 249, 255, 262, 263, 266, 270, 282, 284, 285, 290, 291, 292, 301, 310, 311, 312, 313, 315, 317, 318, 320, 322, 323, 325, 328, 331, 332, 337, 338, 339, 340, 341, 352, 353, 354], "qroutin": [1, 9, 10, 13, 14, 15, 16, 17, 151, 167, 170, 193, 195, 197, 202, 203, 204, 205, 207, 209, 210, 211, 221, 223, 225, 227, 228, 229, 230, 232, 234, 236, 237, 273, 352], "new_wir": [1, 10, 14, 15, 16, 195, 205, 225, 227, 228, 229, 230, 232, 235], "As": [1, 5, 15, 19, 25, 26, 29, 170, 231, 232, 273, 333, 341, 342, 348], "you": [1, 4, 5, 6, 10, 11, 12, 14, 15, 16, 20, 39, 43, 48, 53, 56, 60, 61, 62, 97, 118, 148, 185, 194, 213, 222, 224, 241, 271, 284, 324, 325, 326, 342, 350, 351, 352, 354], "see": [1, 5, 17, 19, 22, 23, 26, 29, 30, 31, 34, 41, 70, 78, 96, 100, 119, 160, 163, 169, 192, 198, 204, 224, 227, 228, 229, 231, 232, 234, 245, 247, 248, 259, 263, 273, 274, 275, 278, 280, 307, 325, 342, 351, 352, 353], "repeat": [1, 28, 30, 41, 219, 220, 334, 340], "lot": [1, 16, 40, 224, 239], "do": [1, 3, 4, 5, 6, 14, 23, 28, 35, 40, 91, 96, 100, 126, 168, 170, 222, 267, 268, 284, 285, 343, 351, 352, 353], "revert": [1, 96, 124], "them": [1, 2, 5, 8, 13, 15, 16, 18, 20, 22, 96, 102, 155, 178, 193, 235, 279, 334, 340, 352], "simplifi": [1, 13, 192, 193, 351, 352], "uncomput": [1, 13, 16, 205, 235, 324], "block": [1, 16, 28, 77, 234], "notic": [1, 5, 16, 17, 21, 41, 208, 290], "how": [1, 3, 5, 7, 16, 17, 18, 20, 22, 31, 33, 34, 39, 41, 42, 96, 160, 204, 235, 342, 351, 352, 353, 354], "don": [1, 5, 41, 71], "t": [1, 2, 5, 10, 11, 16, 17, 18, 19, 20, 21, 34, 41, 43, 48, 53, 56, 60, 62, 65, 71, 96, 100, 119, 120, 122, 126, 131, 151, 152, 160, 167, 168, 170, 224, 246, 249, 260, 286, 314, 316, 332, 337, 338, 339, 340, 341, 343, 345, 346, 347, 348, 349, 352, 353], "explicit": [1, 96, 122], "automat": [1, 4, 11, 16, 43, 97, 121, 154, 207, 208, 209, 214, 215, 222, 240, 244, 245, 247, 248, 259, 263, 325, 343, 353], "when": [1, 10, 11, 12, 14, 16, 23, 27, 28, 32, 34, 39, 43, 69, 70, 71, 73, 75, 79, 80, 90, 96, 97, 100, 104, 108, 109, 111, 112, 120, 170, 193, 194, 206, 224, 227, 228, 231, 232, 234, 235, 239, 241, 243, 249, 266, 273, 279, 280, 291, 292, 325, 330, 333, 334, 343, 351, 352, 353], "exit": [1, 16], "clearer": 1, "now": [1, 3, 4, 14, 15, 30, 42, 131, 149, 241, 325, 350, 351, 352, 353, 354], "have": [1, 2, 4, 5, 6, 7, 10, 11, 14, 15, 16, 18, 19, 28, 31, 34, 35, 41, 60, 70, 71, 73, 77, 78, 96, 100, 118, 119, 122, 130, 148, 162, 193, 224, 229, 232, 234, 246, 260, 268, 273, 279, 287, 322, 325, 326, 334, 342, 343, 351, 352, 353, 354], "palindrom": 1, "bit": [1, 4, 9, 12, 14, 16, 17, 20, 40, 68, 78, 88, 96, 124, 170, 193, 209, 221, 223, 224, 232, 236, 249, 284, 287, 343], "string": [1, 17, 51, 78, 96, 98, 119, 126, 128, 170, 188, 190, 222, 224, 249, 270, 281, 307, 308, 314, 316, 322, 323, 343], "own": [1, 5, 9, 10, 14, 18, 31, 33, 39, 77, 90, 122, 148, 250, 271, 324], "mirror": 1, "rememb": 1, "sign": [1, 96, 170, 243, 282], "xor": [1, 16, 196, 229, 242, 243], "b_1": 1, "b_": [1, 221], "b_2": 1, "place": [1, 5, 17, 40, 96, 100, 205, 213, 215, 217, 224, 246, 251, 252, 253, 267, 343], "second": [1, 15, 16, 29, 30, 31, 129, 135, 158, 160, 165, 179, 193, 208, 220, 246, 260, 285, 297, 299, 300, 301, 302, 334, 337, 339, 340, 345, 346], "half": [1, 285, 325], "its": [1, 5, 7, 10, 11, 15, 16, 18, 23, 29, 31, 34, 35, 39, 41, 43, 90, 91, 96, 100, 116, 122, 125, 126, 149, 167, 187, 190, 200, 201, 224, 229, 238, 243, 249, 250, 305, 320, 321, 323, 325, 334, 351, 352, 353], "so": [1, 3, 5, 8, 16, 28, 34, 41, 74, 96, 126, 158, 160, 161, 168, 170, 235, 246, 279, 287, 333, 334, 345, 351, 352, 353], "perform": [1, 3, 5, 9, 16, 18, 28, 30, 34, 35, 36, 38, 39, 41, 43, 68, 83, 96, 100, 126, 148, 167, 170, 171, 193, 195, 204, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 229, 236, 246, 249, 260, 261, 264, 265, 266, 267, 270, 273, 274, 281, 282, 318, 325, 353], "thu": [1, 16, 28, 79, 170, 188, 190, 192, 204, 205, 224, 232, 234, 235, 246, 267, 276, 343, 351, 353], "origin": [1, 5, 353], "onc": [1, 6, 11, 12, 22, 26, 78, 204, 266, 342, 352, 353], "again": [1, 235, 352], "is_palindrom": 1, "first_half": 1, "second_half": 1, "w1": [1, 235], "w2": [1, 235], "zip": [1, 31, 100, 324], "revers": [1, 5, 6, 15, 20, 39, 221, 232, 239, 284, 352], "And": [1, 10], "There": [1, 6, 77, 192, 193], "exactli": [1, 16, 232, 249, 333], "henc": [1, 18, 25, 170, 234, 333], "approx": [1, 167], "good": [1, 5, 16, 35, 170, 334, 353], "diff": [1, 120], "start": [1, 4, 16, 17, 21, 23, 24, 29, 30, 31, 33, 35, 39, 40, 41, 43, 68, 96, 102, 170, 179, 185, 205, 228, 232, 240, 244, 245, 247, 248, 249, 250, 259, 263, 265, 272, 277, 285, 290, 324, 342, 352, 355], "superposit": [1, 126, 229, 249], "nstep": [1, 41], "int": [1, 10, 14, 17, 61, 65, 70, 73, 77, 81, 82, 85, 86, 88, 96, 97, 99, 100, 102, 103, 111, 116, 117, 119, 120, 121, 124, 126, 127, 128, 129, 133, 135, 143, 146, 149, 150, 151, 152, 154, 155, 156, 157, 159, 161, 163, 165, 167, 168, 169, 170, 171, 172, 173, 179, 181, 183, 185, 188, 189, 190, 191, 194, 197, 198, 202, 204, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 232, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 256, 259, 262, 263, 265, 266, 270, 272, 275, 277, 279, 280, 282, 284, 285, 286, 290, 291, 297, 307, 308, 310, 311, 312, 315, 320, 321, 322, 323, 337, 338, 339, 340, 341], "_": [1, 16, 149, 150, 160, 168, 174, 195, 209, 211, 221, 235, 270, 282, 307, 316, 320, 321, 323, 351], "0000": 1, "2499999999999995": [1, 195], "0110": 1, "1001": 1, "1111": 1, "build": [1, 3, 9, 10, 11, 12, 13, 17, 18, 35, 41, 43, 77, 94, 95, 96, 99, 100, 119, 120, 124, 125, 129, 131, 148, 149, 151, 159, 164, 166, 195, 203, 208, 213, 214, 215, 217, 218, 219, 220, 221, 222, 225, 229, 241, 246, 249, 264, 266, 271, 309, 352, 353], "evalu": [1, 21, 41, 68, 72, 78, 90, 96, 100, 118, 120, 122, 124, 170, 224, 225, 227, 228, 229, 230, 231, 232, 242, 262, 274, 282, 285, 325], "output": [1, 3, 16, 31, 32, 33, 35, 51, 74, 78, 96, 100, 124, 126, 170, 221, 225, 227, 229, 230, 235, 285, 298, 324, 334], "decent": 1, "high": [1, 8, 9, 11, 16, 18, 34, 96, 100, 155, 157, 168, 172, 200, 206, 259, 285, 340, 345, 346, 347, 348, 349], "Of": [1, 10, 15, 16, 26, 28, 41], "cours": [1, 10, 15, 16, 26, 28, 343], "particularli": [1, 79], "help": [1, 8, 16, 31, 148, 149, 239, 271, 325, 326, 338, 350, 351, 353], "solv": [1, 22, 24, 25, 34, 148, 149, 178, 180, 181, 182, 183, 184, 186, 238, 240, 244, 245, 247, 248, 254, 255, 259, 261, 263, 324, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 353], "practic": [1, 15, 18, 28, 30, 34, 71, 243, 333, 334, 342, 343], "come": [1, 4, 10, 11, 15, 16, 17, 18, 43, 79, 170, 182, 183, 186, 193, 204, 240, 245, 246, 247, 260, 263, 285, 286, 343, 353], "level": [1, 8, 9, 11, 16, 18, 75, 94, 95, 96, 99, 100, 124, 125, 129, 169, 200, 206, 224, 227, 274, 285, 325, 342, 351, 352, 353, 354], "construct": [1, 3, 8, 14, 16, 17, 19, 26, 27, 41, 119, 121, 128, 148, 149, 152, 158, 161, 162, 163, 165, 168, 192, 194, 204, 224, 227, 232, 260, 266, 276, 303, 307, 308, 310, 311, 312, 313, 325, 342, 350, 352], "If": [1, 4, 5, 6, 17, 24, 31, 33, 35, 39, 40, 41, 48, 53, 56, 57, 60, 61, 62, 64, 77, 96, 100, 110, 118, 120, 121, 122, 124, 126, 129, 149, 154, 167, 170, 171, 179, 192, 194, 195, 204, 205, 213, 222, 224, 230, 234, 235, 241, 243, 249, 255, 265, 266, 270, 271, 274, 275, 276, 278, 279, 280, 284, 285, 289, 290, 311, 312, 316, 322, 325, 326, 337, 338, 339, 340, 341, 342, 351], "curiou": 1, "document": [1, 5, 7, 9, 36, 37, 41, 46, 68, 90, 169, 192, 200, 227, 228, 232, 238, 243, 278, 280, 284, 307, 325, 328, 351, 352], "complic": [1, 16, 224, 227], "data": [1, 31, 33, 35, 40, 41, 43, 51, 54, 69, 75, 77, 88, 90, 91, 94, 95, 96, 100, 124, 125, 129, 170, 204, 236, 271, 325, 344], "structur": [1, 12, 17, 31, 32, 69, 75, 78, 85, 86, 88, 90, 96, 120, 126, 148, 153, 154, 168, 170, 171, 194, 204, 222, 224, 241, 249, 267, 271, 284, 285, 290, 344, 351, 352], "ani": [2, 5, 9, 10, 13, 14, 16, 17, 23, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 53, 54, 60, 61, 66, 77, 78, 96, 100, 102, 111, 124, 129, 130, 131, 179, 185, 193, 207, 208, 210, 222, 224, 234, 235, 272, 278, 304, 326, 334, 343, 352, 354, 355], "must": [2, 5, 9, 31, 40, 41, 97, 100, 130, 150, 152, 153, 155, 160, 161, 268, 270, 272, 273, 279, 290, 317, 319, 325, 328, 354], "lift": [2, 197], "addit": [2, 3, 5, 8, 10, 13, 14, 15, 16, 20, 28, 32, 35, 41, 78, 79, 96, 100, 121, 149, 185, 193, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 224, 225, 255, 325, 341, 348, 351, 352], "shot": [2, 28, 29, 30, 33, 35, 43, 96, 100, 125, 126, 149, 285, 328, 353], "what": [2, 14, 33, 35, 40, 42, 71, 193, 222, 231, 290], "should": [2, 5, 16, 22, 31, 33, 35, 39, 40, 41, 48, 53, 56, 62, 63, 78, 96, 100, 118, 121, 122, 126, 153, 154, 170, 171, 173, 194, 199, 200, 205, 206, 213, 222, 223, 224, 227, 229, 233, 234, 236, 240, 241, 246, 247, 260, 263, 266, 267, 268, 271, 279, 286, 290, 325, 333, 351, 352, 354], "measur": [2, 3, 5, 9, 12, 17, 18, 28, 29, 30, 32, 33, 35, 39, 42, 43, 48, 51, 53, 56, 62, 64, 65, 68, 71, 73, 74, 78, 79, 87, 88, 96, 97, 100, 124, 125, 126, 149, 188, 190, 193, 209, 224, 231, 273, 279, 282, 284, 324, 325, 328, 332, 343, 352, 353], "observ": [2, 3, 8, 9, 11, 18, 20, 21, 25, 28, 31, 32, 33, 35, 39, 41, 42, 43, 64, 89, 96, 100, 126, 128, 149, 189, 191, 231, 239, 241, 242, 243, 246, 249, 251, 260, 262, 264, 266, 268, 272, 273, 281, 282, 285, 286, 324, 325, 328, 351, 352, 353, 355], "call": [2, 3, 9, 10, 12, 15, 16, 17, 19, 22, 23, 28, 35, 36, 38, 39, 41, 51, 96, 97, 99, 100, 119, 120, 122, 154, 161, 173, 179, 185, 193, 194, 197, 204, 207, 208, 209, 210, 211, 224, 234, 235, 240, 244, 245, 246, 247, 248, 259, 260, 263, 267, 271, 287, 292, 299, 314, 316, 317, 325, 333, 334, 344, 351, 353, 354, 356], "select": [2, 100, 148, 168, 172, 266, 325, 350, 352, 353], "take": [2, 12, 16, 21, 29, 31, 33, 34, 35, 39, 40, 41, 43, 79, 127, 170, 187, 194, 204, 231, 234, 235, 268, 274, 285, 322, 342, 343, 352], "argument": [2, 10, 12, 17, 19, 21, 31, 33, 35, 39, 40, 60, 61, 80, 95, 96, 100, 102, 111, 120, 127, 129, 131, 170, 185, 194, 195, 201, 204, 207, 208, 209, 210, 211, 222, 224, 227, 231, 232, 234, 235, 239, 241, 268, 271, 273, 274, 275, 278, 280, 281, 325, 344], "4999999999999999": [2, 16, 29, 40, 234], "context": [2, 16, 23, 283, 288, 292, 352], "clinalg": [2, 33, 99, 283, 289, 325], "extend": [2, 5, 7, 27, 95, 96, 118, 194, 235, 325], "plugin": [2, 3, 27, 28, 30, 31, 32, 35, 41, 42, 43, 44, 45, 57, 60, 61, 75, 79, 81, 90, 96, 99, 100, 114, 149, 178, 179, 181, 182, 183, 184, 186, 241, 285, 290, 291, 325, 342, 344, 345, 346, 347, 348, 349, 350, 352, 355], "capabl": [2, 7, 18, 27, 35, 36, 39, 40, 42, 101, 328, 334], "instanc": [2, 9, 10, 12, 14, 16, 17, 23, 24, 25, 28, 31, 33, 35, 36, 39, 40, 42, 57, 69, 77, 78, 94, 95, 96, 99, 100, 118, 120, 124, 125, 132, 193, 194, 205, 213, 224, 227, 228, 232, 239, 240, 244, 245, 246, 247, 248, 259, 260, 263, 268, 284, 292, 314, 316, 325, 328, 332, 334, 342, 343, 344], "compil": [2, 5, 9, 11, 12, 13, 35, 39, 41, 42, 51, 52, 53, 54, 57, 90, 96, 100, 205, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 290, 291, 325, 327, 355], "befor": [2, 4, 5, 6, 15, 31, 40, 43, 46, 160, 197, 205, 224, 267, 325, 343], "won": [2, 48, 53, 56, 62, 224], "limit": [2, 5, 18, 28, 36, 37, 39], "topologi": [2, 35, 42, 90, 99, 130, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 276], "scipyminimizeplugin": [2, 3, 31, 43, 99, 241, 264, 268, 325, 344, 345, 346, 347, 348, 349, 352, 353], "tri": [2, 31, 34], "minim": [2, 3, 11, 22, 24, 31, 41, 43, 243, 264, 268, 275, 278, 280, 290, 324, 333, 337, 342, 345, 346, 352, 353], "averag": [2, 28, 30, 33, 35, 41, 43, 292, 297, 307, 334], "valu": [2, 3, 5, 9, 10, 17, 23, 28, 30, 32, 33, 34, 35, 39, 41, 43, 57, 66, 68, 71, 73, 74, 78, 89, 95, 96, 98, 100, 116, 118, 120, 122, 124, 126, 127, 129, 131, 149, 170, 193, 194, 195, 209, 211, 213, 215, 217, 219, 222, 224, 227, 228, 229, 230, 231, 232, 234, 242, 243, 246, 250, 253, 255, 260, 262, 266, 270, 272, 274, 278, 279, 280, 282, 284, 285, 286, 287, 294, 335, 343, 352, 353], "rx": [2, 10, 17, 31, 42, 65, 96, 194, 231, 234, 268, 279, 325, 352, 353], "core": [2, 3, 8, 11, 12, 19, 20, 21, 26, 27, 30, 31, 35, 40, 41, 42, 43, 44, 45, 78, 148, 149, 150, 154, 168, 169, 172, 173, 175, 176, 177, 179, 188, 194, 205, 209, 231, 239, 251, 252, 253, 276, 325, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349, 351, 353], "theta": [2, 3, 10, 11, 17, 43, 96, 100, 149, 151, 194, 231, 234, 270, 279, 325, 352, 353], "angl": [2, 31, 39, 41, 51, 96, 118, 165, 231, 234, 268, 272, 279, 342, 353], "parameter_map": [2, 31, 41, 43, 100, 124, 149, 268], "9999999999999992": 2, "3": [2, 3, 4, 5, 6, 7, 11, 15, 16, 17, 20, 24, 25, 26, 31, 33, 35, 40, 41, 42, 43, 61, 80, 96, 97, 118, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 153, 154, 173, 175, 176, 177, 193, 195, 204, 224, 232, 234, 235, 238, 239, 240, 244, 245, 246, 247, 263, 266, 276, 278, 284, 286, 294, 308, 318, 327, 329, 333, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356], "141592614609586": 2, "9999999999999734": 2, "141592884676215": 2, "believ": 3, "well": [3, 5, 17, 34, 41, 90, 187, 246, 260, 325, 334, 342, 351, 352, 354, 355], "suit": [3, 148], "noisi": [3, 5, 36, 149, 187, 282, 353], "intermedi": [3, 9, 16, 31, 32, 74, 87, 88, 124, 125, 193], "scale": 3, "nisq": [3, 355], "thei": [3, 5, 7, 8, 16, 23, 25, 26, 41, 68, 69, 75, 90, 96, 111, 187, 193, 194, 199, 224, 233, 235, 238, 247, 263, 266, 271, 290, 291, 292, 325, 332, 342, 344, 351, 352], "necessarili": [3, 5, 16], "long": [3, 34, 96, 224, 278], "nevertheless": [3, 39, 352, 354], "prepar": [3, 5, 28, 148, 149, 151, 164, 170, 187, 188, 193, 203, 204, 223, 236, 237, 249, 250, 251, 252, 253, 325, 343, 350, 353], "ansatz": [3, 31, 43, 149, 159, 161, 165, 238, 241, 264, 266, 272, 279, 282, 325, 342, 350, 353], "below": [3, 4, 5, 7, 16, 28, 29, 32, 42, 78, 96, 160, 204, 224, 229, 234, 273, 325, 334, 345, 346, 347, 348, 349], "illustr": [3, 29, 43, 169, 268, 352], "hamiltonian": [3, 8, 18, 22, 24, 33, 90, 121, 122, 126, 149, 152, 167, 168, 169, 170, 175, 176, 177, 182, 183, 186, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 259, 260, 261, 263, 281, 286, 325, 342, 343, 350, 352, 353, 354], "here": [3, 4, 10, 12, 14, 15, 16, 17, 19, 25, 29, 30, 68, 78, 79, 148, 160, 168, 204, 205, 227, 231, 235, 276, 285, 292, 325, 333, 334, 344, 345, 346, 347, 348, 349, 352, 353], "antiferromagnet": [3, 34], "heisenberg": 3, "whose": [3, 16, 78, 225, 231, 242, 266, 307, 325, 342, 343, 352], "ground": [3, 18, 23, 31, 149, 171, 243, 249, 342, 343, 352, 353], "energi": [3, 11, 18, 22, 23, 31, 34, 41, 43, 100, 124, 149, 157, 158, 168, 169, 170, 171, 231, 240, 243, 244, 245, 246, 247, 248, 259, 260, 263, 268, 286, 325, 333, 342, 352, 353], "want": [3, 4, 23, 28, 39, 41, 118, 122, 124, 149, 194, 205, 231, 234, 240, 241, 259, 279, 341, 348, 353], "approxim": [3, 25, 32, 36, 125, 149, 167, 170, 244, 245, 247, 248, 249, 263, 264, 280, 314, 324, 333, 336, 349, 353], "theta_i": [3, 270], "stack": [3, 10, 30, 31, 32, 39, 40, 41, 43, 96, 99, 100, 149, 178, 179, 180, 181, 182, 183, 184, 186, 235, 264, 267, 268, 271, 272, 278, 282, 325, 344, 352, 353, 355], "go": [3, 6, 39, 170, 282, 345, 346, 347, 348, 349], "ob": [3, 11, 26, 28, 30, 31, 43, 96, 126, 231, 243, 286, 353], "ry": [3, 10, 11, 17, 41, 43, 65, 96, 149, 161, 194, 204, 273, 279, 352, 353], "arrai": [3, 10, 16, 40, 68, 69, 73, 100, 116, 117, 121, 122, 124, 126, 150, 152, 153, 157, 160, 168, 188, 190, 193, 194, 199, 204, 224, 227, 228, 231, 233, 234, 240, 243, 246, 249, 259, 260, 278, 280, 284, 286, 309, 314, 316, 320, 321, 322, 323, 351, 352], "length": [3, 14, 31, 40, 70, 96, 100, 126, 143, 199, 224, 228, 232, 233, 235, 243, 249], "ans\u00e4tz": [3, 11, 239, 243, 246, 260, 342, 350], "sigma_z": [3, 19, 26, 31, 41, 231, 242, 249, 262, 308], "sigma_x": [3, 11, 19, 26, 43, 249, 308, 342, 343], "sigma_i": [3, 26, 249, 308], "scipi": [3, 39, 43, 121, 264, 278, 324], "re": [3, 5, 16, 35, 39, 40, 77, 96, 270, 352], "x0": [3, 25, 149, 270, 275, 278, 279, 280, 352, 353], "8": [3, 4, 5, 6, 16, 43, 132, 134, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 165, 166, 204, 206, 245, 248, 256, 325, 337, 339, 345, 346, 347, 352], "equival": [3, 5, 14, 26, 29, 40, 51, 73, 96, 100, 342, 353], "deleg": [3, 5, 271], "equip": [3, 34], "minimum": [3, 22, 23, 34, 245, 246, 260, 279, 343], "vqe": [3, 39, 43, 149, 266, 272, 324, 325, 350, 353, 355], "messag": [3, 35, 40, 79, 81, 82, 92, 93, 224], "termin": [3, 5, 6, 90, 96, 97, 264], "successfulli": 3, "success": [3, 63, 68, 280], "true": [3, 9, 16, 35, 40, 48, 51, 53, 56, 57, 62, 64, 68, 72, 77, 78, 91, 92, 93, 96, 97, 120, 121, 124, 125, 126, 128, 149, 154, 165, 171, 205, 224, 225, 227, 229, 230, 231, 232, 234, 236, 239, 241, 249, 255, 256, 265, 267, 268, 269, 270, 271, 284, 287, 297, 299, 304, 305, 316, 321, 322, 323, 325, 343, 353], "statu": [3, 63, 325], "fun": [3, 111, 234], "3099330343247272": 3, "810e": 3, "800e": 3, "nit": 3, "jac": 3, "000e": 3, "hess_inv": 3, "nfev": 3, "6": [3, 4, 5, 16, 23, 26, 43, 132, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 153, 231, 240, 244, 245, 247, 248, 256, 259, 263, 298, 322, 327, 329, 334, 337, 339, 341, 344, 345, 346, 347, 348, 351, 352, 356], "njev": 3, "999999999999782": 3, "No": [3, 9, 15, 61, 70, 231, 325, 327], "gpu": [3, 9, 86, 231], "tpu": [3, 9, 231], "fall": [3, 9, 231], "back": [3, 6, 9, 28, 39, 41, 231, 271, 353], "cpu": [3, 9, 231, 325], "tf_cpp_min_log_level": [3, 9, 231], "rerun": [3, 9, 231], "info": [3, 9, 71, 171, 231, 272, 352], "term": [3, 4, 5, 11, 16, 19, 20, 21, 23, 24, 25, 30, 32, 35, 43, 90, 121, 148, 149, 154, 160, 162, 170, 173, 175, 176, 177, 182, 183, 186, 232, 239, 240, 241, 245, 247, 263, 273, 325, 351, 352, 353], "prog": [3, 9, 11, 14, 15, 16, 31, 77, 79, 96, 97, 149, 196, 204, 205, 206, 224, 235, 268, 276, 287, 325, 352, 353], "reg": [3, 149, 352, 353], "new_var": [3, 11, 25, 31, 90, 96, 149, 224, 243, 268, 352, 353], "float": [3, 10, 11, 17, 31, 73, 88, 91, 96, 100, 111, 121, 122, 124, 125, 126, 128, 131, 149, 150, 153, 154, 155, 157, 158, 160, 162, 167, 168, 169, 170, 171, 172, 173, 188, 189, 190, 192, 194, 224, 234, 243, 246, 249, 251, 260, 266, 268, 270, 274, 275, 279, 280, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 314, 316, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349, 352, 353], "theta_": [3, 149, 157, 353], "circ": [3, 9, 12, 17, 31, 48, 77, 96, 97, 149, 235, 246, 268, 331, 332, 352, 353], "handl": [3, 16, 34, 148, 149, 193, 238, 241, 276, 287, 342, 351, 355], "optimizer_scipi": 3, "cobyla": [3, 43, 278, 344, 345, 346, 347, 348, 349, 352, 353], "tol": [3, 43, 192, 270, 278, 293, 303, 304, 305, 306, 344, 345, 346, 347, 348, 349, 353], "1e": [3, 31, 43, 91, 149, 192, 224, 266, 268, 270, 278, 280, 293, 298, 303, 304, 305, 306, 344, 345, 346, 347, 348, 349, 353], "option": [3, 18, 28, 31, 33, 35, 40, 43, 48, 51, 53, 56, 57, 61, 62, 64, 65, 70, 77, 78, 81, 82, 85, 86, 88, 91, 96, 97, 100, 102, 103, 111, 114, 119, 120, 121, 122, 124, 125, 126, 127, 129, 149, 153, 154, 155, 157, 159, 160, 161, 163, 165, 167, 168, 169, 170, 171, 172, 173, 179, 182, 183, 185, 186, 188, 189, 190, 191, 192, 195, 204, 205, 208, 209, 224, 225, 227, 228, 229, 230, 234, 235, 236, 239, 240, 241, 243, 245, 246, 247, 249, 255, 256, 260, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 290, 291, 297, 298, 299, 300, 303, 307, 308, 316, 321, 322, 323, 344, 345, 346, 347, 348, 349, 351, 353], "maxit": [3, 43, 270, 278, 280, 344, 345, 346, 347, 348, 349, 353], "200": [3, 270, 344, 345, 346, 347, 348, 349], "exact": [3, 28, 36, 78, 149, 249, 352], "g": [3, 4, 5, 6, 7, 9, 10, 13, 17, 23, 25, 33, 35, 39, 51, 64, 77, 86, 96, 122, 149, 188, 189, 190, 207, 208, 210, 212, 235, 238, 241, 246, 260, 270, 271, 274, 278, 279, 282, 325, 353, 355], "meta_data": [3, 28, 32, 35, 40, 41, 43, 57, 61, 64, 91, 94, 95, 100, 124, 149, 271, 284, 285, 290, 325, 352], "optimizer_data": 3, "9999999999997735": 3, "571e": 3, "142e": 3, "59": [3, 147], "maxcv": 3, "For": [3, 5, 6, 9, 11, 12, 16, 17, 18, 23, 28, 31, 32, 33, 35, 36, 37, 39, 40, 75, 96, 118, 120, 122, 131, 132, 169, 170, 194, 205, 224, 227, 234, 235, 240, 245, 246, 247, 254, 255, 256, 260, 263, 268, 270, 284, 308, 316, 325, 332, 334, 343, 344, 351, 352, 353], "explain": [3, 7, 31, 33, 34, 39, 325, 351, 352, 354], "pleas": [4, 5, 9, 32, 35, 36, 37, 41, 46, 60, 61, 77, 96, 284, 324, 325, 326, 327, 328, 350, 353], "read": [4, 5, 43, 100, 170, 187, 292], "ato": [4, 5, 9, 10, 324, 325], "end": [4, 5, 6, 11, 13, 17, 21, 23, 35, 96, 170, 224, 249, 272, 285, 290, 301, 309, 314, 316, 325], "licenc": 4, "agreement": [4, 5], "eula": [4, 5], "carefulli": [4, 5], "permit": [4, 5], "pursuant": 4, "condit": [4, 5, 12, 17, 179, 224, 229, 232, 334], "between": [4, 18, 23, 25, 35, 40, 42, 78, 118, 129, 160, 185, 192, 208, 210, 229, 238, 246, 249, 261, 266, 268, 280, 282, 286, 292, 297, 299, 300, 301, 302, 305, 308, 325, 342, 353], "individu": [4, 5, 32, 213, 273, 337, 346], "legal": [4, 5], "entiti": [4, 5], "bull": [4, 5], "sa": [4, 5, 23, 25, 34, 240, 244, 245, 246, 247, 248, 259, 260, 263, 334, 337, 338, 339, 340, 341], "By": [4, 5, 10, 28, 96, 97, 195, 210, 224, 229, 234, 275, 327, 328, 353], "download": [4, 5, 6, 324], "otherwis": [4, 5, 40, 57, 64, 96, 100, 129], "render": 4, "your": [4, 5, 6, 9, 10, 12, 14, 33, 36, 37, 39, 41, 77, 96, 97, 118, 129, 148, 241, 265, 271, 325, 326, 328, 331, 350, 351], "agre": [4, 5], "bound": [4, 5, 96, 170, 224, 298], "licens": 4, "copi": [4, 5, 16, 96, 123, 153, 154, 173, 232], "promptli": 4, "delet": [4, 354], "pip": 4, "ensur": [4, 15, 35, 40, 41, 46, 90, 240, 247, 263], "command": [4, 6, 12, 17, 53, 324, 332], "machin": [4, 5, 23, 325, 334, 351], "o": [4, 23, 24, 28, 30, 90, 149, 150, 155, 157, 168, 249, 282, 329, 336, 349, 353], "7": [4, 5, 16, 28, 43, 96, 128, 132, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 153, 245, 268, 337, 339, 345, 346, 347, 351, 352, 353], "9": [4, 5, 6, 10, 15, 16, 17, 96, 132, 134, 137, 138, 139, 140, 141, 145, 147, 224, 232, 239, 245, 308, 334, 337, 339, 344, 345, 346], "10": [4, 10, 12, 14, 15, 16, 19, 23, 28, 79, 80, 91, 102, 132, 133, 134, 137, 138, 139, 140, 141, 145, 147, 149, 169, 179, 197, 206, 212, 216, 224, 225, 230, 232, 239, 240, 245, 249, 265, 268, 270, 275, 278, 279, 280, 285, 287, 290, 303, 325, 334, 337, 339, 340, 343, 345, 346, 348], "linux": [4, 325], "window": [4, 170, 325], "maco": [4, 325], "x86_64": 4, "architectur": [4, 41, 132, 325], "64": [4, 147], "org": [4, 5, 6, 23, 206, 212, 216, 280, 297, 325], "brew": [4, 6, 325], "while": [4, 5, 8, 25, 28, 31, 96, 126, 276, 297, 328, 351, 352, 353], "same": [4, 5, 6, 9, 10, 14, 16, 19, 21, 22, 23, 29, 31, 60, 78, 90, 96, 100, 104, 108, 119, 158, 169, 188, 190, 192, 204, 206, 224, 270, 279, 325, 333, 336, 349, 353], "version": [4, 5, 6, 17, 77, 119, 131, 148, 159, 169, 254, 255, 256, 257, 258, 325, 332, 350, 352, 354], "being": [4, 15, 18, 28, 34, 51, 72, 224, 235, 284], "major": [4, 355], "minor": 4, "caus": [4, 5, 170, 187, 325], "segment": [4, 6, 325], "fault": [4, 5, 6, 325], "situat": 4, "uninstal": 4, "type": [4, 5, 9, 13, 17, 27, 28, 29, 30, 31, 32, 33, 35, 40, 41, 42, 48, 53, 56, 57, 61, 62, 64, 68, 69, 70, 71, 73, 74, 77, 78, 79, 81, 82, 85, 87, 89, 90, 91, 96, 99, 100, 102, 110, 111, 116, 117, 119, 120, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 196, 202, 203, 204, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 235, 236, 237, 241, 242, 243, 244, 245, 246, 247, 248, 249, 260, 262, 265, 266, 268, 270, 271, 274, 275, 276, 278, 279, 280, 281, 284, 285, 286, 290, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 325, 333, 344, 345, 346, 347, 348, 349, 351], "prompt": 4, "jupyt": [4, 90, 123, 124, 324, 325, 350, 351, 352, 353], "interact": [4, 23, 35, 154, 171, 238, 284, 351, 352], "tutori": [4, 353], "notebook": [4, 34, 43, 90, 96, 97, 123, 124, 324, 325, 334, 337, 338, 339, 340, 341, 350, 351, 352, 353], "environ": [4, 60, 61, 96, 118, 187, 189, 190, 191, 292, 324, 329], "configur": [4, 5, 23, 28, 34, 66, 96, 115, 116, 117, 126, 171, 271, 286, 337, 338, 339, 340, 341], "featur": [4, 5, 8, 9, 13, 16, 27, 32, 39, 43, 353], "design": [4, 5, 7, 8, 12, 13, 14, 23, 27, 31, 33, 39, 40, 46, 77, 96, 102, 119, 178, 193, 196, 225, 227, 228, 229, 230, 232, 235, 268, 325, 328, 342, 344, 352, 355], "work": [4, 5, 6, 36, 37, 41, 43, 73, 124, 170, 188, 190, 209, 282, 297, 325, 332, 353, 356], "imagemagick": 4, "wand": 4, "displai": [4, 5, 9, 31, 40, 51, 90, 96, 120, 123, 124, 125, 222, 224, 231, 234, 243, 254, 256, 257, 258, 264, 284, 324, 325, 344, 345, 346, 347, 348, 349, 352], "ghostscript": 4, "pdf": [4, 123, 325], "format": [4, 5, 12, 16, 28, 32, 53, 68, 69, 78, 94, 95, 96, 98, 99, 120, 123, 124, 127, 129, 131, 171, 224, 239, 249, 304, 305, 327, 329, 353], "alreadi": [4, 35, 170, 204, 223, 224, 234, 236, 290, 292, 343, 352, 353], "magic": 4, "qatdisplai": 4, "insid": [4, 9, 10, 13, 14, 15, 16, 19, 41, 79, 90, 94, 95, 96, 97, 98, 99, 102, 119, 123, 124, 129, 170, 179, 182, 183, 186, 199, 207, 208, 209, 210, 211, 224, 233, 234, 235, 240, 241, 245, 247, 263, 264, 265, 266, 270, 271, 273, 274, 275, 276, 278, 279, 280, 285, 290, 291, 324], "m": [4, 65, 160, 234, 240, 318, 335], "overview": [4, 12, 324], "ipynb": [4, 324], "tabl": [4, 51, 324], "content": [4, 5, 16, 77, 96, 97, 205, 213, 215, 217, 219, 220, 324, 325], "deprec": [4, 77, 323, 329, 350], "enabl": [4, 18, 171], "access": [4, 6, 9, 28, 31, 33, 35, 39, 40, 68, 78, 96, 118, 122, 132, 185, 193, 199, 204, 233, 246, 257, 258, 260, 277, 284, 351, 352, 353], "other": [4, 5, 6, 16, 23, 31, 33, 39, 90, 96, 121, 167, 170, 171, 196, 200, 224, 225, 229, 230, 232, 249, 279, 282, 285, 308, 327, 332, 350, 353], "qiskit": [4, 45, 46, 324, 325, 327], "projectq": [4, 45, 46, 324, 327], "pyquil": [4, 45, 46, 324, 327], "cirq": [4, 45, 46, 324, 327, 332], "becaus": [4, 24, 28, 29], "someon": 4, "who": [4, 5], "mai": [4, 5, 6, 18, 28, 31, 39, 77, 125, 126, 148, 162, 165, 170, 239, 241, 272, 275, 325, 327, 334, 343, 351], "desir": [4, 25, 32, 170, 327, 333, 338], "cherri": 4, "pick": [4, 249, 275, 289, 342, 353], "interop": [4, 44, 45, 324, 325, 328, 329, 330, 331, 332], "qiskit_bind": 4, "projectq_bind": 4, "cirq_bind": 4, "pyquil_bind": 4, "could": [4, 9, 14, 22, 31, 34, 35, 42, 119, 179, 180, 240, 244, 245, 246, 247, 248, 254, 256, 257, 258, 259, 260, 263, 325, 334, 351], "conflict": [4, 5], "fail": [4, 5, 14, 16, 118, 234, 276, 325], "softwar": [5, 33, 325, 355], "FOR": 5, "hereinaft": 5, "refer": [5, 6, 23, 32, 36, 37, 77, 79, 96, 148, 160, 162, 164, 165, 197, 234, 235, 240, 244, 245, 247, 248, 259, 263, 280, 284, 297, 299, 300, 324, 325, 327, 328, 334, 350, 352, 353, 355], "recit": 5, "bind": [5, 28, 41, 96, 100, 118, 222, 241, 274, 275, 278, 280], "compani": 5, "physic": [5, 18, 22, 23, 33, 36, 85, 248, 322, 351], "person": 5, "oblig": 5, "present": [5, 18, 22, 33, 34, 71, 96, 121, 193, 205, 266, 268, 270, 274, 275, 276, 278, 279, 280, 333, 334, 352, 356], "identifi": [5, 51, 85, 157, 262, 281, 292], "footnot": 5, "product": [5, 15, 26, 100, 121, 167, 192, 235, 249, 279, 292, 297, 308, 313, 318, 322, 335, 343, 353], "associ": [5, 35, 41, 100, 160, 170, 243, 272, 352, 353], "media": 5, "materi": [5, 18], "onlin": 5, "electron": [5, 148, 153, 154, 155, 156, 157, 168, 169, 170, 171, 172, 352], "collect": [5, 8, 11, 17, 19, 43, 90, 100, 109, 110, 205, 224, 241, 270, 271, 274, 275, 278, 279, 280, 325, 342, 352], "primari": [5, 200], "allow": [5, 8, 10, 11, 14, 16, 17, 20, 24, 27, 28, 32, 34, 39, 43, 79, 120, 193, 204, 224, 231, 238, 240, 241, 244, 245, 246, 247, 248, 250, 256, 259, 260, 263, 264, 271, 291, 292, 333, 342, 351, 352, 353], "student": 5, "research": 5, "develop": [5, 284, 355], "test": [5, 34, 100, 303, 304, 306, 325, 332, 334], "infrastructur": 5, "learn": [5, 325, 353], "qlm": [5, 41, 48, 49, 51, 53, 56, 57, 58, 60, 62, 65, 66, 99, 239, 240, 241, 244, 245, 246, 247, 248, 259, 260, 263, 271, 274, 325, 328, 331], "benefit": [5, 276, 325], "combin": [5, 16, 25, 28, 165, 232, 238], "accordingli": [5, 35, 169], "under": [5, 8, 12, 28, 91, 96, 100, 126, 256, 266, 274, 324, 325, 353], "runtim": [5, 59, 325, 328], "apach": 5, "v2": 5, "file": [5, 12, 23, 28, 32, 51, 60, 63, 79, 81, 82, 94, 95, 96, 99, 100, 124, 126, 129, 224, 246, 287, 322, 324, 325, 332, 344, 351], "each": [5, 8, 16, 27, 28, 29, 30, 31, 34, 40, 73, 80, 91, 96, 100, 102, 121, 122, 129, 132, 158, 162, 170, 179, 188, 189, 190, 191, 192, 224, 238, 242, 243, 244, 246, 262, 265, 269, 272, 273, 279, 282, 285, 286, 290, 314, 316, 334, 337, 346, 353], "categori": [5, 36, 325], "root": [5, 209], "folder": 5, "compli": 5, "thereof": 5, "out": [5, 6, 17, 28, 29, 39, 40, 43, 70, 96, 119, 126, 168, 221, 246, 272, 318, 338, 347], "shall": [5, 35], "complet": [5, 6, 36, 41, 168, 171, 172, 292, 298, 303, 334, 338, 347], "THE": 5, "AND": [5, 16, 17, 78, 229, 243], "definit": [5, 14, 22, 23, 33, 51, 77, 96, 130, 168, 192, 205, 224, 241, 297, 308, 324, 325, 351], "equal": [5, 10, 39, 40, 188, 210, 275, 292, 293, 325, 337, 340, 346, 351], "b": [5, 16, 96, 118, 119, 131, 155, 157, 182, 183, 186, 208, 211, 213, 215, 217, 219, 220, 240, 242, 245, 247, 263, 282, 293, 335, 337, 338, 341, 353, 356], "mean": [5, 24, 28, 29, 35, 64, 79, 91, 96, 125, 126, 193, 213, 224, 243, 328, 352, 353], "accord": [5, 96, 148, 168, 172, 193, 265, 270, 343], "c": [5, 6, 17, 51, 73, 77, 94, 96, 100, 150, 153, 158, 160, 162, 168, 174, 185, 196, 209, 214, 218, 219, 220, 240, 267, 269, 279, 280, 282, 283, 325, 332, 335, 342, 343, 351, 353], "natur": [5, 28, 61, 148, 155, 157, 164, 168, 169, 172, 264, 270, 324, 325, 350, 352, 353], "wish": [5, 8, 213, 240, 244, 245, 247, 248, 259, 263], "variou": [5, 8, 9, 12, 29, 78, 96, 121, 132, 148, 171, 193, 194, 196, 201, 216, 224, 334, 352], "d": [5, 96, 152, 160, 168, 245, 297, 300, 302, 308, 316, 321, 323, 342], "OF": 5, "grant": 5, "accept": [5, 25, 28, 34, 36, 37, 41, 95, 102, 155, 179, 224, 265, 285, 290, 351], "specif": [5, 18, 23, 31, 32, 148, 188, 190, 213, 269, 282, 285, 316, 325, 342], "both": [5, 6, 16, 42, 64, 110, 122, 260, 263, 328, 340, 342, 344, 350, 351, 353], "author": [5, 96, 126], "repres": [5, 14, 16, 18, 19, 22, 27, 77, 78, 88, 90, 110, 117, 118, 119, 120, 121, 122, 126, 127, 168, 193, 204, 235, 238, 242, 246, 254, 255, 260, 262, 285, 286, 292, 333, 334, 353], "acknowledg": 5, "refrain": 5, "violat": 5, "wai": [5, 6, 8, 10, 12, 18, 25, 39, 40, 41, 43, 77, 78, 90, 96, 121, 194, 221, 284, 325, 334, 352, 353], "whatsoev": 5, "thereund": 5, "confidenti": 5, "subject": [5, 240], "provis": 5, "nondisclosur": 5, "parti": [5, 46], "receiv": [5, 34, 41, 78, 79, 96, 271, 279], "reproduc": [5, 326], "disclos": 5, "purpos": [5, 17, 34, 121, 127, 169, 205, 224, 249, 287, 353], "exercis": 5, "right": [5, 10, 12, 23, 24, 31, 91, 125, 148, 152, 156, 167, 168, 172, 188, 190, 195, 196, 203, 221, 230, 232, 240, 245, 247, 249, 263, 270, 282, 285, 297, 301, 309, 314, 316, 323, 334, 337, 338, 341], "extent": 5, "necessari": [5, 6, 8, 28, 118, 187, 191, 222], "restrict": [5, 23, 148, 150, 168, 249, 343, 352], "disclosur": 5, "employe": 5, "consult": [5, 351], "advisor": 5, "know": [5, 71, 170, 222, 234, 341, 348, 352], "third": [5, 46, 219], "without": [5, 9, 14, 16, 18, 71, 78, 224, 234, 241, 264, 269, 272, 301, 324, 353], "prior": [5, 229, 264], "written": [5, 24, 26, 36, 37, 38, 90, 285, 296, 325, 351], "approv": 5, "forego": 5, "satisfi": [5, 12, 238, 242], "through": [5, 6, 17, 27, 32, 39, 171, 199, 201, 204, 222, 233, 235, 240, 244, 245, 246, 247, 248, 257, 258, 259, 263, 266, 270, 274, 275, 276, 278, 279, 280, 284, 291, 292, 321, 323, 324, 328, 331, 355], "least": [5, 16, 41, 124, 284, 325, 334, 342], "degre": [5, 245], "care": [5, 43, 249, 282, 342, 352], "like": [5, 14, 16, 18, 23, 35, 40, 41, 78, 96, 125, 126, 170, 238, 325, 334], "less": [5, 21, 205], "reason": [5, 96, 351], "whom": 5, "non": [5, 17, 24, 34, 77, 79, 96, 124, 204, 235, 273, 283, 325, 334, 343], "protect": 5, "notwithstand": 5, "breach": 5, "compel": 5, "law": [5, 16], "judici": 5, "government": 5, "investig": [5, 122, 272], "proceed": [5, 6], "ha": [5, 10, 12, 15, 16, 20, 23, 24, 28, 31, 33, 34, 39, 40, 46, 60, 74, 77, 79, 96, 100, 118, 122, 128, 158, 179, 207, 208, 209, 213, 214, 215, 222, 235, 239, 242, 268, 285, 305, 314, 316, 323, 324, 325, 340, 341, 348, 351, 353, 354], "assist": 5, "opportun": 5, "except": [5, 35, 40, 45, 68, 72, 75, 92, 93, 97, 104, 108, 109, 112, 169, 193, 243, 246, 260, 289, 325], "anyth": [5, 41, 324], "contrari": 5, "herein": 5, "neither": [5, 31, 35], "liabl": 5, "prove": 5, "wa": [5, 16, 36, 38, 63, 71, 96, 122, 159, 227, 231, 232, 282, 288, 325, 334], "public": [5, 207, 208, 209, 214, 215, 235, 266, 270, 353], "domain": 5, "enter": [5, 41, 122, 170, 279], "ii": [5, 150, 168], "known": [5, 12, 31, 34, 74, 111, 118, 279, 336, 349], "demonstr": 5, "exist": [5, 235, 338, 347, 354], "iii": 5, "iv": 5, "independ": [5, 187, 190, 235, 249, 251, 274, 343], "v": [5, 11, 16, 31, 100, 150, 152, 158, 168, 242, 268, 336, 337, 338, 339, 341, 345, 346, 347, 348, 349, 351], "becom": [5, 6, 16, 43, 96], "vi": 5, "similar": [5, 17, 18, 24, 160, 182, 183, 186, 234, 240, 245, 247, 263, 325], "those": [5, 26, 28, 36, 102, 222, 234], "remedi": 5, "immedi": 5, "irrepar": 5, "harm": 5, "monei": 5, "damag": 5, "alon": [5, 18], "inadequ": 5, "compens": 5, "therefor": [5, 12, 14, 16, 18, 31, 33, 34, 39, 170, 334, 336, 345, 346, 347, 348, 349], "event": 5, "entitl": 5, "seek": 5, "equit": 5, "relief": 5, "temporari": [5, 16, 230, 324], "restrain": 5, "order": [5, 10, 14, 17, 18, 23, 26, 28, 39, 78, 96, 100, 120, 124, 148, 154, 155, 157, 160, 167, 168, 170, 171, 172, 193, 194, 209, 221, 229, 232, 235, 239, 241, 251, 252, 253, 284, 325, 330, 334, 342, 351, 352, 354], "injunct": 5, "perman": 5, "post": [5, 32, 39, 40, 41, 96, 100, 126, 179, 180, 185, 264, 265, 291], "bond": 5, "secur": 5, "miscellan": [5, 36, 37], "assign": [5, 71, 242, 255, 262, 287], "sublicens": 5, "transfer": [5, 188, 189, 241, 292, 297, 299, 323], "consent": 5, "trigger": [5, 16, 79, 232], "merg": [5, 20, 42], "consolid": 5, "purchas": 5, "substanti": 5, "asset": 5, "stock": 5, "assigne": 5, "assum": [5, 31, 33, 35, 39, 42, 204, 223, 232, 234, 236, 268, 278, 279, 290, 314, 318, 323, 329, 352, 353], "upon": [5, 15, 16, 29, 41, 79, 157, 262, 271], "enforc": [5, 99], "against": [5, 224], "successor": 5, "unauthor": 5, "null": [5, 28, 100], "void": 5, "constitut": [5, 17, 75], "regul": 5, "underli": [5, 14, 16, 17, 118, 120, 124, 193, 197, 227, 228, 229, 230, 232, 276, 351, 354], "technologi": 5, "full": [5, 14, 18, 34, 36, 70, 71, 73, 97, 170, 171, 204, 213, 221, 271, 325, 334, 335, 336, 344, 353], "complianc": 5, "forc": [5, 250, 253, 321, 323], "majeur": 5, "respons": [5, 66, 83], "delai": [5, 20], "failur": 5, "payment": 5, "connect": [5, 31, 33, 39, 57, 60, 61, 64, 99, 102, 103, 114, 129, 132, 133, 135, 143, 146, 178, 179, 185, 264, 265, 276, 277, 283, 285, 290, 291, 327, 334, 336, 337, 339, 345, 346, 349, 355], "act": [5, 16, 17, 78, 96, 100, 121, 204, 246, 262, 268, 286, 351, 353], "circumst": [5, 325], "beyond": 5, "forese": 5, "Such": [5, 23, 231, 279], "god": 5, "earthquak": 5, "hurrican": 5, "volcan": 5, "erupt": 5, "strike": 5, "lockout": 5, "riot": 5, "civil": 5, "unrest": 5, "protest": 5, "war": 5, "epidem": 5, "communic": 5, "diseas": 5, "outbreak": 5, "health": 5, "emerg": 5, "superimpos": 5, "after": [5, 6, 8, 17, 32, 41, 121, 189, 191, 205, 240, 244, 245, 246, 247, 248, 259, 260, 263, 279, 280, 282], "fact": [5, 16, 18, 78, 96, 333], "fire": 5, "commun": [5, 326], "disast": 5, "whether": [5, 28, 51, 63, 124, 153, 154, 159, 163, 165, 171, 173, 270, 279, 280, 284, 293, 303, 304, 306, 316, 322, 336, 338, 347, 349], "been": [5, 7, 23, 24, 28, 31, 34, 46, 60, 71, 73, 122, 235, 246, 260, 268, 324, 325, 332, 334, 353, 354], "relev": [5, 78], "abov": [5, 14, 23, 24, 25, 28, 35, 204, 222, 279, 285, 325, 333, 334], "period": 5, "dure": [5, 12, 17, 19, 31, 33, 39, 168, 172, 206, 208, 224, 235, 343, 353], "opinion": 5, "affect": [5, 171], "prevent": [5, 41], "continu": [5, 31, 239, 343], "six": [5, 126], "month": 5, "date": 5, "initi": [5, 10, 13, 21, 28, 33, 35, 36, 38, 39, 40, 74, 96, 100, 126, 148, 157, 168, 169, 170, 188, 190, 204, 205, 222, 224, 249, 250, 251, 252, 253, 261, 270, 271, 272, 275, 278, 279, 280, 287, 342, 343, 352, 353, 354], "due": [5, 22, 29, 30, 96, 155, 157], "virtu": 5, "aforesaid": 5, "endeavor": 5, "mitig": [5, 324, 325, 350, 353], "effect": [5, 24, 25, 30, 96, 119, 193, 227, 232, 235, 285, 343], "particular": [5, 15, 28, 36, 38, 41, 43, 96, 181, 182, 183, 184, 186, 213, 224, 235, 249, 251, 252, 253, 254, 275, 276, 278, 279, 280], "cooper": 5, "faith": 5, "adopt": [5, 239, 241], "togeth": [5, 39, 96, 100, 126, 238, 334], "decreas": [5, 29, 34, 224, 246, 260, 352, 353], "impact": 5, "remot": [5, 31, 33, 39, 40, 79, 101, 118, 178, 185, 264, 277, 325], "off": [5, 6, 352], "nearshor": 5, "far": [5, 16, 352], "proportion": 5, "adequ": 5, "govern": 5, "disput": 5, "resolut": 5, "interpret": [5, 180, 181, 182, 183, 184, 186], "franc": 5, "give": [5, 12, 18, 40, 41, 179, 333], "rule": [5, 96, 100, 170, 270, 279, 325, 353], "exclus": 5, "jurisdict": 5, "venu": 5, "compet": 5, "court": 5, "pari": 5, "settl": [5, 34], "friendli": [5, 31, 96, 344], "manner": [5, 18], "within": [5, 35, 71, 74, 90, 235, 285, 305, 328], "sixti": 5, "60": [5, 147, 334], "dai": 5, "copyright": 5, "2021": [5, 279, 325, 353], "2022": [5, 325], "reserv": [5, 83], "worldwid": 5, "sub": [5, 10, 96, 97, 207, 208, 209, 210, 211], "forth": [5, 353], "multipl": [5, 16, 20, 27, 35, 77, 171, 206, 210, 216, 219, 220, 225, 325, 353], "locat": [5, 204, 249, 351, 352, 354], "premis": 5, "sole": [5, 10], "intend": [5, 234, 325], "make": [5, 6, 23, 24, 33, 39, 122, 170, 194, 209, 241, 267, 284, 326, 356], "anoth": [5, 9, 13, 16, 41, 43, 46, 77, 79, 110, 193, 213, 224, 227, 235, 265, 292, 325, 327, 352], "network": [5, 206, 212], "modifi": [5, 32, 96, 100, 169, 205, 251, 252, 253], "deriv": [5, 43, 60, 100, 292, 325], "market": 5, "publish": [5, 102, 179, 265, 285, 290], "rent": 5, "leas": 5, "loan": 5, "commerci": 5, "share": [5, 42, 45, 74, 75], "alter": 5, "adapt": [5, 35, 40, 41, 42, 96, 266, 325, 350, 353, 354], "translat": [5, 16, 20, 23, 24, 25, 34, 51, 65, 115, 116, 117, 243, 246, 260, 325, 327, 356], "decompil": 5, "engin": [5, 40, 52, 53, 54, 331], "disassembl": 5, "reduc": [5, 16, 31, 171, 235, 239, 292, 305, 352], "human": [5, 12], "perceiv": 5, "form": [5, 16, 23, 26, 39, 70, 71, 77, 79, 158, 160, 198, 203, 256, 257, 258, 278, 279, 282, 286, 303, 314, 316, 325, 334, 348, 353], "free": [5, 15, 96, 224, 282, 352, 353], "lend": 5, "sell": 5, "resel": 5, "intellectu": 5, "properti": [5, 18, 96, 99, 100, 122, 124, 125, 127, 129, 246, 257, 258, 260, 284, 292, 323, 334], "intern": [5, 15, 69, 171, 205, 242, 255, 266, 267, 277, 291, 325], "treati": 5, "sold": 5, "furthermor": 5, "doe": [5, 23, 30, 31, 34, 35, 39, 40, 41, 71, 96, 179, 208, 209, 228, 232, 234, 246, 265, 268, 334], "trademark": 5, "servic": [5, 12, 31, 64, 286, 325], "mark": 5, "pertain": 5, "5": [5, 11, 16, 19, 20, 24, 25, 31, 42, 43, 80, 96, 97, 122, 132, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 153, 224, 239, 243, 245, 247, 249, 263, 272, 280, 282, 314, 316, 334, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356], "NO": 5, "warranti": 5, "AS": 5, "ITS": 5, "supplier": 5, "licensor": 5, "TO": 5, "OR": [5, 6, 16, 78], "maximum": [5, 102, 179, 248, 265, 266, 270, 275, 282, 285, 290, 339, 345], "BY": 5, "disclaim": 5, "represent": [5, 12, 36, 70, 73, 90, 116, 119, 121, 127, 149, 151, 153, 154, 167, 173, 175, 176, 177, 182, 183, 186, 188, 189, 193, 240, 244, 245, 246, 247, 248, 256, 259, 260, 263, 292, 294, 299, 300, 316, 320, 321, 322, 323, 333, 352, 353], "express": [5, 8, 14, 17, 19, 24, 39, 118, 119, 120, 122, 126, 131, 221, 222, 225, 227, 228, 229, 230, 232, 251, 316], "impli": [5, 36, 37], "statutori": 5, "BUT": 5, "NOT": [5, 12, 16, 17, 79], "merchant": 5, "satisfactori": 5, "qualiti": [5, 34, 149], "fit": [5, 41, 282, 353], "titl": 5, "infring": 5, "entir": [5, 32, 36, 37, 38, 73, 171, 285], "risk": 5, "aris": [5, 353], "WITH": 5, "liabil": 5, "IN": 5, "BE": 5, "cost": [5, 16, 22, 23, 24, 34, 43, 149, 205, 238, 241, 242, 243, 255, 261, 262, 268, 279, 311, 312, 342, 343, 344, 345, 351, 352], "substitut": 5, "special": [5, 34, 76, 181, 182, 183, 184, 186, 238, 240, 244, 245, 247, 248, 250, 259, 263, 264, 355], "incident": 5, "indirect": 5, "consequenti": [5, 6], "loss": [5, 353], "busi": 5, "profit": 5, "interrupt": [5, 12], "inabl": 5, "even": [5, 11, 14, 18, 23, 24, 31, 34, 39, 155, 161, 169, 170, 193, 325], "IF": 5, "advis": [5, 17, 187, 292], "possibl": [5, 10, 11, 14, 15, 16, 17, 19, 21, 23, 26, 27, 28, 41, 89, 90, 96, 118, 121, 126, 167, 170, 171, 189, 192, 194, 234, 241, 243, 249, 250, 270, 287, 325, 326, 340, 342, 343], "SUCH": 5, "case": [5, 8, 25, 27, 28, 29, 31, 32, 34, 39, 41, 78, 126, 160, 167, 188, 193, 201, 204, 234, 241, 249, 266, 278, 279, 282, 285, 322, 325, 342, 351], "amount": [5, 96, 126], "paid": 5, "THAT": 5, "exampl": [5, 6, 9, 18, 19, 25, 26, 27, 28, 29, 31, 32, 34, 35, 42, 43, 51, 77, 96, 121, 122, 149, 153, 154, 168, 169, 170, 173, 175, 176, 177, 179, 198, 204, 205, 229, 231, 232, 235, 239, 249, 250, 268, 276, 278, 292, 307, 308, 314, 316, 324, 325, 334, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 352, 353, 356], "bear": 5, "technic": 5, "inaccuraci": 5, "typograph": 5, "error": [5, 14, 29, 30, 32, 35, 40, 79, 80, 81, 82, 91, 92, 93, 124, 125, 192, 307, 314, 325, 353], "updat": [5, 14, 17, 23, 34, 35, 57, 74, 96, 129, 168, 208, 224, 240, 244, 245, 247, 248, 259, 263, 270, 350, 352, 353, 354], "januari": [5, 325], "2004": [5, 212], "http": [5, 6, 23, 206, 212, 216, 280, 297, 329], "www": 5, "reproduct": 5, "owner": 5, "union": [5, 110, 167, 169, 175, 176, 177], "common": [5, 15, 113, 114], "direct": [5, 23, 96, 129, 322, 351, 352], "manag": [5, 13, 16, 267, 324], "contract": [5, 100, 285], "ownership": 5, "fifti": 5, "percent": [5, 307], "50": [5, 28, 31, 41, 134, 147, 249, 340, 353], "outstand": 5, "benefici": 5, "permiss": [5, 325], "prefer": [5, 351, 352], "modif": [5, 28], "mechan": [5, 11, 14, 28, 43, 90, 118], "transform": [5, 18, 39, 41, 77, 153, 154, 167, 168, 170, 174, 195, 202, 203, 216, 221, 224, 243, 246, 260, 264, 281, 320, 324, 325, 350, 351, 352, 353], "convers": [5, 49, 65], "authorship": 5, "made": [5, 15, 34, 161, 200], "indic": [5, 17, 63, 77, 78, 148, 150, 160, 168, 174, 188, 190, 193, 224, 234, 235, 285, 318, 352], "attach": [5, 10, 14, 26, 43, 96, 114, 193, 194, 205, 224, 267], "appendix": 5, "editori": 5, "revis": 5, "annot": [5, 197], "elabor": 5, "whole": [5, 18, 170, 325], "separ": [5, 14, 48, 53, 56, 62, 193, 354], "mere": [5, 29], "link": [5, 10, 13, 15, 16, 31, 46, 61, 129, 193, 206, 209, 212, 213, 224, 241, 324, 325], "contribut": [5, 162, 355], "intention": 5, "inclus": [5, 99], "behalf": 5, "verbal": 5, "sent": [5, 12, 18, 22, 28, 51, 53, 54, 179, 181, 182, 183, 184, 186, 282, 291], "mail": 5, "system": [5, 7, 8, 15, 18, 22, 23, 33, 34, 41, 148, 155, 156, 157, 170, 204, 249, 292, 325, 343, 351, 352, 353], "issu": [5, 325, 353], "track": 5, "discuss": [5, 9, 43], "improv": [5, 35, 39, 149, 157, 350, 353, 354], "exclud": [5, 325], "conspicu": 5, "Not": [5, 121, 124], "contributor": 5, "subsequ": [5, 351], "incorpor": 5, "herebi": 5, "perpetu": 5, "charg": [5, 171, 352], "royalti": 5, "irrevoc": 5, "publicli": 5, "patent": 5, "offer": [5, 8, 10, 11, 32, 41, 178, 264, 283, 334], "claim": 5, "institut": 5, "litig": 5, "cross": 5, "counterclaim": 5, "lawsuit": 5, "alleg": 5, "contributori": 5, "redistribut": 5, "medium": 5, "meet": [5, 12], "recipi": 5, "carri": [5, 9, 16, 28, 70, 168, 193, 204, 206, 212, 222, 229, 272, 355], "promin": 5, "retain": 5, "attribut": [5, 35, 41, 42, 68, 77, 78, 94, 95, 99, 100, 124, 125, 204, 227, 228, 232, 257, 258, 285, 317, 325, 351, 352], "text": [5, 12, 224, 285, 332, 334], "readabl": [5, 12, 23], "along": [5, 6, 22, 28, 245, 248, 259, 334, 342], "wherev": 5, "normal": [5, 48, 53, 56, 62, 154, 204, 325], "appear": [5, 29, 79, 94, 96, 100, 119, 126, 222, 224, 242, 334], "add": [5, 14, 15, 16, 25, 31, 91, 95, 97, 110, 118, 124, 189, 193, 205, 207, 208, 210, 211, 212, 214, 215, 216, 218, 224, 232, 239, 243, 257, 258, 273, 325, 352], "alongsid": 5, "addendum": 5, "cannot": [5, 16], "constru": 5, "statement": [5, 15, 229, 231, 235, 285], "differ": [5, 6, 7, 8, 15, 16, 18, 21, 24, 27, 28, 29, 30, 77, 89, 102, 168, 170, 179, 193, 239, 265, 272, 273, 280, 282, 285, 290, 292, 297, 325, 334, 342, 344, 345, 346, 347, 348, 349, 352, 353], "submiss": [5, 31, 325], "unless": [5, 213, 215, 217, 218, 219, 220], "explicitli": [5, 25], "noth": [5, 35, 40, 189, 228, 232, 268], "supersed": 5, "regard": [5, 6, 22, 35, 96, 170, 249], "trade": 5, "customari": 5, "kind": [5, 271, 275, 352], "determin": [5, 78, 293, 344, 353], "appropri": [5, 100, 111, 204, 249], "theori": [5, 148, 157, 342, 352, 354], "tort": 5, "neglig": [5, 34], "deliber": 5, "grossli": 5, "charact": [5, 128], "goodwil": 5, "stoppag": 5, "malfunct": 5, "choos": [5, 34, 118, 249, 266, 270, 284, 352, 353], "fee": 5, "indemn": 5, "howev": [5, 10, 17, 18, 25, 29, 90, 122, 170, 224, 240, 244, 245, 247, 248, 259, 263, 279, 284, 333, 334, 353], "indemnifi": 5, "defend": 5, "hold": [5, 12, 16, 213, 215, 217, 218, 219, 220], "harmless": 5, "incur": [5, 34], "assert": [5, 31, 35, 40, 90, 133, 287], "boilerpl": 5, "field": [5, 18, 23, 24, 28, 29, 30, 78, 96, 120, 126, 240, 244, 245, 246, 247, 248, 252, 259, 263, 279, 286, 325, 356], "enclos": [5, 170], "bracket": [5, 199, 233], "replac": [5, 96, 193, 205, 231, 234, 282, 328, 353, 354], "comment": [5, 6, 224], "syntax": [5, 9, 17, 77, 96, 193, 222, 322, 325], "recommend": [5, 154, 204, 284], "easier": [5, 268], "identif": 5, "archiv": 5, "obtain": [5, 8, 28, 32, 91, 121, 125, 159, 171, 270, 340, 353, 354], "twice": [6, 100], "sourc": [6, 17, 41, 51, 68, 148, 325, 334, 350, 352], "behavior": [6, 33, 39, 71, 79, 96, 193, 268, 276, 287], "homebrew": 6, "sudo": 6, "taken": [6, 165, 188], "sh": 6, "bin": 6, "bash": [6, 332], "curl": 6, "fssl": 6, "raw": [6, 94, 96, 100, 124, 125, 129, 254], "githubusercont": 6, "com": 6, "head": [6, 17], "At": [6, 22, 34, 96, 229], "ask": [6, 70, 71, 285, 326], "path": [6, 12, 324], "screen": [6, 40], "shell_profil": 6, "bash_profil": 6, "zsh": 6, "zprofil": 6, "echo": 6, "manpath": 6, "johnsmith": 6, "eval": [6, 96, 100, 149], "opt": [6, 23, 24, 25, 44, 45, 337, 338, 339, 340, 341, 343, 345, 346, 347, 348, 349, 356], "shellenv": 6, "setup": [6, 252], "verifi": [6, 16, 30], "next": [6, 269], "latest": 6, "python3": 6, "compat": [6, 80, 227, 344, 351], "matrix": [6, 17, 23, 24, 68, 69, 77, 79, 96, 111, 121, 149, 153, 154, 158, 160, 162, 168, 171, 173, 174, 188, 189, 190, 193, 194, 200, 205, 224, 240, 244, 245, 246, 247, 248, 259, 260, 263, 274, 286, 292, 293, 295, 296, 297, 299, 301, 302, 311, 318, 320, 321, 322, 323, 325, 335, 351, 352, 353, 354, 356], "anaconda": 6, "unfortun": 6, "easi": [6, 99, 268, 355], "get": [6, 26, 28, 29, 35, 39, 41, 100, 125, 148, 156, 188, 190, 283, 324, 325, 328, 352, 353, 354, 355], "log": [6, 16, 118, 124, 204, 336, 349], "sure": [6, 249], "open": [6, 11, 15, 18, 19, 41, 148, 235, 325, 350], "part": [7, 14, 15, 18, 23, 24, 41, 90, 148, 170, 179, 200, 271, 325, 350], "clarifi": [7, 354], "main": [7, 8, 35, 78, 170, 205, 224, 249, 267, 276, 285, 287, 328, 329], "concept": [7, 31, 39, 90, 252, 315], "devid": 7, "kei": [7, 35, 51, 78, 129, 188, 190, 222, 224, 240, 244, 245, 247, 248, 259, 263, 316], "It": [7, 9, 13, 16, 17, 19, 23, 29, 32, 34, 36, 37, 38, 41, 70, 71, 73, 74, 96, 100, 118, 121, 122, 128, 168, 170, 172, 187, 189, 192, 193, 194, 204, 231, 234, 235, 240, 243, 244, 245, 246, 247, 248, 259, 260, 261, 263, 275, 278, 279, 286, 287, 288, 292, 299, 325, 342, 343, 352, 353, 354], "procedur": [7, 16, 17, 41, 46, 149, 231], "spin": [7, 23, 34, 45, 90, 149, 153, 154, 155, 157, 160, 162, 167, 171, 173, 175, 176, 177, 240, 244, 245, 246, 247, 248, 259, 260, 263, 286, 325, 334, 335, 336, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349, 352], "fermion": [7, 44, 45, 90, 281, 353, 354], "combinatori": [7, 9, 11, 22, 34, 180, 181, 182, 183, 184, 186, 243, 246, 255, 256, 260, 334, 342, 343, 344, 345, 346, 347, 348, 349, 356], "interoper": 7, "mainli": [8, 32, 67, 68, 121], "sequenc": [8, 9, 13, 16, 17, 96, 194, 204, 224], "instruct": [8, 9, 12, 79, 96, 196, 252], "comprehens": [8, 19], "mostli": [8, 75, 119, 334], "wrap": [8, 9, 10, 13, 16, 28, 33, 34, 43, 59, 64, 124, 125, 193, 224, 234, 235, 256, 284, 285, 328, 329], "higher": [8, 41, 94, 95, 96, 99, 124, 125, 129, 167, 169, 193, 224, 268, 274], "three": [8, 30, 77, 130, 193, 224, 273, 279, 328, 333, 342, 351], "seri": [8, 28, 170], "manipul": [8, 9, 17, 18, 25, 27, 39, 96, 121, 196, 229, 230, 234, 264, 285, 292, 324, 325, 350], "evolv": [8, 18, 34, 126, 343], "encod": [8, 18, 22, 25, 34, 90, 100, 121, 122, 126, 148, 232, 238, 240, 241, 243, 244, 245, 246, 247, 248, 259, 260, 261, 263, 268, 333, 337, 338, 341, 342, 343, 356], "often": [8, 18, 19, 35, 239, 343, 351], "u": [8, 14, 16, 17, 30, 51, 65, 150, 152, 158, 160, 162, 168, 174, 193, 195, 203, 221, 231, 333, 351, 352, 353], "pure": [9, 12, 13, 94, 100, 193, 292, 316], "built": [9, 11, 19, 96, 103, 118, 149, 204, 225, 230, 231, 242, 277, 291, 351], "hybrid": [9, 160, 264, 278, 325, 350, 353], "nice": [9, 16, 43, 71], "api": [9, 32, 39, 41, 102, 179, 193, 265, 285, 290, 325, 328, 334, 355], "usual": [9, 15, 16, 19, 23, 96, 124, 170, 188, 192, 308, 325, 342, 343, 353], "fed": [9, 19, 29, 96, 189, 191], "note": [9, 17, 20, 96, 151, 162, 167, 192, 273, 301, 305, 307, 353, 355], "qaoa": [9, 25, 180, 181, 182, 183, 184, 186, 239, 241, 246, 260, 333, 344, 345, 346, 347, 348, 349, 355], "batchmod": [9, 97, 231, 234, 269, 325], "manual": [9, 28, 57, 77, 352], "oracl": [9, 193, 195, 232, 236, 287], "assembl": [9, 10], "aqasm": [9, 10, 12, 14, 15, 16, 29, 30, 31, 40, 45, 51, 53, 73, 77, 78, 79, 96, 97, 149, 161, 193, 195, 204, 205, 224, 235, 268, 276, 287, 324, 331, 352, 353], "submodul": [9, 193, 354], "pyaqasm": [9, 10, 11, 12, 14, 16, 17, 48, 56, 62, 78, 90, 96, 193, 196, 204, 205, 324], "qftarith": [9, 15, 16, 17, 45, 77, 96, 97, 193, 206, 207, 208, 209, 210], "qft": [9, 10, 16, 17, 77, 96, 193, 206, 209, 216], "arithmet": [9, 15, 17, 18, 19, 26, 45, 118, 119, 120, 131, 212, 216, 225, 232, 325], "itself": [9, 11, 243, 274, 352], "classarith": [9, 15, 16, 45, 193, 206, 207, 208, 210], "unifi": 9, "basic": [10, 11, 26, 31, 34, 43, 51, 66, 128, 194, 243, 268, 285, 325, 351, 352], "Their": [10, 39], "rather": [10, 17, 31, 41, 94, 100, 170, 196, 225, 227, 228, 230, 232, 351], "self": [10, 31, 35, 40, 41, 227, 232, 262], "explanatori": 10, "constant": [10, 16, 17, 23, 104, 107, 119, 121, 122, 150, 153, 154, 168, 169, 171, 173, 182, 183, 186, 188, 193, 206, 207, 208, 210, 211, 212, 214, 218, 220, 240, 245, 247, 249, 263, 275, 282, 343, 352, 353], "y": [10, 17, 26, 65, 128, 171, 175, 177, 205, 273, 310, 351, 353], "ccnot": [10, 17, 65, 287], "csign": [10, 17, 65, 205], "swap": [10, 17, 65, 209], "sqrtswap": [10, 17], "iswap": [10, 17], "rz": [10, 11, 17, 42, 43, 65, 77, 79, 149, 188, 190, 193, 194, 224, 234, 279, 353], "ph": [10, 15, 17, 51, 96, 209, 212, 273, 297], "phase": [10, 17, 170, 193, 195, 223, 227, 229, 230, 232, 292, 293, 324, 325, 350], "shift": [10, 17, 20, 96, 100, 279, 325, 333, 353], "mathemat": [10, 34], "my_program": [10, 12], "qbits_reg": [10, 12, 194], "regist": [10, 13, 16, 28, 51, 96, 124, 125, 127, 188, 190, 199, 204, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 224, 225, 227, 228, 232, 233, 235, 236], "new": [10, 16, 39, 40, 41, 43, 78, 96, 102, 110, 118, 148, 159, 168, 170, 174, 178, 179, 194, 205, 212, 222, 224, 235, 243, 265, 271, 278, 285, 290, 328, 352, 354], "dag": [10, 17, 65, 96, 153, 154, 173, 194, 222, 325], "convent": [10, 22, 23, 96, 124, 126, 158, 162, 284, 285, 297], "outermost": 10, "alwai": [10, 18, 31, 34, 79, 124, 154, 170, 204, 243, 268, 287], "index": [10, 17, 31, 40, 41, 74, 78, 81, 82, 96, 119, 124, 129, 130, 148, 156, 159, 162, 163, 198, 226, 227, 228, 232, 239, 242, 262, 270, 285, 322], "my_routin": 10, "idx": [10, 31, 43, 268], "parameter": [10, 266, 279, 353], "think": [10, 170], "quit": [10, 15, 16, 39, 41], "conveni": [10, 39, 325], "hardwar": [10, 18, 31, 35, 42, 44, 45, 86, 99, 123, 148, 161, 185, 264, 265, 268, 269, 276, 324, 325, 352], "black": 10, "box": [10, 193, 224], "properli": [10, 46], "might": [10, 14, 16, 23, 41, 96, 118, 124, 193, 205, 207, 210, 211, 234, 235, 239, 241, 243, 252, 267, 273, 332, 343, 351, 353], "abl": [10, 16, 18, 31, 52, 118, 194, 224, 234, 241, 246, 267, 283], "simplic": [10, 352, 353], "input": [10, 16, 23, 49, 51, 65, 68, 74, 97, 100, 126, 155, 178, 204, 205, 221, 229, 234, 235, 239, 269, 285, 325, 345, 346, 347, 348, 349, 351, 352], "signatur": [10, 17, 96, 110, 197, 205], "phase_matrix": 10, "diag": [10, 23, 356], "exp": [10, 118, 194, 266, 279, 314, 316], "1j": [10, 194], "phase_g": 10, "matrix_gener": [10, 111, 194], "Or": [10, 229, 328, 329, 330], "set_matrix_gener": [10, 111], "similarli": [10, 12, 16, 17, 21, 199, 232, 233, 246, 291, 345, 346, 347, 348, 349, 351], "c_phase": 10, "c_phase_g": 10, "circuit_gener": [10, 111, 238], "set_circuit_gener": [10, 111], "variabl": [10, 14, 20, 21, 24, 25, 28, 34, 39, 41, 43, 45, 60, 61, 94, 96, 97, 100, 104, 108, 122, 126, 222, 224, 231, 234, 238, 239, 241, 242, 243, 246, 251, 260, 262, 270, 274, 275, 278, 280, 286, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349, 353], "lambda": [10, 14, 16, 17, 96, 118, 120, 160, 188, 189, 190, 191, 194, 270, 309, 316], "n": [10, 14, 17, 19, 20, 23, 24, 25, 31, 34, 36, 40, 74, 167, 168, 175, 176, 177, 213, 215, 217, 218, 219, 220, 221, 223, 234, 236, 239, 240, 245, 249, 282, 285, 307, 310, 318, 335, 336, 337, 338, 339, 340, 341, 343, 349, 351, 353], "static": [10, 94, 95, 96, 99, 119, 124, 129, 234, 239, 242, 249, 325], "check": [10, 31, 35, 40, 83, 92, 93, 121, 128, 279, 292, 305, 322, 325], "instead": [10, 19, 28, 96, 193, 195, 206, 274, 316, 325, 344, 351, 354], "previou": [10, 31, 43, 170, 328, 351], "done": [10, 12, 14, 16, 17, 31, 64, 96, 154, 213, 215, 217, 235, 243, 250, 274, 351, 353], "customg": 10, "mat": [10, 295], "my_minus_z": 10, "effici": [11, 16, 17, 20, 43, 121, 148, 157, 161, 264, 322, 325, 342, 352, 353], "introduc": [11, 27, 31, 43, 352], "scheme": [11, 15, 43], "usag": [11, 16, 83, 96, 124, 185, 194, 204, 224, 234, 276, 277, 324, 351], "most": [11, 14, 17, 18, 23, 25, 28, 41, 51, 75, 90, 100, 148, 206, 221, 232, 249, 284, 287, 325, 333, 334, 344, 351, 353], "interest": [11, 16, 18, 149, 170, 282, 351, 353], "psi": [11, 28, 29, 30, 43, 100, 149, 249, 270, 285, 301, 322], "get_vari": [11, 41, 94, 96, 100, 119, 126, 131, 222, 242, 262, 270, 325], "addition": [11, 79, 119, 132, 193], "sum_i": [11, 18, 100, 126, 162, 204, 249, 286, 308, 342], "qbit_idx": 11, "layer": [11, 161, 163, 239, 342, 352], "tradeoff": 11, "up": [11, 15, 16, 17, 19, 25, 27, 35, 39, 96, 148, 158, 193, 224, 292, 293, 334, 351, 353], "ve": 11, "overload": [11, 20, 41, 96, 114, 119, 120, 127, 232, 238, 242, 317, 325], "__call__": [11, 41, 120], "step": [11, 12, 14, 27, 35, 39, 41, 118, 151, 167, 170, 193, 195, 224, 270, 286, 352, 353], "job_2": 11, "job_3": 11, "op": [11, 16, 40, 68, 72, 76, 77, 96, 128, 149, 204, 205, 235, 239, 325, 331], "iterate_simpl": [11, 16, 35, 40, 51, 96, 204, 205, 239, 331, 332], "3617194502006551": 11, "5530802646525711": 11, "2123210586102844": 11, "8642800859144327": 11, "353577273385831": 11, "414309093543324": 11, "store": [12, 15, 16, 17, 41, 42, 68, 74, 77, 78, 96, 98, 100, 121, 124, 126, 131, 148, 156, 200, 219, 223, 224, 229, 230, 236, 240, 244, 245, 247, 248, 259, 263, 285, 325, 328], "serial": [12, 17, 28, 32, 35, 40, 68, 69, 94, 96, 100, 124, 128, 325], "pictur": [12, 34], "figur": [12, 256], "aqasm2circ": [12, 17], "left": [12, 23, 24, 91, 125, 148, 152, 156, 167, 168, 188, 190, 195, 196, 203, 221, 224, 230, 232, 249, 270, 282, 285, 297, 301, 309, 314, 316, 323], "sinc": [12, 16, 28, 60, 79, 193, 200, 205, 206, 227, 231, 235, 316, 333, 343, 345, 353], "mandatori": [12, 31], "facilit": 12, "calloc": [12, 79, 96, 196, 199, 224], "cbits_reg": 12, "reset": [12, 13, 17, 68, 71, 78, 96, 205, 209, 224, 284, 325], "outcom": [12, 87, 88, 188, 190], "cc_appli": [12, 224], "condition": 12, "cbreak": [12, 79, 224], "fine": [12, 249, 334], "tune": [12, 279, 334], "creation": [13, 19, 31, 33, 39, 122, 324], "abstractg": [13, 14, 17, 51, 77, 96, 109, 193, 197, 201, 205, 206, 222, 224], "ancilla": [13, 16, 77, 96, 224, 229, 235, 324], "scope": [13, 16, 40, 201, 225, 226, 227, 228, 229, 230, 232, 233, 235, 324, 325], "moreov": [13, 31, 39, 96, 227, 232, 235, 249], "flag": [13, 16], "reus": [13, 30, 235], "later": [13, 16, 28, 32, 63, 193, 224], "though": [14, 284], "veri": [14, 18, 27, 31, 96, 171, 200, 224, 250, 253, 272, 324, 325, 345, 346, 347, 348, 349, 351, 352, 353], "still": [14, 18, 25, 96, 170, 224, 232, 234, 276, 284, 354], "seem": 14, "clunki": 14, "build_gat": [14, 17, 193, 201, 205], "simplfi": 14, "turn": [14, 16, 21, 41, 90, 96, 193, 224, 231, 234, 264], "walsh_hadamard": 14, "ariti": [14, 15, 16, 17, 36, 37, 51, 69, 77, 96, 111, 118, 120, 161, 194, 197, 200, 202, 205, 206, 207, 208, 209, 214, 215, 222, 223, 224, 235, 236, 242, 273, 285, 320, 321, 323], "wht": 14, "subcircuit": [14, 15, 17, 77, 96, 193, 205, 235], "subroutin": [14, 77, 267], "adder": [14, 16, 193, 206, 212, 213, 216], "n1": 14, "n2": 14, "singl": [14, 16, 17, 20, 28, 31, 34, 41, 42, 57, 60, 61, 64, 78, 90, 102, 131, 148, 154, 158, 168, 179, 192, 193, 195, 204, 252, 265, 266, 270, 273, 274, 275, 276, 278, 279, 280, 284, 285, 290, 351], "attempt": [14, 63, 234], "imagin": [14, 17, 122], "ly": 14, "namespac": [14, 17, 193, 213], "foo": [14, 20, 197], "Its": [14, 120, 127, 171, 200, 249, 314, 316, 343, 353], "my_add": 14, "length1": 14, "length2": 14, "proper": [14, 16, 41, 96, 120, 227, 228, 231, 342, 356], "keyword": [14, 17, 60, 61, 95, 96, 179, 185, 224, 234, 325], "piec": [14, 16, 29, 78, 100, 118, 204, 225, 227, 241, 343], "stai": 14, "had": [14, 16, 70, 71, 73], "mani": [14, 18, 19, 22, 25, 28, 31, 41, 43, 126, 170, 204, 238, 240, 241, 244, 245, 247, 259, 263, 325, 333, 334, 351, 353], "fresh": [15, 39, 96, 104, 105, 205, 222, 224, 235, 243, 271], "set_ancilla": [15, 16, 235], "dynam": [15, 31, 39, 96, 224, 278, 292, 343], "pass": [15, 96, 100, 102, 122, 170, 185, 194, 205, 222, 224, 234, 235, 239, 256, 268, 274, 275, 278, 344, 345, 346, 347, 348, 349], "recurs": [15, 194, 243], "across": 15, "tree": [15, 193, 204, 222, 242, 334], "freed": [15, 16, 235], "leav": [15, 19, 66, 78, 242], "consequ": [15, 23, 96, 100, 235, 242], "20": [15, 16, 36, 37, 134, 147, 224, 334, 339, 340, 345, 346], "resourc": [15, 16, 17, 45, 75, 124, 290], "close": [15, 224, 235, 238, 249, 340, 352], "pop": [15, 41, 235], "last": [15, 16, 23, 31, 51, 160, 223, 236, 287, 288, 344, 351], "dagger": [15, 77, 96, 149, 153, 158, 160, 167, 168, 170, 174, 194, 195, 200, 203, 222, 235, 282, 302, 305, 320, 322, 342, 351, 353], "nest": 15, "aglorithm": 16, "sometim": [16, 23, 301], "hard": [16, 25, 34, 36, 37, 268, 333, 343, 356], "quickli": [16, 231], "overwhelm": 16, "fair": 16, "er": 16, "qint": [16, 193, 195, 224, 227, 235], "comparison": [16, 193, 224, 230, 232], "qint1": [16, 232], "qint2": [16, 232], "unimpl": 16, "circuit_ab": 16, "circuit_qft": [16, 206], "circuit_class": [16, 206], "subsect": 16, "qbool": [16, 193, 224, 235], "simplest": [16, 43, 96], "qboolarrai": [16, 193, 224, 227, 229], "correspond": [16, 17, 18, 24, 27, 29, 35, 40, 51, 53, 57, 60, 61, 64, 71, 77, 78, 91, 96, 99, 100, 111, 117, 120, 122, 129, 153, 154, 158, 160, 168, 173, 188, 190, 194, 204, 240, 243, 244, 245, 247, 248, 249, 259, 263, 271, 282, 284, 285, 288, 290, 314, 316, 325, 332, 342, 353], "rout": [16, 197, 205, 225, 227, 228, 229, 230, 232, 235], "and_expr": [16, 196], "expr1": 16, "expr2": 16, "q": [16, 17, 24, 51, 64, 73, 151, 157, 158, 160, 168, 174, 221, 224, 232, 240, 244, 247, 260, 263, 269, 331, 332], "append": [16, 41, 95, 189, 191, 239], "current": [16, 35, 40, 78, 96, 130, 153, 154, 173, 178, 194, 205, 235, 250, 251, 264, 267, 279, 283, 285, 288, 344, 345, 346, 347, 348, 349], "were": [16, 71, 333, 334], "produc": [16, 23, 24, 26, 96, 100, 170, 204, 232, 238, 246, 255, 260, 276, 342, 343], "q_4": 16, "q_5": 16, "toffoli": [16, 17, 213, 215], "q_3": 16, "de": 16, "morgan": 16, "NOTS": 16, "inde": [16, 24, 41], "mind": [16, 351], "just": [16, 18, 343], "syntact": 16, "sugar": 16, "releas": [16, 96, 205, 224, 235, 355], "free_ancilla": [16, 224, 235], "expr": [16, 118, 119, 131], "set_valu": [16, 232], "circuit1": [16, 96], "circuit2": [16, 96], "empti": [16, 17, 96, 100, 124, 205, 224, 290, 323, 352], "did": [16, 17, 126], "qint3": [16, 232], "depth": [16, 96, 97, 119, 123, 239, 241, 342, 352], "mult": [16, 20, 216], "14": [16, 79, 80, 132, 134, 137, 139, 140, 141, 145, 147, 224, 232, 268, 339, 345, 346], "13": [16, 80, 96, 132, 134, 137, 138, 139, 140, 141, 145, 147, 268, 334, 339, 340, 345, 346, 351], "12": [16, 25, 30, 80, 132, 134, 137, 138, 139, 140, 141, 145, 147, 152, 168, 192, 235, 244, 256, 287, 339, 340, 345, 346], "compar": [16, 19, 193, 284, 291], "increment": 16, "cast_to": [16, 227], "cast": [16, 42, 55, 94, 96, 99, 100, 125, 127, 129, 131, 224, 227, 228, 229, 232, 281], "sai": [16, 161, 231], "anc": 16, "3535533905932732": 16, "813961400789805e": 16, "17j": 16, "3535533905932733": 16, "831019179913692e": 16, "35355339059327334": 16, "1180695148086566e": 16, "58020831115014e": 16, "3535533905932734": 16, "231448391212731e": 16, "3535533905932729": 16, "289974949513096e": 16, "16j": 16, "353553390593273": 16, "0594047723252207e": 16, "686323053012687e": 16, "straightforward": [16, 23, 30, 39, 96, 250], "networkx": [16, 42, 99, 129, 181, 182, 183, 184, 186, 244, 245, 247, 248, 256, 263, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 356], "clean": [16, 35], "functool": [16, 31], "coloring_oracl": 16, "bitlength": [16, 209], "node": [16, 119, 129, 242, 244, 245, 247, 248, 256, 257, 258, 263, 334, 336, 337, 338, 339, 341, 345, 346, 347, 348, 349], "edg": [16, 334, 336, 337, 338, 339, 341, 345, 346, 347, 348, 349], "nx": [16, 42, 129, 244, 245, 247, 248, 263, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 356], "path_graph": 16, "len": [16, 31, 40, 70, 73, 77, 235, 239, 240, 244, 245, 247, 248, 263, 287, 325, 337, 338, 339, 340, 341, 348], "19": [16, 134, 137, 140, 141, 147, 209, 339, 345, 346], "vertex": [16, 178, 186, 238, 254, 258, 263, 324, 334, 336, 337, 338, 339, 344, 345, 346, 347, 349], "formula": [16, 17, 23, 28, 68, 72, 77, 78, 79, 90, 96, 98, 157, 193, 196, 198, 224, 229, 232, 242], "c_i": 16, "neq": [16, 24, 343], "c_j": [16, 162], "j": [16, 23, 24, 34, 40, 149, 154, 155, 157, 160, 168, 173, 174, 234, 245, 246, 248, 249, 259, 286, 307, 308, 314, 316, 320, 323, 325, 351, 353, 356], "loop": [16, 40, 68, 74, 266, 270, 274, 275, 276, 278, 279, 280, 285], "asymptot": [16, 282], "save": [16, 40, 123, 205, 224, 328], "increas": [16, 34, 96, 97, 170, 205, 282, 342, 343, 353], "counter": 16, "larg": [16, 18, 34, 100, 153, 154, 170, 173, 239, 249, 343], "enough": [16, 34, 83, 352], "count": [16, 96, 193, 236, 239, 241, 268, 324, 325, 334], "number_of_edg": [16, 133], "bit_length": 16, "frugal": 16, "didn": [16, 96], "mention": [16, 26, 279], "strongli": [17, 279], "binari": [17, 22, 28, 32, 34, 60, 63, 70, 73, 94, 95, 96, 99, 100, 116, 117, 124, 126, 129, 238, 240, 243, 246, 260, 353, 356], "dump": [17, 28, 32, 43, 60, 63, 94, 95, 96, 99, 100, 124, 126, 129, 246, 325], "potenti": [17, 152, 158, 160, 162, 168, 224, 340], "matric": [17, 51, 69, 90, 96, 104, 107, 149, 188, 193, 205, 224, 241, 279, 292, 297, 299, 301, 302, 308, 310, 311, 313, 318, 353], "constructor": [17, 35, 41, 109, 111, 189, 194, 224, 235, 241, 271, 274, 317, 319, 325, 344, 352], "bodi": [17, 78, 150, 152, 157, 168, 169, 171, 174, 205, 231, 267, 351, 352], "sum": [17, 20, 23, 24, 31, 39, 43, 100, 121, 160, 193, 204, 238, 239, 243, 249, 268, 325, 334, 340, 343], "begin": [17, 23, 31, 34, 301, 309, 314, 316, 325], "cbit": [17, 51, 72, 77, 78, 79, 80, 88, 98, 193, 196, 199, 224, 332], "straightfoward": 17, "my_z": 17, "involv": [17, 34, 254, 256, 343], "param": [17, 96, 188, 189, 190, 222, 280, 309], "my_rxrz": 17, "my_qft": 17, "none": [17, 29, 35, 40, 51, 57, 58, 60, 61, 64, 65, 77, 78, 79, 84, 88, 94, 96, 97, 99, 100, 102, 103, 110, 111, 114, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 153, 154, 155, 157, 160, 161, 170, 171, 173, 179, 185, 188, 189, 190, 191, 195, 196, 197, 200, 205, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 239, 241, 243, 246, 249, 255, 260, 261, 265, 266, 270, 273, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 290, 291, 297, 299, 300, 316, 317, 318, 322, 344, 345, 346, 347, 348, 349], "ressourc": 17, "constitu": [17, 126], "qbit_list": [17, 228], "referenc": 17, "predefin": 17, "my_cz": 17, "conj": 17, "tran": 17, "mea": [17, 73, 188, 190], "boolean": [17, 25, 40, 63, 72, 78, 196, 198, 224, 227, 228, 229, 232, 242, 262, 303, 306], "logic": [17, 68, 90, 97, 98, 196, 198, 209, 224, 229, 238, 242, 243, 353], "stand": [17, 43, 170], "break": [17, 68, 72, 78, 79, 80, 209, 224, 239], "hadamard": [17, 100, 325], "vmatrix": 17, "pauli": [17, 19, 26, 90, 121, 128, 167, 188, 189, 192, 241, 279, 292, 295, 296, 297, 299, 307, 308, 310, 323, 325, 353], "ident": [17, 224, 282, 297, 299, 300, 308, 310, 353], "foral": [17, 24, 150, 168], "rm": 17, "r": [17, 65, 100, 119, 131, 152, 157, 158, 160, 168, 169, 351], "rotat": [17, 96, 100, 159, 161, 163, 194, 224, 241, 279, 342], "co": [17, 118, 119, 120, 122, 273], "sin": [17, 118, 119, 120], "infil": 17, "outfil": 17, "wrote": 17, "my_lib": 17, "py": [17, 51, 79, 324, 325], "misc": [17, 193], "qb": [17, 31, 96, 239, 268], "inlin": [17, 96, 97, 123, 193, 205, 224, 264, 267, 324, 325], "l": [17, 160, 168, 174, 204, 351, 353], "my_aqasm": 17, "beneath": 18, "everi": [18, 157, 281, 334, 336, 341, 348, 349, 351], "realiz": 18, "digit": [18, 241, 325, 342, 344, 353], "li": [18, 352], "magnet": [18, 23, 24, 240, 244, 245, 246, 247, 248, 259, 263, 286, 325, 356], "experienc": 18, "vari": [18, 353], "devic": [18, 44, 45, 83, 84, 86, 99, 325], "sort": [18, 94, 96, 100, 126, 155, 157, 168, 325], "varieti": [18, 34, 36], "would": [18, 23, 31, 41, 48, 53, 56, 62, 96, 157, 170, 194, 231, 234, 240, 244, 245, 247, 248, 259, 263, 265, 325, 334, 340, 341, 348, 353], "rich": 18, "actual": [18, 28, 29, 68, 333, 344], "chemistri": [18, 148, 324, 351, 354], "scienc": [18, 204], "explor": [18, 41, 96, 249], "door": 18, "answer": [18, 333, 340], "struggl": 18, "evolut": [18, 36, 38, 126, 148, 167, 249, 286, 342], "defect": 18, "steer": 18, "decompos": [18, 39], "lambda_i": [18, 126], "h_i": [18, 100, 126, 286], "hermitian": [18, 121, 126], "send": [18, 35, 40, 54, 90, 118, 126, 325, 337, 338, 339, 340, 341], "simpli": [19, 21, 41, 131, 224, 227, 231, 243, 252, 253, 342, 356], "drive": [19, 20, 21, 126], "t_variabl": [19, 20, 21], "pauli_term": [19, 20, 21, 26, 30, 121, 353], "tmax": [19, 20, 21, 23, 126, 246, 249, 251, 260, 261, 337, 338, 339, 340, 341, 343], "23": [19, 26, 41, 134, 147, 325, 339, 345, 346, 352, 353], "lead": [19, 265, 333, 343, 353], "especi": 19, "ten": 19, "hundr": 19, "straight": [19, 170], "respect": [19, 24, 33, 122, 126, 170, 246, 260, 286, 299, 305, 310, 334, 353, 356], "speed": [19, 148, 351], "tuppl": 19, "scalar": [19, 20, 26, 32, 124, 231, 297], "tmax_expr": 19, "15": [19, 132, 134, 137, 139, 140, 141, 145, 147, 149, 206, 209, 308, 322, 328, 334, 339, 340, 345, 346], "145": 19, "tempor": 20, "composit": [20, 26, 96, 196], "pipe": [20, 40, 41, 60, 102, 178, 179, 271, 290, 325, 344], "schedule1": 20, "schedule2": 20, "heavisid": [20, 118, 325], "ponder": 20, "signal": [20, 122], "filter": [20, 29], "parallel": 20, "rescal": [20, 279], "45": [20, 133, 134, 147, 340], "past": 20, "futur": 20, "bar": [20, 91, 125], "One": [21, 70, 90, 96, 122, 126, 155, 168, 169, 170, 171, 174, 250, 325, 341, 343, 356], "psi_0": [21, 100, 126, 249, 252, 253], "vec": [21, 43, 149, 151, 270], "linalg": [21, 153, 278, 285, 325, 352, 353], "norm": [21, 71, 266, 292, 298, 303, 304, 306], "real": [22, 23, 24, 57, 100, 118, 121, 204, 249, 305, 325, 334, 340], "life": 22, "formul": [22, 23, 24, 25, 238, 240, 244, 245, 247, 259, 261, 263, 333, 334, 351, 356], "maxim": [22, 35, 97, 100, 240, 243, 245, 268, 280, 333, 335], "lowest": [22, 43, 170, 272, 333, 342], "intim": 22, "relat": [22, 28, 221, 292, 316], "qubo": [22, 23, 25, 34, 240, 243, 244, 246, 247, 263, 325, 334, 342, 356], "Ising": [22, 24, 25, 33, 34, 121, 240, 243, 244, 245, 247, 248, 259, 260, 263, 286, 325, 334, 342, 344, 356], "solut": [22, 31, 34, 157, 243, 244, 245, 247, 248, 249, 256, 263, 286, 334, 337, 338, 339, 340, 341, 342, 343, 344], "precis": [22, 41, 78, 88, 170, 280, 284, 352], "unconstrain": [22, 34, 238, 260], "local": [23, 34, 79, 114, 279, 290, 291, 329, 353], "h_": [23, 24, 34, 152, 153, 157, 158, 160, 167, 168, 170, 343, 351], "sigma_": [23, 26, 310], "j_": [23, 24, 34, 286, 318], "ij": [23, 24, 34, 150, 155, 157, 160, 162, 168, 174, 270, 286, 320, 323], "pmatrix": 23, "symmetr": [23, 24, 246, 260, 356], "zero": [23, 24, 29, 77, 96, 126, 153, 157, 170, 188, 246, 264, 282, 325, 350, 351, 352, 353], "coupl": [23, 158, 187, 245, 246, 248, 259, 286, 292, 325, 352, 356], "quantiz": [23, 158, 160], "s_": [23, 24, 34, 149, 249], "clariti": [23, 354], "offset": [23, 24, 96, 100, 199, 233, 240, 244, 245, 246, 247, 248, 259, 260, 263, 286, 325, 356], "landscap": 23, "match": [23, 96, 224, 234, 242, 262, 279, 322], "convert": [23, 28, 47, 48, 49, 53, 55, 56, 58, 59, 62, 65, 68, 69, 70, 73, 148, 152, 153, 154, 167, 168, 292, 296, 320, 321, 322, 323, 351, 352], "vice": [23, 327, 328, 329, 330], "versa": [23, 327, 328, 330], "typic": [23, 161], "try": [23, 41, 79, 96, 126, 241, 243, 268, 325, 326, 352], "reach": [23, 24, 39, 282, 352], "adiabat": [23, 170, 343], "theorem": [23, 343], "al18": 23, "markov": [23, 34], "chain": [23, 34, 100, 121], "low": [23, 34, 41, 75, 124, 155, 157, 168, 172, 224, 259, 325, 340, 345, 346, 347, 348, 349, 352, 353], "ferromagnet": 23, "align": 23, "onto": [23, 68, 71, 288], "tend": [23, 43], "lower": [23, 34, 35, 100, 168, 169, 172, 193, 206, 241, 271, 280, 284, 342, 352, 354], "closer": 23, "word": [23, 222, 224, 282, 334], "aim": [23, 34, 148, 240, 325, 350], "tackl": [23, 333, 334], "min_": [23, 24], "problem_s": [23, 24, 356], "100": [23, 24, 29, 30, 149, 280, 353], "1000": [23, 24, 30, 270], "seed": [23, 24, 122, 280, 286, 356], "248": [23, 24], "h_field": [23, 356], "rand": [23, 24, 168, 169, 356], "any_mat": [23, 24, 356], "j_mat": [23, 356], "transpos": [23, 24, 77, 153, 154, 173, 356], "18": [23, 134, 137, 140, 141, 147, 339, 340, 345, 346, 356], "problem_is": [23, 356], "offset_i": [23, 246, 286, 356], "magnetic_field_h": [23, 246], "j_coupling_matrix": [23, 246], "problem_ising_job": 23, "gamma_t": [23, 24, 126, 246, 260, 337, 338, 339, 340, 341], "gamma_t_fun": 23, "nan": 23, "readi": [23, 24, 238, 241, 246, 260, 325, 342], "69198662": [23, 24], "48503501": 23, "02913885": 23, "56996588": 23, "84630373": 23, "99216786": 23, "72490608": 23, "36270136": 23, "21518767": 23, "43237698": 23, "53659164": 23, "43329047": 23, "63995666": 23, "75877295": 23, "67301865": 23, "74051823": 23, "84432295": 23, "68663996": 23, "76994591": 23, "78961076": 23, "38143552": 23, "traceback": [23, 51, 287, 344, 351], "recent": [23, 51, 287, 344, 351], "stdin": [23, 24, 51, 287, 322, 337, 338, 339, 340, 341, 344, 351], "30": [23, 36, 37, 134, 147, 325, 334, 339, 340, 345, 346], "nameerror": [23, 51, 287], "to_qubo": [23, 25, 243, 246], "combinatorialproblem": [23, 24, 25, 34, 238, 246, 255, 260, 342, 356], "to_combinatorial_problem": [23, 24, 246, 260], "tameem": 23, "albash": 23, "daniel": 23, "lidar": 23, "review": 23, "modern": 23, "90": 23, "015002": 23, "2018": 23, "url": [23, 102, 206, 212, 216, 265, 285, 290], "journal": [23, 212], "ap": [23, 206, 212], "rmp": 23, "1103": [23, 206, 212], "revmodphi": 23, "x_": [24, 351], "q_": 24, "quad": 24, "linear": [24, 130, 132, 143, 238, 240, 261, 282, 283, 284, 285, 325, 342, 353], "seen": [24, 26, 41, 78, 243, 271, 351, 352, 353], "2x_": 24, "q_mat": 24, "52": [24, 29, 134, 147], "problem_qubo": 24, "offset_q": [24, 260], "q_matrix": [24, 260], "problem_qubo_job": 24, "na": [24, 327], "73860143": 24, "23485743": 24, "65543516": 24, "74898502": 24, "19440743": 24, "55240091": 24, "42782353": 24, "46931252": 24, "9406734": 24, "5541593": 24, "73200663": 24, "65215284": 24, "63773675": 24, "28187286": 24, "22": [24, 96, 134, 147, 239, 339, 340, 345, 346, 352], "userwarn": [24, 337, 338, 339, 340, 341], "sqaqpu": [24, 337, 338, 339, 340, 341], "to_is": [24, 25, 243, 260], "var": [25, 34, 238, 242, 243], "claus": [25, 34, 193, 229, 238, 239, 243], "achiev": [25, 28, 333], "famou": [25, 333], "sat": [25, 238], "comb_prob": 25, "five": 25, "x1": 25, "x2": 25, "x3": 25, "x4": 25, "weight": [25, 238, 243, 249, 268, 275, 322, 343], "add_claus": [25, 243], "75": [25, 352], "86": 25, "comb_prob_ob": 25, "get_observ": [25, 241, 242, 243, 246, 260, 261, 262], "1500000000000001": 25, "1875": 25, "zz": [25, 26, 96, 149, 175, 176, 177, 239, 243, 351], "zzz": [25, 239], "56": [25, 147], "215": 25, "per": [25, 74, 268, 285, 335, 337, 338, 339, 340, 341, 345, 347, 348], "exemplifi": 25, "my_observ": 26, "xz": [26, 30, 175, 177, 351], "zxzx": 26, "constant_coeff": [26, 121, 153, 154, 168, 169, 173, 352], "multipli": [26, 182, 183, 186, 219, 220, 240, 245, 247, 263, 353], "obs1": 26, "obs2": 26, "tensor": [26, 128, 158, 192, 204, 270, 279, 318, 323, 353], "__xor__": 26, "zzx": 26, "commut": [26, 266, 273, 351, 353], "__or__": 26, "2j": 26, "yz": [26, 175, 177], "shorthand": 26, "notat": [26, 193], "obs3": 26, "previous": [26, 352, 353], "complex": [26, 77, 100, 124, 125, 126, 336, 349], "ones": [26, 170, 333, 334], "zx": 26, "nbshot": [26, 28, 29, 30, 35, 91, 96, 100, 126, 149, 241, 285], "2048": 26, "retriev": [27, 42, 54, 60, 204, 268, 325], "showcas": 27, "batch": [27, 33, 35, 39, 40, 57, 60, 61, 63, 64, 90, 96, 100, 102, 178, 179, 180, 181, 182, 183, 184, 185, 186, 205, 255, 256, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 290, 291, 344, 345, 346, 347, 348, 349], "view": [28, 325], "memori": [28, 36, 37, 86, 204, 205, 284, 311, 312, 351], "he": 28, "wavefunct": [28, 152, 168], "commonli": [28, 292], "project": [28, 68, 70, 149], "formal": [28, 34, 268], "speak": 28, "axi": [28, 204, 352], "yield": [28, 29, 30, 31, 96, 179, 266, 342], "bitstr": [28, 29, 31, 126, 127, 243, 249, 255, 268], "rest": [28, 31, 34, 40, 41], "statist": [28, 96, 209, 325], "accur": [28, 170], "estim": [28, 29, 30, 64, 91, 124, 125, 170, 193, 223, 324, 325, 328, 350, 353], "frequenc": [28, 29, 91, 96, 122, 125, 126], "01": [28, 126, 268, 280, 307, 325, 341, 356], "repetit": [28, 224], "emul": [28, 33, 79, 96, 264, 267, 276, 324], "infinit": [28, 29, 30, 125, 126, 149], "decid": [28, 29], "subset": [28, 70, 73, 247, 249, 258, 273, 324, 334, 340, 344, 345, 346, 349], "On": [28, 41, 289], "subresult": 28, "absenc": [28, 70], "observablesplitt": [28, 30, 264], "enhanc": 28, "capac": 28, "aggreg": [28, 33, 35, 90, 91, 96, 126, 224, 265], "threshold": [28, 29, 35, 91, 96, 100, 126, 149, 168, 169, 172, 224, 266], "uncertainti": 28, "meant": [28, 94, 100, 170, 171, 242, 352], "request": [28, 83, 124], "metadata": [28, 32], "show": [28, 96, 170, 235, 334, 337, 340, 352, 353], "1024": [28, 35, 96], "reconstruct": [28, 32], "load": [28, 32, 35, 60, 61, 94, 95, 96, 99, 100, 124, 126, 129, 204, 246, 325], "autom": [28, 43, 148], "conduct": 29, "amp_threshold": [29, 96, 100, 126], "certain": [29, 43, 353], "finit": [29, 30, 125], "err": [29, 32, 124, 125, 149], "48": [29, 134, 147, 340], "05021167315686783": 29, "ideal": [29, 30, 36], "nois": [29, 30, 36, 43, 122, 187, 188, 189, 190, 191, 192, 264, 282, 292, 314, 315, 316, 324, 325, 350, 353], "n_": [29, 161, 162, 282, 321, 323, 353], "mathrm": [29, 151, 152, 158, 160, 161, 168, 170, 188, 190, 221, 270, 282, 297, 299, 300, 301, 302, 307, 316, 321, 323, 353], "expect": [29, 30, 31, 39, 40, 120, 126, 170, 209, 231, 266, 268, 282, 352, 353], "took": 29, "x_0": 30, "otim": [30, 249, 308, 310, 313, 318, 321, 343], "z_1": 30, "devoid": 30, "10000": [30, 259], "09977753031397177": 30, "014000000000000012": 30, "031635499123687065": 30, "0012000000000000344": 30, "010000492837140506": 30, "grasp": 31, "understand": 31, "perfectli": 31, "pars": [31, 51, 178, 179, 180, 181, 182, 183, 184, 186, 254, 255, 256, 257, 258, 344, 345, 346, 347, 348, 349], "flexibl": [31, 48, 53, 56, 62], "insert": [31, 43, 96, 282], "my_stack": [31, 39], "batchgener": [31, 102, 325], "post_process": [31, 32, 39, 179, 180, 185, 265], "spec": [31, 40, 42, 96, 99, 100, 179, 180, 181, 182, 183, 184, 185, 186, 265, 268, 269, 272, 276, 277, 281, 282], "cat": 31, "abstractgener": [31, 102, 178, 185, 325], "catstategener": 31, "target": [31, 42, 78, 96, 100, 129, 170, 238, 251, 261, 342, 343], "2f": 31, "000": [31, 40, 334], "111": [31, 40], "advantag": 31, "dummi": [31, 43, 51, 179, 325], "prod": 31, "rx_i": 31, "alpha_i": 31, "best": [31, 41, 43, 96, 126, 240, 243, 244, 245, 246, 247, 248, 254, 255, 256, 257, 258, 259, 260, 263, 264, 285, 324, 333, 334, 336, 344, 349, 353], "fix": [31, 118, 129, 249, 272, 343], "dummyenergyminim": 31, "practis": [31, 35, 268], "better": [31, 35, 170, 265, 325, 342, 352, 354], "enumer": [31, 40, 79, 80, 90, 130, 239, 268, 294, 353], "best_angles_circ": 31, "z_i": 31, "\u03c3": 31, "isclos": 31, "atol": 31, "11111": 31, "nor": [31, 35], "batchresult": [31, 39, 40, 57, 61, 63, 64, 90, 179, 180, 185, 244, 245, 247, 248, 255, 263, 265, 271, 284, 285, 290, 325], "catstateresult": 31, "__init__": [31, 35, 41, 344], "invalid": [31, 35, 80, 322], "server": [31, 33, 35, 39, 40, 79, 102, 178, 179, 185, 264, 265, 277, 283, 285, 290], "synchron": [31, 33, 39, 60, 61, 328], "asynchron": [31, 39, 59, 60, 61, 63, 328], "side": [31, 35, 39, 40, 96, 276], "serv": [31, 33, 39, 102, 179, 185, 265, 285, 290], "port": [31, 33, 39, 102, 103, 179, 185, 265, 277, 285, 290, 291, 329], "ip": [31, 33, 39, 103, 185, 277, 291, 329], "maxcutgener": [31, 178, 339, 344, 345], "1234": [31, 33, 39], "client": [31, 33, 35, 39, 40, 79, 271, 325], "distant": [31, 33, 39, 40], "listen": [31, 33, 39, 102, 179, 265, 285, 290, 329], "127": [31, 33, 39, 329], "remotebatchgener": [31, 178], "disconnect": [31, 33, 39], "lost": [31, 33, 39, 235], "encapsul": 32, "raw_data": [32, 40, 91, 124, 287, 337, 338, 339, 340, 341], "value_data": [32, 40, 124], "statevector": [32, 40, 124, 301, 325], "intermediate_measur": [32, 124, 125], "summar": 32, "trace": [32, 43, 292, 298, 300, 302, 304, 305, 318, 322], "meta": [33, 35, 41, 43, 94, 95, 271, 325], "remoteqpu": [33, 283, 325], "albeit": 34, "solver": [34, 41, 240, 244, 245, 247, 248, 259, 263, 286, 334, 354], "resembl": 34, "simulatedann": [34, 116, 283, 325, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349], "sqa": [34, 240, 244, 245, 246, 247, 248, 259, 260, 263], "benchmark": [34, 240, 244, 245, 246, 247, 248, 259, 260, 263], "98": [34, 334], "histor": 34, "heurist": [34, 241, 284, 342], "stochast": [34, 122, 125, 264, 280, 353], "temperatur": [34, 240, 244, 245, 246, 247, 248, 259, 260, 263, 286, 316, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349], "jump": [34, 189, 191], "barrier": 34, "escap": 34, "optima": 34, "hopefulli": 34, "global": [34, 292, 343, 353], "optimum": 34, "p_": [34, 91, 125], "min": [34, 41, 118, 245, 246, 249, 260, 352, 353], "delta": [34, 170], "switch": 34, "wherea": [34, 90, 282], "pseudo": [34, 353], "inherit": [35, 40, 41, 113, 193, 238, 243, 246, 260, 271, 285, 325, 342, 351], "qpuhandl": [35, 66, 96, 100, 113, 149, 276, 283, 284, 285, 291], "hardwarespec": [35, 39, 40, 42, 90, 96, 100, 102, 129, 132, 134, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 181, 182, 183, 184, 185, 186, 268, 269, 276, 281, 290, 325], "integr": [35, 148, 150, 152, 157, 168, 169, 171, 174, 316, 352], "rais": [35, 40, 68, 72, 79, 80, 81, 82, 92, 93, 96, 97, 104, 108, 109, 110, 112, 224, 243, 246, 260, 289, 325], "qpuexcept": [35, 79, 93, 325], "remotli": [35, 40], "assert_qpu": [35, 90], "my_condit": [35, 40], "parent": [35, 41, 193, 200, 240, 244, 245, 246, 247, 248, 259, 260, 263], "myqpu": 35, "super": [35, 41], "_paramet": 35, "dict": [35, 51, 57, 61, 64, 94, 95, 96, 97, 100, 110, 119, 129, 171, 188, 189, 190, 191, 271, 274, 275, 278, 280, 284, 285, 290, 316, 345, 346, 347, 348, 349], "str": [35, 51, 60, 61, 64, 77, 78, 81, 82, 85, 86, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 110, 111, 119, 120, 124, 126, 128, 129, 131, 153, 154, 160, 167, 170, 171, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 205, 222, 224, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 253, 259, 263, 265, 270, 273, 275, 277, 281, 282, 285, 290, 291, 307, 308, 316, 320, 321, 323, 337, 338, 339, 340, 341, 353], "remov": [35, 96, 100, 205, 224, 239, 318, 325], "valid": [35, 90, 235, 334], "overrid": [35, 205, 276], "temporarli": 35, "dictionari": [35, 51, 78, 96, 97, 100, 110, 119, 123, 129, 171, 188, 190, 222, 240, 244, 245, 246, 247, 248, 259, 260, 263, 316], "json": [35, 43], "_default_opt": 35, "_overrid": 35, "split": [35, 36, 273, 354], "correct": [35, 222, 232, 241, 251, 252, 334, 353], "exceut": 35, "add_sampl": [35, 124], "aggregate_data": [35, 90, 96, 100, 126], "card": 35, "underneath": [35, 231, 284], "skeleton": [35, 193], "wrapper": [35, 57, 59, 60, 61, 63, 90, 94, 95, 96, 99, 100, 124, 125, 129, 148, 197, 201, 231, 325], "max_nb_shot": 35, "qpuskeleton": 35, "arg": [35, 53, 54, 66, 96, 102, 111, 179, 180, 185, 188, 189, 190, 191, 194, 201, 224, 235, 239, 256, 257, 258, 265, 269], "nb_shot": 35, "processingtyp": [35, 42, 87, 99, 100, 285], "integ": [35, 70, 71, 73, 77, 78, 96, 116, 117, 127, 151, 225, 227, 228, 230, 232, 234, 235, 238, 240, 275, 334], "measured_qubit": 35, "todo": 35, "compress": [35, 148, 159, 352], "caster": [35, 325], "shorter": 35, "tupl": [35, 48, 53, 56, 62, 70, 71, 73, 74, 96, 122, 126, 149, 150, 152, 168, 170, 171, 172, 174, 188, 189, 190, 246, 256, 260, 286, 325], "size": [35, 40, 78, 158, 168, 170, 183, 204, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 224, 235, 240, 245, 247, 248, 256, 259, 270, 275, 318, 322, 334, 335, 337, 338, 340, 346, 347], "compris": 36, "propos": [36, 37, 148, 166], "pybind11": [36, 37], "remark": [36, 37], "exponenti": [36, 37, 209, 282, 353, 354], "around": [36, 37, 59, 60, 61, 63, 161, 170], "ram": [36, 37], "deliv": [36, 38], "unitari": [36, 38, 77, 96, 193, 195, 200, 203, 223, 297, 352, 353], "pylinalg": [37, 44, 45, 79, 224, 268, 276, 283, 284, 289, 325, 328], "my": 39, "transpil": [39, 64], "incom": [39, 41, 96], "aver": 39, "flow": [39, 96, 291], "plugin1": 39, "plugin2": 39, "my_qpu": [39, 40], "overal": [39, 96, 239, 241, 334, 353], "wide": [39, 41, 351], "remap": [39, 77, 78, 96, 209], "remoteplugin": [39, 264, 325], "pre": [39, 40, 193, 343], "subtyp": 39, "junction": [39, 264, 274, 324, 325], "resubmit": [39, 40], "repair": [39, 40], "abstractplugin": [40, 96, 100, 114, 264, 291], "pluginexcept": [40, 79, 92], "assert_plugin": [40, 90], "get_spec": [40, 42, 290], "stage": [40, 41, 42, 170, 224, 229], "myplugin": 40, "hardware_spec": 40, "someth": [40, 325], "batch_result": [40, 185, 265], "do_post_process": [40, 265], "deloc": 40, "debug": [40, 51, 119, 205, 224, 287], "ghz": 40, "all_result": 40, "need_flip": 40, "lsb_first": [40, 124], "has_statevector": [40, 124], "70710678": 40, "resdata": 40, "_serial": 40, "mem_ptr": 40, "data_typ": 40, "data_s": 40, "qreg": [40, 51, 96, 125, 127, 224, 332], "qregist": [40, 96, 125, 126, 127, 193, 224, 235], "0x153a6eab7be0": 40, "msb": [40, 127], "_subtype_metadata": 40, "0x153a6cb1cdc0": 40, "0x153a6cb1cc40": 40, "0x153a6cb1ca30": 40, "_valu": [40, 222], "error_data": 40, "in_memori": 40, "_parameter_map": 40, "values_data": 40, "emb": [41, 160], "middl": 41, "simpler": [41, 249], "deal": [41, 170, 224], "eigensolv": [41, 324, 325, 350], "until": [41, 170], "satfisfi": 41, "cous": 41, "outsid": [41, 170], "workflow": 41, "With": 41, "trivial": [41, 204, 227, 273, 343], "treatment": 41, "iterativeexplor": 41, "naiv": [41, 273], "width": [41, 70, 73, 249], "ecount": 41, "initial_job": 41, "linspac": 41, "all_valu": 41, "val": [41, 227, 228, 232], "current_job": 41, "min_val": 41, "best_index": 41, "best_param": 41, "entri": [41, 78, 96, 249], "point": [41, 122, 234, 272, 282, 285, 325], "recept": [41, 271], "acc": [41, 209], "transmit": [41, 79, 124, 128, 271], "down": [41, 158, 160, 271, 342, 353], "upper": [41, 168, 169, 170, 172], "variational_circ": 41, "beta": [41, 171, 204, 316, 342], "9979453927503363": 41, "077478517802246": 41, "bother": 41, "administr": [41, 224, 274], "burden": [41, 274], "extract": [41, 69, 77, 124, 193, 206, 224, 238, 243, 255, 257, 258, 286, 337, 338, 339, 340, 341, 351], "slightli": [41, 325], "graph": [42, 99, 129, 130, 178, 181, 182, 183, 184, 186, 238, 239, 244, 245, 247, 248, 254, 256, 257, 258, 263, 273, 324, 338, 339, 341, 343, 344, 345, 347, 348, 356], "gateset": [42, 96, 99, 109, 112, 192, 205, 224, 276], "explan": 42, "from_nx": [42, 129], "gate_set": [42, 45, 90, 96, 194, 205, 241, 276], "comm": [42, 44, 45, 68, 69, 74, 325], "ttype": [42, 68, 69, 74, 76, 79, 83, 87], "my_spec": 42, "processing_typ": [42, 99, 325], "exisit": 43, "150": 43, "optimization_trac": 43, "1798908922062261": 43, "8253928942745348": 43, "21360756893874427": 43, "24311916682222381": 43, "16504902625348952": 43, "03536278145833903": 43, "42383609641260644": 43, "09043151582874558": 43, "0280826142195148": 43, "09028131153415099": 43, "1443325816724686": 43, "17542415412729515": 43, "13058873427101944": 43, "2041923305074133": 43, "23059993374310622": 43, "2551851779842256": 43, "28157631945127337": 43, "30429604798029697": 43, "32728948104082023": 43, "3481818066219938": 43, "3331544176637563": 43, "3554796058142075": 43, "3261797339490406": 43, "37319547493211847": 43, "38096140498123676": 43, "3922838328456878": 43, "3969201212607723": 43, "41401275623227507": 43, "417357077388009": 43, "433561443289589": 43, "4434868735635835": 43, "4575309875320978": 43, "4704791482091141": 43, "4831649974770277": 43, "49610861906060566": 43, "5083991030732924": 43, "5171640113049966": 43, "5312624203882796": 43, "545042401879285": 43, "5574273124349018": 43, "5706895394641698": 43, "5829345666775367": 43, "5960900652501787": 43, "6076630832371567": 43, "6196052682188127": 43, "6303113676927252": 43, "6241116696584038": 43, "6352387348349785": 43, "5968750518233492": 43, "6440462683456645": 43, "6513235564075917": 43, "6579078874035701": 43, "6630201179351477": 43, "6701104969126621": 43, "6749186655729578": 43, "6817792753844113": 43, "687595411932121": 43, "6943622324468137": 43, "7006814171042821": 43, "7072122013127999": 43, "7137639184360506": 43, "7203176474438775": 43, "7268483156427015": 43, "7333731216560812": 43, "7398733324649739": 43, "7463835161505359": 43, "7529064491627889": 43, "7594028698759445": 43, "7659345132673838": 43, "7724626145118312": 43, "7789876646758089": 43, "7854630140913088": 43, "7919888456508156": 43, "7984861760597379": 43, "8050148964175817": 43, "811515966209521": 43, "8180313834780701": 43, "8245459790316101": 43, "8310625702546972": 43, "8375794907210499": 43, "8440136859712033": 43, "8505666905482974": 43, "8570153356020995": 43, "863562526387292": 43, "8700554440851858": 43, "8765841449062065": 43, "8830909720429169": 43, "8896144909802866": 43, "8961342630977566": 43, "9026354538789634": 43, "9091051238081014": 43, "9155977983966593": 43, "9220284233062436": 43, "9266027464956574": 43, "9335267907390925": 43, "93717066514716": 43, "9443626720889364": 43, "9475830354716454": 43, "9551570363891368": 43, "9583447554430745": 43, "9660500271459737": 43, "9697496875702221": 43, "9773424456572463": 43, "98170473233404": 43, "9890859143386339": 43, "9940719599579253": 43, "001231431949768": 43, "0067734148163876": 43, "0137039598004363": 43, "0197603054842845": 43, "026447393924197": 43, "0329470132813516": 43, "0394181081157297": 43, "0458776725728252": 43, "0523042240952933": 43, "058238568837206": 43, "0639814486453152": 43, "069676267210129": 43, "072477845618926": 43, "0804691138899414": 43, "0794921103898265": 43, "08109377054938": 43, "0851436873909155": 43, "0879788207552465": 43, "091131849913882": 43, "0941905192866936": 43, "0967464324151361": 43, "1002131318467003": 43, "1027365749547728": 43, "1060273483118461": 43, "109089151014432": 43, "1124152087184063": 43, "115634535137981": 43, "1188884305957527": 43, "1221366186079247": 43, "1253606606955429": 43, "1277374088839922": 43, "1312984668890351": 43, "1341128750803464": 43, "137469607549995": 43, "140755451670223": 43, "1440058558481838": 43, "1472708295314602": 43, "1505327505442704": 43, "15379532925131": 43, "1570577799103798": 43, "1603198030530932": 43, "1635823222063815": 43, "1668442519306819": 43, "1701059033755556": 43, "1733681524497221": 43, "1766301873147431": 43, "choic": [43, 292], "optimizer_arg": 43, "77545822268001": 43, "023844906918423": 43, "8404589300442936": 43, "470481763578287": 43, "6165949433899363": 43, "441876079739223": 43, "5961165713778547": 43, "1305484155400731": 43, "0338667177101424": 43, "352080298593173": 43, "7187644365462798": 43, "9625692268598303": 43, "0257833392926443": 43, "393013001084589": 43, "344223515216841": 43, "4286928205066287": 43, "5922773947010724": 43, "7179712630891215": 43, "8494035463632397": 43, "971985660637891": 43, "967180668015445": 43, "0660789471516323": 43, "014463902654809": 43, "059382852097385": 43, "0248798464503195": 43, "129029946013748": 43, "1637516485206425": 43, "10013567732753": 43, "2352635859032453": 43, "3009534707729156": 43, "368639968202226": 43, "4359366996700875": 43, "5016788922970625": 43, "508130538997804": 43, "594625975314594": 43, "65996663658068": 43, "722543741243212": 43, "7592203666454616": 43, "8359238691271043": 43, "8954730991302506": 43, "963820832717317": 43, "031988438212151": 43, "09997673442693": 43, "16761217109217": 43, "233692838967279": 43, "231957010864894": 43, "286591857562346": 43, "306020905991327": 43, "185258561222045": 43, "389230955987458": 43, "444573098550587": 43, "512714353895252": 43, "580781867020793": 43, "648763025327932": 43, "7165713695777365": 43, "783825581819502": 43, "84737352780904": 43, "916179519719272": 43, "975841716509351": 43, "033154637862284": 43, "097374587727821": 43, "1577454409792605": 43, "187547323782201": 43, "274807507861091": 43, "314117979274551": 43, "388859855945578": 43, "456308183642251": 43, "524161180169059": 43, "591656905525644": 43, "659906881255283": 43, "72755528748555": 43, "7958595471978": 43, "863333588766836": 43, "931440957864891": 43, "999113049041076": 43, "067236553592559": 43, "1348769189797725": 43, "202618922477397": 43, "27030804531978": 43, "3364012931969285": 43, "402011919028786": 43, "4676391490336105": 43, "52537412838419": 43, "588800619223042": 43, "640460805932964": 43, "582013006583331": 43, "691254645761693": 43, "74144377779804": 43, "733433372401949": 43, "779043249386263": 43, "792497186206647": 43, "751755766805168": 43, "828729375731336": 43, "8632539254914375": 43, "897389155065056": 43, "931093324448035": 43, "957475501904781": 43, "993756436930086": 43, "026508884225259": 43, "060234740916671": 43, "093501764662733": 43, "123940788163194": 43, "150920153685393": 43, "18269053526085": 43, "2119154690628555": 43, "224768207774961": 43, "268007407190797": 43, "297473532300721": 43, "330633483453159": 43, "361327559784852": 43, "373160787736516": 43, "415582450314318": 43, "445278640272894": 43, "478252713124203": 43, "509141321738185": 43, "524779576233705": 43, "565974631858698": 43, "595127064378694": 43, "62882273178411": 43, "661657197260977": 43, "69144781422623": 43, "7263440836734585": 43, "756794230063874": 43, "790483178055678": 43, "82384680865807": 43, "858149372110249": 43, "892023203084454": 43, "926082989036585": 43, "960130452149319": 43, "994146965161649": 43, "02794531047497": 43, "059231239014467": 43, "093453845320141": 43, "127800621774963": 43, "162079647806483": 43, "196222505084009": 43, "230308796633624": 43, "264317203667424": 43, "298419059272904": 43, "33246308714701": 43, "366542339495913": 43, "40062150018553": 43, "434698828155": 43, "468775066735525": 43, "502850278871158": 43, "536926576889469": 43, "57100212173911": 43, "605078202125465": 43, "639154231148167": 43, "673230229594466": 43, "707306224525642": 43, "741382224298217": 43, "seqoptim": [43, 149, 264, 353], "resili": 43, "gradient": [43, 100, 264, 266, 270, 324, 325, 350, 353], "sensit": [43, 353], "multiplelaunchesanalyz": [43, 264, 353], "quop": [44, 45, 188, 189, 325], "datamodel": [45, 68, 69, 75], "circuit_build": [45, 90, 188], "openqasm": [45, 46, 324, 327], "mixing_factori": [45, 238], "cirq_to_qlm": [47, 330], "qlm_to_cirq": [47, 330], "sep_measur": [48, 53, 56, 62], "kwarg": [48, 51, 53, 54, 56, 62, 66, 95, 96, 99, 100, 102, 124, 125, 126, 129, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 194, 222, 224, 227, 231, 234, 235, 240, 241, 243, 244, 245, 246, 247, 248, 256, 257, 258, 259, 260, 261, 263, 265, 269, 273, 275, 278, 280, 287], "googl": [48, 132, 134, 330], "measureless": [48, 53, 56, 62], "resulting_circuit": [48, 53, 56, 62], "list_qubit": [48, 53, 56, 62], "regular": [48, 53, 56, 62, 132, 270], "qlm_circuit": [49, 58, 65, 328, 329], "oqasmpars": [50, 332], "parser": [50, 51, 332], "include_matric": [51, 79, 205, 224], "bool": [51, 64, 77, 88, 92, 93, 96, 97, 98, 100, 120, 121, 124, 126, 128, 129, 149, 153, 154, 159, 163, 165, 170, 171, 173, 193, 205, 224, 227, 228, 232, 234, 236, 239, 241, 242, 243, 249, 255, 256, 262, 267, 268, 269, 270, 271, 272, 274, 279, 280, 284, 293, 298, 303, 304, 305, 306, 316, 321, 322, 323], "creg": [51, 332], "openqasm_cod": 51, "p": [51, 100, 157, 158, 160, 163, 168, 174, 188, 190, 221, 234, 279, 307, 308, 309, 314, 316, 323, 353], "my_custom_g": 51, "alia": [51, 97], "custom_g": 51, "oqasm_cod": 51, "els": [51, 239, 285, 351], "17": [51, 134, 137, 140, 141, 147, 339, 340, 345, 346], "write_t": 51, "tabmodul": 51, "oqasm_tab": 51, "chunk": 51, "activ": [51, 148, 150, 155, 156, 157, 168, 169, 172, 325, 350, 352], "tab": [51, 98], "aqasmengin": [52, 54, 331], "projectq_to_qlm": [53, 331], "stream": 54, "pyquil_to_qlm": [55, 329], "pyquilqpu": [55, 329], "qlm_to_pyquil": [55, 329], "pyquil_prog": 56, "rigetti": [57, 132, 144, 145], "chip": [57, 60, 61, 132, 147, 325], "tell": [57, 290], "skip": [57, 64, 193, 200, 205, 224], "set_qpu": [57, 66], "embed": [57, 61, 64, 160, 266, 270, 274, 275, 276, 278, 279, 280, 284, 285, 290, 351], "submit_job": [57, 271, 285, 286, 290], "qlm_job": [57, 329], "program_pragma": 58, "asyncbackendtoqpu": [59, 61, 63, 328], "backend": [59, 60, 61, 64, 66, 100], "useabl": 59, "backendtoqpu": [59, 60, 328], "qiskit_to_qlm": [59, 328], "qiskitjob": [59, 60, 328], "qlm_to_qiskit": [59, 328], "qputobackend": [59, 328], "qiskitruntimeqpu": [59, 325, 328], "token": [60, 61, 118, 120, 328], "ibmq_backend": [60, 61, 328], "ibmq_qasm_simul": [60, 61, 64, 328], "ibm": [60, 61, 64, 132, 136, 137, 138, 139, 140, 141, 142, 325, 328], "aer_simul": [60, 61], "argment": [60, 61], "suppos": [60, 61, 66, 81, 82], "ibmq": [60, 61, 328], "login": [60, 61], "suppli": [60, 61, 316], "qiskit_token": [60, 61], "retrieve_job": [60, 63], "file_nam": [60, 63], "qlm_batch": [60, 63], "jobv1": 60, "optimization_level": 61, "despit": 61, "light": 61, "heavi": 61, "highest": [61, 334], "qiskit_circuit": [62, 328], "async_job": 63, "max_shot": 63, "cancel": 63, "job_id": 63, "id": [63, 77], "skip_transpil": 64, "experi": [64, 170, 325], "sampler": [64, 328], "primit": [64, 328], "backend_nam": 64, "qiskitruntimeservic": [64, 328], "rxx": 65, "rzz": 65, "quantumcircuit": 65, "connector": 66, "plugabl": 66, "backendconfigur": 66, "gatetyp": [68, 78, 97], "classicctrl": [68, 78], "clasic": [68, 193], "mat2nparrai": 68, "raise_break": 68, "ndarrai": [69, 70, 71, 73, 74, 100, 111, 121, 126, 149, 150, 152, 153, 154, 157, 158, 160, 162, 168, 169, 171, 172, 173, 174, 204, 251, 253, 275, 279, 285, 295, 296, 310, 311, 312, 313, 318, 322], "shape": [69, 168, 169, 204, 231, 234, 285, 323, 342, 352], "state_vec": [70, 71, 73], "nb_sampl": 70, "thank": [70, 157], "intprob_list": 70, "occur": [70, 71, 73, 74, 96, 325, 353], "renorm": [70, 71], "afterward": [70, 224], "short": 70, "prob": [70, 73, 308, 309, 314, 316, 317, 352], "intprob": 71, "But": 71, "undergo": 71, "intermediari": [71, 279], "ax": 71, "recomput": 71, "op_po": 72, "nd": 73, "tensordot": [74, 285], "intermediatemeasur": [74, 87, 124, 125], "descriptor": 74, "branch": 74, "gatedefinit": [76, 78], "gated": [77, 78, 96], "writ": 77, "subgat": [77, 96], "ncol": 77, "column": 77, "nrow": 77, "row": 77, "is_ctrl": 77, "is_dag": 77, "is_conj": 77, "conjug": [77, 153, 154, 173, 224], "is_tran": 77, "nbctrl": 77, "signifi": [77, 224], "strict": 77, "posit": [77, 88, 96, 160, 182, 183, 186, 240, 245, 247, 263, 275, 292, 303, 344], "circuit_implement": 77, "complexnumb": [77, 126], "im": 77, "_0": [77, 160, 249], "_2": [77, 96], "distinguish": [78, 192, 308], "uniqu": [78, 85, 262], "identify": 78, "optyp": 78, "rpf": 78, "permut": 78, "prefix": [78, 98, 193], "abort": [78, 80], "formula_ev": [78, 90], "cbit_valu": 78, "rewir": 78, "thrift": [79, 94, 95, 96, 99, 100, 119, 124, 125, 128, 129, 131, 246, 277, 291], "useful": 79, "cleanli": [79, 235], "catch": 79, "errortyp": 79, "pack": 79, "character": 79, "excp": 79, "modulenam": [79, 81, 82], "103": 79, "encount": 79, "abort_cod": 80, "invalid_arg": 80, "nonresult": 80, "illegal_g": 80, "nbcbit": [80, 96], "not_simulat": 80, "stop": [80, 224, 266, 269, 270, 280], "unknown": [80, 170], "simulat": [80, 325], "allocationmodel": [83, 290], "resourcemodel": [83, 290], "sequential_round_count": 84, "parallel_job_count": 84, "allocated_thread_count_per_job": 84, "allocated_total_memory_mb": 84, "estimated_batch_completion_tim": 84, "reservation_id": 84, "devicetyp": 85, "manufactur": 85, "qaptivaqpu": 85, "job_count": 86, "exect": 86, "mem_necessary_biggest_job_mb": 86, "biggest": 86, "wished_thread_count": 86, "thread": [86, 102, 179, 265, 284, 285, 290, 322], "gate_po": 88, "hat": [90, 149, 168, 174, 282, 321, 353], "boson": 90, "hilbert": [90, 121], "span": [90, 121], "topologytyp": [90, 129, 276], "quantiti": [90, 268, 342], "arithexpress": [90, 118, 120, 122, 131, 246, 260, 286, 325], "consol": [90, 96, 269], "ascii": [90, 97], "art": [90, 97], "printer": [90, 96], "plot_in_notebook": [90, 96, 97], "thriftresult": [91, 124], "report": [91, 326], "varepsilon_": [91, 125], "equiv": [91, 125, 152, 162, 168, 221, 297, 321, 323], "f_": [91, 125, 158, 160, 297, 299], "p_k": [91, 125], "math": 91, "f_k": [91, 125], "unicod": [92, 93, 103, 185], "serializ": [94, 95, 96, 99, 124, 125, 129, 131], "fname": [94, 95, 96, 99, 100, 124, 126, 129, 224, 246], "classmethod": [94, 95, 96, 99, 100, 124, 125, 126, 129, 246], "from_byt": [94, 96, 100, 124, 125, 129], "byte": [94, 96, 100, 124, 125, 129], "from_thrift": [94, 95, 96, 99, 100, 124, 125, 129, 246], "tobject": [94, 95, 96, 99, 100, 124, 125, 129, 246], "to_cpp": [94, 100], "transmiss": [94, 100], "to_thrift": [94, 100, 119, 131], "map": [95, 96, 100, 104, 106, 107, 124, 129, 151, 153, 154, 167, 222, 274, 292, 325], "_gate_set": 96, "has_matric": 96, "var_dic": [96, 119], "ancilla_map": 96, "_serialized_gate_set": 96, "hand": [96, 102, 119, 196, 225, 227, 228, 229, 230, 232], "0x14b8290eb550": 96, "bind_vari": [96, 149, 222], "v_name": 96, "v_valu": 96, "fulli": [96, 133, 332, 342], "regener": 96, "portion": 96, "avoid": 96, "feel": 96, "deepcopi": [96, 153, 154, 173, 267], "beforehand": [96, 267], "freshli": 96, "v_dictionari": 96, "fill": 96, "shuffl": 96, "dagger_from_param": 96, "crawl": [96, 205], "clear": 96, "typeerror": [96, 344], "valueerror": 96, "callabl": [96, 120, 268, 273], "linker": [96, 224], "_10": 96, "_8": 96, "asbtract": 96, "invert": [96, 209], "334": 96, "smarter": 96, "smart_dagg": 96, "gate_tim": [96, 188, 189, 190], "unspecifi": 96, "fill_matric": 96, "submatrices_onli": [96, 205, 224, 325], "include_default_gate_set": 96, "insert_g": 96, "remove_lock": [96, 224], "lock": [96, 205, 224], "placehold": [96, 290], "shift_qbit": [96, 100], "job_typ": [96, 126, 180, 181, 182, 183, 184, 186, 344, 345, 346, 347, 348, 349, 353], "094947017729282e": 96, "largest": [96, 126], "constain": 96, "apparit": [96, 126], "doubl": [96, 126, 154, 155, 157, 182, 183, 186, 240, 244, 245, 246, 247, 248, 259, 260, 263, 284, 286], "prune": [96, 126], "unlik": [96, 126], "40": [96, 126, 134, 147, 334], "easili": [96, 195, 268, 285, 334, 351], "concaten": 96, "__add__": 96, "cat_circuit": 96, "tensori": 96, "__mult__": 96, "kron_circuit": 96, "among": [96, 192, 244, 245, 247, 248, 270, 307, 308, 325, 334, 350], "deseri": 96, "my_circuit": 96, "new_circuit": 96, "34": [96, 134, 147, 337, 338], "5707963267948966": 96, "7853981633974483": 96, "39269908169872414": 96, "_4": 96, "_6": 96, "total": [96, 154, 168, 169, 173, 235, 282, 325], "extens": [96, 353], "max_depth": 97, "circuit_nam": 97, "renaming_dict": [97, 123], "wait": [97, 269, 328], "visual": [97, 256], "ipython": [97, 123, 325], "detect": 97, "formula_str": 98, "as_graph": 99, "nqbit": [99, 121, 126, 129, 154, 155, 156, 161, 168, 169, 173, 296, 307, 308, 310, 323, 351, 352], "to_nx": [99, 129, 133], "rigetti_aspen": [99, 132], "nx_graph": [99, 129], "as_quameleon": 99, "quameleonplugin": [99, 264, 325], "quameleon": [99, 276], "differenti": [100, 119, 120, 131, 324, 325], "vname": 100, "equat": [100, 182, 183, 186, 240, 245, 247, 263], "partial": [100, 270, 292, 318, 325], "w": [100, 119, 131, 150, 152, 168], "theta_j": [100, 270], "psi_i": 100, "induc": 100, "possibli": [100, 126, 127, 188, 189, 190], "unpack": [100, 124], "job_to_run": 100, "group": [100, 160, 273, 326], "icreas": 100, "probail": 100, "remoteappl": 101, "commonqpu": [102, 113], "host_ip": [102, 179, 265, 285, 290], "localhost": [102, 179, 265, 285, 290], "server_typ": [102, 179, 265, 285, 290], "multi": [102, 148, 164, 165, 179, 265, 285, 290, 352], "pool": [102, 179, 235, 265, 266, 285, 290, 353], "fork": [102, 179, 265, 285, 290], "address": [103, 185, 204, 277, 291], "builder": [104, 250, 253], "variablenamenotavail": [104, 224], "redefin": [104, 108, 109, 110, 112], "matrix_util": [104, 188], "default_gate_set": [104, 224], "get_param_gener": [104, 188], "get_predef_gener": [104, 188], "hidden": 109, "behind": 109, "gatesignatur": [109, 110, 194, 201, 205], "gatesyntaxredefinit": [109, 110], "gatesyntax": [109, 112], "dictio": 110, "add_signatur": [110, 205], "signa": 110, "new_gate_set": 110, "arg_typ": 111, "func": [111, 122, 194, 197, 231], "get_circuit": 111, "get_matrix": [111, 153, 154, 173, 352, 353, 354], "gen": 111, "handler": [114, 291], "integer_to_spin": [115, 337, 338, 339, 340, 341], "decim": [115, 116, 117, 352], "spins_to_integ": 115, "n_spin": 116, "1d": [116, 117, 122, 240, 246, 259, 286, 296], "solution_configur": [117, 337, 338, 339, 340, 341], "spins_arrai": 117, "symbol": [118, 119], "label": [118, 119, 120, 162, 242], "ast": [118, 120], "constraint": [118, 224, 240, 264, 337, 338, 341, 356], "all_symbol": 118, "cyfunct": 118, "0x1480ca801ba0": 118, "0x1480ca801d40": 118, "0x1480ca801ee0": 118, "uminu": 118, "0x1480ca80c110": 118, "0x1480ca80c2b0": 118, "0x1480ca80c450": 118, "ufunc": 118, "0x1480ca80c930": 118, "max": [118, 170, 178, 184, 238, 246, 248, 260, 324, 334, 344], "ln": 118, "0x1480cb283a60": 118, "imag": 118, "0x1480cb283c10": 118, "0x1480cb1d03a0": 118, "ab": [118, 149, 155, 157, 212, 297], "absolut": 118, "atan2": 118, "get_item": 118, "0x1480ca80cad0": 118, "numer": [118, 119, 120, 131, 149], "infix": [118, 120], "my_min": 118, "awar": [118, 292], "children": [119, 242], "arbitrari": [119, 204], "other_var": [119, 131], "from_str": 119, "thrift_str": 119, "rpn": [119, 131], "invers": [119, 244, 245, 247, 248, 255, 263, 316, 353], "pretty_print": 119, "pretti": [119, 120, 125], "pretty_token": 120, "omit": [120, 236], "wouldn": 120, "dx": 120, "behav": [120, 193, 194, 224, 232, 235, 291], "ising": [121, 246], "to_matrix": [121, 325], "spars": [121, 153, 154, 173, 284, 322, 325], "spmatrix": 121, "psd": [122, 321, 323], "sampling_frequ": 122, "alpha": [122, 171, 204, 243, 280], "spectral": [122, 314, 316], "densiti": [122, 171, 292, 296, 301, 302, 320, 322, 323], "tild": [122, 197, 221, 316], "cos_expr": 122, "psd_expr": 122, "plot": [122, 123, 124, 231], "versu": 122, "generate_nois": 122, "hardwaremodel": [122, 187], "dependend": 122, "tf": 122, "get_nois": 122, "durat": [122, 188, 189, 190, 246, 249, 260, 292, 314, 316], "fmt": 123, "filenam": 123, "hardware_model": 123, "cell": [123, 351], "shell": 123, "get_ipython": 123, "svg": 123, "timeplot": 123, "alias": 123, "signific": [124, 221, 232, 284], "deviat": [124, 170], "iff": [124, 129, 265], "dictionnari": 124, "histogram": 124, "wrap_sampl": 124, "qreg_list": 124, "set_qreg": 125, "tname": 126, "driven": 126, "halt": 126, "int_msb_valu": 127, "__str__": 127, "lsb_int": 127, "lsb": [127, 284], "reprensent": 127, "pauli_op": 128, "do_validity_check": 128, "coeffcient": 128, "xxy": 128, "front": 128, "concern": [128, 326, 334], "check_valid": 128, "coeff": [128, 279], "is_direct": 129, "thrifttopologi": 129, "undirect": [129, 336, 337, 338, 339, 341, 345, 346, 347, 348, 349], "lnn": [129, 130, 132, 143, 276], "add_edg": [129, 130], "qb1": 129, "qb2": 129, "toplogi": 129, "vmap": 129, "init_non": 129, "getter": 129, "set_nbqbit": 129, "helper": [129, 148, 168, 169, 171, 334, 352], "all_to_al": 130, "consecut": [130, 280], "pm": [130, 282, 353], "init": 130, "var_typ": [131, 224], "ignor": [131, 224, 227, 234, 239, 273, 281, 325], "forbidden": 131, "superconduct": 132, "google_sycamor": 132, "sycamor": [132, 134], "ibm_burlington": 132, "burlington": [132, 136], "ibm_johannesburg": 132, "johannesburg": [132, 137], "ibm_melbourn": 132, "melbourn": [132, 138], "ibm_rueschlikon": 132, "rueschlikon": [132, 139], "ibm_singapor": 132, "singapor": [132, 140], "ibm_tokyo": 132, "tokyo": [132, 141], "ibm_yorktown": 132, "yorktown": [132, 142], "rigetti_agav": 132, "agav": [132, 144], "aspen": [132, 145], "zuchongzhi": [132, 325], "__name__": 132, "alltoal": 132, "griddevic": 132, "grid": [132, 135, 146, 330], "linedevic": 132, "nearest": [132, 143, 161, 165], "neighbor": [132, 143], "squaregriddevic": 132, "squar": [132, 146, 301, 311, 318], "35": [134, 147, 175, 176, 177, 340], "44": [134, 147], "31": [134, 147, 325, 341], "49": [134, 147, 340], "27": [134, 147, 334, 339, 340, 345, 346], "36": [134, 147, 239, 340], "24": [134, 147, 239, 334, 339, 340, 345, 346], "32": [134, 147, 209], "41": [134, 147], "28": [134, 147, 339, 340, 345, 346], "37": [134, 147], "46": [134, 147, 340], "16": [134, 137, 140, 141, 147, 268, 339, 345, 346], "25": [134, 147, 280, 325, 339, 345, 346], "33": [134, 147, 225, 230], "42": [134, 147, 340], "51": [134, 147], "21": [134, 147, 334, 339, 345, 346], "29": [134, 147, 339, 345, 346], "38": [134, 147], "47": [134, 147, 343], "26": [134, 147, 339, 340, 345, 346], "43": [134, 147, 239], "39": [134, 147, 340], "dimx": 135, "dimi": 135, "3x2": 135, "dimens": [135, 146, 158, 204, 234, 311, 312, 318], "dim": [146, 311, 312, 318], "3x3": 146, "53": 147, "54": [147, 206, 212], "55": 147, "57": 147, "58": 147, "61": 147, "62": 147, "63": 147, "65": 147, "electronicstructurehamiltonian": [148, 152, 154, 158, 160, 162, 167, 168, 170, 175, 176, 177, 281, 351, 352], "spinhamiltonian": [148, 149, 151, 153, 154, 167, 170, 175, 176, 177, 281, 351, 353], "make_anderson_model": [148, 351], "impur": [148, 158, 160, 351, 354], "anderson": [148, 158, 351], "make_embedded_model": [148, 351], "make_hubbard_model": [148, 351, 352], "hubbard": [148, 162, 324, 351, 352], "transform_to_bk_basi": [148, 281, 351], "bravyi": [148, 153, 154, 167, 170, 175, 281, 325, 350, 351], "kitaev": [148, 153, 154, 167, 170, 175, 281, 325, 350, 351], "transform_to_jw_basi": [148, 281, 351], "jordan": [148, 153, 154, 167, 170, 176, 281, 325, 350, 351], "wigner": [148, 153, 154, 167, 170, 176, 281, 325, 350, 351], "transform_to_parity_basi": [148, 281, 351], "pariti": [148, 153, 154, 167, 170, 177, 281, 325, 350, 351], "make_compressed_ldca_circ": [148, 352], "ldca": [148, 159, 163, 352], "make_general_hwe_circ": [148, 352], "make_ldca_circ": [148, 352], "make_mr_circ": [148, 352], "small": [148, 149, 164, 170, 171, 249], "mr": [148, 164, 352], "make_mrep_circ": [148, 352], "excit": [148, 159, 163, 165, 352], "preserv": [148, 159, 163, 165, 249, 292, 304, 322, 352], "mrep": [148, 165, 352], "make_shallow_circ": [148, 352], "keen": [148, 166], "et": [148, 163, 164, 165, 166, 239, 266, 279, 353], "al": [148, 163, 164, 165, 166, 239, 266, 279, 353], "articl": [148, 163, 164, 165, 166, 353], "2019": [148, 163, 164, 165, 166], "aspect": 148, "molecularhamiltonian": [148, 169, 351], "moleculeinfo": 148, "compute_active_space_integr": 148, "construct_ucc_ansatz": [148, 354], "convert_to_h_integr": [148, 351], "get_cluster_op": [148, 354], "get_hf_ket": [148, 354], "hartre": [148, 151, 156, 157, 171, 353, 354], "fock": [148, 151, 156, 157, 171, 353, 354], "orbit": [148, 152, 155, 156, 157, 160, 162, 164, 168, 169, 171, 172, 264, 352], "guess_init_param": [148, 354], "m\u00f8ller": [148, 157, 352], "plesset": [148, 157, 171, 352, 354], "perturb": [148, 157, 171, 264, 280, 352, 354], "select_active_orbit": 148, "freez": [148, 168, 172], "occup": [148, 155, 157, 168, 169, 172, 352], "transform_integrals_to_new_basi": 148, "qse": 148, "apply_quantum_subspace_expans": [148, 352], "phase_estim": [148, 193, 352], "perform_phase_estim": [148, 352], "trotteris": [148, 352], "make_trotterisation_routin": [148, 352], "trotter": [148, 151, 167, 170, 240, 244, 245, 247, 248, 259, 263, 325, 350], "pyscf_tool": [148, 352], "perform_pyscf_comput": [148, 352], "calcul": [148, 171, 248, 353], "pyscf": [148, 171, 352], "state_prep_circ": 149, "expansion_oper": 149, "return_matric": 149, "subspac": [149, 318, 324, 343], "expans": [149, 324], "star": 149, "_i": [149, 160, 204, 270], "_j": 149, "eigenvalu": [149, 153, 305, 352, 354], "overlap": [149, 249, 342, 343], "o_i": 149, "matrix_h": 149, "matrix_": 149, "e_qs": 149, "xx": [149, 176], "yy": [149, 176], "ncycl": [149, 159, 163, 279], "e_min": 149, "e_vq": 149, "opt_circ": 149, "one_body_integr": [150, 152, 168, 169, 171, 174, 352], "two_body_integr": [150, 152, 157, 168, 169, 171, 174, 352], "active_indic": [150, 352], "occupied_indic": [150, 352], "uv": [150, 152, 168, 169, 351], "i_": [150, 152, 157, 160, 168, 169, 174, 204, 285, 351], "uvwx": [150, 152, 157, 168, 169, 351], "2i_": 150, "ijji": [150, 168], "ijij": [150, 168], "2d": [150, 152, 153, 240, 245, 246, 260, 286], "4d": [150, 152, 153, 157, 158, 160], "occupi": [150, 155, 168, 352], "cluster_op": 151, "ket_hf": 151, "n_step": [151, 286, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349], "cluster": [151, 155, 160, 352, 354], "vert": [151, 285], "hf": 151, "iT": 151, "factor": [151, 182, 183, 186, 209, 240, 245, 247, 263, 345], "uccsd": 151, "pq": [152, 153, 158, 160, 167, 168, 170, 174, 351], "pqr": [152, 153, 158, 160, 167, 168, 174, 351], "sigma": [152, 158, 162, 168, 351], "delta_": [152, 162, 168], "sigma_1": [152, 168], "sigma_2": [152, 168], "phi_": [152, 168], "ux": [152, 168], "vw": [152, 168], "iint": [152, 168], "r_": [152, 168, 323], "resp": [152, 155, 168], "phi_u": [152, 168], "molecular": [152, 157, 168, 171, 352], "hpq": [153, 352], "hpqr": [153, 352], "a_p": [153, 351], "a_q": [153, 351], "a_r": [153, 351], "a_": [153, 158, 221, 285, 318, 351], "mathbb": [153, 160, 168, 351], "h_pq": [153, 351], "h_pqr": [153, 351], "eigval": [153, 352], "eigvalsh": [153, 352, 353], "cc": [153, 154, 160, 175, 176, 177, 309, 314, 316, 351], "cccc": [153, 154, 175, 176, 177, 351], "fermionhamiltonian": [153, 155, 167, 175, 176, 177, 281, 351], "too": [153, 154, 170, 173, 351], "to_fermion": [153, 351], "to_spin": [153, 154, 351, 352], "normal_ord": 154, "wick": [154, 351], "to_electron": [154, 351], "n_electron": [155, 156, 157, 168, 169, 172, 352], "noon": [155, 157, 168, 169, 172, 352], "n_i": [155, 157, 168], "descend": [155, 157, 168, 172], "degeneraci": [155, 157], "t_": [155, 162, 316], "cup": [155, 157, 168], "it_": 155, "inoccupi": 155, "n_qbit": 155, "orbital_energi": [157, 169, 171, 352], "trial": 157, "mp2": 157, "theta_a": 157, "epsilon_i": [157, 158], "epsilon_j": 157, "epsilon_a": 157, "epsilon_b": 157, "theta_list": 157, "mu": [158, 160, 162, 352], "epsilon": 158, "canon": [158, 160, 292, 322], "csq": [158, 160], "f_p": [158, 160], "f_q": [158, 160], "f_r": [158, 160], "n_b": 158, "bath": [158, 160, 351], "siam": 158, "c_": [158, 160, 167, 168, 174, 243, 351], "uparrow": [158, 160, 162], "downarrow": [158, 160, 162], "v_i": 158, "coulomb": [158, 168], "repuls": [158, 160, 168, 169, 171, 352], "intens": [158, 316, 353], "chemic": [158, 160, 162, 167], "tunnel": 158, "2n_b": 158, "f_0": 158, "annihil": 158, "f_1": 158, "f_2": 158, "1st": 158, "f_3": 158, "nb_fermionic_mod": [159, 163], "eigstate_ind": [159, 163], "slater": [159, 163], "pattern": [159, 161], "synthoplin": 159, "cycl": [159, 161, 163, 165, 279], "eigenst": [159, 163, 170, 242], "lambda_c": 160, "t_loc": 160, "int_kernel": 160, "limits_": 160, "2m": 160, "ijkl": [160, 168, 174], "f_j": 160, "_k": 160, "f_l": 160, "loc": 160, "d_": [160, 204], "imp": 160, "onsit": 160, "site": [160, 162, 351], "hop": [160, 162], "correl": [160, 192, 351, 352], "uncorrel": 160, "conv": 160, "2i": [160, 221], "strategi": [160, 193, 239, 241, 342], "_1": [160, 249], "n_cycl": 161, "rotation_g": 161, "entangling_g": 161, "predefg": 161, "thinli": 161, "dress": 161, "entangl": [161, 239, 273, 292, 299], "surround": 161, "four": [161, 352], "neighbour": [161, 165], "odd": 161, "t_mat": [162, 352], "dagger_i": 162, "n_site": 162, "dallair": 163, "demer": 163, "matchgat": 163, "inspir": [164, 206, 216, 342], "sugisaki": [164, 165], "n_fsim_cycl": 165, "set_phi_to_0": 165, "fsim": 165, "phi": [165, 168, 352], "n_trotter_step": [167, 170, 352], "final_tim": [167, 352], "prod_": 167, "c_p": [167, 170], "c_q": 167, "c_r": 167, "dr": 168, "particl": [168, 264, 275], "chosen": [168, 210, 266, 268, 270, 280], "kin": 168, "pot": 168, "randn": [168, 169], "mol_h": [168, 169, 352], "8143091396679258": 168, "get_electronic_hamiltonian": [168, 351, 352], "select_active_spac": [168, 169, 352], "threshold_1": [168, 169, 172, 352], "02": [168, 169, 172, 352], "threshold_2": [168, 169, 172, 352], "001": [168, 169, 172, 266, 270], "ca": [168, 172], "approach": [168, 171, 172, 193, 238, 273, 333], "divid": [168, 172], "inact": [168, 172], "latter": [168, 172, 282, 353], "unchang": [168, 172, 325], "varepsilon_2": [168, 169, 172], "varepsilon_1": [168, 169, 172], "geq": [168, 245], "n_e": 168, "e_": [168, 170, 314, 316], "transform_basi": [168, 352], "transformation_matrix": 168, "u_": [168, 174, 221], "qi": [168, 174], "jq": [168, 174], "qj": [168, 174], "kr": [168, 174], "molecular_hamiltonian": 168, "studi": [169, 171, 325, 350, 352, 353], "molecul": [169, 171, 324, 325, 350, 352, 353], "8264786963804562": 169, "8742478599982554": 169, "434383003951217": 169, "1440994048551447": 169, "4095770972149864": 169, "2237588523602763": 169, "00456206013869799": 169, "9331706116341258": 169, "5691521864705402": 169, "32747798420115853": 169, "5185894634323336": 169, "5267084426176271": 169, "20601557743921306": 169, "1250743672336885": 169, "2700345756614324": 169, "18223516635950174": 169, "16529761070097257": 169, "7654377651259311": 169, "831081159540643": 169, "1084086230202213": 169, "4650686214015576": 169, "restrict_active_spac": 169, "h_el": 170, "n_phase_bit": 170, "init_vec": 170, "n_adiab_step": 170, "e_target": [170, 352], "size_interv": [170, 352], "basis_transform": 170, "n_shot": 170, "verbos": [170, 272, 279, 298], "qpe": 170, "apriori": 170, "challeng": 170, "preliminari": 170, "collaps": [170, 224], "linearli": [170, 246, 260], "guarante": 170, "lie": 170, "adjust": 170, "suggest": 170, "interv": 170, "unbias": 170, "eigenenergi": [170, 352], "narrow": 170, "mislead": 170, "anymor": 170, "thumb": 170, "consider": [170, 353], "larger": [170, 235, 334, 342], "01101": 170, "fast": 170, "idea": [170, 353], "Will": 170, "_interv": 170, "geometri": [171, 352], "run_fci": 171, "kickstart": 171, "nuclear": [171, 352], "groundstat": 171, "2nd": [171, 354], "m\u00f6ller": 171, "ci": 171, "fci": 171, "expens": 171, "big": [171, 311, 312, 351], "atom1": 171, "atom2": 171, "atomn": 171, "guess": [171, 352, 354], "neutral": 171, "rdm1": [171, 352], "nuclear_repuls": [171, 352], "nel": 171, "active_so": 172, "spatial": 172, "inactive_occupied_so": 172, "zy": [173, 351], "4j": 173, "u_mat": 174, "h_hat_ij": 174, "h_hat_ijkl": 174, "fermion_hamiltonian": [175, 176, 177], "bk": 175, "spin_hamiltonian": [175, 176, 177], "075j": [175, 176, 177], "075": [175, 176, 177], "jw": 176, "yx": 176, "xy": 176, "combinatorialoptimizergener": [178, 181, 182, 183, 184, 186, 254], "graphcolouringgener": [178, 336, 349], "colour": [178, 181, 238, 244, 334, 341, 344, 348], "graphpartitioninggener": [178, 337, 346], "partit": [178, 182, 238, 244, 245, 247, 248, 254, 256, 259, 324, 334, 339, 344, 345], "kcliquegener": [178, 257, 338, 347], "kcliqu": [178, 183, 238, 257, 347], "cut": [178, 184, 238, 245, 248, 324, 334, 344], "vertexcovergener": [178, 258, 341, 348], "cover": [178, 186, 238, 254, 258, 263, 324, 334, 344], "abctract": 179, "met": 179, "hostnam": 179, "wrapper_post_process": 179, "abstractgenetor": 179, "parsedpostprocessedresult": 179, "combinatorialresult": [180, 254], "number_of_colour": [181, 244, 341], "graphpartitioningresult": [181, 182, 184, 244, 245, 247, 248, 254], "h_a": [182, 183, 186, 240, 245, 247, 263], "h_b": [182, 183, 186, 240, 245, 247, 263], "kcliqueresult": [183, 254], "cliqu": [183, 238, 247, 254, 257, 324, 334, 344], "vertexcoverresult": [186, 254], "imperfect": 187, "readout": [187, 192], "channel": [187, 188, 189, 190, 192, 294, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 314, 315, 316, 317, 319, 320, 321, 322, 323, 328, 353], "noise_model": [187, 292], "defaultgatesspecif": 187, "gatesspecif": [187, 188, 189, 191, 315], "perfect": [187, 188, 189, 190, 192, 249, 284], "defaulthardwaremodel": [187, 192], "make_depolarizing_hardware_model": 187, "depolar": [187, 192, 292, 307, 308, 353], "state_prep": [188, 190, 195, 203], "predef_gener": 188, "param_gener": 188, "channel_repr": [188, 189, 314, 316], "channelrepresent": [188, 189, 292, 314, 316], "krau": [188, 189, 292, 294, 297, 298, 299, 300, 303, 305, 308, 309, 314, 316, 320, 321, 322, 323], "wise": [188, 189, 190], "oppos": 188, "quantum_channel": [188, 190, 303, 304, 305, 306], "quantumchannel": [188, 189, 190, 191, 292, 297, 298, 299, 300, 303, 304, 305, 306], "rho_0": [188, 190], "povm": [188, 190], "lbrace": [188, 190, 308, 322], "rbrace": [188, 190], "tr": [188, 190, 282, 301, 302, 318, 323], "rho": [188, 190, 297, 308, 320, 321, 322], "get_gate_tim": [188, 190], "gate_typ": [188, 190, 315], "get_quantum_channel": [188, 190], "gate_d": [188, 190], "quantumchannelkrau": [188, 190, 292, 307, 308, 309, 320, 321, 323], "gate_nois": [189, 191], "idle_nois": [189, 191], "idl": [189, 191, 192], "instantan": 189, "parametricquantumchannel": [189, 191, 292, 315], "gates_specif": [189, 191, 315], "params_specif": [189, 191], "jump_oper": [189, 191], "lindblad": [189, 191, 314], "eps1": 192, "eps2": 192, "correl_typ": 192, "single_qubit": 192, "depol_typ": [192, 307, 308], "rate": [192, 307, 353], "multi_qubit": 192, "multiqubit": [192, 324, 325, 350, 353], "make_depolarizing_channel": [192, 292, 307], "paramg": [193, 194], "qclaus": [193, 227, 228, 232], "quantul": 193, "qarithexp": [193, 232], "qcompexp": [193, 232], "boolformula": [193, 198, 224], "cregist": [193, 224], "generate_gate_set": 193, "abtract": 193, "diagram": [193, 256], "arrow": 193, "green": 193, "rippl": [193, 212], "indep": 193, "agnost": [193, 206], "indepent": 193, "distinct": 193, "matter": 193, "kptree": [193, 325], "kerinidi": [193, 204], "prakash": [193, 204], "amplification_step": 193, "amplif": [193, 195, 324], "grover": [193, 195, 202, 324], "quantum_count": 193, "grover_diffus": 193, "diffus": [193, 195, 202], "household": [193, 195, 202], "uniform_distribut": 193, "famili": 194, "admiss": 194, "r_z": 194, "my_rz": [194, 222], "matrix_gen": 194, "set_dag": 194, "recip": [194, 342], "assumpt": [194, 353], "nbit": [195, 202, 223, 236, 237, 249], "reg1": 195, "reg2": 195, "neg": [196, 229, 242, 345], "my_gat": 197, "slice": [199, 233, 239], "littl": 200, "mother": [200, 222], "never": [200, 235], "safe": 201, "gather": [201, 325], "kp": 204, "multiplexor": 204, "kerenidi": [204, 325], "kp17": 204, "qram": 204, "k_1": [204, 308], "k_n": 204, "k_i": [204, 308], "pad": 204, "log_2": 204, "understood": [204, 231], "i_1": [204, 310, 318], "i_k": 204, "alpha_": 204, "adress": 204, "i_l": 204, "beta_": 204, "get_routin": 204, "flatten": 204, "rout_0": 204, "rout_1": 204, "rout_2": 204, "proport": 204, "routine_state_prep": 204, "routine_1": 204, "8852338501615207": 204, "4409591941862296": 204, "0876617365222137": 204, "2754570951040147": 204, "6829481828336413": 204, "437910832970296": 204, "34899178369257366": 204, "addresses_count": 204, "mutliplexor": 204, "iordani": 204, "anupam": 204, "8th": 204, "innov": 204, "theoret": [204, 248], "confer": 204, "itc": 204, "2017": [204, 216], "schloss": 204, "dagstuhl": 204, "leibniz": 204, "zentrum": 204, "fuer": 204, "informatik": 204, "include_lock": [205, 224], "cz": 205, "my_cnot_implement": 205, "submatric": [205, 224], "footprint": 205, "gate_signatur": 205, "clear_gate_set": 205, "default_g": 205, "_spec": [205, 267, 273], "happen": [205, 224, 227, 228, 232], "link_gat": 205, "link_matric": 205, "set_gate_set": 205, "vbe96": [206, 212, 214], "reg_siz": [206, 207, 208, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221], "modulo": [206, 208, 209, 213, 215, 217, 218, 219, 220], "add_const_mod": [206, 211], "crash": 206, "modular": 206, "add_mod": 206, "modular_exp": 206, "exponanti": 206, "mult_const_mod": [206, 209], "mult_const": [206, 216], "vlatko": [206, 212], "vedral": [206, 212], "adriano": [206, 212], "barenco": [206, 212], "artur": [206, 212], "ekert": [206, 212], "elementari": [206, 212], "phy": [206, 212, 297, 299, 300], "rev": [206, 212, 297, 299, 300], "147": [206, 212], "153": [206, 212], "jul": [206, 212], "1996": [206, 212], "doi": [206, 212, 216], "physreva": [206, 212], "modulu": [207, 208, 209, 211], "textrm": [207, 209, 211], "mod": [207, 208, 209, 211], "add_const": [207, 208, 210, 212, 216], "reg_control_s": 209, "acc_siz": [209, 210, 211], "shor": 209, "phase_reg": 209, "util": [209, 343, 354], "3720": 209, "8988": 209, "1472": 209, "128": 209, "384": 209, "gate_s": 209, "14853": 209, "expon": 209, "accumul": [209, 210, 211], "euclid": 209, "coprim": 209, "ttk09": [212, 213], "cdkm04": [212, 215], "cuccaro_add": [212, 213], "cuccaro": 212, "steven": 212, "thoma": 212, "draper": 212, "samuel": 212, "kutin": 212, "david": 212, "petri": 212, "moulton": 212, "arxiv": [212, 279, 297, 342], "quant": [212, 297], "0410184": 212, "48550": 212, "miss": [212, 241, 344], "classadd": 212, "reg_size_2": [213, 215, 217, 219, 220], "7n": 213, "2n": [213, 215], "5n": 213, "6n": 215, "4n": 215, "rpge17": 216, "const": 216, "lidia": 216, "ruiz": 216, "perez": 216, "juan": 216, "carlo": [216, 240, 244, 245, 247, 248, 259, 263], "garcia": 216, "escartin": 216, "fourier": [216, 221, 324], "april": [216, 325], "1007": 216, "s11128": 216, "017": 216, "1603": 216, "res_reg_s": 219, "psi_": 221, "dot": [221, 285, 308, 313, 335], "xk": 221, "abstract_g": 222, "member": 222, "ctrlbit": 224, "gate1": 224, "gate2": 224, "get_free_ancilla": [224, 235], "class_nam": [224, 235], "destroi": 224, "usabl": 224, "var_nam": 224, "class_typ": 224, "qblist": 224, "cblist": 224, "do_link": 224, "comparison_ep": 224, "box_routin": 224, "untouch": 224, "demand": 224, "further": 224, "indentif": 224, "correspondig": 224, "systemat": 224, "infer": [224, 282, 325, 353], "operand": [225, 229], "reverse_bit_ord": [225, 232], "substract": [225, 325], "qbool_arrai": [227, 228], "cl": 227, "qbits_list": [227, 228, 229, 230, 232, 233], "implicitli": [229, 314], "toward": 229, "and_formula": 229, "got": 229, "similarili": 231, "love": 231, "my_funct": [231, 268], "some_random_point": 231, "qlm_obj": 231, "096599484046194": 231, "9826433257112905": 231, "smaller": [232, 334], "uniti": 232, "xore": 232, "everytim": 234, "bell_stat": 234, "h_rz": 234, "\u03c0": 234, "rx_rz": 234, "angles_0": 234, "angles_1": 234, "avoir": 234, "yet": 234, "notion": 235, "routop_l": 235, "max_wir": 235, "inbound": 235, "repeatedli": 235, "bl": 235, "unus": 235, "freed_ancilla": 235, "additin": 235, "tag": 235, "contruct": 235, "boolexpr": 238, "themselv": 238, "bilp": 238, "graphcolour": [238, 260, 336, 349], "graphpartit": [238, 337, 346], "maxcut": [238, 246, 339, 343, 345], "numberpartit": [238, 246, 340], "vertexcov": [238, 258, 260, 341, 348, 356], "mixingfactori": [238, 343], "mix": [238, 249, 250, 251, 261, 282, 330, 343], "circuitgener": [238, 243, 246, 260, 342, 344], "schedule_gener": 238, "schedulegener": 238, "vsolv": [238, 241], "ansatzfactori": [238, 342], "regroup": [239, 292], "qaoa_circuit": 239, "to_circ_arg": [239, 241], "line_ob": 239, "add_term": 239, "ansatz_with_cnot": 239, "ansatz_with_rzz": 239, "121": 239, "67": 239, "synthesi": [239, 342], "influenc": [239, 284, 353], "insert_in": 239, "slic": 239, "elif": 239, "ansatz_default": 239, "ansatz_color": 239, "color": [239, 241, 273], "gray_synth": 239, "cnot_count": 239, "ansatz_gray_synth": 239, "grai": 239, "synth": 239, "techniqu": [239, 279, 333, 353], "ami": 239, "graysynth": 239, "synthes": [239, 241], "onlt": 239, "maximis": 240, "obei": [240, 334], "produce_q_and_offset": [240, 244, 247, 263], "gg": [240, 282, 353], "luca": [240, 244, 245, 247, 259, 263], "2014": [240, 244, 245, 247, 259, 263, 342], "bilp_problem": 240, "get_best_paramet": [240, 244, 245, 246, 247, 248, 259, 260, 263, 337, 338, 339, 340, 341], "n_monte_carlo_upd": [240, 244, 245, 247, 248, 259, 263], "mont": [240, 244, 245, 247, 248, 259, 263], "n_trotter": [240, 244, 245, 247, 248, 259, 263], "replica": [240, 244, 245, 247, 248, 259, 263], "gamma_max": [240, 244, 245, 247, 248, 259, 263], "gamma_min": [240, 244, 245, 247, 248, 259, 263], "temp_max": [240, 244, 245, 246, 247, 248, 259, 260, 263, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349], "temp_min": [240, 244, 245, 246, 247, 248, 259, 260, 263, 337, 338, 339, 340, 341, 345, 346, 347, 348, 349], "binary_linear_integer_program": 240, "qaoa_ansatz": [241, 344], "get_qaoa_gate_set": 241, "my_plugin": 241, "greedi": [241, 273], "and_claus": 242, "or_claus": 242, "xor_claus": 242, "neg_claus": 242, "subclaus": 242, "induct": 242, "wedg": 242, "vee": 242, "oplu": 242, "negat": 242, "myproblem": 243, "var1": 243, "var2": 243, "125": 243, "w_": 243, "nbvar": 243, "to_bqm": [243, 246, 260, 356], "dwave": [243, 246, 260, 356], "dimod": [243, 246, 260, 356], "binaryquadraticmodel": [243, 246, 260], "add_nodes_from": [244, 245, 247, 263, 337, 338, 341, 347, 349, 356], "arang": [244, 245, 247, 263, 337, 338, 341, 347, 349, 356], "add_edges_from": [244, 245, 247, 263, 337, 338, 341, 347, 349, 356], "graph_colouring_problem": 244, "parse_result": [244, 245, 247, 248, 263], "thatrepres": 244, "graph_colour": 244, "produce_j_h_and_offset": [245, 248, 259], "graph_partitioning_problem": [245, 337], "balanc": 245, "graph_partit": 245, "e_i": [246, 286], "child": [246, 260], "get_j_h_and_offset": 246, "aneal": [246, 260], "gamma": [246, 260, 280, 316, 342], "k_clique_problem": 247, "k_cliqu": 247, "bigger": [247, 263], "wikipedia": [248, 280], "full_rary_tre": [248, 339, 344, 345, 346, 348], "256": 248, "max_cut": 248, "initialstatebuild": [249, 250, 251], "bit_flip": 249, "restrict_to": 249, "h_0": [249, 342, 343], "simpleinitialst": [249, 250], "bit_mov": [249, 343], "hamming_weight": 249, "tmax_psi_0": 249, "move": [249, 343], "ham": [249, 268, 343], "equi": 249, "argu": 249, "gap": 249, "entail": 249, "polynomi": 249, "scalabl": 249, "inexact": 249, "70": 249, "independentann": [249, 250], "prepend": [250, 251, 252], "start_ham": 251, "end_ham": 251, "true_psi_0": 251, "inject_initial_st": [251, 252, 253], "annealing_job": [251, 252, 253, 261, 343], "inject": 252, "score": 255, "truthi": 255, "falsi": 255, "with_figur": 256, "figsiz": 256, "node_s": 256, "300": [256, 266, 278], "font_siz": 256, "draw_networkx": 256, "matplotlib": 256, "pyplot": 256, "font": 256, "array_of_numb": 259, "array_of_numbers_s": 259, "randint": [259, 340], "number_partitioning_problem": [259, 340], "3247": 259, "numbers_arrai": 259, "number_partit": 259, "e_q": 260, "get_q_and_offset": 260, "interpol": 261, "singleton": 262, "vertex_cover_problem": [263, 341, 356], "vertex_cov": 263, "circuitinlin": 264, "costfunctionplugin": 264, "psominimizeplugin": 264, "swarm": [264, 275], "pso": [264, 275], "spsaminimizeplugin": 264, "simultan": [264, 280], "spsa": [264, 280], "adaptvqeplugin": [264, 325, 353], "gradientdescentoptim": [264, 353], "descent": [264, 270, 353], "transformobserv": 264, "zeronoiseextrapol": [264, 353], "extrapol": [264, 282, 325, 350, 353], "edit": 265, "prost": 265, "operator_pool": 266, "n_iter": [266, 353], "tol_vanishing_grad": 266, "tau_k": 266, "theta_k": 266, "grimslei": 266, "antihermitian": 266, "inplac": 267, "qat_circ": 267, "fly": 267, "worst": 267, "perfom": 267, "weigth": 268, "cost_funct": 268, "job_fixed_angl": 268, "result_fixed_angl": 268, "2e": 268, "is_result_argu": 268, "8e": 268, "4e": 268, "use_result": 268, "press": 269, "lambda_step": 270, "natural_gradi": [270, 353], "stop_crit": 270, "grad_norm": 270, "user_custom_g": 270, "eta": [270, 353], "nabla": [270, 353], "metric": [270, 353], "g_": 270, "bigg": 270, "criterion": 270, "energy_dist": 270, "toler": [270, 293, 303, 304, 305, 306], "randomli": [270, 280], "saemlessli": 271, "qlm_object": 271, "initial_object": 271, "n_run": 272, "duplic": 272, "upstream": 272, "splitting_method": 273, "x_basis_chang": 273, "y_basis_chang": 273, "clifford": 273, "todai": 273, "coincid": 273, "binding_kwarg": 274, "particul": 274, "variablenam": 274, "fetch": 274, "hood": 274, "binding_arg": [275, 278, 280], "choose_inertia_funct": 275, "inertia": 275, "linearly_decreas": 275, "chaotic_random": 275, "name_method_us": 275, "clpso": 275, "fdr_pso": 275, "lip": 275, "hpso_tvac": 275, "max_it": 275, "swarm_numb": 275, "size_initial_vector_spac": 275, "hypercub": 275, "inertia_kwarg": 275, "inertia_funct": 275, "inertia_weight": 275, "univers": [276, 324], "compliant": 276, "lnn_topologi": 276, "initil": 278, "set_opt": 278, "my_job": [278, 325], "rotosolv": 279, "nakanishi": [279, 353], "1903": 279, "12166": 279, "2020": [279, 353], "ostaszewski": [279, 353], "1905": 279, "09692": 279, "leverag": [279, 353], "belong": [279, 334], "converg": [279, 342], "602": 280, "101": 280, "stop_condit": 280, "evalut": 280, "a_calibr": 280, "calibr": 280, "n_calibr": 280, "en": 280, "wiki": 280, "simultaneous_perturbation_stochastic_approxim": 280, "cf": [281, 285], "n_in": 282, "extrap_g": 282, "extrap_method": 282, "decomposit": 282, "occurr": [282, 325], "rho_": [282, 299, 300], "strength": 282, "propto": 282, "ins": 282, "an_": [282, 353], "shown": [282, 334, 345, 346, 347, 348, 349], "Be": [282, 292], "correctli": [282, 325], "classicalqpu": 283, "algebra": [283, 284, 285, 325, 351], "get_current_qpu": 283, "use_nbthreads_heurist": 284, "light_circuit": 284, "tqdm": 284, "readonly_statevector": 284, "omp_num_thread": 284, "progress": 284, "sens": 284, "throught": [284, 329, 330], "resiz": 284, "intuit": 284, "i_0i_1i_2i_3": 284, "i_3i_2i_1i_0": 284, "imbric": 285, "temp_t": [286, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349], "temp": 286, "simulated_ann": [286, 337, 338, 339, 340, 341], "extract_j_and_h_from_ob": 286, "s_i": 286, "s_j": 286, "1111111111": 287, "push": 288, "muqlm": 289, "mininm": 290, "apply_resource_consumption_limit": 290, "allocation_model": 290, "subclass": 290, "estimate_resources_for_batch": 290, "adjunct": 291, "goe": [291, 321, 323], "forward": 291, "extern": 292, "parametricgatenois": 292, "quantumchannelchi": [292, 322], "chi": [292, 294, 320, 321, 322, 323], "quantumchannelchoi": [292, 322, 323], "choi": [292, 294, 297, 298, 299, 300, 321, 322, 323], "jamiolkowski": [292, 300, 321], "quantumchannelptm": [292, 304, 321, 322], "ptm": [292, 294, 297, 298, 299, 300, 321, 322, 323], "to_chi": [292, 322], "exposit": 292, "is_completely_posit": 292, "is_trace_preserv": 292, "is_trace_reduc": 292, "is_unit": 292, "make_avg_fid_equiv_depol_channel": 292, "make_generalized_amplitude_damp": 292, "damp": [292, 309, 314], "parametricamplitudedamp": 292, "parametricpuredephas": 292, "dephas": [292, 316], "distanc": [292, 300, 302, 353], "fidel": [292, 297, 299, 301, 307], "get_average_process_fidel": 292, "get_diamond_norm": 292, "diamond": [292, 298], "get_entanglement_process_fidel": 292, "get_process_dist": 292, "get_state_fidel": [292, 297, 299], "get_trace_dist": [292, 300], "math_util": 292, "convert_density_mat_to_pauli_vec": 292, "convert_pauli_vec_to_density_mat": 292, "make_pauli_matrix_basi": 292, "make_standard_matrix_basi": 292, "make_standard_vector_basi": 292, "are_equal_up_to_phas": 292, "multikron": 292, "kroneck": [292, 313, 322], "partial_trac": 292, "07": [293, 325], "stinespr": 294, "coordin": [295, 330], "pauli_vec": 296, "chan1": [297, 299, 300, 322], "chan2": [297, 299, 300, 322], "use_formula": 297, "av": [297, 307], "71": [297, 299, 300], "062310": [297, 299, 300], "gilchrist": 297, "0408063": 297, "vfidel": 297, "hilebrt": 297, "schmidt": 297, "qchan": 298, "ep": 298, "06": 298, "aka": 298, "accuraci": 298, "cp": 298, "use_choi": 299, "ent": 299, "rho_i": 299, "pro": [299, 300], "rho1": [301, 302], "rho2": [301, 302], "eqnarrai": 301, "rho_1": [301, 302], "rho_2": [301, 302], "cdot": 302, "08": [304, 305, 306], "quantumchannekrau": 304, "e_k": [305, 322], "sum_k": 305, "rb_ep": 307, "method_2q": [307, 308], "tensor_1q_channel": [307, 308], "epsilon_": 307, "rb": 307, "depol": [307, 308], "015": 307, "99247166": 307, "07071068": 307, "07071068j": 307, "k_0": 308, "k_2": 308, "k_3": 308, "k_j": 308, "rbrace_": [308, 322], "equal_prob": 308, "denot": [308, 310], "p_i": 308, "17320508": 308, "17320508j": 308, "03333333": 308, "03333333j": 308, "lamb": 309, "i_2": 310, "ldot": [310, 318], "i_n": 310, "huge": [311, 312], "mat_list": 313, "a_1": [313, 318], "a_n": [313, 318], "t_1": 314, "langle0": 314, "langle1": 314, "relax": 314, "white": [314, 316], "tau": [314, 316], "amplitudedamp": 314, "81873075": 314, "57417763": 314, "noise_channel": 315, "t_phi": 316, "spectral_funct": 316, "variant": 316, "int_": 316, "infti": 316, "omega": 316, "cotanh": 316, "analyt": 316, "varphi": 316, "w_c": 316, "w_ir": 316, "noise_spectrum": 316, "ohmic": 316, "pd": 316, "9138709": 316, "4060049": 316, "ptild": 316, "schema": [317, 319], "axis1": 318, "axis2": 318, "traced_out_subspac": 318, "a_2": 318, "a_i": 318, "d_i": 318, "i_m": 318, "tr_": 318, "j_1": 318, "d_1": 318, "d_n": 318, "apply_to": [319, 320, 322, 323], "kraus_rank": [319, 322], "matrix_basi": [320, 322], "boldsymbol": [320, 321, 323], "chi_": 320, "to_krau": [320, 321, 323], "to_ptm": [321, 322], "kraus_oper": 322, "check_trace_preserv": 322, "check_trace_reduc": 322, "p1": 322, "p2": 322, "ey": 322, "chan3": 322, "syntaxerror": 322, "rank": 322, "density_matrix": [322, 323], "old_method": 322, "n_thread": 322, "dens": [322, 325], "repr": 322, "apply_to_vector": 322, "full_kroneck": 322, "to_choi": [322, 323], "clone": 324, "github": [324, 326, 350], "repositori": 324, "mybind": 324, "web": 324, "browser": 324, "binder": [324, 325, 328, 329, 330, 331], "beginn": 324, "h2": 324, "ucc": [324, 325, 350, 351, 352, 354], "lih": [324, 352], "multiplelaunchesplugin": 324, "avala": 324, "assembli": 324, "quick": 324, "splitter": 324, "epr": 324, "analyz": 324, "august": 325, "2023": 325, "dist": 325, "contrib": 325, "qlmaa": 325, "jax": 325, "docstr": 325, "juli": 325, "restructur": 325, "highlight": 325, "ticket": [325, 326], "brq": 325, "1487": 325, "redesign": 325, "much": [325, 351], "1482": 325, "html": 325, "1485": 325, "wheel": 325, "1490": 325, "1492": 325, "symengin": 325, "ration": 325, "mainten": [325, 354], "unexpect": 325, "behaviour": [325, 353], "greater": [325, 342], "03": 325, "modulenotfounderror": 325, "jaxlib": 325, "deprecationwarn": 325, "layout_bas": 325, "pillow": 325, "layout": 325, "getsiz": 325, "getbbox": 325, "getlength": 325, "suppress": 325, "nowarn": 325, "directori": 325, "mayb": 325, "ipython_dir": 325, "home": 325, "profile_default": 325, "startup": 325, "simplefilt": 325, "action": 325, "futurewarn": 325, "restart": 325, "octob": 325, "chines": 325, "qiksit": 325, "throw": 325, "cleaner": 325, "u2": 325, "u3": 325, "decemb": 325, "june": 325, "nnizer": 325, "remote_stack": 325, "async_result": [325, 328], "join": [325, 326], "stdout": 325, "multivari": 325, "prakashqram": 325, "divis": 325, "sigsegv": 325, "question": 326, "bug": 326, "slack": 326, "ye": 327, "your_qiskit_circuit": 328, "your_qlm_circuit": [328, 329], "credenti": 328, "save_account": 328, "qiskit_ibm_runtim": 328, "my_ibm_token": 328, "ibm_quantum": 328, "ibmq_armonk": 328, "async_qpu": 328, "sleep": 328, "qiskit_result": 328, "warn": 329, "vers": 329, "your_pyquil_circuit": 329, "pyquil_circuit": 329, "qvm": 329, "15011": 329, "get_qc": 329, "qcs_settings_applications_pyquil_qvm_url": 329, "9q": 329, "qlm_circ": 330, "your_google_circ": 330, "google_circ": 330, "your_qlm_circ": 330, "linequbit": 330, "gridqubit": 330, "aqasmprint": 331, "cengin": 331, "mainengin": 331, "aq": 331, "eng": 331, "engine_list": 331, "allocate_qureg": 331, "recov": 331, "script": 332, "qasm": 332, "oqasm2circ": 332, "bell_data": 332, "cx": 332, "flawlessli": 332, "haven": 332, "hint": [333, 334], "qa": 333, "seamless": [333, 355], "criteria": 334, "orient": [334, 355], "record": 334, "although": 334, "planar": 334, "gset": 334, "dataset": 334, "sec": 334, "vertic": [334, 336, 341, 348, 349], "leighton": 334, "dimac": 334, "88": 334, "95": 334, "99": 334, "subgraph": [334, 337, 338, 339, 345, 346, 347, 348], "bhoslib": 334, "450": 334, "4000": 334, "oei": 334, "instantli": 334, "nn": [336, 349], "impos": [337, 338, 341, 356], "problem_parameters_dict": [337, 338, 339, 340, 341], "sa_qpu": [337, 338, 339, 340, 341], "problem_job": [337, 338, 339, 340, 341], "problem_result": [337, 338, 339, 340, 341], "indices_spin_1": [337, 338, 339, 340, 341], "indices_spin_minus_1": [337, 339, 340], "kclique_problem": 338, "max_cut_problem": 339, "numbers_set": 340, "spin_1_subset": 340, "spin_minus_1_subset": 340, "smallest": [341, 348], "ramp": 342, "h_c": [342, 343], "propag": 342, "r_x": 342, "slow": 342, "fgg14": 342, "edward": 342, "farhi": 342, "jeffrei": 342, "goldston": 342, "sam": 342, "gutmann": 342, "1411": 342, "4028": 342, "slowli": 343, "erdos_renyi_graph": 343, "hamitonian": 343, "combintori": 344, "max_cut_appl": [344, 345], "combinatorial_result": [344, 345, 346, 347, 348, 349], "scipy_arg": [345, 346, 347, 348, 349], "sqa_best_paramet": [345, 346, 347, 348, 349], "sqa_best_parameters_dict": [345, 346, 347, 348, 349], "5000": [345, 346, 347, 348, 349], "max_cut_gener": 345, "schedule_batch": [345, 346, 347, 348, 349], "graph_partitioning_appl": 346, "graph_partitioning_gener": 346, "kclique_appl": 347, "kclique_gener": 347, "vertex_cover_appl": 348, "vertex_cover_gener": 348, "graph_colouring_appl": 349, "graph_colouring_gener": 349, "revamp": 350, "dq": 350, "changelog": 350, "spind": 350, "migrat": 350, "z_": 351, "y_": 351, "h_elec": 351, "htype": 351, "attributeerror": 351, "bare": 351, "5j": 351, "h_fermion": 351, "h_spin": 351, "825": 351, "175": 351, "h_fermion1": 351, "h_fermion2": 351, "h_spin1": 351, "h_spin2": 351, "fermion_comutator_matrix": 351, "spin_comutator_matrix": 351, "is_equal_sign": 351, "toi": 351, "strong": 351, "flagship": 352, "hamiltonian_sp": 352, "exact_energi": 352, "eigh": 352, "nenergi": 352, "ntheta": 352, "9999999974320526": 352, "1416940034276815": 352, "2147911128415545": 352, "chemist": 352, "h_2": 352, "thorough": 352, "whatev": 352, "sake": [352, 353], "31g": 352, "9071609330057144": 352, "basis_chang": 352, "mol_h_new_basi": 352, "proce": 352, "mol_h_act": 352, "002": 352, "bring": 352, "eight": 352, "eigenvector": 352, "round": 352, "nqbits_phas": 352, "guess_energi": 352, "1403": 352, "002343750000000089": 352, "earlier": [352, 353], "said": 353, "slower": 353, "cluster_oper": 353, "harre": 353, "hf_init": 353, "char": 353, "adaptvqe_plugin": 353, "theta_init": 353, "1372701679264894": 353, "1372701679265027": 353, "sgd": 353, "adam": 353, "euclidean": 353, "baseless": 353, "fisher": 353, "steepest": 353, "fubini": 353, "devis": 353, "theta_0": 353, "theta_1": 353, "theta_2": 353, "theta_3": 353, "theta_4": 353, "natgrad_opt": 353, "learning_paramet": 353, "8660254037652464": 353, "ic": 353, "outperform": 353, "whch": 353, "regim": 353, "artifici": 353, "2n_": 353, "faulti": 353, "boil": 353, "fold": 353, "endo": 353, "rangle_": 353, "richardson": 353, "giurgica": 353, "tiron": 353, "unclear": 353, "varianc": 353, "qchem": 354, "renam": 354, "fermionic_util": 354, "exact_eigen_energi": 354, "fermionic_hamiltonian_exponenti": 354, "reloc": 354, "ansatz_circuit": 354, "build_ucc_ansatz": 354, "ucc_deprec": 354, "get_initial_params_and_cluster_op": 354, "mollet": 354, "select_excitation_oper": 354, "get_active_space_hamiltonian": 354, "versatil": 355, "demo": 355, "achiv": 356, "316": 356, "bqm_problem": 356}, "objects": {"": [[45, 0, 0, "-", "qat"]], "qat": [[75, 0, 0, "-", "comm"], [90, 0, 0, "-", "core"], [132, 0, 0, "-", "devices"], [148, 0, 0, "-", "fermion"], [178, 0, 0, "-", "generators"], [187, 0, 0, "-", "hardware"], [46, 0, 0, "-", "interop"], [193, 0, 0, "-", "lang"], [238, 0, 0, "-", "opt"], [264, 0, 0, "-", "plugins"], [67, 0, 0, "-", "pylinalg"], [283, 0, 0, "-", "qpus"], [292, 0, 0, "-", "quops"]], "qat.comm": [[76, 0, 0, "-", "datamodel"], [79, 0, 0, "-", "exceptions"], [83, 0, 0, "-", "resource"], [87, 0, 0, "-", "shared"]], "qat.comm.datamodel.ttypes": [[77, 1, 1, "", "GateDefinition"], [78, 1, 1, "", "Op"]], "qat.comm.exceptions.ttypes": [[80, 1, 1, "", "ErrorType"], [81, 1, 1, "", "PluginException"], [82, 1, 1, "", "QPUException"]], "qat.comm.resource.ttypes": [[84, 1, 1, "", "AllocationModel"], [85, 1, 1, "", "Device"], [86, 1, 1, "", "ResourceModel"]], "qat.comm.shared.ttypes": [[88, 1, 1, "", "IntermediateMeasurement"], [89, 1, 1, "", "ProcessingType"]], "qat.core": [[94, 1, 1, "", "Batch"], [95, 1, 1, "", "BatchResult"], [96, 1, 1, "", "Circuit"], [99, 1, 1, "", "HardwareSpecs"], [100, 1, 1, "", "Job"], [121, 1, 1, "", "Observable"], [122, 1, 1, "", "Parameter"], [124, 1, 1, "", "Result"], [125, 1, 1, "", "Sample"], [126, 1, 1, "", "Schedule"], [128, 1, 1, "", "Term"], [129, 1, 1, "", "Topology"], [130, 1, 1, "", "TopologyType"], [131, 1, 1, "", "Variable"], [101, 0, 0, "-", "application"], [104, 0, 0, "-", "circuit_builder"], [109, 0, 0, "-", "gate_set"], [113, 0, 0, "-", "qpu"], [115, 0, 0, "-", "spins"], [118, 0, 0, "-", "variables"]], "qat.core.Batch": [[94, 2, 1, "", "dump"], [94, 2, 1, "", "from_bytes"], [94, 2, 1, "", "from_thrift"], [94, 2, 1, "", "get_variables"], [94, 2, 1, "", "load"], [94, 2, 1, "", "to_cpp"], [94, 2, 1, "", "to_thrift"]], "qat.core.BatchResult": [[95, 2, 1, "", "append"], [95, 2, 1, "", "dump"], [95, 2, 1, "", "extend"], [95, 2, 1, "", "from_thrift"], [95, 2, 1, "", "load"]], "qat.core.Circuit": [[96, 2, 1, "", "bind_variable"], [96, 2, 1, "", "bind_variables"], [96, 2, 1, "", "compile"], [96, 2, 1, "", "count"], [96, 2, 1, "", "dag"], [96, 2, 1, "", "depth"], [96, 2, 1, "", "display"], [96, 2, 1, "", "dump"], [96, 2, 1, "", "empty"], [96, 2, 1, "", "eval"], [96, 2, 1, "", "fill_matrices"], [96, 2, 1, "", "from_bytes"], [96, 2, 1, "", "from_thrift"], [96, 3, 1, "", "gate_set"], [96, 2, 1, "", "get_variables"], [96, 2, 1, "", "insert_gate"], [96, 2, 1, "", "iterate_simple"], [96, 2, 1, "", "load"], [96, 2, 1, "", "remove_locks"], [96, 2, 1, "", "run"], [96, 2, 1, "", "shift_qbits"], [96, 2, 1, "", "statistics"], [96, 2, 1, "", "to_job"]], "qat.core.HardwareSpecs": [[99, 2, 1, "", "as_graph"], [99, 2, 1, "", "as_quameleon"], [99, 2, 1, "", "dump"], [99, 2, 1, "", "from_thrift"], [99, 2, 1, "", "load"], [99, 3, 1, "", "nbqbits"]], "qat.core.Job": [[100, 2, 1, "", "compile"], [100, 2, 1, "", "differentiate"], [100, 2, 1, "", "dump"], [100, 2, 1, "", "eval"], [100, 2, 1, "", "from_bytes"], [100, 2, 1, "", "from_thrift"], [100, 2, 1, "", "get_variables"], [100, 2, 1, "", "gradient"], [100, 2, 1, "", "load"], [100, 3, 1, "", "parameter_map"], [100, 3, 1, "", "psi_0"], [100, 2, 1, "", "run"], [100, 2, 1, "", "shift_qbits"], [100, 3, 1, "", "threshold"], [100, 2, 1, "", "to_cpp"], [100, 2, 1, "", "to_thrift"]], "qat.core.Observable": [[121, 4, 1, "", "constant_coeff"], [121, 4, 1, "", "ising"], [121, 4, 1, "", "nbqbits"], [121, 4, 1, "", "terms"], [121, 2, 1, "", "to_matrix"]], "qat.core.Parameter": [[122, 3, 1, "", "func"], [122, 2, 1, "", "generate_noise"], [122, 2, 1, "", "get_noise"], [122, 3, 1, "", "psd"]], "qat.core.Result": [[124, 2, 1, "", "add_sample"], [124, 2, 1, "", "display"], [124, 2, 1, "", "dump"], [124, 2, 1, "", "from_bytes"], [124, 2, 1, "", "from_thrift"], [124, 2, 1, "", "load"], [124, 3, 1, "", "parameter_map"], [124, 2, 1, "", "plot"], [124, 2, 1, "", "unpack"], [124, 3, 1, "", "value"], [124, 3, 1, "", "values"], [124, 2, 1, "", "wrap_samples"]], "qat.core.Sample": [[125, 3, 1, "", "amplitude"], [125, 2, 1, "", "from_bytes"], [125, 2, 1, "", "from_thrift"], [125, 2, 1, "", "set_qreg"], [125, 3, 1, "", "state"]], "qat.core.Schedule": [[126, 2, 1, "", "dump"], [126, 2, 1, "", "get_variables"], [126, 2, 1, "", "load"], [126, 2, 1, "", "to_job"]], "qat.core.Term": [[128, 4, 1, "", "coeff"], [128, 4, 1, "", "op"], [128, 4, 1, "", "qbits"]], "qat.core.Topology": [[129, 2, 1, "", "add_edge"], [129, 2, 1, "", "dump"], [129, 2, 1, "", "from_bytes"], [129, 2, 1, "", "from_nx"], [129, 2, 1, "", "from_thrift"], [129, 2, 1, "", "load"], [129, 3, 1, "", "nbqbits"], [129, 2, 1, "", "set_nbqbits"], [129, 2, 1, "", "to_nx"]], "qat.core.Variable": [[131, 2, 1, "", "differentiate"], [131, 2, 1, "", "get_variables"], [131, 2, 1, "", "to_thrift"]], "qat.core.application": [[102, 1, 1, "", "Application"], [103, 1, 1, "", "RemoteApplication"]], "qat.core.application.Application": [[102, 2, 1, "", "execute"], [102, 2, 1, "", "serve"]], "qat.core.assertion": [[92, 5, 1, "", "assert_plugin"], [93, 5, 1, "", "assert_qpu"]], "qat.core.circuit_builder.builder": [[108, 1, 1, "", "VariableNameNotAvailable"]], "qat.core.circuit_builder.matrix_util": [[105, 5, 1, "", "default_gate_set"], [106, 5, 1, "", "get_param_generator"], [107, 5, 1, "", "get_predef_generator"]], "qat.core.console": [[97, 5, 1, "", "display"]], "qat.core.formula_eval": [[98, 5, 1, "", "evaluate"]], "qat.core.gate_set": [[110, 1, 1, "", "GateSet"], [111, 1, 1, "", "GateSignature"], [112, 1, 1, "", "GateSyntaxRedefinition"]], "qat.core.gate_set.GateSet": [[110, 2, 1, "", "add_signature"], [110, 2, 1, "", "union"]], "qat.core.gate_set.GateSignature": [[111, 2, 1, "", "get_circuit"], [111, 2, 1, "", "get_matrix"], [111, 2, 1, "", "set_circuit_generator"], [111, 2, 1, "", "set_matrix_generator"]], "qat.core.printer": [[123, 5, 1, "", "plot_in_notebook"]], "qat.core.qpu": [[114, 1, 1, "", "CommonQPU"]], "qat.core.spins": [[116, 5, 1, "", "integer_to_spins"], [117, 5, 1, "", "spins_to_integer"]], "qat.core.variables": [[119, 1, 1, "", "ArithExpression"], [120, 1, 1, "", "Symbol"]], "qat.core.variables.ArithExpression": [[119, 2, 1, "", "differentiate"], [119, 2, 1, "", "from_string"], [119, 2, 1, "", "get_variables"], [119, 2, 1, "", "pretty_print"], [119, 2, 1, "", "to_thrift"]], "qat.core.wrappers.result": [[127, 1, 1, "", "State"], [91, 5, 1, "", "aggregate_data"]], "qat.core.wrappers.result.State": [[127, 3, 1, "", "bitstring"], [127, 3, 1, "", "int"], [127, 3, 1, "", "lsb_int"], [127, 3, 1, "", "value"]], "qat.devices": [[133, 1, 1, "", "AllToAll"], [134, 6, 1, "", "GOOGLE_SYCAMORE"], [135, 1, 1, "", "GridDevice"], [136, 6, 1, "", "IBM_BURLINGTON"], [137, 6, 1, "", "IBM_JOHANNESBURG"], [138, 6, 1, "", "IBM_MELBOURNE"], [139, 6, 1, "", "IBM_RUESCHLIKON"], [140, 6, 1, "", "IBM_SINGAPORE"], [141, 6, 1, "", "IBM_TOKYO"], [142, 6, 1, "", "IBM_YORKTOWN"], [143, 1, 1, "", "LineDevice"], [144, 6, 1, "", "RIGETTI_AGAVE"], [145, 6, 1, "", "RIGETTI_ASPEN"], [146, 1, 1, "", "SquareGridDevice"], [147, 6, 1, "", "ZUCHONGZHI"]], "qat.fermion": [[148, 0, 0, "-", "chemistry"], [148, 0, 0, "-", "circuits"], [148, 0, 0, "-", "hamiltonians"], [148, 0, 0, "-", "phase_estimation"], [148, 0, 0, "-", "transforms"]], "qat.fermion.chemistry.pyscf_tools": [[171, 5, 1, "", "perform_pyscf_computation"]], "qat.fermion.chemistry": [[148, 0, 0, "-", "qse"], [148, 0, 0, "-", "ucc"]], "qat.fermion.chemistry.qse": [[149, 5, 1, "", "apply_quantum_subspace_expansion"]], "qat.fermion.chemistry.ucc": [[150, 5, 1, "", "compute_active_space_integrals"], [151, 5, 1, "", "construct_ucc_ansatz"], [152, 5, 1, "", "convert_to_h_integrals"], [155, 5, 1, "", "get_cluster_ops"], [156, 5, 1, "", "get_hf_ket"], [157, 5, 1, "", "guess_init_params"], [172, 5, 1, "", "select_active_orbitals"], [174, 5, 1, "", "transform_integrals_to_new_basis"]], "qat.fermion.chemistry.wrapper": [[168, 1, 1, "", "MolecularHamiltonian"], [169, 1, 1, "", "MoleculeInfo"]], "qat.fermion.chemistry.wrapper.MolecularHamiltonian": [[168, 4, 1, "", "constant_coeff"], [168, 2, 1, "", "get_electronic_hamiltonian"], [168, 4, 1, "", "nqbits"], [168, 4, 1, "", "one_body_integrals"], [168, 2, 1, "", "select_active_space"], [168, 2, 1, "", "transform_basis"], [168, 4, 1, "", "two_body_integrals"]], "qat.fermion.chemistry.wrapper.MoleculeInfo": [[169, 4, 1, "", "constant_coeff"], [169, 4, 1, "", "hamiltonian"], [169, 4, 1, "", "n_electrons"], [169, 4, 1, "", "noons"], [169, 4, 1, "", "nqbits"], [169, 4, 1, "", "one_body_integrals"], [169, 4, 1, "", "orbital_energies"], [169, 2, 1, "", "restrict_active_space"], [169, 4, 1, "", "two_body_integrals"]], "qat.fermion.circuits": [[159, 5, 1, "", "make_compressed_ldca_circ"], [161, 5, 1, "", "make_general_hwe_circ"], [163, 5, 1, "", "make_ldca_circ"], [164, 5, 1, "", "make_mr_circ"], [165, 5, 1, "", "make_mrep_circ"], [166, 5, 1, "", "make_shallow_circ"]], "qat.fermion.hamiltonians": [[153, 1, 1, "", "ElectronicStructureHamiltonian"], [154, 1, 1, "", "FermionHamiltonian"], [173, 1, 1, "", "SpinHamiltonian"], [158, 5, 1, "", "make_anderson_model"], [160, 5, 1, "", "make_embedded_model"], [162, 5, 1, "", "make_hubbard_model"]], "qat.fermion.hamiltonians.ElectronicStructureHamiltonian": [[153, 4, 1, "", "constant_coeff"], [153, 2, 1, "", "copy"], [153, 2, 1, "", "dag"], [153, 2, 1, "", "get_matrix"], [153, 4, 1, "", "hpq"], [153, 4, 1, "", "hpqrs"], [153, 2, 1, "", "to_fermion"], [153, 2, 1, "", "to_spin"]], "qat.fermion.hamiltonians.FermionHamiltonian": [[154, 4, 1, "", "constant_coeff"], [154, 2, 1, "", "copy"], [154, 2, 1, "", "dag"], [154, 2, 1, "", "get_matrix"], [154, 4, 1, "", "matrix"], [154, 4, 1, "", "nbqbits"], [154, 4, 1, "", "normal_order"], [154, 4, 1, "", "terms"], [154, 2, 1, "", "to_electronic"], [154, 2, 1, "", "to_spin"]], "qat.fermion.hamiltonians.SpinHamiltonian": [[173, 4, 1, "", "constant_coeff"], [173, 2, 1, "", "copy"], [173, 2, 1, "", "dag"], [173, 2, 1, "", "get_matrix"], [173, 4, 1, "", "matrix"], [173, 4, 1, "", "nbqbits"], [173, 4, 1, "", "terms"]], "qat.fermion.phase_estimation": [[170, 1, 1, "", "perform_phase_estimation"]], "qat.fermion.transforms": [[175, 5, 1, "", "transform_to_bk_basis"], [176, 5, 1, "", "transform_to_jw_basis"], [177, 5, 1, "", "transform_to_parity_basis"]], "qat.fermion.trotterisation": [[167, 5, 1, "", "make_trotterisation_routine"]], "qat.generators": [[179, 1, 1, "", "AbstractGenerator"], [180, 1, 1, "", "CombinatorialOptimizerGenerator"], [181, 1, 1, "", "GraphColouringGenerator"], [182, 1, 1, "", "GraphPartitioningGenerator"], [183, 1, 1, "", "KCliqueGenerator"], [184, 1, 1, "", "MaxCutGenerator"], [185, 1, 1, "", "RemoteBatchGenerator"], [186, 1, 1, "", "VertexCoverGenerator"]], "qat.generators.AbstractGenerator": [[179, 2, 1, "", "generate"], [179, 2, 1, "", "serve"], [179, 2, 1, "", "wrapper_post_process"]], "qat.generators.CombinatorialOptimizerGenerator": [[180, 2, 1, "", "generate"], [180, 2, 1, "", "post_process"]], "qat.generators.GraphColouringGenerator": [[181, 2, 1, "", "generate"]], "qat.generators.GraphPartitioningGenerator": [[182, 2, 1, "", "generate"]], "qat.generators.KCliqueGenerator": [[183, 2, 1, "", "generate"]], "qat.generators.MaxCutGenerator": [[184, 2, 1, "", "generate"]], "qat.generators.RemoteBatchGenerator": [[185, 2, 1, "", "generate"], [185, 2, 1, "", "post_process"]], "qat.generators.VertexCoverGenerator": [[186, 2, 1, "", "generate"]], "qat.hardware": [[188, 1, 1, "", "DefaultGatesSpecification"], [189, 1, 1, "", "DefaultHardwareModel"], [190, 1, 1, "", "GatesSpecification"], [191, 1, 1, "", "HardwareModel"], [192, 5, 1, "", "make_depolarizing_hardware_model"]], "qat.hardware.DefaultGatesSpecification": [[188, 4, 1, "", "gate_times"], [188, 2, 1, "", "get_gate_time"], [188, 2, 1, "", "get_quantum_channel"], [188, 4, 1, "", "meas"], [188, 4, 1, "", "quantum_channels"], [188, 4, 1, "", "state_prep"]], "qat.hardware.DefaultHardwareModel": [[189, 4, 1, "", "gate_noise"], [189, 4, 1, "", "gates_specification"], [189, 4, 1, "", "idle_noise"], [189, 4, 1, "", "jump_operators"], [189, 4, 1, "", "params_specification"]], "qat.hardware.GatesSpecification": [[190, 4, 1, "", "gate_times"], [190, 2, 1, "", "get_gate_time"], [190, 2, 1, "", "get_quantum_channel"], [190, 4, 1, "", "meas"], [190, 4, 1, "", "quantum_channels"], [190, 4, 1, "", "state_prep"]], "qat.hardware.HardwareModel": [[191, 4, 1, "", "gate_noise"], [191, 4, 1, "", "gates_specification"], [191, 4, 1, "", "idle_noise"], [191, 4, 1, "", "jump_operators"], [191, 4, 1, "", "params_specification"]], "qat.interop": [[47, 0, 0, "-", "cirq"], [50, 0, 0, "-", "openqasm"], [52, 0, 0, "-", "projectq"], [55, 0, 0, "-", "pyquil"], [59, 0, 0, "-", "qiskit"]], "qat.interop.cirq": [[48, 5, 1, "", "cirq_to_qlm"], [49, 5, 1, "", "qlm_to_cirq"]], "qat.interop.openqasm": [[51, 1, 1, "", "OqasmParser"]], "qat.interop.openqasm.OqasmParser": [[51, 2, 1, "", "compile"]], "qat.interop.projectq": [[53, 1, 1, "", "AqasmEngine"], [54, 1, 1, "", "AqasmPrinter"]], "qat.interop.projectq.AqasmEngine": [[53, 2, 1, "", "projectq_to_qlm"]], "qat.interop.pyquil": [[57, 1, 1, "", "PyquilQPU"], [56, 5, 1, "", "pyquil_to_qlm"], [58, 5, 1, "", "qlm_to_pyquil"]], "qat.interop.pyquil.PyquilQPU": [[57, 2, 1, "", "set_qpu"], [57, 2, 1, "", "submit"], [57, 2, 1, "", "submit_job"]], "qat.interop.qiskit": [[60, 1, 1, "", "AsyncBackendToQPU"], [61, 1, 1, "", "BackendToQPU"], [66, 1, 1, "", "QPUToBackend"], [63, 1, 1, "", "QiskitJob"], [62, 5, 1, "", "qiskit_to_qlm"], [65, 5, 1, "", "qlm_to_qiskit"]], "qat.interop.qiskit.AsyncBackendToQPU": [[60, 2, 1, "", "retrieve_job"], [60, 2, 1, "", "submit"]], "qat.interop.qiskit.BackendToQPU": [[61, 2, 1, "", "submit"]], "qat.interop.qiskit.QPUToBackend": [[66, 2, 1, "", "set_qpu"]], "qat.interop.qiskit.QiskitJob": [[63, 2, 1, "", "cancel"], [63, 2, 1, "", "dump"], [63, 2, 1, "", "job_id"], [63, 2, 1, "", "result"], [63, 2, 1, "", "status"]], "qat.interop.qiskit.runtime": [[64, 1, 1, "", "QiskitRuntimeQPU"]], "qat.interop.qiskit.runtime.QiskitRuntimeQPU": [[64, 2, 1, "", "submit"]], "qat.lang.AQASM": [[206, 0, 0, "-", "arithmetic"], [212, 0, 0, "-", "classarith"], [216, 0, 0, "-", "qftarith"]], "qat.lang.AQASM.arithmetic": [[207, 5, 1, "", "add_const_mod"], [208, 5, 1, "", "add_mod"], [209, 5, 1, "", "modular_exp"], [210, 5, 1, "", "mult_const"], [211, 5, 1, "", "mult_const_mod"]], "qat.lang.AQASM.bits": [[196, 1, 1, "", "BoolFormula"], [199, 1, 1, "", "CRegister"], [198, 1, 1, "", "Cbit"], [233, 1, 1, "", "QRegister"], [226, 1, 1, "", "Qbit"]], "qat.lang.AQASM.classarith": [[213, 5, 1, "", "add"], [214, 5, 1, "", "add_const"], [215, 5, 1, "", "cuccaro_add"]], "qat.lang.AQASM.gates": [[200, 1, 1, "", "Gate"], [222, 1, 1, "", "ParamGate"]], "qat.lang.AQASM.gates.ParamGate": [[222, 2, 1, "", "bind_variables"], [222, 2, 1, "", "dag"], [222, 2, 1, "", "display"], [222, 2, 1, "", "get_variables"]], "qat.lang.AQASM.misc": [[201, 5, 1, "", "generate_gate_set"]], "qat.lang.AQASM.qbool": [[227, 1, 1, "", "QBool"], [228, 1, 1, "", "QBoolArray"], [229, 1, 1, "", "QClause"]], "qat.lang.AQASM.qbool.QBool": [[227, 2, 1, "", "cast"], [227, 2, 1, "", "cast_to"], [227, 2, 1, "", "evaluate"], [227, 2, 1, "", "phase"], [227, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qbool.QBoolArray": [[228, 2, 1, "", "cast"], [228, 2, 1, "", "evaluate"], [228, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qbool.QClause": [[229, 2, 1, "", "evaluate"], [229, 2, 1, "", "phase"], [229, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qftarith": [[221, 5, 1, "", "QFT"], [217, 5, 1, "", "add"], [218, 5, 1, "", "add_const"], [219, 5, 1, "", "mult"], [220, 5, 1, "", "mult_const"]], "qat.lang.AQASM.qint": [[225, 1, 1, "", "QArithExp"], [230, 1, 1, "", "QCompExp"], [232, 1, 1, "", "QInt"]], "qat.lang.AQASM.qint.QArithExp": [[225, 2, 1, "", "evaluate"]], "qat.lang.AQASM.qint.QCompExp": [[230, 2, 1, "", "evaluate"], [230, 2, 1, "", "phase"], [230, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qint.QInt": [[232, 2, 1, "", "cast"], [232, 2, 1, "", "evaluate"], [232, 2, 1, "", "qbits_list"], [232, 2, 1, "", "set_value"]], "qat.lang": [[194, 1, 1, "", "AbstractGate"], [224, 1, 1, "", "Program"], [235, 1, 1, "", "QRoutine"], [193, 0, 0, "-", "algorithms"], [197, 5, 1, "", "build_gate"], [231, 5, 1, "", "qfunc"], [234, 5, 1, "", "qrout"]], "qat.lang.AbstractGate": [[194, 2, 1, "", "set_dag"]], "qat.lang.Program": [[224, 2, 1, "", "apply"], [224, 2, 1, "", "calloc"], [224, 2, 1, "", "cbreak"], [224, 2, 1, "", "cc_apply"], [224, 2, 1, "", "comment"], [224, 2, 1, "", "conjugate"], [224, 2, 1, "", "display"], [224, 2, 1, "", "export"], [224, 2, 1, "", "free_ancillae"], [224, 2, 1, "", "get_free_ancillae"], [224, 2, 1, "", "logic"], [224, 2, 1, "", "measure"], [224, 2, 1, "", "new_var"], [224, 2, 1, "", "qalloc"], [224, 2, 1, "", "reset"], [224, 2, 1, "", "run"], [224, 2, 1, "", "to_circ"]], "qat.lang.QRoutine": [[235, 2, 1, "", "apply"], [235, 2, 1, "", "compute"], [235, 2, 1, "", "free_ancillae"], [235, 2, 1, "", "get_free_ancillae"], [235, 2, 1, "", "new_wires"], [235, 2, 1, "", "set_ancillae"], [235, 2, 1, "", "uncompute"]], "qat.lang.algorithms.amplification": [[202, 5, 1, "", "grover_diffusion"], [203, 5, 1, "", "householder"], [237, 5, 1, "", "uniform_distribution"]], "qat.lang.algorithms": [[195, 5, 1, "", "amplification_step"], [223, 5, 1, "", "phase_estimation"], [236, 5, 1, "", "quantum_counting"]], "qat.lang.linking": [[205, 1, 1, "", "Linker"]], "qat.lang.linking.Linker": [[205, 2, 1, "", "add_signature"], [205, 2, 1, "", "clear_gate_set"], [205, 2, 1, "", "compile"], [205, 2, 1, "", "link"], [205, 2, 1, "", "link_gates"], [205, 2, 1, "", "link_matrices"], [205, 2, 1, "", "set_gate_set"]], "qat.lang.models": [[204, 1, 1, "", "KPTree"]], "qat.lang.models.KPTree": [[204, 2, 1, "", "get_routine"]], "qat.opt": [[240, 1, 1, "", "BILP"], [243, 1, 1, "", "CombinatorialProblem"], [244, 1, 1, "", "GraphColouring"], [245, 1, 1, "", "GraphPartitioning"], [246, 1, 1, "", "Ising"], [247, 1, 1, "", "KClique"], [248, 1, 1, "", "MaxCut"], [249, 1, 1, "", "MixingFactory"], [259, 1, 1, "", "NumberPartitioning"], [260, 1, 1, "", "QUBO"], [263, 1, 1, "", "VertexCover"], [250, 0, 0, "-", "mixing_factory"], [254, 0, 0, "-", "results"]], "qat.opt.BILP": [[240, 2, 1, "", "get_best_parameters"]], "qat.opt.CombinatorialProblem": [[243, 2, 1, "", "add_clause"], [243, 2, 1, "", "get_observable"], [243, 2, 1, "", "new_var"], [243, 2, 1, "", "new_vars"], [243, 2, 1, "", "to_bqm"], [243, 2, 1, "", "to_ising"], [243, 2, 1, "", "to_qubo"]], "qat.opt.GraphColouring": [[244, 2, 1, "", "get_best_parameters"], [244, 2, 1, "", "parse_result"]], "qat.opt.GraphPartitioning": [[245, 2, 1, "", "get_best_parameters"], [245, 2, 1, "", "parse_result"]], "qat.opt.Ising": [[246, 2, 1, "", "dump"], [246, 2, 1, "", "from_thrift"], [246, 2, 1, "", "get_best_parameters"], [246, 2, 1, "", "get_j_h_and_offset"], [246, 2, 1, "", "get_observable"], [246, 3, 1, "", "j_coupling_matrix"], [246, 2, 1, "", "load"], [246, 3, 1, "", "magnetic_field_h"], [246, 2, 1, "", "to_bqm"], [246, 2, 1, "", "to_combinatorial_problem"], [246, 2, 1, "", "to_job"], [246, 2, 1, "", "to_qubo"]], "qat.opt.KClique": [[247, 2, 1, "", "get_best_parameters"], [247, 2, 1, "", "parse_result"]], "qat.opt.MaxCut": [[248, 2, 1, "", "get_best_parameters"], [248, 2, 1, "", "parse_result"]], "qat.opt.MixingFactory": [[249, 2, 1, "", "bit_flip"], [249, 2, 1, "", "bit_move"]], "qat.opt.NumberPartitioning": [[259, 2, 1, "", "get_best_parameters"]], "qat.opt.QUBO": [[260, 2, 1, "", "get_best_parameters"], [260, 2, 1, "", "get_observable"], [260, 2, 1, "", "get_q_and_offset"], [260, 3, 1, "", "q_matrix"], [260, 2, 1, "", "to_bqm"], [260, 2, 1, "", "to_combinatorial_problem"], [260, 2, 1, "", "to_ising"], [260, 2, 1, "", "to_job"]], "qat.opt.VertexCover": [[263, 2, 1, "", "get_best_parameters"], [263, 2, 1, "", "parse_result"]], "qat.opt.binary_linear_integer_programming": [[240, 5, 1, "", "produce_q_and_offset"]], "qat.opt.boolexpr": [[242, 1, 1, "", "Clause"], [262, 1, 1, "", "Var"]], "qat.opt.boolexpr.Clause": [[242, 2, 1, "", "and_clause"], [242, 2, 1, "", "evaluate"], [242, 2, 1, "", "get_observable"], [242, 2, 1, "", "get_variables"], [242, 2, 1, "", "neg_clause"], [242, 2, 1, "", "or_clause"], [242, 2, 1, "", "xor_clause"]], "qat.opt.boolexpr.Var": [[262, 2, 1, "", "evaluate"], [262, 2, 1, "", "get_observable"], [262, 2, 1, "", "get_variables"], [262, 4, 1, "", "index"]], "qat.opt.circuit_generator": [[241, 1, 1, "", "CircuitGenerator"]], "qat.opt.circuit_generator.CircuitGenerator": [[241, 2, 1, "", "get_observable"], [241, 2, 1, "", "qaoa_ansatz"]], "qat.opt.graph_colouring": [[244, 5, 1, "", "produce_q_and_offset"]], "qat.opt.graph_partitioning": [[245, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.k_clique": [[247, 5, 1, "", "produce_q_and_offset"]], "qat.opt.max_cut": [[248, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.mixing_factory": [[251, 1, 1, "", "IndependentAnnealing"], [252, 1, 1, "", "InitialStateBuilder"], [253, 1, 1, "", "SimpleInitialState"]], "qat.opt.mixing_factory.IndependentAnnealing": [[251, 2, 1, "", "inject_initial_state"]], "qat.opt.mixing_factory.InitialStateBuilder": [[252, 2, 1, "", "inject_initial_state"]], "qat.opt.mixing_factory.SimpleInitialState": [[253, 2, 1, "", "inject_initial_state"]], "qat.opt.number_partitioning": [[259, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.results": [[255, 1, 1, "", "CombinatorialResult"], [256, 1, 1, "", "GraphPartitioningResult"], [257, 1, 1, "", "KCliqueResult"], [258, 1, 1, "", "VertexCoverResult"]], "qat.opt.results.GraphPartitioningResult": [[256, 2, 1, "", "display"]], "qat.opt.results.KCliqueResult": [[257, 3, 1, "", "clique"]], "qat.opt.results.VertexCoverResult": [[258, 3, 1, "", "cover"]], "qat.opt.schedule_generator": [[261, 1, 1, "", "ScheduleGenerator"]], "qat.opt.schedule_generator.ScheduleGenerator": [[261, 2, 1, "", "annealing_job"], [261, 2, 1, "", "get_observable"]], "qat.opt.vertex_cover": [[263, 5, 1, "", "produce_q_and_offset"]], "qat.plugins": [[265, 1, 1, "", "AbstractPlugin"], [266, 1, 1, "", "AdaptVQEPlugin"], [267, 1, 1, "", "CircuitInliner"], [268, 1, 1, "", "CostFunctionPlugin"], [269, 1, 1, "", "Display"], [270, 1, 1, "", "GradientDescentOptimizer"], [271, 1, 1, "", "Junction"], [272, 1, 1, "", "MultipleLaunchesAnalyzer"], [273, 1, 1, "", "ObservableSplitter"], [274, 1, 1, "", "Optimizer"], [275, 1, 1, "", "PSOMinimizePlugin"], [276, 1, 1, "", "QuameleonPlugin"], [277, 1, 1, "", "RemotePlugin"], [280, 1, 1, "", "SPSAMinimizePlugin"], [278, 1, 1, "", "ScipyMinimizePlugin"], [279, 1, 1, "", "SeqOptim"], [281, 1, 1, "", "TransformObservable"], [282, 1, 1, "", "ZeroNoiseExtrapolator"]], "qat.plugins.AbstractPlugin": [[265, 2, 1, "", "compile"], [265, 2, 1, "", "do_post_processing"], [265, 2, 1, "", "post_process"], [265, 2, 1, "", "serve"]], "qat.plugins.AdaptVQEPlugin": [[266, 2, 1, "", "compile"]], "qat.plugins.CircuitInliner": [[267, 2, 1, "", "compile"]], "qat.plugins.CostFunctionPlugin": [[268, 2, 1, "", "compile"]], "qat.plugins.Display": [[269, 2, 1, "", "compile"]], "qat.plugins.GradientDescentOptimizer": [[270, 2, 1, "", "compile"]], "qat.plugins.Junction": [[271, 2, 1, "", "execute"], [271, 2, 1, "", "run"]], "qat.plugins.MultipleLaunchesAnalyzer": [[272, 2, 1, "", "compile"]], "qat.plugins.ObservableSplitter": [[273, 2, 1, "", "compile"]], "qat.plugins.Optimizer": [[274, 2, 1, "", "compile"]], "qat.plugins.PSOMinimizePlugin": [[275, 2, 1, "", "compile"]], "qat.plugins.QuameleonPlugin": [[276, 2, 1, "", "compile"]], "qat.plugins.RemotePlugin": [[277, 2, 1, "", "compile"]], "qat.plugins.SPSAMinimizePlugin": [[280, 2, 1, "", "compile"]], "qat.plugins.ScipyMinimizePlugin": [[278, 2, 1, "", "compile"], [278, 2, 1, "", "set_options"]], "qat.plugins.SeqOptim": [[279, 2, 1, "", "compile"]], "qat.plugins.TransformObservable": [[281, 2, 1, "", "compile"]], "qat.plugins.ZeroNoiseExtrapolator": [[282, 2, 1, "", "compile"]], "qat.pylinalg": [[68, 0, 0, "-", "simulator"]], "qat.pylinalg.simulator": [[69, 5, 1, "", "mat2nparray"], [70, 5, 1, "", "measure"], [71, 5, 1, "", "project"], [72, 5, 1, "", "raise_break"], [73, 5, 1, "", "reset"], [74, 5, 1, "", "simulate"]], "qat.qpus": [[284, 1, 1, "", "CLinalg"], [287, 1, 1, "", "ClassicalQPU"], [285, 1, 1, "", "PyLinalg"], [290, 1, 1, "", "QPUHandler"], [291, 1, 1, "", "RemoteQPU"], [286, 1, 1, "", "SimulatedAnnealing"], [288, 5, 1, "", "get_current_qpu"], [289, 5, 1, "", "get_default_qpu"]], "qat.qpus.CLinalg": [[284, 2, 1, "", "submit"]], "qat.qpus.PyLinalg": [[285, 2, 1, "", "serve"], [285, 2, 1, "", "submit"], [285, 2, 1, "", "submit_job"]], "qat.qpus.QPUHandler": [[290, 2, 1, "", "apply_resource_consumption_limits"], [290, 2, 1, "", "estimate_resources_for_batch"], [290, 2, 1, "", "get_specs"], [290, 2, 1, "", "serve"], [290, 2, 1, "", "submit"], [290, 2, 1, "", "submit_job"]], "qat.qpus.SimulatedAnnealing": [[286, 2, 1, "", "submit_job"]], "qat.quops": [[294, 1, 1, "", "ChannelRepresentations"], [314, 1, 1, "", "ParametricAmplitudeDamping"], [315, 1, 1, "", "ParametricGateNoise"], [316, 1, 1, "", "ParametricPureDephasing"], [317, 1, 1, "", "ParametricQuantumChannel"], [319, 1, 1, "", "QuantumChannel"], [320, 1, 1, "", "QuantumChannelChi"], [321, 1, 1, "", "QuantumChannelChoi"], [322, 1, 1, "", "QuantumChannelKraus"], [323, 1, 1, "", "QuantumChannelPTM"], [303, 5, 1, "", "is_completely_positive"], [304, 5, 1, "", "is_trace_preserving"], [305, 5, 1, "", "is_trace_reducing"], [306, 5, 1, "", "is_unital"], [307, 5, 1, "", "make_avg_fid_equiv_depol_channel"], [308, 5, 1, "", "make_depolarizing_channel"], [309, 5, 1, "", "make_generalized_amplitude_damping"], [292, 0, 0, "-", "metrics"]], "qat.quops.ParametricAmplitudeDamping": [[314, 4, 1, "", "T_1"], [314, 4, 1, "", "name"], [314, 2, 1, "", "prob"]], "qat.quops.ParametricPureDephasing": [[316, 4, 1, "", "T_phi"], [316, 4, 1, "", "name"], [316, 2, 1, "", "prob"], [316, 2, 1, "", "ptilde"]], "qat.quops.QuantumChannelChi": [[320, 2, 1, "", "apply_to"], [320, 4, 1, "", "arity"], [320, 4, 1, "", "matrix"], [320, 4, 1, "", "matrix_basis"], [320, 4, 1, "", "name"], [320, 2, 1, "", "to_kraus"]], "qat.quops.QuantumChannelChoi": [[321, 4, 1, "", "arity"], [321, 4, 1, "", "matrix"], [321, 4, 1, "", "name"], [321, 2, 1, "", "to_kraus"], [321, 2, 1, "", "to_ptm"]], "qat.quops.QuantumChannelKraus": [[322, 2, 1, "", "apply_to"], [322, 2, 1, "", "apply_to_vector"], [322, 4, 1, "", "kraus_operators"], [322, 2, 1, "id0", "kraus_rank"], [322, 4, 1, "", "name"], [322, 2, 1, "", "to_chi"], [322, 2, 1, "", "to_choi"], [322, 2, 1, "", "to_ptm"]], "qat.quops.QuantumChannelPTM": [[323, 2, 1, "", "apply_to"], [323, 4, 1, "", "arity"], [323, 3, 1, "id0", "matrix"], [323, 4, 1, "", "name"], [323, 3, 1, "", "ptm"], [323, 3, 1, "", "tensor"], [323, 2, 1, "", "to_choi"], [323, 2, 1, "", "to_kraus"]], "qat.quops.math_util": [[293, 5, 1, "", "are_equal_up_to_phase"], [295, 5, 1, "", "convert_density_mat_to_pauli_vec"], [296, 5, 1, "", "convert_pauli_vec_to_density_mat"], [310, 5, 1, "", "make_pauli_matrix_basis"], [311, 5, 1, "", "make_standard_matrix_basis"], [312, 5, 1, "", "make_standard_vector_basis"], [313, 5, 1, "", "multikron"], [318, 5, 1, "", "partial_trace"]], "qat.quops.metrics": [[297, 5, 1, "", "get_average_process_fidelity"], [298, 5, 1, "", "get_diamond_norm"], [299, 5, 1, "", "get_entanglement_process_fidelity"], [300, 5, 1, "", "get_process_distance"], [301, 5, 1, "", "get_state_fidelity"], [302, 5, 1, "", "get_trace_distance"]], "qat.simulated_annealing.service": [[286, 5, 1, "", "extract_j_and_h_from_obs"]], "qat.vsolve.ansatz": [[239, 1, 1, "", "AnsatzFactory"]], "qat.vsolve.ansatz.AnsatzFactory": [[239, 2, 1, "", "qaoa_circuit"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "titleterms": {"get": [0, 42], "start": 0, "write": [1, 8, 90], "quantum": [1, 2, 8, 10, 12, 13, 14, 16, 17, 27, 32, 33, 148, 193, 250, 284, 285, 292, 324, 325, 328, 329, 330, 331, 332, 334, 342, 343, 352], "program": [1, 2, 8, 9, 12, 18, 22, 27, 32, 193, 224, 324, 335], "exampl": [1, 16, 40, 41, 351], "grover": [1, 16], "algorithm": [1, 3, 43, 193, 195, 202, 203, 223, 236, 237, 324, 342], "The": [1, 17, 148, 351], "diffus": 1, "oracl": [1, 13, 16], "execut": [2, 27], "variat": [3, 11, 43, 264, 324, 352], "qaptiva": [3, 7], "instal": [4, 6], "myqlm": [4, 5, 6, 325, 326, 355], "prerequisit": 4, "compat": 4, "matrix": [4, 10], "packag": [4, 325], "interoper": [4, 324, 327, 328, 329, 330, 331, 356], "licens": 5, "proprietari": 5, "part": 5, "open": 5, "sourc": 5, "maco": 6, "user": [7, 10], "guid": 7, "librari": [7, 354], "built": 7, "upon": 7, "gate": [9, 10, 12, 14, 17, 36, 187, 193, 200, 222, 283, 327], "base": [9, 36, 37, 38, 283, 327, 354], "creat": [10, 11, 18, 26, 42, 250, 351], "ad": [10, 324], "circuit": [10, 11, 12, 14, 96, 148, 159, 161, 163, 164, 165, 166, 193, 264, 324, 325, 328, 329, 330, 331, 332, 352], "nativ": 10, "control": 10, "dagger": 10, "defin": [10, 325, 351], "parametr": 10, "abstractg": [10, 194], "definit": 10, "subcircuit": 10, "ariti": 10, "gener": [10, 12, 25, 31, 132, 178, 179, 180, 181, 182, 183, 184, 185, 186, 238, 254, 325, 344, 345, 346, 347, 348, 349], "deprec": [10, 325, 354], "custom": [10, 42, 250], "job": [11, 18, 21, 28, 29, 30, 43, 90, 100, 238, 250, 325], "bind": 11, "variabl": [11, 19, 90, 118, 119, 120, 131], "alloc": [12, 16], "qubit": [12, 96], "classic": [12, 16], "regist": [12, 193], "appli": 12, "advanc": 12, "oper": [12, 26, 292, 351], "export": 12, "routin": [13, 14, 193], "name": 14, "lift": 14, "python": [14, 36, 38, 325], "function": [14, 148, 325], "link": [14, 17, 205], "extract": 14, "ancilla": 15, "manag": [15, 193], "comput": [15, 34, 36, 324, 325], "scope": 15, "autom": [15, 31], "uncomput": 15, "type": [16, 193], "boolean": [16, 193], "condit": 16, "logic": 16, "express": [16, 193], "evalu": [16, 98], "statement": 16, "build": [16, 19], "phase": [16, 148, 352], "integ": [16, 193, 335], "set": [16, 193], "valu": 16, "arithmet": [16, 193, 206, 207, 208, 209, 210, 211], "graph": [16, 334, 336, 337, 346, 349], "color": 16, "ato": 17, "assembl": 17, "aqasm": [17, 196, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233], "text": 17, "format": 17, "header": 17, "instruct": 17, "list": [17, 19], "compil": [17, 40, 332], "file": 17, "time": 17, "analog": [18, 21], "background": 18, "schedul": [19, 20, 126], "hamiltonian": [19, 23, 148, 153, 154, 158, 160, 162, 173, 351], "coeffici": 19, "observ": [19, 26, 30, 90, 121], "us": [19, 26, 28, 39, 96, 325, 351], "abstract": [19, 283], "one": [19, 28, 351], "manipul": [20, 193, 351], "anneal": [22, 34, 250, 283, 334, 343, 356], "Ising": [23, 238, 246], "bibliographi": [23, 342], "quadrat": [24, 238], "unconstrain": [24, 334], "binari": [24, 335], "optim": [24, 178, 238, 254, 264, 274, 324, 333, 342], "qubo": [24, 238, 260], "combinatori": [25, 178, 238, 254, 324, 333], "problem": [25, 238, 324, 325, 334, 344], "singl": 26, "term": [26, 128], "an": 26, "construct": 28, "multipl": 28, "batch": [28, 31, 94, 325], "sampl": [29, 125], "result": [32, 90, 91, 124, 127, 254, 255, 256, 257, 258], "process": [33, 284, 285], "unit": [33, 284, 285], "qpu": [33, 35, 36, 39, 42, 43, 113, 114, 283, 284, 285, 286, 287, 288, 289, 290, 291, 325, 328, 329], "inner": 34, "work": 34, "make": [35, 40, 41], "your": [35, 40, 324], "own": [35, 40, 41], "method": [35, 40, 96, 351], "submit_job": 35, "get_spec": 35, "emul": 36, "clinalg": [36, 37, 284], "c": [36, 37, 284], "linear": [36, 37, 38, 335], "algebra": [36, 37, 38], "simul": [36, 37, 38, 68, 69, 70, 71, 72, 73, 74, 283, 324, 325, 334], "pylinalg": [36, 38, 67, 68, 69, 70, 71, 72, 73, 74, 285], "extend": [39, 43], "plugin": [39, 40, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 324, 353], "post_process": 40, "A": [40, 41, 325], "concret": [40, 41], "you": 41, "junction": [41, 271], "inform": 42, "from": 42, "specif": [42, 90, 187], "run": [43, 324], "support": [43, 238], "differenti": 43, "test": 43, "sever": 43, "initi": 43, "paramet": [43, 90, 122], "api": 44, "refer": [44, 204, 206, 212, 216], "qat": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 354], "interop": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "cirq": [47, 48, 49, 330], "cirq_to_qlm": 48, "qlm_to_cirq": 49, "openqasm": [50, 51, 332], "oqasmpars": 51, "projectq": [52, 53, 54, 331], "aqasmengin": 53, "aqasmprint": 54, "pyquil": [55, 56, 57, 58, 329], "pyquil_to_qlm": 56, "pyquilqpu": 57, "qlm_to_pyquil": 58, "qiskit": [59, 60, 61, 62, 63, 64, 65, 66, 328], "asyncbackendtoqpu": 60, "backendtoqpu": 61, "qiskit_to_qlm": 62, "qiskitjob": 63, "runtim": 64, "qiskitruntimeqpu": 64, "qlm_to_qiskit": 65, "qputobackend": 66, "mat2nparrai": 69, "measur": 70, "project": 71, "raise_break": 72, "reset": 73, "comm": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "datamodel": [76, 77, 78], "ttype": [77, 78, 80, 81, 82, 84, 85, 86, 88, 89], "gatedefinit": 77, "op": 78, "except": [79, 80, 81, 82], "errortyp": 80, "pluginexcept": 81, "qpuexcept": 82, "resourc": [83, 84, 85, 86], "allocationmodel": 84, "devic": [85, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "resourcemodel": 86, "share": [87, 88, 89], "intermediatemeasur": 88, "processingtyp": 89, "core": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131], "object": 90, "pars": 90, "relat": 90, "hardwar": [90, 187, 188, 189, 190, 191, 192], "misc": [90, 201], "util": [90, 148, 178, 264, 283, 292], "wrapper": [91, 127, 168, 169], "aggregate_data": 91, "assert": [92, 93], "assert_plugin": 92, "assert_qpu": 93, "batchresult": 95, "most": 96, "iter": 96, "cbit": [96, 198], "consol": 97, "displai": [97, 269], "formula_ev": 98, "hardwarespec": 99, "applic": [101, 102, 103, 352], "remoteappl": 103, "circuit_build": [104, 105, 106, 107, 108], "matrix_util": [105, 106, 107], "default_gate_set": 105, "get_param_gener": 106, "get_predef_gener": 107, "builder": 108, "variablenamenotavail": 108, "gate_set": [109, 110, 111, 112], "gateset": 110, "gatesignatur": 111, "gatesyntaxredefinit": 112, "commonqpu": 114, "spin": [115, 116, 117, 148, 324, 350, 351], "integer_to_spin": 116, "spins_to_integ": 117, "arithexpress": 119, "symbol": 120, "printer": 123, "plot_in_notebook": 123, "state": [127, 193, 352], "topologi": 129, "topologytyp": 130, "predefin": [132, 187, 292], "alltoal": 133, "google_sycamor": 134, "griddevic": 135, "ibm_burlington": 136, "ibm_johannesburg": 137, "ibm_melbourn": 138, "ibm_rueschlikon": 139, "ibm_singapor": 140, "ibm_tokyo": 141, "ibm_yorktown": 142, "linedevic": 143, "rigetti_agav": 144, "rigetti_aspen": 145, "squaregriddevic": 146, "zuchongzhi": 147, "fermion": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 264, 324, 325, 350, 351, 352], "constructor": [148, 351], "common": 148, "mani": 148, "bodi": 148, "transform": [148, 175, 176, 177], "ansatz": [148, 239, 352], "atom": 148, "molecular": 148, "studi": 148, "unitari": 148, "coupl": 148, "cluster": 148, "ucc": [148, 150, 151, 152, 155, 156, 157, 172, 174], "subspac": [148, 352], "expans": [148, 352], "estim": [148, 352], "chemistri": [149, 150, 151, 152, 155, 156, 157, 168, 169, 171, 172, 174, 352], "qse": 149, "apply_quantum_subspace_expans": 149, "compute_active_space_integr": 150, "construct_ucc_ansatz": 151, "convert_to_h_integr": 152, "electronicstructurehamiltonian": 153, "fermionhamiltonian": 154, "get_cluster_op": 155, "get_hf_ket": 156, "guess_init_param": 157, "make_anderson_model": 158, "make_compressed_ldca_circ": 159, "make_embedded_model": 160, "make_general_hwe_circ": 161, "make_hubbard_model": 162, "make_ldca_circ": 163, "make_mr_circ": 164, "make_mrep_circ": 165, "make_shallow_circ": 166, "trotteris": 167, "make_trotterisation_routin": 167, "molecularhamiltonian": [168, 352], "moleculeinfo": [169, 352], "phase_estim": [170, 223], "perform_phase_estim": 170, "pyscf_tool": 171, "perform_pyscf_comput": 171, "select_active_orbit": 172, "spinhamiltonian": 173, "transform_integrals_to_new_basi": 174, "transform_to_bk_basi": 175, "transform_to_jw_basi": 176, "transform_to_parity_basi": 177, "abstractgener": 179, "combinatorialoptimizergener": 180, "graphcolouringgener": 181, "graphpartitioninggener": 182, "kcliquegener": 183, "maxcutgener": 184, "remotebatchgener": 185, "vertexcovergener": 186, "model": [187, 204], "defaultgatesspecif": 188, "defaulthardwaremodel": 189, "gatesspecif": 190, "hardwaremodel": 191, "make_depolarizing_hardware_model": 192, "lang": [193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 324], "tool": [193, 325, 352], "structur": 193, "linker": [193, 205], "low": [193, 284], "level": [193, 284], "labrari": 193, "basic": [193, 324], "preparat": 193, "qram": 193, "amplification_step": 195, "bit": [196, 198, 199, 226, 233], "boolformula": 196, "build_gat": 197, "cregist": 199, "generate_gate_set": 201, "amplif": [202, 203, 237], "grover_diffus": 202, "household": 203, "kptree": 204, "add_const_mod": 207, "add_mod": 208, "modular_exp": 209, "mult_const": [210, 220], "mult_const_mod": 211, "classarith": [212, 213, 214, 215], "add": [213, 217], "add_const": [214, 218], "cuccaro_add": 215, "qftarith": [216, 217, 218, 219, 220, 221], "mult": 219, "qft": 221, "paramg": 222, "qint": [225, 230, 232], "qarithexp": 225, "qbit": 226, "qbool": [227, 228, 229], "qboolarrai": 228, "qclaus": 229, "qcompexp": 230, "qfunc": 231, "qregist": 233, "qrout": 234, "qroutin": 235, "quantum_count": 236, "uniform_distribut": 237, "opt": [238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "class": [238, 283], "np": [238, 334, 344], "hard": [238, 334, 344], "qaoa": [238, 342], "ans\u00e4tz": [238, 352], "qa": [238, 343], "vsolv": 239, "ansatzfactori": 239, "bilp": [240, 335], "circuit_gener": 241, "circuitgener": 241, "boolexpr": [242, 262], "claus": 242, "combinatorialproblem": 243, "graphcolour": 244, "graphpartit": 245, "kcliqu": [247, 338], "maxcut": 248, "mixingfactori": 249, "mixing_factori": [250, 251, 252, 253], "independentann": 251, "initialstatebuild": 252, "simpleinitialst": 253, "combinatorialresult": 255, "graphpartitioningresult": 256, "kcliqueresult": 257, "vertexcoverresult": 258, "numberpartit": 259, "schedule_gener": 261, "schedulegener": 261, "var": 262, "vertexcov": 263, "rewrit": 264, "system": [264, 324, 350], "abstractplugin": 265, "adaptvqeplugin": 266, "circuitinlin": 267, "costfunctionplugin": 268, "gradientdescentoptim": 270, "multiplelaunchesanalyz": 272, "observablesplitt": 273, "psominimizeplugin": 275, "quameleonplugin": 276, "remoteplugin": 277, "scipyminimizeplugin": 278, "seqoptim": 279, "spsaminimizeplugin": 280, "transformobserv": 281, "zeronoiseextrapol": 282, "high": 284, "statevector": 284, "pybind": 284, "interfac": 284, "simulatedann": 286, "classicalqpu": 287, "get_current_qpu": 288, "get_default_qpu": 289, "qpuhandl": 290, "remoteqpu": 291, "quop": [292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323], "channel": 292, "metric": [292, 297, 298, 299, 300, 301, 302], "basi": 292, "mathemat": 292, "math_util": [293, 295, 296, 310, 311, 312, 313, 318], "are_equal_up_to_phas": 293, "channelrepresent": 294, "convert_density_mat_to_pauli_vec": 295, "convert_pauli_vec_to_density_mat": 296, "get_average_process_fidel": 297, "get_diamond_norm": 298, "get_entanglement_process_fidel": 299, "get_process_dist": 300, "get_state_fidel": 301, "get_trace_dist": 302, "is_completely_posit": 303, "is_trace_preserv": 304, "is_trace_reduc": 305, "is_unit": 306, "make_avg_fid_equiv_depol_channel": 307, "make_depolarizing_channel": 308, "make_generalized_amplitude_damp": 309, "make_pauli_matrix_basi": 310, "make_standard_matrix_basi": 311, "make_standard_vector_basi": 312, "multikron": 313, "parametricamplitudedamp": 314, "parametricgatenois": 315, "parametricpuredephas": 316, "parametricquantumchannel": 317, "partial_trac": 318, "quantumchannel": 319, "quantumchannelchi": 320, "quantumchannelchoi": 321, "quantumchannelkrau": 322, "quantumchannelptm": 323, "demo": [324, 350], "tutori": 324, "digit": 324, "stack": 324, "design": 324, "qlm": 324, "first": 324, "step": 324, "introduct": 324, "releas": 325, "note": 325, "what": 325, "": 325, "new": 325, "1": 325, "9": 325, "3": 325, "main": 325, "depend": 325, "other": [325, 334], "2": 325, "updat": 325, "featur": 325, "fix": 325, "7": 325, "warn": 325, "6": 325, "5": 325, "4": 325, "0": 325, "power": 325, "access": 325, "known": 325, "contribut": 326, "framework": [327, 356], "avail": 327, "binder": 327, "translat": [328, 329, 330, 331, 332], "connect": [328, 329], "backend": 328, "constrain": 334, "benchmark": 334, "perform": 334, "colour": [336, 349], "partit": [337, 340, 346], "max": [339, 345], "cut": [339, 345], "number": 340, "vertex": [341, 348], "cover": [341, 348], "approxim": 342, "k": 347, "cliqu": 347, "tabl": [351, 352], "content": [351, 352], "two": 351, "electron": 351, "integr": 351, "get_matrix": 351, "represent": 351, "some": 351, "includ": 352, "prepar": 352, "eigensolv": 352, "vqe": 352, "trotter": 352, "migrat": 354, "code": 354, "dq": 354, "document": 355}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"qat.core.circuit_builder.matrix_util.get_param_generator": [[106, "qat-core-circuit-builder-matrix-util-get-param-generator"]], "qat.core.qpu": [[113, "qat-core-qpu"]], "qat.core.gate_set.GateSet": [[110, "qat-core-gate-set-gateset"]], "qat.core.Result": [[124, "qat-core-result"]], "qat.core.variables": [[118, "qat-core-variables"]], "qat.core.circuit_builder.matrix_util.default_gate_set": [[105, "qat-core-circuit-builder-matrix-util-default-gate-set"]], "qat.core.Observable": [[121, "qat-core-observable"]], "qat.core.circuit_builder.matrix_util.get_predef_generator": [[107, "qat-core-circuit-builder-matrix-util-get-predef-generator"]], "qat.core.spins": [[115, "qat-core-spins"]], "qat.core.variables.Symbol": [[120, "qat-core-variables-symbol"]], "qat.core.gate_set": [[109, "qat-core-gate-set"]], "qat.core.Sample": [[125, "qat-core-sample"]], "qat.core.circuit_builder.builder.VariableNameNotAvailable": [[108, "qat-core-circuit-builder-builder-variablenamenotavailable"]], "qat.core.qpu.CommonQPU": [[114, "qat-core-qpu-commonqpu"]], "qat.core.variables.ArithExpression": [[119, "qat-core-variables-arithexpression"]], "qat.core.printer.plot_in_notebook": [[123, "qat-core-printer-plot-in-notebook"]], "qat.core.gate_set.GateSignature": [[111, "qat-core-gate-set-gatesignature"]], "qat.core.gate_set.GateSyntaxRedefinition": [[112, "qat-core-gate-set-gatesyntaxredefinition"]], "qat.core.spins.integer_to_spins": [[116, "qat-core-spins-integer-to-spins"]], "qat.core.spins.spins_to_integer": [[117, "qat-core-spins-spins-to-integer"]], "qat.core.Parameter": [[122, "qat-core-parameter"]], "qat.fermion.chemistry.ucc.convert_to_h_integrals": [[152, "qat-fermion-chemistry-ucc-convert-to-h-integrals"]], "qat.fermion.circuits.make_mr_circ": [[164, "qat-fermion-circuits-make-mr-circ"]], "qat.fermion.chemistry.ucc.get_cluster_ops": [[155, "qat-fermion-chemistry-ucc-get-cluster-ops"]], "qat.fermion.circuits.make_shallow_circ": [[166, "qat-fermion-circuits-make-shallow-circ"]], "qat.fermion.chemistry.ucc.compute_active_space_integrals": [[150, "qat-fermion-chemistry-ucc-compute-active-space-integrals"]], "qat.fermion.circuits.make_general_hwe_circ": [[161, "qat-fermion-circuits-make-general-hwe-circ"]], "qat.fermion.hamiltonians.make_anderson_model": [[158, "qat-fermion-hamiltonians-make-anderson-model"]], "qat.fermion.hamiltonians.ElectronicStructureHamiltonian": [[153, "qat-fermion-hamiltonians-electronicstructurehamiltonian"]], "qat.fermion": [[148, "qat-fermion"]], "Hamiltonians constructors": [[148, "hamiltonians-constructors"]], "Common many-body Hamiltonians": [[148, "common-many-body-hamiltonians"]], "The spin-fermion transforms": [[148, "module-qat.fermion.transforms"]], "Fermionic ansatz circuits": [[148, "module-qat.fermion.circuits"], [352, "fermionic-ansatz-circuits"]], "Atomic and molecular studies": [[148, "atomic-and-molecular-studies"]], "Unitary Coupled-Cluster (UCC)": [[148, "unitary-coupled-cluster-ucc"]], "Quantum subspace expansion": [[148, "module-qat.fermion.chemistry.qse"], [352, "quantum-subspace-expansion"]], "Quantum phase estimation": [[148, "module-qat.fermion.phase_estimation"], [352, "quantum-phase-estimation"]], "Utility functions": [[148, "utility-functions"]], "qat.devices.ZUCHONGZHI": [[147, "qat-devices-zuchongzhi"]], "qat.fermion.hamiltonians.make_embedded_model": [[160, "qat-fermion-hamiltonians-make-embedded-model"]], "qat.fermion.circuits.make_mrep_circ": [[165, "qat-fermion-circuits-make-mrep-circ"]], "qat.fermion.hamiltonians.FermionHamiltonian": [[154, "qat-fermion-hamiltonians-fermionhamiltonian"]], "qat.fermion.chemistry.ucc.get_hf_ket": [[156, "qat-fermion-chemistry-ucc-get-hf-ket"]], "qat.fermion.chemistry.ucc.construct_ucc_ansatz": [[151, "qat-fermion-chemistry-ucc-construct-ucc-ansatz"]], "qat.fermion.circuits.make_ldca_circ": [[163, "qat-fermion-circuits-make-ldca-circ"]], "qat.fermion.circuits.make_compressed_ldca_circ": [[159, "qat-fermion-circuits-make-compressed-ldca-circ"]], "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion": [[149, "qat-fermion-chemistry-qse-apply-quantum-subspace-expansion"]], "qat.fermion.trotterisation.make_trotterisation_routine": [[167, "qat-fermion-trotterisation-make-trotterisation-routine"]], "qat.fermion.chemistry.ucc.guess_init_params": [[157, "qat-fermion-chemistry-ucc-guess-init-params"]], "qat.fermion.hamiltonians.make_hubbard_model": [[162, "qat-fermion-hamiltonians-make-hubbard-model"]], "qat.core.Job": [[100, "qat-core-job"]], "qat.core.wrappers.result.aggregate_data": [[91, "qat-core-wrappers-result-aggregate-data"]], "qat.core.application.RemoteApplication": [[103, "qat-core-application-remoteapplication"]], "qat.core.console.display": [[97, "qat-core-console-display"]], "qat.core.BatchResult": [[95, "qat-core-batchresult"]], "qat.core.Circuit": [[96, "qat-core-circuit"]], "Most useful Circuit methods": [[96, "most-useful-circuit-methods"]], "Iterating of a Circuit": [[96, "iterating-of-a-circuit"]], "Qubits and cbits": [[96, "qubits-and-cbits"]], "qat.core.assertion.assert_plugin": [[92, "qat-core-assertion-assert-plugin"]], "qat.comm.shared.ttypes.IntermediateMeasurement": [[88, "qat-comm-shared-ttypes-intermediatemeasurement"]], "qat.core.Batch": [[94, "qat-core-batch"]], "qat.core.formula_eval.evaluate": [[98, "qat-core-formula-eval-evaluate"]], "qat.core.assertion.assert_qpu": [[93, "qat-core-assertion-assert-qpu"]], "qat.core": [[90, "qat-core"]], "Objects for writing a job": [[90, "objects-for-writing-a-job"]], "Objects for parsing a job result": [[90, "objects-for-parsing-a-job-result"]], "Observable-related objects": [[90, "observable-related-objects"]], "Hardware specifications": [[90, "hardware-specifications"]], "Variables and Parameters": [[90, "variables-and-parameters"]], "Misc. utilities": [[90, "misc-utilities"]], "qat.core.application.Application": [[102, "qat-core-application-application"]], "qat.core.application": [[101, "qat-core-application"]], "qat.comm.resource.ttypes.AllocationModel": [[84, "qat-comm-resource-ttypes-allocationmodel"]], "qat.comm.shared": [[87, "qat-comm-shared"]], "qat.core.HardwareSpecs": [[99, "qat-core-hardwarespecs"]], "qat.core.circuit_builder": [[104, "qat-core-circuit-builder"]], "qat.comm.resource.ttypes.ResourceModel": [[86, "qat-comm-resource-ttypes-resourcemodel"]], "qat.comm.resource.ttypes.Device": [[85, "qat-comm-resource-ttypes-device"]], "qat.comm.shared.ttypes.ProcessingType": [[89, "qat-comm-shared-ttypes-processingtype"]], "qat.pylinalg.simulator.simulate": [[74, "qat-pylinalg-simulator-simulate"]], "qat.pylinalg.simulator": [[68, "qat-pylinalg-simulator"]], "qat.interop.qiskit.qlm_to_qiskit": [[65, "qat-interop-qiskit-qlm-to-qiskit"]], "qat.comm": [[75, "qat-comm"]], "qat.pylinalg.simulator.mat2nparray": [[69, "qat-pylinalg-simulator-mat2nparray"]], "qat.comm.exceptions.ttypes.ErrorType": [[80, "qat-comm-exceptions-ttypes-errortype"]], "qat.comm.exceptions.ttypes.PluginException": [[81, "qat-comm-exceptions-ttypes-pluginexception"]], "qat.interop.qiskit.QiskitJob": [[63, "qat-interop-qiskit-qiskitjob"]], "qat.pylinalg": [[67, "qat-pylinalg"]], "qat.interop.qiskit.QPUToBackend": [[66, "qat-interop-qiskit-qputobackend"]], "qat.comm.datamodel.ttypes.Op": [[78, "qat-comm-datamodel-ttypes-op"]], "qat.comm.exceptions.ttypes.QPUException": [[82, "qat-comm-exceptions-ttypes-qpuexception"]], "qat.comm.resource": [[83, "qat-comm-resource"]], "qat.interop.qiskit.runtime.QiskitRuntimeQPU": [[64, "qat-interop-qiskit-runtime-qiskitruntimeqpu"]], "qat.pylinalg.simulator.reset": [[73, "qat-pylinalg-simulator-reset"]], "qat.pylinalg.simulator.project": [[71, "qat-pylinalg-simulator-project"]], "qat.comm.datamodel": [[76, "qat-comm-datamodel"]], "qat.pylinalg.simulator.measure": [[70, "qat-pylinalg-simulator-measure"]], "qat.comm.exceptions": [[79, "qat-comm-exceptions"]], "qat.pylinalg.simulator.raise_break": [[72, "qat-pylinalg-simulator-raise-break"]], "qat.comm.datamodel.ttypes.GateDefinition": [[77, "qat-comm-datamodel-ttypes-gatedefinition"]], "qat.quops.is_trace_reducing": [[305, "qat-quops-is-trace-reducing"]], "qat.quops.math_util.convert_pauli_vec_to_density_mat": [[296, "qat-quops-math-util-convert-pauli-vec-to-density-mat"]], "qat.quops.metrics.get_trace_distance": [[302, "qat-quops-metrics-get-trace-distance"]], "qat.quops.is_unital": [[306, "qat-quops-is-unital"]], "qat.quops.math_util.convert_density_mat_to_pauli_vec": [[295, "qat-quops-math-util-convert-density-mat-to-pauli-vec"]], "qat.quops.metrics.get_diamond_norm": [[298, "qat-quops-metrics-get-diamond-norm"]], "qat.quops.make_generalized_amplitude_damping": [[309, "qat-quops-make-generalized-amplitude-damping"]], "qat.quops.ChannelRepresentations": [[294, "qat-quops-channelrepresentations"]], "qat.quops.make_depolarizing_channel": [[308, "qat-quops-make-depolarizing-channel"]], "qat.quops.ParametricAmplitudeDamping": [[314, "qat-quops-parametricamplitudedamping"]], "qat.quops.is_completely_positive": [[303, "qat-quops-is-completely-positive"]], "qat.quops.math_util.make_standard_vector_basis": [[312, "qat-quops-math-util-make-standard-vector-basis"]], "qat.quops.math_util.make_standard_matrix_basis": [[311, "qat-quops-math-util-make-standard-matrix-basis"]], "qat.quops.metrics.get_process_distance": [[300, "qat-quops-metrics-get-process-distance"]], "qat.quops.math_util.multikron": [[313, "qat-quops-math-util-multikron"]], "qat.quops.metrics.get_entanglement_process_fidelity": [[299, "qat-quops-metrics-get-entanglement-process-fidelity"]], "qat.quops.math_util.make_pauli_matrix_basis": [[310, "qat-quops-math-util-make-pauli-matrix-basis"]], "qat.quops.metrics.get_state_fidelity": [[301, "qat-quops-metrics-get-state-fidelity"]], "qat.quops.make_avg_fid_equiv_depol_channel": [[307, "qat-quops-make-avg-fid-equiv-depol-channel"]], "qat.quops.is_trace_preserving": [[304, "qat-quops-is-trace-preserving"]], "qat.quops.metrics.get_average_process_fidelity": [[297, "qat-quops-metrics-get-average-process-fidelity"]], "qat.plugins.TransformObservable": [[281, "qat-plugins-transformobservable"]], "qat.qpus.CLinalg": [[284, "qat-qpus-clinalg"]], "High-level Quantum Processing Unit": [[284, "high-level-quantum-processing-unit"]], "C++ Low-level Statevector": [[284, "c-low-level-statevector"]], "Pybind interface": [[284, "pybind-interface"]], "qat.plugins.QuameleonPlugin": [[276, "qat-plugins-quameleonplugin"]], "qat.plugins.PSOMinimizePlugin": [[275, "qat-plugins-psominimizeplugin"]], "qat.qpus.PyLinalg": [[285, "qat-qpus-pylinalg"]], "Quantum Processing Unit": [[285, "quantum-processing-unit"]], "qat.plugins.ZeroNoiseExtrapolator": [[282, "qat-plugins-zeronoiseextrapolator"]], "qat.plugins.ObservableSplitter": [[273, "qat-plugins-observablesplitter"]], "qat.qpus.get_default_qpu": [[289, "qat-qpus-get-default-qpu"]], "qat.qpus.QPUHandler": [[290, "qat-qpus-qpuhandler"]], "qat.plugins.SeqOptim": [[279, "qat-plugins-seqoptim"]], "qat.quops.math_util.are_equal_up_to_phase": [[293, "qat-quops-math-util-are-equal-up-to-phase"]], "qat.plugins.ScipyMinimizePlugin": [[278, "qat-plugins-scipyminimizeplugin"]], "qat.qpus.ClassicalQPU": [[287, "qat-qpus-classicalqpu"]], "qat.plugins.RemotePlugin": [[277, "qat-plugins-remoteplugin"]], "qat.qpus.RemoteQPU": [[291, "qat-qpus-remoteqpu"]], "qat.qpus.get_current_qpu": [[288, "qat-qpus-get-current-qpu"]], "qat.plugins.SPSAMinimizePlugin": [[280, "qat-plugins-spsaminimizeplugin"]], "qat.qpus": [[283, "qat-qpus"]], "Gate-based QPUs": [[283, "gate-based-qpus"]], "Simulated Annealing": [[283, "simulated-annealing"]], "Abstract and utility QPU classes": [[283, "abstract-and-utility-qpu-classes"]], "qat.qpus.SimulatedAnnealing": [[286, "qat-qpus-simulatedannealing"]], "qat.quops": [[292, "qat-quops"]], "Quantum Channels": [[292, "quantum-channels"]], "Predefined quantum channels": [[292, "predefined-quantum-channels"]], "Metrics": [[292, "module-qat.quops.metrics"]], "Operator basis": [[292, "operator-basis"]], "Mathematical utilities": [[292, "mathematical-utilities"]], "qat.plugins.Optimizer": [[274, "qat-plugins-optimizer"]], "API reference": [[44, "api-reference"]], "qat.interop.openqasm": [[50, "qat-interop-openqasm"]], "qat.interop.qiskit": [[59, "qat-interop-qiskit"]], "Running variational algorithms": [[43, "running-variational-algorithms"]], "Extending a QPU to support variational jobs": [[43, "extending-a-qpu-to-support-variational-jobs"]], "Differentiating jobs": [[43, "differentiating-jobs"]], "Testing for several initializations of the parameters": [[43, "testing-for-several-initializations-of-the-parameters"]], "qat.interop.cirq": [[47, "qat-interop-cirq"]], "qat.interop.pyquil.pyquil_to_qlm": [[56, "qat-interop-pyquil-pyquil-to-qlm"]], "qat.interop.pyquil.qlm_to_pyquil": [[58, "qat-interop-pyquil-qlm-to-pyquil"]], "qat.interop.projectq.AqasmPrinter": [[54, "qat-interop-projectq-aqasmprinter"]], "qat.interop.pyquil": [[55, "qat-interop-pyquil"]], "qat.interop.qiskit.BackendToQPU": [[61, "qat-interop-qiskit-backendtoqpu"]], "Getting information from the QPU": [[42, "getting-information-from-the-qpu"]], "Creating custom specifications": [[42, "creating-custom-specifications"]], "qat.interop.projectq": [[52, "qat-interop-projectq"]], "qat.interop": [[46, "qat-interop"]], "qat.interop.pyquil.PyquilQPU": [[57, "qat-interop-pyquil-pyquilqpu"]], "qat.interop.qiskit.AsyncBackendToQPU": [[60, "qat-interop-qiskit-asyncbackendtoqpu"]], "qat.interop.openqasm.OqasmParser": [[51, "qat-interop-openqasm-oqasmparser"]], "qat.interop.cirq.cirq_to_qlm": [[48, "qat-interop-cirq-cirq-to-qlm"]], "qat": [[45, "qat"]], "qat.interop.cirq.qlm_to_cirq": [[49, "qat-interop-cirq-qlm-to-cirq"]], "qat.interop.projectq.AqasmEngine": [[53, "qat-interop-projectq-aqasmengine"]], "qat.interop.qiskit.qiskit_to_qlm": [[62, "qat-interop-qiskit-qiskit-to-qlm"]], "qat.devices.AllToAll": [[133, "qat-devices-alltoall"]], "qat.devices.GOOGLE_SYCAMORE": [[134, "qat-devices-google-sycamore"]], "qat.devices.IBM_RUESCHLIKON": [[139, "qat-devices-ibm-rueschlikon"]], "qat.core.Topology": [[129, "qat-core-topology"]], "qat.core.TopologyType": [[130, "qat-core-topologytype"]], "qat.devices.IBM_YORKTOWN": [[142, "qat-devices-ibm-yorktown"]], "qat.devices.IBM_TOKYO": [[141, "qat-devices-ibm-tokyo"]], "qat.devices.RIGETTI_ASPEN": [[145, "qat-devices-rigetti-aspen"]], "qat.devices.IBM_MELBOURNE": [[138, "qat-devices-ibm-melbourne"]], "qat.devices.IBM_SINGAPORE": [[140, "qat-devices-ibm-singapore"]], "qat.devices": [[132, "qat-devices"]], "Predefined devices": [[132, "predefined-devices"]], "Device generators": [[132, "device-generators"]], "qat.devices.IBM_JOHANNESBURG": [[137, "qat-devices-ibm-johannesburg"]], "qat.devices.LineDevice": [[143, "qat-devices-linedevice"]], "qat.core.Term": [[128, "qat-core-term"]], "qat.devices.RIGETTI_AGAVE": [[144, "qat-devices-rigetti-agave"]], "qat.devices.SquareGridDevice": [[146, "qat-devices-squaregriddevice"]], "qat.devices.GridDevice": [[135, "qat-devices-griddevice"]], "qat.core.Schedule": [[126, "qat-core-schedule"]], "qat.core.wrappers.result.State": [[127, "qat-core-wrappers-result-state"]], "qat.core.Variable": [[131, "qat-core-variable"]], "qat.devices.IBM_BURLINGTON": [[136, "qat-devices-ibm-burlington"]], "qat.quops.ParametricGateNoise": [[315, "qat-quops-parametricgatenoise"]], "Interoperability with gate-based framework": [[327, "interoperability-with-gate-based-framework"]], "Available binders": [[327, "available-binders"]], "qat.quops.math_util.partial_trace": [[318, "qat-quops-math-util-partial-trace"]], "Qiskit interoperability": [[328, "qiskit-interoperability"]], "Translating quantum circuits": [[328, "translating-quantum-circuits"], [329, "translating-quantum-circuits"], [331, "translating-quantum-circuits"], [332, "translating-quantum-circuits"], [330, "translating-quantum-circuits"]], "Connecting to a QPU/Backend": [[328, "connecting-to-a-qpu-backend"]], "Demos": [[324, "demos"], [350, "demos"]], "Tutorials": [[324, "tutorials"]], "Running digital quantum simulations for spin and fermionic systems": [[324, "running-digital-quantum-simulations-for-spin-and-fermionic-systems"]], "Programming with qat.lang": [[324, "programming-with-qat-lang"]], "Basic quantum algorithms": [[324, "basic-quantum-algorithms"]], "Adding plugins to your computation stack": [[324, "adding-plugins-to-your-computation-stack"]], "Designing and running variational algorithms in the QLM": [[324, "designing-and-running-variational-algorithms-in-the-qlm"]], "First steps with the QLM": [[324, "first-steps-with-the-qlm"]], "Combinatorial Optimization Problems": [[324, "combinatorial-optimization-problems"]], "interoperability": [[324, "interoperability"]], "Simulation of quantum circuits on the QLM: introduction": [[324, "simulation-of-quantum-circuits-on-the-qlm-introduction"]], "Release notes": [[325, "release-notes"]], "What\u2019s new in myQLM 1.9.3": [[325, "what-s-new-in-myqlm-1-9-3"]], "Main Package": [[325, "main-package"], [325, "id1"], [325, "id4"]], "Dependant Packages": [[325, "dependant-packages"], [325, "id2"], [325, "id5"], [325, "id7"], [325, "id10"], [325, "id14"]], "Other Packages": [[325, "other-packages"], [325, "id3"], [325, "id6"], [325, "id8"], [325, "id11"], [325, "id15"]], "What\u2019s new in myQLM 1.9.2": [[325, "what-s-new-in-myqlm-1-9-2"]], "What\u2019s new in myQLM 1.9.1": [[325, "what-s-new-in-myqlm-1-9-1"]], "Defining quantum circuits / jobs using a Python function": [[325, "defining-quantum-circuits-jobs-using-a-python-function"]], "Updated features": [[325, "updated-features"], [325, "id12"], [325, "id17"], [325, "id20"]], "Fixes": [[325, "fixes"], [325, "id13"], [325, "id18"], [325, "id21"]], "What\u2019s new in myQLM 1.7.3": [[325, "what-s-new-in-myqlm-1-7-3"]], "Main Fixes": [[325, "main-fixes"], [325, "id9"]], "What\u2019s new in myQLM 1.7.2": [[325, "what-s-new-in-myqlm-1-7-2"]], "Deprecation warnings": [[325, "deprecation-warnings"]], "What\u2019s new in myQLM 1.7.1": [[325, "what-s-new-in-myqlm-1-7-1"]], "A new simulated QPU in myQLM": [[325, "a-new-simulated-qpu-in-myqlm"]], "Tools for fermionic computations (myQLM-fermion)": [[325, "tools-for-fermionic-computations-myqlm-fermion"]], "Batch generators in myQLM": [[325, "batch-generators-in-myqlm"]], "New features": [[325, "new-features"], [325, "id16"], [325, "id19"], [325, "id22"]], "What\u2019s new in myQLM 1.6.1": [[325, "what-s-new-in-myqlm-1-6-1"]], "What\u2019s new in myQLM 1.5.1": [[325, "what-s-new-in-myqlm-1-5-1"]], "What\u2019s new in myQLM 1.4.0": [[325, "what-s-new-in-myqlm-1-4-0"]], "myQLM Power Access": [[325, "myqlm-power-access"]], "Known problems": [[325, "known-problems"]], "PyQuil interoperability": [[329, "pyquil-interoperability"]], "Connecting to a QPU": [[329, "connecting-to-a-qpu"]], "Contributing to myQLM": [[326, "contributing-to-myqlm"]], "qat.quops.QuantumChannelPTM": [[323, "qat-quops-quantumchannelptm"]], "qat.quops.QuantumChannel": [[319, "qat-quops-quantumchannel"]], "qat.quops.QuantumChannelKraus": [[322, "qat-quops-quantumchannelkraus"]], "ProjectQ interoperability": [[331, "projectq-interoperability"]], "OpenQASM Compiler": [[332, "openqasm-compiler"]], "Combinatorial optimization": [[333, "combinatorial-optimization"]], "Binary Integer Linear Programming (BILP)": [[335, "binary-integer-linear-programming-bilp"]], "qat.quops.QuantumChannelChi": [[320, "qat-quops-quantumchannelchi"]], "Cirq interoperability": [[330, "cirq-interoperability"]], "qat.quops.QuantumChannelChoi": [[321, "qat-quops-quantumchannelchoi"]], "NP-hard problems": [[334, "np-hard-problems"]], "Unconstrained Graph Problems": [[334, "unconstrained-graph-problems"]], "Constrained Graph Problems": [[334, "constrained-graph-problems"]], "Other problems": [[334, "other-problems"]], "Simulated Quantum Annealing Benchmarking and Performance": [[334, "simulated-quantum-annealing-benchmarking-and-performance"]], "qat.quops.ParametricPureDephasing": [[316, "qat-quops-parametricpuredephasing"]], "qat.quops.ParametricQuantumChannel": [[317, "qat-quops-parametricquantumchannel"]], "qat.lang.AQASM.qftarith.mult_const": [[220, "qat-lang-aqasm-qftarith-mult-const"]], "qat.lang.AQASM.classarith.add": [[213, "qat-lang-aqasm-classarith-add"]], "qat.lang.AQASM.qftarith": [[216, "qat-lang-aqasm-qftarith"]], "References": [[216, "references"], [212, "references"], [206, "references"], [204, "references"]], "qat.lang.AQASM.qftarith.QFT": [[221, "qat-lang-aqasm-qftarith-qft"]], "qat.lang.AQASM.classarith.cuccaro_add": [[215, "qat-lang-aqasm-classarith-cuccaro-add"]], "qat.lang.AQASM.arithmetic.mult_const_mod": [[211, "qat-lang-aqasm-arithmetic-mult-const-mod"]], "qat.lang.AQASM.qint.QCompExp": [[230, "qat-lang-aqasm-qint-qcompexp"]], "qat.lang.algorithms.phase_estimation": [[223, "qat-lang-algorithms-phase-estimation"]], "qat.lang.AQASM.qbool.QClause": [[229, "qat-lang-aqasm-qbool-qclause"]], "qat.lang.AQASM.gates.ParamGate": [[222, "qat-lang-aqasm-gates-paramgate"]], "qat.lang.AQASM.qftarith.add": [[217, "qat-lang-aqasm-qftarith-add"]], "qat.lang.AQASM.qint.QArithExp": [[225, "qat-lang-aqasm-qint-qarithexp"]], "qat.lang.AQASM.arithmetic.mult_const": [[210, "qat-lang-aqasm-arithmetic-mult-const"]], "qat.lang.AQASM.bits.Qbit": [[226, "qat-lang-aqasm-bits-qbit"]], "qat.lang.AQASM.qftarith.mult": [[219, "qat-lang-aqasm-qftarith-mult"]], "qat.lang.Program": [[224, "qat-lang-program"]], "qat.lang.AQASM.qftarith.add_const": [[218, "qat-lang-aqasm-qftarith-add-const"]], "qat.lang.AQASM.qbool.QBoolArray": [[228, "qat-lang-aqasm-qbool-qboolarray"]], "qat.lang.AQASM.classarith": [[212, "qat-lang-aqasm-classarith"]], "qat.lang.AQASM.classarith.add_const": [[214, "qat-lang-aqasm-classarith-add-const"]], "qat.lang.AQASM.qbool.QBool": [[227, "qat-lang-aqasm-qbool-qbool"]], "qat.lang.AQASM.arithmetic": [[206, "qat-lang-aqasm-arithmetic"]], "qat.lang.linking.Linker": [[205, "qat-lang-linking-linker"]], "qat.lang.algorithms.amplification_step": [[195, "qat-lang-algorithms-amplification-step"]], "qat.lang.AQASM.bits.CRegister": [[199, "qat-lang-aqasm-bits-cregister"]], "qat.lang.AQASM.arithmetic.add_const_mod": [[207, "qat-lang-aqasm-arithmetic-add-const-mod"]], "qat.lang.AQASM.misc.generate_gate_set": [[201, "qat-lang-aqasm-misc-generate-gate-set"]], "qat.hardware.DefaultHardwareModel": [[189, "qat-hardware-defaulthardwaremodel"]], "qat.lang": [[193, "qat-lang"]], "Programming tools": [[193, "programming-tools"]], "Gate structures": [[193, "gate-structures"]], "Quantum types": [[193, "quantum-types"]], "Quantum boolean and expressions": [[193, "quantum-boolean-and-expressions"]], "Quantum integers": [[193, "quantum-integers"], [16, "quantum-integers"]], "Managing registers": [[193, "managing-registers"]], "Gate set management": [[193, "gate-set-management"]], "Linker and low level circuit manipulation": [[193, "linker-and-low-level-circuit-manipulation"]], "Quantum labraries and basic algorithms": [[193, "quantum-labraries-and-basic-algorithms"]], "Arithmetic routines": [[193, "arithmetic-routines"]], "State preparatation and QRAM": [[193, "state-preparatation-and-qram"]], "Algorithms": [[193, "algorithms"]], "qat.lang.algorithms.amplification.grover_diffusion": [[202, "qat-lang-algorithms-amplification-grover-diffusion"]], "qat.hardware.GatesSpecification": [[190, "qat-hardware-gatesspecification"]], "qat.hardware.HardwareModel": [[191, "qat-hardware-hardwaremodel"]], "qat.lang.AQASM.bits.BoolFormula": [[196, "qat-lang-aqasm-bits-boolformula"]], "qat.lang.build_gate": [[197, "qat-lang-build-gate"]], "qat.lang.algorithms.amplification.householder": [[203, "qat-lang-algorithms-amplification-householder"]], "qat.lang.AQASM.arithmetic.add_mod": [[208, "qat-lang-aqasm-arithmetic-add-mod"]], "qat.lang.AQASM.arithmetic.modular_exp": [[209, "qat-lang-aqasm-arithmetic-modular-exp"]], "qat.lang.AQASM.gates.Gate": [[200, "qat-lang-aqasm-gates-gate"]], "qat.hardware.make_depolarizing_hardware_model": [[192, "qat-hardware-make-depolarizing-hardware-model"]], "qat.lang.models.KPTree": [[204, "qat-lang-models-kptree"]], "qat.lang.AQASM.bits.Cbit": [[198, "qat-lang-aqasm-bits-cbit"]], "qat.lang.AbstractGate": [[194, "qat-lang-abstractgate"]], "qat.opt.schedule_generator.ScheduleGenerator": [[261, "qat-opt-schedule-generator-schedulegenerator"]], "qat.plugins.Display": [[269, "qat-plugins-display"]], "qat.opt.results.CombinatorialResult": [[255, "qat-opt-results-combinatorialresult"]], "qat.plugins.AdaptVQEPlugin": [[266, "qat-plugins-adaptvqeplugin"]], "qat.opt.NumberPartitioning": [[259, "qat-opt-numberpartitioning"]], "qat.plugins.CircuitInliner": [[267, "qat-plugins-circuitinliner"]], "qat.opt.boolexpr.Var": [[262, "qat-opt-boolexpr-var"]], "qat.plugins.AbstractPlugin": [[265, "qat-plugins-abstractplugin"]], "qat.opt.mixing_factory.InitialStateBuilder": [[252, "qat-opt-mixing-factory-initialstatebuilder"]], "qat.opt.results": [[254, "qat-opt-results"]], "Combinatorial Optimization Generators Results": [[254, "combinatorial-optimization-generators-results"]], "qat.plugins.Junction": [[271, "qat-plugins-junction"]], "qat.plugins.MultipleLaunchesAnalyzer": [[272, "qat-plugins-multiplelaunchesanalyzer"]], "qat.plugins.CostFunctionPlugin": [[268, "qat-plugins-costfunctionplugin"]], "qat.opt.mixing_factory.SimpleInitialState": [[253, "qat-opt-mixing-factory-simpleinitialstate"]], "qat.plugins.GradientDescentOptimizer": [[270, "qat-plugins-gradientdescentoptimizer"]], "qat.opt.VertexCover": [[263, "qat-opt-vertexcover"]], "qat.opt.results.VertexCoverResult": [[258, "qat-opt-results-vertexcoverresult"]], "qat.opt.results.GraphPartitioningResult": [[256, "qat-opt-results-graphpartitioningresult"]], "qat.opt.results.KCliqueResult": [[257, "qat-opt-results-kcliqueresult"]], "qat.opt.QUBO": [[260, "qat-opt-qubo"]], "qat.plugins": [[264, "qat-plugins"]], "Circuit rewriting plugins": [[264, "circuit-rewriting-plugins"]], "Variational optimization plugins": [[264, "variational-optimization-plugins"]], "Plugin for fermionic systems": [[264, "plugin-for-fermionic-systems"]], "Plugin utilities": [[264, "plugin-utilities"]], "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis": [[174, "qat-fermion-chemistry-ucc-transform-integrals-to-new-basis"]], "qat.hardware": [[187, "qat-hardware"]], "Hardware model and gates specifications": [[187, "hardware-model-and-gates-specifications"]], "Predefined hardware models": [[187, "predefined-hardware-models"]], "qat.generators.CombinatorialOptimizerGenerator": [[180, "qat-generators-combinatorialoptimizergenerator"]], "qat.generators": [[178, "qat-generators"]], "Combinatorial Optimization Generators": [[178, "combinatorial-optimization-generators"]], "Generator Utilities": [[178, "generator-utilities"]], "qat.generators.GraphColouringGenerator": [[181, "qat-generators-graphcolouringgenerator"]], "qat.hardware.DefaultGatesSpecification": [[188, "qat-hardware-defaultgatesspecification"]], "qat.fermion.chemistry.wrapper.MoleculeInfo": [[169, "qat-fermion-chemistry-wrapper-moleculeinfo"]], "qat.generators.AbstractGenerator": [[179, "qat-generators-abstractgenerator"]], "qat.fermion.transforms.transform_to_bk_basis": [[175, "qat-fermion-transforms-transform-to-bk-basis"]], "qat.fermion.phase_estimation.perform_phase_estimation": [[170, "qat-fermion-phase-estimation-perform-phase-estimation"]], "qat.fermion.chemistry.ucc.select_active_orbitals": [[172, "qat-fermion-chemistry-ucc-select-active-orbitals"]], "qat.generators.KCliqueGenerator": [[183, "qat-generators-kcliquegenerator"]], "qat.generators.GraphPartitioningGenerator": [[182, "qat-generators-graphpartitioninggenerator"]], "qat.generators.RemoteBatchGenerator": [[185, "qat-generators-remotebatchgenerator"]], "qat.generators.MaxCutGenerator": [[184, "qat-generators-maxcutgenerator"]], "qat.fermion.chemistry.wrapper.MolecularHamiltonian": [[168, "qat-fermion-chemistry-wrapper-molecularhamiltonian"]], "qat.fermion.transforms.transform_to_parity_basis": [[177, "qat-fermion-transforms-transform-to-parity-basis"]], "qat.fermion.hamiltonians.SpinHamiltonian": [[173, "qat-fermion-hamiltonians-spinhamiltonian"]], "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation": [[171, "qat-fermion-chemistry-pyscf-tools-perform-pyscf-computation"]], "qat.generators.VertexCoverGenerator": [[186, "qat-generators-vertexcovergenerator"]], "qat.fermion.transforms.transform_to_jw_basis": [[176, "qat-fermion-transforms-transform-to-jw-basis"]], "Constructing one or multiple Jobs (using Batch)": [[28, "constructing-one-or-multiple-jobs-using-batch"]], "Automated batch generation": [[31, "automated-batch-generation"]], "General Combinatorial Problems": [[25, "general-combinatorial-problems"]], "Creating observables": [[26, "creating-observables"]], "Observables": [[26, "observables"]], "Observables operations": [[26, "observables-operations"]], "Single term observables": [[26, "single-term-observables"]], "Using an observable": [[26, "using-an-observable"]], "Analog Jobs": [[21, "analog-jobs"]], "Ising Hamiltonians": [[23, "ising-hamiltonians"]], "Bibliography": [[23, "bibliography"], [342, "bibliography"]], "Gate based computing": [[36, "gate-based-computing"]], "QPU Emulators": [[36, "id4"]], "CLinalg: C++ Linear-algebra-based simulator": [[36, "clinalg-c-linear-algebra-based-simulator"], [37, "clinalg-c-linear-algebra-based-simulator"]], "PyLinalg: Python Linear-algebra-based simulator": [[36, "pylinalg-python-linear-algebra-based-simulator"], [38, "pylinalg-python-linear-algebra-based-simulator"]], "Extending a QPU (by using Plugins)": [[39, "extending-a-qpu-by-using-plugins"]], "Make you own junction": [[41, "make-you-own-junction"]], "A concrete example": [[41, "a-concrete-example"], [40, "a-concrete-example"]], "Make your own plugin": [[40, "make-your-own-plugin"]], "Method compile": [[40, "method-compile"]], "Method post_process": [[40, "method-post-process"]], "Result of a quantum program": [[32, "result-of-a-quantum-program"]], "Annealing programming": [[22, "annealing-programming"]], "Sample Job": [[29, "sample-job"]], "Quantum Processing Unit (QPU)": [[33, "quantum-processing-unit-qpu"]], "Observable Job": [[30, "observable-job"]], "Executing quantum programs": [[27, "executing-quantum-programs"], [2, "executing-quantum-programs"]], "Annealing computing": [[34, "annealing-computing"]], "Inner workings": [[34, "id10"]], "Make your own QPU": [[35, "make-your-own-qpu"]], "Method submit_job": [[35, "method-submit-job"]], "Method get_specs": [[35, "method-get-specs"]], "Quadratic Unconstrained Binary Optimization (QUBO)": [[24, "quadratic-unconstrained-binary-optimization-qubo"]], "qat.vsolve.ansatz.AnsatzFactory": [[239, "qat-vsolve-ansatz-ansatzfactory"]], "qat.lang.qrout": [[234, "qat-lang-qrout"]], "qat.lang.AQASM.qint.QInt": [[232, "qat-lang-aqasm-qint-qint"]], "qat.lang.algorithms.amplification.uniform_distribution": [[237, "qat-lang-algorithms-amplification-uniform-distribution"]], "qat.opt.MixingFactory": [[249, "qat-opt-mixingfactory"]], "qat.opt.BILP": [[240, "qat-opt-bilp"]], "qat.opt.GraphPartitioning": [[245, "qat-opt-graphpartitioning"]], "qat.opt.KClique": [[247, "qat-opt-kclique"]], "qat.opt.mixing_factory.IndependentAnnealing": [[251, "qat-opt-mixing-factory-independentannealing"]], "qat.opt.GraphColouring": [[244, "qat-opt-graphcolouring"]], "qat.lang.qfunc": [[231, "qat-lang-qfunc"]], "qat.opt.MaxCut": [[248, "qat-opt-maxcut"]], "qat.opt.CombinatorialProblem": [[243, "qat-opt-combinatorialproblem"]], "qat.lang.algorithms.quantum_counting": [[236, "qat-lang-algorithms-quantum-counting"]], "qat.lang.QRoutine": [[235, "qat-lang-qroutine"]], "qat.opt.circuit_generator.CircuitGenerator": [[241, "qat-opt-circuit-generator-circuitgenerator"]], "qat.opt.Ising": [[246, "qat-opt-ising"]], "qat.opt.boolexpr.Clause": [[242, "qat-opt-boolexpr-clause"]], "qat.opt.mixing_factory": [[250, "qat-opt-mixing-factory"]], "Creating custom Quantum Annealing Jobs": [[250, "creating-custom-quantum-annealing-jobs"]], "qat.lang.AQASM.bits.QRegister": [[233, "qat-lang-aqasm-bits-qregister"]], "qat.opt": [[238, "qat-opt"]], "Generic combinatorial optimization": [[238, "generic-combinatorial-optimization"]], "Quadratic problems: Ising and QUBO": [[238, "quadratic-problems-ising-and-qubo"]], "Classes for the supported NP-Hard problems": [[238, "classes-for-the-supported-np-hard-problems"]], "Generating QAOA Ans\u00e4tze or QA Jobs": [[238, "generating-qaoa-ansatze-or-qa-jobs"]], "Getting started": [[0, "id1"]], "Building schedules": [[19, "building-schedules"]], "Hamiltonian as a list of coefficients and Observables": [[19, "hamiltonian-as-a-list-of-coefficients-and-observables"]], "Using abstract variables": [[19, "using-abstract-variables"]], "Hamiltonian as one Observable": [[19, "hamiltonian-as-one-observable"]], "Oracles and quantum types": [[16, "oracles-and-quantum-types"]], "Quantum booleans, quantum conditionals, and quantum oracles": [[16, "quantum-booleans-quantum-conditionals-and-quantum-oracles"]], "Allocation": [[16, "allocation"], [16, "id1"]], "Logical expressions": [[16, "logical-expressions"]], "Evaluating expressions": [[16, "evaluating-expressions"]], "Quantum conditionals and with statements": [[16, "quantum-conditionals-and-with-statements"]], "Building phase oracles": [[16, "building-phase-oracles"]], "Setting a classical value": [[16, "setting-a-classical-value"]], "Arithmetic expressions": [[16, "arithmetic-expressions"]], "Conditionals on quantum integers": [[16, "conditionals-on-quantum-integers"]], "Example: Grover oracle for graph coloring": [[16, "example-grover-oracle-for-graph-coloring"]], "Creating and adding quantum gates to a circuit": [[10, "creating-and-adding-quantum-gates-to-a-circuit"]], "Native gates, controls and daggers": [[10, "native-gates-controls-and-daggers"]], "User defined parametrized gates (AbstractGate)": [[10, "user-defined-parametrized-gates-abstractgate"]], "Matrix definition": [[10, "matrix-definition"]], "Subcircuit definition": [[10, "subcircuit-definition"]], "Arity generator": [[10, "arity-generator"]], "Deprecated custom gates": [[10, "deprecated-custom-gates"]], "Naming quantum routines": [[14, "naming-quantum-routines"]], "Lifting Python functions into quantum gates": [[14, "lifting-python-functions-into-quantum-gates"]], "Linking at circuit extraction": [[14, "linking-at-circuit-extraction"]], "Installing myQLM": [[4, "installing-myqlm"]], "Prerequisites": [[4, "prerequisites"]], "Compatibility Matrix": [[4, "compatibility-matrix"]], "Install": [[4, "id7"]], "Install myQLM package": [[4, "install-myqlm-package"]], "Interoperability": [[4, "interoperability"]], "Variational algorithms with Qaptiva": [[3, "variational-algorithms-with-qaptiva"]], "Ancillae management and compute scopes": [[15, "ancillae-management-and-compute-scopes"]], "Automated ancillae management": [[15, "automated-ancillae-management"]], "Compute/uncompute scopes": [[15, "compute-uncompute-scopes"]], "User guide": [[7, "user-guide"]], "Libraries built upon Qaptiva": [[7, "libraries-built-upon-qaptiva"]], "Writing quantum programs": [[8, "writing-quantum-programs"], [1, "writing-quantum-programs"]], "Gate-based programming": [[9, "gate-based-programming"]], "Manipulating schedules": [[20, "manipulating-schedules"]], "Example of a grover algorithm": [[1, "example-of-a-grover-algorithm"]], "The diffusion": [[1, "the-diffusion"]], "The oracle": [[1, "the-oracle"]], "Atos Quantum Assembler (AQASM)": [[17, "atos-quantum-assembler-aqasm"]], "The text format": [[17, "the-text-format"]], "Header": [[17, "header"]], "Instructions": [[17, "instructions"]], "List of gates": [[17, "list-of-gates"]], "Compiling .aqasm files": [[17, "compiling-aqasm-files"]], "Compilation time linking": [[17, "compilation-time-linking"]], "Quantum programs": [[12, "quantum-programs"]], "Allocating qubit and classical registers": [[12, "allocating-qubit-and-classical-registers"]], "Applying quantum gate": [[12, "applying-quantum-gate"]], "Advanced operations": [[12, "advanced-operations"]], "Generating the circuit": [[12, "generating-the-circuit"]], "Exporting the circuit": [[12, "exporting-the-circuit"]], "Analog programming": [[18, "analog-programming"]], "Background": [[18, "background"]], "Creating analog Jobs": [[18, "creating-analog-jobs"]], "myQLM license": [[5, "myqlm-license"]], "Proprietary part": [[5, "proprietary-part"]], "Open source part": [[5, "open-source-part"]], "myQLM Installation on MacOS": [[6, "myqlm-installation-on-macos"]], "Creating variational circuits": [[11, "creating-variational-circuits"]], "Variational jobs": [[11, "variational-jobs"]], "Binding variables": [[11, "binding-variables"]], "Quantum routines (and Oracles)": [[13, "quantum-routines-and-oracles"]], "Graph Partitioning Generator": [[346, "graph-partitioning-generator"]], "Spin and fermionic systems": [[350, "spin-and-fermionic-systems"]], "myQLM documentation": [[355, "myqlm-documentation"]], "Graph Partitioning": [[337, "graph-partitioning"]], "Quantum application (including Ans\u00e4tze and state preparation)": [[352, "quantum-application-including-ansatze-and-state-preparation"]], "Table of Contents": [[352, "table-of-contents"], [351, "table-of-contents"]], "Variational Quantum Eigensolver (VQE)": [[352, "variational-quantum-eigensolver-vqe"]], "Quantum Chemistry tools for VQE": [[352, "quantum-chemistry-tools-for-vqe"]], "MolecularHamiltonian": [[352, "molecularhamiltonian"]], "MoleculeInfo": [[352, "moleculeinfo"]], "Trotterization tools": [[352, "trotterization-tools"]], "Max Cut": [[339, "max-cut"]], "Number Partitioning": [[340, "number-partitioning"]], "Vertex Cover": [[341, "vertex-cover"]], "Migrating code based on deprecated library qat.dqs": [[354, "migrating-code-based-on-deprecated-library-qat-dqs"]], "Vertex Cover Generator": [[348, "vertex-cover-generator"]], "Graph Colouring Generator": [[349, "graph-colouring-generator"]], "Quantum Annealing (QA)": [[343, "quantum-annealing-qa"]], "K-Clique Generator": [[347, "k-clique-generator"]], "Problem generators": [[344, "problem-generators"]], "NP-hard problems generators": [[344, "np-hard-problems-generators"]], "KClique": [[338, "kclique"]], "Creating and manipulating Hamiltonians": [[351, "creating-and-manipulating-hamiltonians"]], "Defining a Hamiltonian": [[351, "defining-a-hamiltonian"]], "Spin Hamiltonians": [[351, "spin-hamiltonians"]], "Fermionic Hamiltonians": [[351, "fermionic-hamiltonians"]], "Fermionic Hamiltonian using one and two-electrons integrals": [[351, "fermionic-hamiltonian-using-one-and-two-electrons-integrals"]], "The get_matrix() method": [[351, "the-get-matrix-method"]], "Fermionic to spin representation": [[351, "fermionic-to-spin-representation"]], "Example": [[351, "example"]], "Spin and fermionic Hamiltonian operations": [[351, "spin-and-fermionic-hamiltonian-operations"]], "Some Hamiltonian constructors": [[351, "some-hamiltonian-constructors"]], "Max Cut Generator": [[345, "max-cut-generator"]], "Quantum Approximate Optimization Algorithm (QAOA)": [[342, "quantum-approximate-optimization-algorithm-qaoa"]], "Interoperability with annealing framework": [[356, "interoperability-with-annealing-framework"]], "Plugins": [[353, "plugins"]], "Graph Colouring": [[336, "graph-colouring"]]}, "indexentries": {"module": [[45, "module-qat"], [46, "module-qat.interop"], [47, "module-qat.interop.cirq"], [50, "module-qat.interop.openqasm"], [52, "module-qat.interop.projectq"], [55, "module-qat.interop.pyquil"], [59, "module-qat.interop.qiskit"], [67, "module-qat.pylinalg"], [68, "module-qat.pylinalg.simulator"], [75, "module-qat.comm"], [76, "module-qat.comm.datamodel"], [79, "module-qat.comm.exceptions"], [83, "module-qat.comm.resource"], [87, "module-qat.comm.shared"], [90, "module-qat.core"], [101, "module-qat.core.application"], [104, "module-qat.core.circuit_builder"], [109, "module-qat.core.gate_set"], [113, "module-qat.core.qpu"], [115, "module-qat.core.spins"], [118, "module-qat.core.variables"], [132, "module-qat.devices"], [148, "module-qat.fermion"], [148, "module-qat.fermion.chemistry"], [148, "module-qat.fermion.chemistry.qse"], [148, "module-qat.fermion.chemistry.ucc"], [148, "module-qat.fermion.circuits"], [148, "module-qat.fermion.hamiltonians"], [148, "module-qat.fermion.phase_estimation"], [148, "module-qat.fermion.transforms"], [178, "module-qat.generators"], [187, "module-qat.hardware"], [193, "module-qat.lang"], [193, "module-qat.lang.algorithms"], [206, "module-qat.lang.AQASM.arithmetic"], [212, "module-qat.lang.AQASM.classarith"], [216, "module-qat.lang.AQASM.qftarith"], [238, "module-qat.opt"], [250, "module-qat.opt.mixing_factory"], [254, "module-qat.opt.results"], [264, "module-qat.plugins"], [283, "module-qat.qpus"], [292, "module-qat.quops"], [292, "module-qat.quops.metrics"]], "qat": [[45, "module-qat"]], "qat.interop": [[46, "module-qat.interop"]], "qat.interop.cirq": [[47, "module-qat.interop.cirq"]], "cirq_to_qlm() (in module qat.interop.cirq)": [[48, "qat.interop.cirq.cirq_to_qlm"]], "qlm_to_cirq() (in module qat.interop.cirq)": [[49, "qat.interop.cirq.qlm_to_cirq"]], "qat.interop.openqasm": [[50, "module-qat.interop.openqasm"]], "oqasmparser (class in qat.interop.openqasm)": [[51, "qat.interop.openqasm.OqasmParser"]], "compile() (qat.interop.openqasm.oqasmparser method)": [[51, "qat.interop.openqasm.OqasmParser.compile"]], "qat.interop.projectq": [[52, "module-qat.interop.projectq"]], "aqasmengine (class in qat.interop.projectq)": [[53, "qat.interop.projectq.AqasmEngine"]], "projectq_to_qlm() (qat.interop.projectq.aqasmengine method)": [[53, "qat.interop.projectq.AqasmEngine.projectq_to_qlm"]], "aqasmprinter (class in qat.interop.projectq)": [[54, "qat.interop.projectq.AqasmPrinter"]], "qat.interop.pyquil": [[55, "module-qat.interop.pyquil"]], "pyquil_to_qlm() (in module qat.interop.pyquil)": [[56, "qat.interop.pyquil.pyquil_to_qlm"]], "pyquilqpu (class in qat.interop.pyquil)": [[57, "qat.interop.pyquil.PyquilQPU"]], "set_qpu() (qat.interop.pyquil.pyquilqpu method)": [[57, "qat.interop.pyquil.PyquilQPU.set_qpu"]], "submit() (qat.interop.pyquil.pyquilqpu method)": [[57, "qat.interop.pyquil.PyquilQPU.submit"]], "submit_job() (qat.interop.pyquil.pyquilqpu method)": [[57, "qat.interop.pyquil.PyquilQPU.submit_job"]], "qlm_to_pyquil() (in module qat.interop.pyquil)": [[58, "qat.interop.pyquil.qlm_to_pyquil"]], "qat.interop.qiskit": [[59, "module-qat.interop.qiskit"]], "asyncbackendtoqpu (class in qat.interop.qiskit)": [[60, "qat.interop.qiskit.AsyncBackendToQPU"]], "retrieve_job() (qat.interop.qiskit.asyncbackendtoqpu method)": [[60, "qat.interop.qiskit.AsyncBackendToQPU.retrieve_job"]], "submit() (qat.interop.qiskit.asyncbackendtoqpu method)": [[60, "qat.interop.qiskit.AsyncBackendToQPU.submit"]], "backendtoqpu (class in qat.interop.qiskit)": [[61, "qat.interop.qiskit.BackendToQPU"]], "submit() (qat.interop.qiskit.backendtoqpu method)": [[61, "qat.interop.qiskit.BackendToQPU.submit"]], "qiskit_to_qlm() (in module qat.interop.qiskit)": [[62, "qat.interop.qiskit.qiskit_to_qlm"]], "qiskitjob (class in qat.interop.qiskit)": [[63, "qat.interop.qiskit.QiskitJob"]], "cancel() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.cancel"]], "dump() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.dump"]], "job_id() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.job_id"]], "result() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.result"]], "status() (qat.interop.qiskit.qiskitjob method)": [[63, "qat.interop.qiskit.QiskitJob.status"]], "qiskitruntimeqpu (class in qat.interop.qiskit.runtime)": [[64, "qat.interop.qiskit.runtime.QiskitRuntimeQPU"]], "submit() (qat.interop.qiskit.runtime.qiskitruntimeqpu method)": [[64, "qat.interop.qiskit.runtime.QiskitRuntimeQPU.submit"]], "qlm_to_qiskit() (in module qat.interop.qiskit)": [[65, "qat.interop.qiskit.qlm_to_qiskit"]], "qputobackend (class in qat.interop.qiskit)": [[66, "qat.interop.qiskit.QPUToBackend"]], "set_qpu() (qat.interop.qiskit.qputobackend method)": [[66, "qat.interop.qiskit.QPUToBackend.set_qpu"]], "qat.pylinalg": [[67, "module-qat.pylinalg"]], "qat.pylinalg.simulator": [[68, "module-qat.pylinalg.simulator"]], "mat2nparray() (in module qat.pylinalg.simulator)": [[69, "qat.pylinalg.simulator.mat2nparray"]], "measure() (in module qat.pylinalg.simulator)": [[70, "qat.pylinalg.simulator.measure"]], "project() (in module qat.pylinalg.simulator)": [[71, "qat.pylinalg.simulator.project"]], "raise_break() (in module qat.pylinalg.simulator)": [[72, "qat.pylinalg.simulator.raise_break"]], "reset() (in module qat.pylinalg.simulator)": [[73, "qat.pylinalg.simulator.reset"]], "simulate() (in module qat.pylinalg.simulator)": [[74, "qat.pylinalg.simulator.simulate"]], "qat.comm": [[75, "module-qat.comm"]], "qat.comm.datamodel": [[76, "module-qat.comm.datamodel"]], "qat.comm.datamodel.ttypes.gatedefinition (built-in class)": [[77, "qat.comm.datamodel.ttypes.GateDefinition"]], "op (class in qat.comm.datamodel.ttypes)": [[78, "qat.comm.datamodel.ttypes.Op"]], "qat.comm.exceptions": [[79, "module-qat.comm.exceptions"]], "qat.comm.exceptions.ttypes.errortype (built-in class)": [[80, "qat.comm.exceptions.ttypes.ErrorType"]], "qat.comm.exceptions.ttypes.pluginexception (built-in class)": [[81, "qat.comm.exceptions.ttypes.PluginException"]], "qat.comm.exceptions.ttypes.qpuexception (built-in class)": [[82, "qat.comm.exceptions.ttypes.QPUException"]], "qat.comm.resource": [[83, "module-qat.comm.resource"]], "allocationmodel (class in qat.comm.resource.ttypes)": [[84, "qat.comm.resource.ttypes.AllocationModel"]], "qat.comm.resource.ttypes.device (built-in class)": [[85, "qat.comm.resource.ttypes.Device"]], "qat.comm.resource.ttypes.resourcemodel (built-in class)": [[86, "qat.comm.resource.ttypes.ResourceModel"]], "qat.comm.shared": [[87, "module-qat.comm.shared"]], "intermediatemeasurement (class in qat.comm.shared.ttypes)": [[88, "qat.comm.shared.ttypes.IntermediateMeasurement"]], "processingtype (class in qat.comm.shared.ttypes)": [[89, "qat.comm.shared.ttypes.ProcessingType"]], "qat.core": [[90, "module-qat.core"]], "aggregate_data() (in module qat.core.wrappers.result)": [[91, "qat.core.wrappers.result.aggregate_data"]], "assert_plugin() (in module qat.core.assertion)": [[92, "qat.core.assertion.assert_plugin"]], "assert_qpu() (in module qat.core.assertion)": [[93, "qat.core.assertion.assert_qpu"]], "batch (class in qat.core)": [[94, "qat.core.Batch"]], "dump() (qat.core.batch method)": [[94, "qat.core.Batch.dump"]], "from_bytes() (qat.core.batch class method)": [[94, "qat.core.Batch.from_bytes"]], "from_thrift() (qat.core.batch class method)": [[94, "qat.core.Batch.from_thrift"]], "get_variables() (qat.core.batch method)": [[94, "qat.core.Batch.get_variables"]], "load() (qat.core.batch static method)": [[94, "qat.core.Batch.load"]], "to_cpp() (qat.core.batch method)": [[94, "qat.core.Batch.to_cpp"]], "to_thrift() (qat.core.batch method)": [[94, "qat.core.Batch.to_thrift"]], "batchresult (class in qat.core)": [[95, "qat.core.BatchResult"]], "append() (qat.core.batchresult method)": [[95, "qat.core.BatchResult.append"]], "dump() (qat.core.batchresult method)": [[95, "qat.core.BatchResult.dump"]], "extend() (qat.core.batchresult method)": [[95, "qat.core.BatchResult.extend"]], "from_thrift() (qat.core.batchresult class method)": [[95, "qat.core.BatchResult.from_thrift"]], "load() (qat.core.batchresult static method)": [[95, "qat.core.BatchResult.load"]], "circuit (class in qat.core)": [[96, "qat.core.Circuit"]], "bind_variable() (qat.core.circuit method)": [[96, "qat.core.Circuit.bind_variable"]], "bind_variables() (qat.core.circuit method)": [[96, "qat.core.Circuit.bind_variables"]], "compile() (qat.core.circuit method)": [[96, "qat.core.Circuit.compile"]], "count() (qat.core.circuit method)": [[96, "qat.core.Circuit.count"]], "dag() (qat.core.circuit method)": [[96, "qat.core.Circuit.dag"]], "depth() (qat.core.circuit method)": [[96, "qat.core.Circuit.depth"]], "display() (qat.core.circuit method)": [[96, "qat.core.Circuit.display"]], "dump() (qat.core.circuit method)": [[96, "qat.core.Circuit.dump"]], "empty() (qat.core.circuit static method)": [[96, "qat.core.Circuit.empty"]], "eval() (qat.core.circuit method)": [[96, "qat.core.Circuit.eval"]], "fill_matrices() (qat.core.circuit method)": [[96, "qat.core.Circuit.fill_matrices"]], "from_bytes() (qat.core.circuit class method)": [[96, "qat.core.Circuit.from_bytes"]], "from_thrift() (qat.core.circuit class method)": [[96, "qat.core.Circuit.from_thrift"]], "gate_set (qat.core.circuit property)": [[96, "qat.core.Circuit.gate_set"]], "get_variables() (qat.core.circuit method)": [[96, "qat.core.Circuit.get_variables"]], "insert_gate() (qat.core.circuit method)": [[96, "qat.core.Circuit.insert_gate"]], "iterate_simple() (qat.core.circuit method)": [[96, "qat.core.Circuit.iterate_simple"]], "load() (qat.core.circuit class method)": [[96, "qat.core.Circuit.load"]], "remove_locks() (qat.core.circuit method)": [[96, "qat.core.Circuit.remove_locks"]], "run() (qat.core.circuit method)": [[96, "qat.core.Circuit.run"]], "shift_qbits() (qat.core.circuit method)": [[96, "qat.core.Circuit.shift_qbits"]], "statistics() (qat.core.circuit method)": [[96, "qat.core.Circuit.statistics"]], "to_job() (qat.core.circuit method)": [[96, "qat.core.Circuit.to_job"]], "display() (in module qat.core.console)": [[97, "qat.core.console.display"]], "evaluate() (in module qat.core.formula_eval)": [[98, "qat.core.formula_eval.evaluate"]], "hardwarespecs (class in qat.core)": [[99, "qat.core.HardwareSpecs"]], "as_graph() (qat.core.hardwarespecs method)": [[99, "qat.core.HardwareSpecs.as_graph"]], "as_quameleon() (qat.core.hardwarespecs method)": [[99, "qat.core.HardwareSpecs.as_quameleon"]], "dump() (qat.core.hardwarespecs method)": [[99, "qat.core.HardwareSpecs.dump"]], "from_thrift() (qat.core.hardwarespecs class method)": [[99, "qat.core.HardwareSpecs.from_thrift"]], "load() (qat.core.hardwarespecs static method)": [[99, "qat.core.HardwareSpecs.load"]], "nbqbits (qat.core.hardwarespecs property)": [[99, "qat.core.HardwareSpecs.nbqbits"]], "job (class in qat.core)": [[100, "qat.core.Job"]], "compile() (qat.core.job method)": [[100, "qat.core.Job.compile"]], "differentiate() (qat.core.job method)": [[100, "qat.core.Job.differentiate"]], "dump() (qat.core.job method)": [[100, "qat.core.Job.dump"]], "eval() (qat.core.job method)": [[100, "qat.core.Job.eval"]], "from_bytes() (qat.core.job class method)": [[100, "qat.core.Job.from_bytes"]], "from_thrift() (qat.core.job class method)": [[100, "qat.core.Job.from_thrift"]], "get_variables() (qat.core.job method)": [[100, "qat.core.Job.get_variables"]], "gradient() (qat.core.job method)": [[100, "qat.core.Job.gradient"]], "load() (qat.core.job class method)": [[100, "qat.core.Job.load"]], "parameter_map (qat.core.job property)": [[100, "qat.core.Job.parameter_map"]], "psi_0 (qat.core.job property)": [[100, "qat.core.Job.psi_0"]], "run() (qat.core.job method)": [[100, "qat.core.Job.run"]], "shift_qbits() (qat.core.job method)": [[100, "qat.core.Job.shift_qbits"]], "threshold (qat.core.job property)": [[100, "qat.core.Job.threshold"]], "to_cpp() (qat.core.job method)": [[100, "qat.core.Job.to_cpp"]], "to_thrift() (qat.core.job method)": [[100, "qat.core.Job.to_thrift"]], "qat.core.application": [[101, "module-qat.core.application"]], "application (class in qat.core.application)": [[102, "qat.core.application.Application"]], "execute() (qat.core.application.application method)": [[102, "qat.core.application.Application.execute"]], "serve() (qat.core.application.application method)": [[102, "qat.core.application.Application.serve"]], "remoteapplication (class in qat.core.application)": [[103, "qat.core.application.RemoteApplication"]], "qat.core.circuit_builder": [[104, "module-qat.core.circuit_builder"]], "default_gate_set() (in module qat.core.circuit_builder.matrix_util)": [[105, "qat.core.circuit_builder.matrix_util.default_gate_set"]], "get_param_generator() (in module qat.core.circuit_builder.matrix_util)": [[106, "qat.core.circuit_builder.matrix_util.get_param_generator"]], "get_predef_generator() (in module qat.core.circuit_builder.matrix_util)": [[107, "qat.core.circuit_builder.matrix_util.get_predef_generator"]], "variablenamenotavailable (class in qat.core.circuit_builder.builder)": [[108, "qat.core.circuit_builder.builder.VariableNameNotAvailable"]], "qat.core.gate_set": [[109, "module-qat.core.gate_set"]], "gateset (class in qat.core.gate_set)": [[110, "qat.core.gate_set.GateSet"]], "add_signature() (qat.core.gate_set.gateset method)": [[110, "qat.core.gate_set.GateSet.add_signature"]], "union() (qat.core.gate_set.gateset method)": [[110, "qat.core.gate_set.GateSet.union"]], "gatesignature (class in qat.core.gate_set)": [[111, "qat.core.gate_set.GateSignature"]], "get_circuit() (qat.core.gate_set.gatesignature method)": [[111, "qat.core.gate_set.GateSignature.get_circuit"]], "get_matrix() (qat.core.gate_set.gatesignature method)": [[111, "qat.core.gate_set.GateSignature.get_matrix"]], "set_circuit_generator() (qat.core.gate_set.gatesignature method)": [[111, "qat.core.gate_set.GateSignature.set_circuit_generator"]], "set_matrix_generator() (qat.core.gate_set.gatesignature method)": [[111, "qat.core.gate_set.GateSignature.set_matrix_generator"]], "gatesyntaxredefinition (class in qat.core.gate_set)": [[112, "qat.core.gate_set.GateSyntaxRedefinition"]], "qat.core.qpu": [[113, "module-qat.core.qpu"]], "commonqpu (class in qat.core.qpu)": [[114, "qat.core.qpu.CommonQPU"]], "qat.core.spins": [[115, "module-qat.core.spins"]], "integer_to_spins() (in module qat.core.spins)": [[116, "qat.core.spins.integer_to_spins"]], "spins_to_integer() (in module qat.core.spins)": [[117, "qat.core.spins.spins_to_integer"]], "qat.core.variables": [[118, "module-qat.core.variables"]], "arithexpression (class in qat.core.variables)": [[119, "qat.core.variables.ArithExpression"]], "differentiate() (qat.core.variables.arithexpression method)": [[119, "qat.core.variables.ArithExpression.differentiate"]], "from_string() (qat.core.variables.arithexpression static method)": [[119, "qat.core.variables.ArithExpression.from_string"]], "get_variables() (qat.core.variables.arithexpression method)": [[119, "qat.core.variables.ArithExpression.get_variables"]], "pretty_print() (qat.core.variables.arithexpression method)": [[119, "qat.core.variables.ArithExpression.pretty_print"]], "to_thrift() (qat.core.variables.arithexpression method)": [[119, "qat.core.variables.ArithExpression.to_thrift"]], "symbol (class in qat.core.variables)": [[120, "qat.core.variables.Symbol"]], "observable (class in qat.core)": [[121, "qat.core.Observable"]], "constant_coeff (qat.core.observable attribute)": [[121, "qat.core.Observable.constant_coeff"]], "ising (qat.core.observable attribute)": [[121, "qat.core.Observable.ising"]], "nbqbits (qat.core.observable attribute)": [[121, "qat.core.Observable.nbqbits"]], "terms (qat.core.observable attribute)": [[121, "qat.core.Observable.terms"]], "to_matrix() (qat.core.observable method)": [[121, "qat.core.Observable.to_matrix"]], "parameter (class in qat.core)": [[122, "qat.core.Parameter"]], "func (qat.core.parameter property)": [[122, "qat.core.Parameter.func"]], "generate_noise() (qat.core.parameter method)": [[122, "qat.core.Parameter.generate_noise"]], "get_noise() (qat.core.parameter method)": [[122, "qat.core.Parameter.get_noise"]], "psd (qat.core.parameter property)": [[122, "qat.core.Parameter.psd"]], "plot_in_notebook() (in module qat.core.printer)": [[123, "qat.core.printer.plot_in_notebook"]], "result (class in qat.core)": [[124, "qat.core.Result"]], "add_sample() (qat.core.result method)": [[124, "qat.core.Result.add_sample"]], "display() (qat.core.result method)": [[124, "qat.core.Result.display"]], "dump() (qat.core.result method)": [[124, "qat.core.Result.dump"]], "from_bytes() (qat.core.result class method)": [[124, "qat.core.Result.from_bytes"]], "from_thrift() (qat.core.result class method)": [[124, "qat.core.Result.from_thrift"]], "load() (qat.core.result static method)": [[124, "qat.core.Result.load"]], "parameter_map (qat.core.result property)": [[124, "qat.core.Result.parameter_map"]], "plot() (qat.core.result method)": [[124, "qat.core.Result.plot"]], "unpack() (qat.core.result method)": [[124, "qat.core.Result.unpack"]], "value (qat.core.result property)": [[124, "qat.core.Result.value"]], "values (qat.core.result property)": [[124, "qat.core.Result.values"]], "wrap_samples() (qat.core.result method)": [[124, "qat.core.Result.wrap_samples"]], "sample (class in qat.core)": [[125, "qat.core.Sample"]], "amplitude (qat.core.sample property)": [[125, "qat.core.Sample.amplitude"]], "from_bytes() (qat.core.sample class method)": [[125, "qat.core.Sample.from_bytes"]], "from_thrift() (qat.core.sample class method)": [[125, "qat.core.Sample.from_thrift"]], "set_qreg() (qat.core.sample method)": [[125, "qat.core.Sample.set_qreg"]], "state (qat.core.sample property)": [[125, "qat.core.Sample.state"]], "schedule (class in qat.core)": [[126, "qat.core.Schedule"]], "dump() (qat.core.schedule method)": [[126, "qat.core.Schedule.dump"]], "get_variables() (qat.core.schedule method)": [[126, "qat.core.Schedule.get_variables"]], "load() (qat.core.schedule class method)": [[126, "qat.core.Schedule.load"]], "to_job() (qat.core.schedule method)": [[126, "qat.core.Schedule.to_job"]], "state (class in qat.core.wrappers.result)": [[127, "qat.core.wrappers.result.State"]], "bitstring (qat.core.wrappers.result.state property)": [[127, "qat.core.wrappers.result.State.bitstring"]], "int (qat.core.wrappers.result.state property)": [[127, "qat.core.wrappers.result.State.int"]], "lsb_int (qat.core.wrappers.result.state property)": [[127, "qat.core.wrappers.result.State.lsb_int"]], "value (qat.core.wrappers.result.state property)": [[127, "qat.core.wrappers.result.State.value"]], "term (class in qat.core)": [[128, "qat.core.Term"]], "coeff (qat.core.term attribute)": [[128, "qat.core.Term.coeff"]], "op (qat.core.term attribute)": [[128, "qat.core.Term.op"]], "qbits (qat.core.term attribute)": [[128, "qat.core.Term.qbits"]], "topology (class in qat.core)": [[129, "qat.core.Topology"]], "add_edge() (qat.core.topology method)": [[129, "qat.core.Topology.add_edge"]], "dump() (qat.core.topology method)": [[129, "qat.core.Topology.dump"]], "from_bytes() (qat.core.topology class method)": [[129, "qat.core.Topology.from_bytes"]], "from_nx() (qat.core.topology static method)": [[129, "qat.core.Topology.from_nx"]], "from_thrift() (qat.core.topology class method)": [[129, "qat.core.Topology.from_thrift"]], "load() (qat.core.topology static method)": [[129, "qat.core.Topology.load"]], "nbqbits (qat.core.topology property)": [[129, "qat.core.Topology.nbqbits"]], "set_nbqbits() (qat.core.topology method)": [[129, "qat.core.Topology.set_nbqbits"]], "to_nx() (qat.core.topology method)": [[129, "qat.core.Topology.to_nx"]], "topologytype (class in qat.core)": [[130, "qat.core.TopologyType"]], "variable (class in qat.core)": [[131, "qat.core.Variable"]], "differentiate() (qat.core.variable method)": [[131, "qat.core.Variable.differentiate"]], "get_variables() (qat.core.variable method)": [[131, "qat.core.Variable.get_variables"]], "to_thrift() (qat.core.variable method)": [[131, "qat.core.Variable.to_thrift"]], "qat.devices": [[132, "module-qat.devices"]], "alltoall (class in qat.devices)": [[133, "qat.devices.AllToAll"]], "qat.devices.google_sycamore (built-in variable)": [[134, "qat.devices.GOOGLE_SYCAMORE"]], "griddevice (class in qat.devices)": [[135, "qat.devices.GridDevice"]], "qat.devices.ibm_burlington (built-in variable)": [[136, "qat.devices.IBM_BURLINGTON"]], "qat.devices.ibm_johannesburg (built-in variable)": [[137, "qat.devices.IBM_JOHANNESBURG"]], "qat.devices.ibm_melbourne (built-in variable)": [[138, "qat.devices.IBM_MELBOURNE"]], "qat.devices.ibm_rueschlikon (built-in variable)": [[139, "qat.devices.IBM_RUESCHLIKON"]], "qat.devices.ibm_singapore (built-in variable)": [[140, "qat.devices.IBM_SINGAPORE"]], "qat.devices.ibm_tokyo (built-in variable)": [[141, "qat.devices.IBM_TOKYO"]], "qat.devices.ibm_yorktown (built-in variable)": [[142, "qat.devices.IBM_YORKTOWN"]], "linedevice (class in qat.devices)": [[143, "qat.devices.LineDevice"]], "qat.devices.rigetti_agave (built-in variable)": [[144, "qat.devices.RIGETTI_AGAVE"]], "qat.devices.rigetti_aspen (built-in variable)": [[145, "qat.devices.RIGETTI_ASPEN"]], "squaregriddevice (class in qat.devices)": [[146, "qat.devices.SquareGridDevice"]], "qat.devices.zuchongzhi (built-in variable)": [[147, "qat.devices.ZUCHONGZHI"]], "qat.fermion": [[148, "module-qat.fermion"]], "qat.fermion.chemistry": [[148, "module-qat.fermion.chemistry"]], "qat.fermion.chemistry.qse": [[148, "module-qat.fermion.chemistry.qse"]], "qat.fermion.chemistry.ucc": [[148, "module-qat.fermion.chemistry.ucc"]], "qat.fermion.circuits": [[148, "module-qat.fermion.circuits"]], "qat.fermion.hamiltonians": [[148, "module-qat.fermion.hamiltonians"]], "qat.fermion.phase_estimation": [[148, "module-qat.fermion.phase_estimation"]], "qat.fermion.transforms": [[148, "module-qat.fermion.transforms"]], "apply_quantum_subspace_expansion() (in module qat.fermion.chemistry.qse)": [[149, "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion"]], "compute_active_space_integrals() (in module qat.fermion.chemistry.ucc)": [[150, "qat.fermion.chemistry.ucc.compute_active_space_integrals"]], "construct_ucc_ansatz() (in module qat.fermion.chemistry.ucc)": [[151, "qat.fermion.chemistry.ucc.construct_ucc_ansatz"]], "convert_to_h_integrals() (in module qat.fermion.chemistry.ucc)": [[152, "qat.fermion.chemistry.ucc.convert_to_h_integrals"]], "electronicstructurehamiltonian (class in qat.fermion.hamiltonians)": [[153, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian"]], "constant_coeff (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[153, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.constant_coeff"]], "copy() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[153, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.copy"]], "dag() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[153, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.dag"]], "get_matrix() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[153, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.get_matrix"]], "hpq (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[153, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.hpq"]], "hpqrs (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[153, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.hpqrs"]], "to_fermion() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[153, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.to_fermion"]], "to_spin() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[153, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.to_spin"]], "fermionhamiltonian (class in qat.fermion.hamiltonians)": [[154, "qat.fermion.hamiltonians.FermionHamiltonian"]], "constant_coeff (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[154, "qat.fermion.hamiltonians.FermionHamiltonian.constant_coeff"]], "copy() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[154, "qat.fermion.hamiltonians.FermionHamiltonian.copy"]], "dag() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[154, "qat.fermion.hamiltonians.FermionHamiltonian.dag"]], "get_matrix() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[154, "qat.fermion.hamiltonians.FermionHamiltonian.get_matrix"]], "matrix (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[154, "qat.fermion.hamiltonians.FermionHamiltonian.matrix"]], "nbqbits (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[154, "qat.fermion.hamiltonians.FermionHamiltonian.nbqbits"]], "normal_order (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[154, "qat.fermion.hamiltonians.FermionHamiltonian.normal_order"]], "terms (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[154, "qat.fermion.hamiltonians.FermionHamiltonian.terms"]], "to_electronic() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[154, "qat.fermion.hamiltonians.FermionHamiltonian.to_electronic"]], "to_spin() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[154, "qat.fermion.hamiltonians.FermionHamiltonian.to_spin"]], "get_cluster_ops() (in module qat.fermion.chemistry.ucc)": [[155, "qat.fermion.chemistry.ucc.get_cluster_ops"]], "get_hf_ket() (in module qat.fermion.chemistry.ucc)": [[156, "qat.fermion.chemistry.ucc.get_hf_ket"]], "guess_init_params() (in module qat.fermion.chemistry.ucc)": [[157, "qat.fermion.chemistry.ucc.guess_init_params"]], "make_anderson_model() (in module qat.fermion.hamiltonians)": [[158, "qat.fermion.hamiltonians.make_anderson_model"]], "make_compressed_ldca_circ() (in module qat.fermion.circuits)": [[159, "qat.fermion.circuits.make_compressed_ldca_circ"]], "make_embedded_model() (in module qat.fermion.hamiltonians)": [[160, "qat.fermion.hamiltonians.make_embedded_model"]], "make_general_hwe_circ() (in module qat.fermion.circuits)": [[161, "qat.fermion.circuits.make_general_hwe_circ"]], "make_hubbard_model() (in module qat.fermion.hamiltonians)": [[162, "qat.fermion.hamiltonians.make_hubbard_model"]], "make_ldca_circ() (in module qat.fermion.circuits)": [[163, "qat.fermion.circuits.make_ldca_circ"]], "make_mr_circ() (in module qat.fermion.circuits)": [[164, "qat.fermion.circuits.make_mr_circ"]], "make_mrep_circ() (in module qat.fermion.circuits)": [[165, "qat.fermion.circuits.make_mrep_circ"]], "make_shallow_circ() (in module qat.fermion.circuits)": [[166, "qat.fermion.circuits.make_shallow_circ"]], "make_trotterisation_routine() (in module qat.fermion.trotterisation)": [[167, "qat.fermion.trotterisation.make_trotterisation_routine"]], "molecularhamiltonian (class in qat.fermion.chemistry.wrapper)": [[168, "qat.fermion.chemistry.wrapper.MolecularHamiltonian"]], "constant_coeff (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[168, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.constant_coeff"]], "get_electronic_hamiltonian() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[168, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.get_electronic_hamiltonian"]], "nqbits (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[168, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.nqbits"]], "one_body_integrals (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[168, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.one_body_integrals"]], "select_active_space() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[168, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.select_active_space"]], "transform_basis() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[168, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.transform_basis"]], "two_body_integrals (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[168, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.two_body_integrals"]], "moleculeinfo (class in qat.fermion.chemistry.wrapper)": [[169, "qat.fermion.chemistry.wrapper.MoleculeInfo"]], "constant_coeff (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[169, "qat.fermion.chemistry.wrapper.MoleculeInfo.constant_coeff"]], "hamiltonian (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[169, "qat.fermion.chemistry.wrapper.MoleculeInfo.hamiltonian"]], "n_electrons (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[169, "qat.fermion.chemistry.wrapper.MoleculeInfo.n_electrons"]], "noons (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[169, "qat.fermion.chemistry.wrapper.MoleculeInfo.noons"]], "nqbits (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[169, "qat.fermion.chemistry.wrapper.MoleculeInfo.nqbits"]], "one_body_integrals (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[169, "qat.fermion.chemistry.wrapper.MoleculeInfo.one_body_integrals"]], "orbital_energies (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[169, "qat.fermion.chemistry.wrapper.MoleculeInfo.orbital_energies"]], "restrict_active_space() (qat.fermion.chemistry.wrapper.moleculeinfo method)": [[169, "qat.fermion.chemistry.wrapper.MoleculeInfo.restrict_active_space"]], "two_body_integrals (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[169, "qat.fermion.chemistry.wrapper.MoleculeInfo.two_body_integrals"]], "perform_phase_estimation (class in qat.fermion.phase_estimation)": [[170, "qat.fermion.phase_estimation.perform_phase_estimation"]], "perform_pyscf_computation() (in module qat.fermion.chemistry.pyscf_tools)": [[171, "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation"]], "select_active_orbitals() (in module qat.fermion.chemistry.ucc)": [[172, "qat.fermion.chemistry.ucc.select_active_orbitals"]], "spinhamiltonian (class in qat.fermion.hamiltonians)": [[173, "qat.fermion.hamiltonians.SpinHamiltonian"]], "constant_coeff (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[173, "qat.fermion.hamiltonians.SpinHamiltonian.constant_coeff"]], "copy() (qat.fermion.hamiltonians.spinhamiltonian method)": [[173, "qat.fermion.hamiltonians.SpinHamiltonian.copy"]], "dag() (qat.fermion.hamiltonians.spinhamiltonian method)": [[173, "qat.fermion.hamiltonians.SpinHamiltonian.dag"]], "get_matrix() (qat.fermion.hamiltonians.spinhamiltonian method)": [[173, "qat.fermion.hamiltonians.SpinHamiltonian.get_matrix"]], "matrix (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[173, "qat.fermion.hamiltonians.SpinHamiltonian.matrix"]], "nbqbits (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[173, "qat.fermion.hamiltonians.SpinHamiltonian.nbqbits"]], "terms (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[173, "qat.fermion.hamiltonians.SpinHamiltonian.terms"]], "transform_integrals_to_new_basis() (in module qat.fermion.chemistry.ucc)": [[174, "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis"]], "transform_to_bk_basis() (in module qat.fermion.transforms)": [[175, "qat.fermion.transforms.transform_to_bk_basis"]], "transform_to_jw_basis() (in module qat.fermion.transforms)": [[176, "qat.fermion.transforms.transform_to_jw_basis"]], "transform_to_parity_basis() (in module qat.fermion.transforms)": [[177, "qat.fermion.transforms.transform_to_parity_basis"]], "qat.generators": [[178, "module-qat.generators"]], "abstractgenerator (class in qat.generators)": [[179, "qat.generators.AbstractGenerator"]], "generate() (qat.generators.abstractgenerator method)": [[179, "qat.generators.AbstractGenerator.generate"]], "serve() (qat.generators.abstractgenerator method)": [[179, "qat.generators.AbstractGenerator.serve"]], "wrapper_post_process() (qat.generators.abstractgenerator method)": [[179, "qat.generators.AbstractGenerator.wrapper_post_process"]], "combinatorialoptimizergenerator (class in qat.generators)": [[180, "qat.generators.CombinatorialOptimizerGenerator"]], "generate() (qat.generators.combinatorialoptimizergenerator method)": [[180, "qat.generators.CombinatorialOptimizerGenerator.generate"]], "post_process() (qat.generators.combinatorialoptimizergenerator method)": [[180, "qat.generators.CombinatorialOptimizerGenerator.post_process"]], "graphcolouringgenerator (class in qat.generators)": [[181, "qat.generators.GraphColouringGenerator"]], "generate() (qat.generators.graphcolouringgenerator method)": [[181, "qat.generators.GraphColouringGenerator.generate"]], "graphpartitioninggenerator (class in qat.generators)": [[182, "qat.generators.GraphPartitioningGenerator"]], "generate() (qat.generators.graphpartitioninggenerator method)": [[182, "qat.generators.GraphPartitioningGenerator.generate"]], "kcliquegenerator (class in qat.generators)": [[183, "qat.generators.KCliqueGenerator"]], "generate() (qat.generators.kcliquegenerator method)": [[183, "qat.generators.KCliqueGenerator.generate"]], "maxcutgenerator (class in qat.generators)": [[184, "qat.generators.MaxCutGenerator"]], "generate() (qat.generators.maxcutgenerator method)": [[184, "qat.generators.MaxCutGenerator.generate"]], "remotebatchgenerator (class in qat.generators)": [[185, "qat.generators.RemoteBatchGenerator"]], "generate() (qat.generators.remotebatchgenerator method)": [[185, "qat.generators.RemoteBatchGenerator.generate"]], "post_process() (qat.generators.remotebatchgenerator method)": [[185, "qat.generators.RemoteBatchGenerator.post_process"]], "vertexcovergenerator (class in qat.generators)": [[186, "qat.generators.VertexCoverGenerator"]], "generate() (qat.generators.vertexcovergenerator method)": [[186, "qat.generators.VertexCoverGenerator.generate"]], "qat.hardware": [[187, "module-qat.hardware"]], "defaultgatesspecification (class in qat.hardware)": [[188, "qat.hardware.DefaultGatesSpecification"]], "gate_times (qat.hardware.defaultgatesspecification attribute)": [[188, "qat.hardware.DefaultGatesSpecification.gate_times"]], "get_gate_time() (qat.hardware.defaultgatesspecification method)": [[188, "qat.hardware.DefaultGatesSpecification.get_gate_time"]], "get_quantum_channel() (qat.hardware.defaultgatesspecification method)": [[188, "qat.hardware.DefaultGatesSpecification.get_quantum_channel"]], "meas (qat.hardware.defaultgatesspecification attribute)": [[188, "qat.hardware.DefaultGatesSpecification.meas"]], "quantum_channels (qat.hardware.defaultgatesspecification attribute)": [[188, "qat.hardware.DefaultGatesSpecification.quantum_channels"]], "state_prep (qat.hardware.defaultgatesspecification attribute)": [[188, "qat.hardware.DefaultGatesSpecification.state_prep"]], "defaulthardwaremodel (class in qat.hardware)": [[189, "qat.hardware.DefaultHardwareModel"]], "gate_noise (qat.hardware.defaulthardwaremodel attribute)": [[189, "qat.hardware.DefaultHardwareModel.gate_noise"]], "gates_specification (qat.hardware.defaulthardwaremodel attribute)": [[189, "qat.hardware.DefaultHardwareModel.gates_specification"]], "idle_noise (qat.hardware.defaulthardwaremodel attribute)": [[189, "qat.hardware.DefaultHardwareModel.idle_noise"]], "jump_operators (qat.hardware.defaulthardwaremodel attribute)": [[189, "qat.hardware.DefaultHardwareModel.jump_operators"]], "params_specification (qat.hardware.defaulthardwaremodel attribute)": [[189, "qat.hardware.DefaultHardwareModel.params_specification"]], "gatesspecification (class in qat.hardware)": [[190, "qat.hardware.GatesSpecification"]], "gate_times (qat.hardware.gatesspecification attribute)": [[190, "qat.hardware.GatesSpecification.gate_times"]], "get_gate_time() (qat.hardware.gatesspecification method)": [[190, "qat.hardware.GatesSpecification.get_gate_time"]], "get_quantum_channel() (qat.hardware.gatesspecification method)": [[190, "qat.hardware.GatesSpecification.get_quantum_channel"]], "meas (qat.hardware.gatesspecification attribute)": [[190, "qat.hardware.GatesSpecification.meas"]], "quantum_channels (qat.hardware.gatesspecification attribute)": [[190, "qat.hardware.GatesSpecification.quantum_channels"]], "state_prep (qat.hardware.gatesspecification attribute)": [[190, "qat.hardware.GatesSpecification.state_prep"]], "hardwaremodel (class in qat.hardware)": [[191, "qat.hardware.HardwareModel"]], "gate_noise (qat.hardware.hardwaremodel attribute)": [[191, "qat.hardware.HardwareModel.gate_noise"]], "gates_specification (qat.hardware.hardwaremodel attribute)": [[191, "qat.hardware.HardwareModel.gates_specification"]], "idle_noise (qat.hardware.hardwaremodel attribute)": [[191, "qat.hardware.HardwareModel.idle_noise"]], "jump_operators (qat.hardware.hardwaremodel attribute)": [[191, "qat.hardware.HardwareModel.jump_operators"]], "params_specification (qat.hardware.hardwaremodel attribute)": [[191, "qat.hardware.HardwareModel.params_specification"]], "make_depolarizing_hardware_model() (in module qat.hardware)": [[192, "qat.hardware.make_depolarizing_hardware_model"]], "qat.lang": [[193, "module-qat.lang"]], "qat.lang.algorithms": [[193, "module-qat.lang.algorithms"]], "abstractgate (class in qat.lang)": [[194, "qat.lang.AbstractGate"]], "set_dag() (qat.lang.abstractgate method)": [[194, "qat.lang.AbstractGate.set_dag"]], "amplification_step() (in module qat.lang.algorithms)": [[195, "qat.lang.algorithms.amplification_step"]], "boolformula (class in qat.lang.aqasm.bits)": [[196, "qat.lang.AQASM.bits.BoolFormula"]], "build_gate() (in module qat.lang)": [[197, "qat.lang.build_gate"]], "cbit (class in qat.lang.aqasm.bits)": [[198, "qat.lang.AQASM.bits.Cbit"]], "cregister (class in qat.lang.aqasm.bits)": [[199, "qat.lang.AQASM.bits.CRegister"]], "gate (class in qat.lang.aqasm.gates)": [[200, "qat.lang.AQASM.gates.Gate"]], "generate_gate_set() (in module qat.lang.aqasm.misc)": [[201, "qat.lang.AQASM.misc.generate_gate_set"]], "grover_diffusion() (in module qat.lang.algorithms.amplification)": [[202, "qat.lang.algorithms.amplification.grover_diffusion"]], "householder() (in module qat.lang.algorithms.amplification)": [[203, "qat.lang.algorithms.amplification.householder"]], "kptree (class in qat.lang.models)": [[204, "qat.lang.models.KPTree"]], "get_routine() (qat.lang.models.kptree method)": [[204, "qat.lang.models.KPTree.get_routine"]], "linker (class in qat.lang.linking)": [[205, "qat.lang.linking.Linker"]], "add_signature() (qat.lang.linking.linker method)": [[205, "qat.lang.linking.Linker.add_signature"]], "clear_gate_set() (qat.lang.linking.linker method)": [[205, "qat.lang.linking.Linker.clear_gate_set"]], "compile() (qat.lang.linking.linker method)": [[205, "qat.lang.linking.Linker.compile"]], "link() (qat.lang.linking.linker method)": [[205, "qat.lang.linking.Linker.link"]], "link_gates() (qat.lang.linking.linker method)": [[205, "qat.lang.linking.Linker.link_gates"]], "link_matrices() (qat.lang.linking.linker method)": [[205, "qat.lang.linking.Linker.link_matrices"]], "set_gate_set() (qat.lang.linking.linker method)": [[205, "qat.lang.linking.Linker.set_gate_set"]], "qat.lang.aqasm.arithmetic": [[206, "module-qat.lang.AQASM.arithmetic"]], "add_const_mod() (in module qat.lang.aqasm.arithmetic)": [[207, "qat.lang.AQASM.arithmetic.add_const_mod"]], "add_mod() (in module qat.lang.aqasm.arithmetic)": [[208, "qat.lang.AQASM.arithmetic.add_mod"]], "modular_exp() (in module qat.lang.aqasm.arithmetic)": [[209, "qat.lang.AQASM.arithmetic.modular_exp"]], "mult_const() (in module qat.lang.aqasm.arithmetic)": [[210, "qat.lang.AQASM.arithmetic.mult_const"]], "mult_const_mod() (in module qat.lang.aqasm.arithmetic)": [[211, "qat.lang.AQASM.arithmetic.mult_const_mod"]], "qat.lang.aqasm.classarith": [[212, "module-qat.lang.AQASM.classarith"]], "add() (in module qat.lang.aqasm.classarith)": [[213, "qat.lang.AQASM.classarith.add"]], "add_const() (in module qat.lang.aqasm.classarith)": [[214, "qat.lang.AQASM.classarith.add_const"]], "cuccaro_add() (in module qat.lang.aqasm.classarith)": [[215, "qat.lang.AQASM.classarith.cuccaro_add"]], "qat.lang.aqasm.qftarith": [[216, "module-qat.lang.AQASM.qftarith"]], "add() (in module qat.lang.aqasm.qftarith)": [[217, "qat.lang.AQASM.qftarith.add"]], "add_const() (in module qat.lang.aqasm.qftarith)": [[218, "qat.lang.AQASM.qftarith.add_const"]], "mult() (in module qat.lang.aqasm.qftarith)": [[219, "qat.lang.AQASM.qftarith.mult"]], "mult_const() (in module qat.lang.aqasm.qftarith)": [[220, "qat.lang.AQASM.qftarith.mult_const"]], "qft() (in module qat.lang.aqasm.qftarith)": [[221, "qat.lang.AQASM.qftarith.QFT"]], "paramgate (class in qat.lang.aqasm.gates)": [[222, "qat.lang.AQASM.gates.ParamGate"]], "bind_variables() (qat.lang.aqasm.gates.paramgate method)": [[222, "qat.lang.AQASM.gates.ParamGate.bind_variables"]], "dag() (qat.lang.aqasm.gates.paramgate method)": [[222, "qat.lang.AQASM.gates.ParamGate.dag"]], "display() (qat.lang.aqasm.gates.paramgate method)": [[222, "qat.lang.AQASM.gates.ParamGate.display"]], "get_variables() (qat.lang.aqasm.gates.paramgate method)": [[222, "qat.lang.AQASM.gates.ParamGate.get_variables"]], "phase_estimation() (in module qat.lang.algorithms)": [[223, "qat.lang.algorithms.phase_estimation"]], "program (class in qat.lang)": [[224, "qat.lang.Program"]], "apply() (qat.lang.program method)": [[224, "qat.lang.Program.apply"]], "calloc() (qat.lang.program method)": [[224, "qat.lang.Program.calloc"]], "cbreak() (qat.lang.program method)": [[224, "qat.lang.Program.cbreak"]], "cc_apply() (qat.lang.program method)": [[224, "qat.lang.Program.cc_apply"]], "comment() (qat.lang.program method)": [[224, "qat.lang.Program.comment"]], "conjugate() (qat.lang.program method)": [[224, "qat.lang.Program.conjugate"]], "display() (qat.lang.program method)": [[224, "qat.lang.Program.display"]], "export() (qat.lang.program method)": [[224, "qat.lang.Program.export"]], "free_ancillae() (qat.lang.program method)": [[224, "qat.lang.Program.free_ancillae"]], "get_free_ancillae() (qat.lang.program method)": [[224, "qat.lang.Program.get_free_ancillae"]], "logic() (qat.lang.program method)": [[224, "qat.lang.Program.logic"]], "measure() (qat.lang.program method)": [[224, "qat.lang.Program.measure"]], "new_var() (qat.lang.program method)": [[224, "qat.lang.Program.new_var"]], "qalloc() (qat.lang.program method)": [[224, "qat.lang.Program.qalloc"]], "reset() (qat.lang.program method)": [[224, "qat.lang.Program.reset"]], "run() (qat.lang.program method)": [[224, "qat.lang.Program.run"]], "to_circ() (qat.lang.program method)": [[224, "qat.lang.Program.to_circ"]], "qarithexp (class in qat.lang.aqasm.qint)": [[225, "qat.lang.AQASM.qint.QArithExp"]], "evaluate() (qat.lang.aqasm.qint.qarithexp method)": [[225, "qat.lang.AQASM.qint.QArithExp.evaluate"]], "qbit (class in qat.lang.aqasm.bits)": [[226, "qat.lang.AQASM.bits.Qbit"]], "qbool (class in qat.lang.aqasm.qbool)": [[227, "qat.lang.AQASM.qbool.QBool"]], "cast() (qat.lang.aqasm.qbool.qbool method)": [[227, "qat.lang.AQASM.qbool.QBool.cast"]], "cast_to() (qat.lang.aqasm.qbool.qbool method)": [[227, "qat.lang.AQASM.qbool.QBool.cast_to"]], "evaluate() (qat.lang.aqasm.qbool.qbool method)": [[227, "qat.lang.AQASM.qbool.QBool.evaluate"]], "phase() (qat.lang.aqasm.qbool.qbool method)": [[227, "qat.lang.AQASM.qbool.QBool.phase"]], "qbits_list() (qat.lang.aqasm.qbool.qbool method)": [[227, "qat.lang.AQASM.qbool.QBool.qbits_list"]], "qboolarray (class in qat.lang.aqasm.qbool)": [[228, "qat.lang.AQASM.qbool.QBoolArray"]], "cast() (qat.lang.aqasm.qbool.qboolarray method)": [[228, "qat.lang.AQASM.qbool.QBoolArray.cast"]], "evaluate() (qat.lang.aqasm.qbool.qboolarray method)": [[228, "qat.lang.AQASM.qbool.QBoolArray.evaluate"]], "qbits_list() (qat.lang.aqasm.qbool.qboolarray method)": [[228, "qat.lang.AQASM.qbool.QBoolArray.qbits_list"]], "qclause (class in qat.lang.aqasm.qbool)": [[229, "qat.lang.AQASM.qbool.QClause"]], "evaluate() (qat.lang.aqasm.qbool.qclause method)": [[229, "qat.lang.AQASM.qbool.QClause.evaluate"]], "phase() (qat.lang.aqasm.qbool.qclause method)": [[229, "qat.lang.AQASM.qbool.QClause.phase"]], "qbits_list() (qat.lang.aqasm.qbool.qclause method)": [[229, "qat.lang.AQASM.qbool.QClause.qbits_list"]], "qcompexp (class in qat.lang.aqasm.qint)": [[230, "qat.lang.AQASM.qint.QCompExp"]], "evaluate() (qat.lang.aqasm.qint.qcompexp method)": [[230, "qat.lang.AQASM.qint.QCompExp.evaluate"]], "phase() (qat.lang.aqasm.qint.qcompexp method)": [[230, "qat.lang.AQASM.qint.QCompExp.phase"]], "qbits_list() (qat.lang.aqasm.qint.qcompexp method)": [[230, "qat.lang.AQASM.qint.QCompExp.qbits_list"]], "qfunc() (in module qat.lang)": [[231, "qat.lang.qfunc"]], "qint (class in qat.lang.aqasm.qint)": [[232, "qat.lang.AQASM.qint.QInt"]], "cast() (qat.lang.aqasm.qint.qint method)": [[232, "qat.lang.AQASM.qint.QInt.cast"]], "evaluate() (qat.lang.aqasm.qint.qint method)": [[232, "qat.lang.AQASM.qint.QInt.evaluate"]], "qbits_list() (qat.lang.aqasm.qint.qint method)": [[232, "qat.lang.AQASM.qint.QInt.qbits_list"]], "set_value() (qat.lang.aqasm.qint.qint method)": [[232, "qat.lang.AQASM.qint.QInt.set_value"]], "qregister (class in qat.lang.aqasm.bits)": [[233, "qat.lang.AQASM.bits.QRegister"]], "qrout() (in module qat.lang)": [[234, "qat.lang.qrout"]], "qroutine (class in qat.lang)": [[235, "qat.lang.QRoutine"]], "apply() (qat.lang.qroutine method)": [[235, "qat.lang.QRoutine.apply"]], "compute() (qat.lang.qroutine method)": [[235, "qat.lang.QRoutine.compute"]], "free_ancillae() (qat.lang.qroutine method)": [[235, "qat.lang.QRoutine.free_ancillae"]], "get_free_ancillae() (qat.lang.qroutine method)": [[235, "qat.lang.QRoutine.get_free_ancillae"]], "new_wires() (qat.lang.qroutine method)": [[235, "qat.lang.QRoutine.new_wires"]], "set_ancillae() (qat.lang.qroutine method)": [[235, "qat.lang.QRoutine.set_ancillae"]], "uncompute() (qat.lang.qroutine method)": [[235, "qat.lang.QRoutine.uncompute"]], "quantum_counting() (in module qat.lang.algorithms)": [[236, "qat.lang.algorithms.quantum_counting"]], "uniform_distribution() (in module qat.lang.algorithms.amplification)": [[237, "qat.lang.algorithms.amplification.uniform_distribution"]], "qat.opt": [[238, "module-qat.opt"]], "ansatzfactory (class in qat.vsolve.ansatz)": [[239, "qat.vsolve.ansatz.AnsatzFactory"]], "qaoa_circuit() (qat.vsolve.ansatz.ansatzfactory static method)": [[239, "qat.vsolve.ansatz.AnsatzFactory.qaoa_circuit"]], "bilp (class in qat.opt)": [[240, "qat.opt.BILP"]], "get_best_parameters() (qat.opt.bilp method)": [[240, "qat.opt.BILP.get_best_parameters"]], "produce_q_and_offset() (in module qat.opt.binary_linear_integer_programming)": [[240, "qat.opt.binary_linear_integer_programming.produce_q_and_offset"]], "circuitgenerator (class in qat.opt.circuit_generator)": [[241, "qat.opt.circuit_generator.CircuitGenerator"]], "get_observable() (qat.opt.circuit_generator.circuitgenerator method)": [[241, "qat.opt.circuit_generator.CircuitGenerator.get_observable"]], "qaoa_ansatz() (qat.opt.circuit_generator.circuitgenerator method)": [[241, "qat.opt.circuit_generator.CircuitGenerator.qaoa_ansatz"]], "clause (class in qat.opt.boolexpr)": [[242, "qat.opt.boolexpr.Clause"]], "and_clause() (qat.opt.boolexpr.clause static method)": [[242, "qat.opt.boolexpr.Clause.and_clause"]], "evaluate() (qat.opt.boolexpr.clause method)": [[242, "qat.opt.boolexpr.Clause.evaluate"]], "get_observable() (qat.opt.boolexpr.clause method)": [[242, "qat.opt.boolexpr.Clause.get_observable"]], "get_variables() (qat.opt.boolexpr.clause method)": [[242, "qat.opt.boolexpr.Clause.get_variables"]], "neg_clause() (qat.opt.boolexpr.clause static method)": [[242, "qat.opt.boolexpr.Clause.neg_clause"]], "or_clause() (qat.opt.boolexpr.clause static method)": [[242, "qat.opt.boolexpr.Clause.or_clause"]], "xor_clause() (qat.opt.boolexpr.clause static method)": [[242, "qat.opt.boolexpr.Clause.xor_clause"]], "combinatorialproblem (class in qat.opt)": [[243, "qat.opt.CombinatorialProblem"]], "add_clause() (qat.opt.combinatorialproblem method)": [[243, "qat.opt.CombinatorialProblem.add_clause"]], "get_observable() (qat.opt.combinatorialproblem method)": [[243, "qat.opt.CombinatorialProblem.get_observable"]], "new_var() (qat.opt.combinatorialproblem method)": [[243, "qat.opt.CombinatorialProblem.new_var"]], "new_vars() (qat.opt.combinatorialproblem method)": [[243, "qat.opt.CombinatorialProblem.new_vars"]], "to_bqm() (qat.opt.combinatorialproblem method)": [[243, "qat.opt.CombinatorialProblem.to_bqm"]], "to_ising() (qat.opt.combinatorialproblem method)": [[243, "qat.opt.CombinatorialProblem.to_ising"]], "to_qubo() (qat.opt.combinatorialproblem method)": [[243, "qat.opt.CombinatorialProblem.to_qubo"]], "graphcolouring (class in qat.opt)": [[244, "qat.opt.GraphColouring"]], "get_best_parameters() (qat.opt.graphcolouring method)": [[244, "qat.opt.GraphColouring.get_best_parameters"]], "parse_result() (qat.opt.graphcolouring method)": [[244, "qat.opt.GraphColouring.parse_result"]], "produce_q_and_offset() (in module qat.opt.graph_colouring)": [[244, "qat.opt.graph_colouring.produce_q_and_offset"]], "graphpartitioning (class in qat.opt)": [[245, "qat.opt.GraphPartitioning"]], "get_best_parameters() (qat.opt.graphpartitioning method)": [[245, "qat.opt.GraphPartitioning.get_best_parameters"]], "parse_result() (qat.opt.graphpartitioning method)": [[245, "qat.opt.GraphPartitioning.parse_result"]], "produce_j_h_and_offset() (in module qat.opt.graph_partitioning)": [[245, "qat.opt.graph_partitioning.produce_j_h_and_offset"]], "ising (class in qat.opt)": [[246, "qat.opt.Ising"]], "dump() (qat.opt.ising method)": [[246, "qat.opt.Ising.dump"]], "from_thrift() (qat.opt.ising class method)": [[246, "qat.opt.Ising.from_thrift"]], "get_best_parameters() (qat.opt.ising method)": [[246, "qat.opt.Ising.get_best_parameters"]], "get_j_h_and_offset() (qat.opt.ising method)": [[246, "qat.opt.Ising.get_j_h_and_offset"]], "get_observable() (qat.opt.ising method)": [[246, "qat.opt.Ising.get_observable"]], "j_coupling_matrix (qat.opt.ising property)": [[246, "qat.opt.Ising.j_coupling_matrix"]], "load() (qat.opt.ising class method)": [[246, "qat.opt.Ising.load"]], "magnetic_field_h (qat.opt.ising property)": [[246, "qat.opt.Ising.magnetic_field_h"]], "to_bqm() (qat.opt.ising method)": [[246, "qat.opt.Ising.to_bqm"]], "to_combinatorial_problem() (qat.opt.ising method)": [[246, "qat.opt.Ising.to_combinatorial_problem"]], "to_job() (qat.opt.ising method)": [[246, "qat.opt.Ising.to_job"]], "to_qubo() (qat.opt.ising method)": [[246, "qat.opt.Ising.to_qubo"]], "kclique (class in qat.opt)": [[247, "qat.opt.KClique"]], "get_best_parameters() (qat.opt.kclique method)": [[247, "qat.opt.KClique.get_best_parameters"]], "parse_result() (qat.opt.kclique method)": [[247, "qat.opt.KClique.parse_result"]], "produce_q_and_offset() (in module qat.opt.k_clique)": [[247, "qat.opt.k_clique.produce_q_and_offset"]], "maxcut (class in qat.opt)": [[248, "qat.opt.MaxCut"]], "get_best_parameters() (qat.opt.maxcut method)": [[248, "qat.opt.MaxCut.get_best_parameters"]], "parse_result() (qat.opt.maxcut method)": [[248, "qat.opt.MaxCut.parse_result"]], "produce_j_h_and_offset() (in module qat.opt.max_cut)": [[248, "qat.opt.max_cut.produce_j_h_and_offset"]], "mixingfactory (class in qat.opt)": [[249, "qat.opt.MixingFactory"]], "bit_flip() (qat.opt.mixingfactory static method)": [[249, "qat.opt.MixingFactory.bit_flip"]], "bit_move() (qat.opt.mixingfactory static method)": [[249, "qat.opt.MixingFactory.bit_move"]], "qat.opt.mixing_factory": [[250, "module-qat.opt.mixing_factory"]], "independentannealing (class in qat.opt.mixing_factory)": [[251, "qat.opt.mixing_factory.IndependentAnnealing"]], "inject_initial_state() (qat.opt.mixing_factory.independentannealing method)": [[251, "qat.opt.mixing_factory.IndependentAnnealing.inject_initial_state"]], "initialstatebuilder (class in qat.opt.mixing_factory)": [[252, "qat.opt.mixing_factory.InitialStateBuilder"]], "inject_initial_state() (qat.opt.mixing_factory.initialstatebuilder method)": [[252, "qat.opt.mixing_factory.InitialStateBuilder.inject_initial_state"]], "simpleinitialstate (class in qat.opt.mixing_factory)": [[253, "qat.opt.mixing_factory.SimpleInitialState"]], "inject_initial_state() (qat.opt.mixing_factory.simpleinitialstate method)": [[253, "qat.opt.mixing_factory.SimpleInitialState.inject_initial_state"]], "qat.opt.results": [[254, "module-qat.opt.results"]], "combinatorialresult (class in qat.opt.results)": [[255, "qat.opt.results.CombinatorialResult"]], "graphpartitioningresult (class in qat.opt.results)": [[256, "qat.opt.results.GraphPartitioningResult"]], "display() (qat.opt.results.graphpartitioningresult method)": [[256, "qat.opt.results.GraphPartitioningResult.display"]], "kcliqueresult (class in qat.opt.results)": [[257, "qat.opt.results.KCliqueResult"]], "clique (qat.opt.results.kcliqueresult property)": [[257, "qat.opt.results.KCliqueResult.clique"]], "vertexcoverresult (class in qat.opt.results)": [[258, "qat.opt.results.VertexCoverResult"]], "cover (qat.opt.results.vertexcoverresult property)": [[258, "qat.opt.results.VertexCoverResult.cover"]], "numberpartitioning (class in qat.opt)": [[259, "qat.opt.NumberPartitioning"]], "get_best_parameters() (qat.opt.numberpartitioning method)": [[259, "qat.opt.NumberPartitioning.get_best_parameters"]], "produce_j_h_and_offset() (in module qat.opt.number_partitioning)": [[259, "qat.opt.number_partitioning.produce_j_h_and_offset"]], "qubo (class in qat.opt)": [[260, "qat.opt.QUBO"]], "get_best_parameters() (qat.opt.qubo method)": [[260, "qat.opt.QUBO.get_best_parameters"]], "get_observable() (qat.opt.qubo method)": [[260, "qat.opt.QUBO.get_observable"]], "get_q_and_offset() (qat.opt.qubo method)": [[260, "qat.opt.QUBO.get_q_and_offset"]], "q_matrix (qat.opt.qubo property)": [[260, "qat.opt.QUBO.q_matrix"]], "to_bqm() (qat.opt.qubo method)": [[260, "qat.opt.QUBO.to_bqm"]], "to_combinatorial_problem() (qat.opt.qubo method)": [[260, "qat.opt.QUBO.to_combinatorial_problem"]], "to_ising() (qat.opt.qubo method)": [[260, "qat.opt.QUBO.to_ising"]], "to_job() (qat.opt.qubo method)": [[260, "qat.opt.QUBO.to_job"]], "schedulegenerator (class in qat.opt.schedule_generator)": [[261, "qat.opt.schedule_generator.ScheduleGenerator"]], "annealing_job() (qat.opt.schedule_generator.schedulegenerator method)": [[261, "qat.opt.schedule_generator.ScheduleGenerator.annealing_job"]], "get_observable() (qat.opt.schedule_generator.schedulegenerator method)": [[261, "qat.opt.schedule_generator.ScheduleGenerator.get_observable"]], "var (class in qat.opt.boolexpr)": [[262, "qat.opt.boolexpr.Var"]], "evaluate() (qat.opt.boolexpr.var method)": [[262, "qat.opt.boolexpr.Var.evaluate"]], "get_observable() (qat.opt.boolexpr.var method)": [[262, "qat.opt.boolexpr.Var.get_observable"]], "get_variables() (qat.opt.boolexpr.var method)": [[262, "qat.opt.boolexpr.Var.get_variables"]], "index (qat.opt.boolexpr.var attribute)": [[262, "qat.opt.boolexpr.Var.index"]], "vertexcover (class in qat.opt)": [[263, "qat.opt.VertexCover"]], "get_best_parameters() (qat.opt.vertexcover method)": [[263, "qat.opt.VertexCover.get_best_parameters"]], "parse_result() (qat.opt.vertexcover method)": [[263, "qat.opt.VertexCover.parse_result"]], "produce_q_and_offset() (in module qat.opt.vertex_cover)": [[263, "qat.opt.vertex_cover.produce_q_and_offset"]], "qat.plugins": [[264, "module-qat.plugins"]], "abstractplugin (class in qat.plugins)": [[265, "qat.plugins.AbstractPlugin"]], "compile() (qat.plugins.abstractplugin method)": [[265, "qat.plugins.AbstractPlugin.compile"]], "do_post_processing() (qat.plugins.abstractplugin method)": [[265, "qat.plugins.AbstractPlugin.do_post_processing"]], "post_process() (qat.plugins.abstractplugin method)": [[265, "qat.plugins.AbstractPlugin.post_process"]], "serve() (qat.plugins.abstractplugin method)": [[265, "qat.plugins.AbstractPlugin.serve"]], "adaptvqeplugin (class in qat.plugins)": [[266, "qat.plugins.AdaptVQEPlugin"]], "compile() (qat.plugins.adaptvqeplugin method)": [[266, "qat.plugins.AdaptVQEPlugin.compile"]], "circuitinliner (class in qat.plugins)": [[267, "qat.plugins.CircuitInliner"]], "compile() (qat.plugins.circuitinliner method)": [[267, "qat.plugins.CircuitInliner.compile"]], "costfunctionplugin (class in qat.plugins)": [[268, "qat.plugins.CostFunctionPlugin"]], "compile() (qat.plugins.costfunctionplugin method)": [[268, "qat.plugins.CostFunctionPlugin.compile"]], "display (class in qat.plugins)": [[269, "qat.plugins.Display"]], "compile() (qat.plugins.display method)": [[269, "qat.plugins.Display.compile"]], "gradientdescentoptimizer (class in qat.plugins)": [[270, "qat.plugins.GradientDescentOptimizer"]], "compile() (qat.plugins.gradientdescentoptimizer method)": [[270, "qat.plugins.GradientDescentOptimizer.compile"]], "junction (class in qat.plugins)": [[271, "qat.plugins.Junction"]], "execute() (qat.plugins.junction method)": [[271, "qat.plugins.Junction.execute"]], "run() (qat.plugins.junction method)": [[271, "qat.plugins.Junction.run"]], "multiplelaunchesanalyzer (class in qat.plugins)": [[272, "qat.plugins.MultipleLaunchesAnalyzer"]], "compile() (qat.plugins.multiplelaunchesanalyzer method)": [[272, "qat.plugins.MultipleLaunchesAnalyzer.compile"]], "observablesplitter (class in qat.plugins)": [[273, "qat.plugins.ObservableSplitter"]], "compile() (qat.plugins.observablesplitter method)": [[273, "qat.plugins.ObservableSplitter.compile"]], "optimizer (class in qat.plugins)": [[274, "qat.plugins.Optimizer"]], "compile() (qat.plugins.optimizer method)": [[274, "qat.plugins.Optimizer.compile"]], "psominimizeplugin (class in qat.plugins)": [[275, "qat.plugins.PSOMinimizePlugin"]], "compile() (qat.plugins.psominimizeplugin method)": [[275, "qat.plugins.PSOMinimizePlugin.compile"]], "quameleonplugin (class in qat.plugins)": [[276, "qat.plugins.QuameleonPlugin"]], "compile() (qat.plugins.quameleonplugin method)": [[276, "qat.plugins.QuameleonPlugin.compile"]], "remoteplugin (class in qat.plugins)": [[277, "qat.plugins.RemotePlugin"]], "compile() (qat.plugins.remoteplugin method)": [[277, "qat.plugins.RemotePlugin.compile"]], "scipyminimizeplugin (class in qat.plugins)": [[278, "qat.plugins.ScipyMinimizePlugin"]], "compile() (qat.plugins.scipyminimizeplugin method)": [[278, "qat.plugins.ScipyMinimizePlugin.compile"]], "set_options() (qat.plugins.scipyminimizeplugin method)": [[278, "qat.plugins.ScipyMinimizePlugin.set_options"]], "seqoptim (class in qat.plugins)": [[279, "qat.plugins.SeqOptim"]], "compile() (qat.plugins.seqoptim method)": [[279, "qat.plugins.SeqOptim.compile"]], "spsaminimizeplugin (class in qat.plugins)": [[280, "qat.plugins.SPSAMinimizePlugin"]], "compile() (qat.plugins.spsaminimizeplugin method)": [[280, "qat.plugins.SPSAMinimizePlugin.compile"]], "transformobservable (class in qat.plugins)": [[281, "qat.plugins.TransformObservable"]], "compile() (qat.plugins.transformobservable method)": [[281, "qat.plugins.TransformObservable.compile"]], "zeronoiseextrapolator (class in qat.plugins)": [[282, "qat.plugins.ZeroNoiseExtrapolator"]], "compile() (qat.plugins.zeronoiseextrapolator method)": [[282, "qat.plugins.ZeroNoiseExtrapolator.compile"]], "qat.qpus": [[283, "module-qat.qpus"]], "clinalg (class in qat.qpus)": [[284, "qat.qpus.CLinalg"]], "submit() (qat.qpus.clinalg method)": [[284, "qat.qpus.CLinalg.submit"]], "pylinalg (class in qat.qpus)": [[285, "qat.qpus.PyLinalg"]], "serve() (qat.qpus.pylinalg method)": [[285, "qat.qpus.PyLinalg.serve"]], "submit() (qat.qpus.pylinalg method)": [[285, "qat.qpus.PyLinalg.submit"]], "submit_job() (qat.qpus.pylinalg method)": [[285, "qat.qpus.PyLinalg.submit_job"]], "simulatedannealing (class in qat.qpus)": [[286, "qat.qpus.SimulatedAnnealing"]], "extract_j_and_h_from_obs() (in module qat.simulated_annealing.service)": [[286, "qat.simulated_annealing.service.extract_j_and_h_from_obs"]], "submit_job() (qat.qpus.simulatedannealing method)": [[286, "qat.qpus.SimulatedAnnealing.submit_job"]], "classicalqpu (class in qat.qpus)": [[287, "qat.qpus.ClassicalQPU"]], "get_current_qpu() (in module qat.qpus)": [[288, "qat.qpus.get_current_qpu"]], "get_default_qpu() (in module qat.qpus)": [[289, "qat.qpus.get_default_qpu"]], "qpuhandler (class in qat.qpus)": [[290, "qat.qpus.QPUHandler"]], "apply_resource_consumption_limits() (qat.qpus.qpuhandler method)": [[290, "qat.qpus.QPUHandler.apply_resource_consumption_limits"]], "estimate_resources_for_batch() (qat.qpus.qpuhandler method)": [[290, "qat.qpus.QPUHandler.estimate_resources_for_batch"]], "get_specs() (qat.qpus.qpuhandler method)": [[290, "qat.qpus.QPUHandler.get_specs"]], "serve() (qat.qpus.qpuhandler method)": [[290, "qat.qpus.QPUHandler.serve"]], "submit() (qat.qpus.qpuhandler method)": [[290, "qat.qpus.QPUHandler.submit"]], "submit_job() (qat.qpus.qpuhandler method)": [[290, "qat.qpus.QPUHandler.submit_job"]], "remoteqpu (class in qat.qpus)": [[291, "qat.qpus.RemoteQPU"]], "qat.quops": [[292, "module-qat.quops"]], "qat.quops.metrics": [[292, "module-qat.quops.metrics"]], "are_equal_up_to_phase() (in module qat.quops.math_util)": [[293, "qat.quops.math_util.are_equal_up_to_phase"]], "channelrepresentations (class in qat.quops)": [[294, "qat.quops.ChannelRepresentations"]], "convert_density_mat_to_pauli_vec() (in module qat.quops.math_util)": [[295, "qat.quops.math_util.convert_density_mat_to_pauli_vec"]], "convert_pauli_vec_to_density_mat() (in module qat.quops.math_util)": [[296, "qat.quops.math_util.convert_pauli_vec_to_density_mat"]], "get_average_process_fidelity() (in module qat.quops.metrics)": [[297, "qat.quops.metrics.get_average_process_fidelity"]], "get_diamond_norm() (in module qat.quops.metrics)": [[298, "qat.quops.metrics.get_diamond_norm"]], "get_entanglement_process_fidelity() (in module qat.quops.metrics)": [[299, "qat.quops.metrics.get_entanglement_process_fidelity"]], "get_process_distance() (in module qat.quops.metrics)": [[300, "qat.quops.metrics.get_process_distance"]], "get_state_fidelity() (in module qat.quops.metrics)": [[301, "qat.quops.metrics.get_state_fidelity"]], "get_trace_distance() (in module qat.quops.metrics)": [[302, "qat.quops.metrics.get_trace_distance"]], "is_completely_positive() (in module qat.quops)": [[303, "qat.quops.is_completely_positive"]], "is_trace_preserving() (in module qat.quops)": [[304, "qat.quops.is_trace_preserving"]], "is_trace_reducing() (in module qat.quops)": [[305, "qat.quops.is_trace_reducing"]], "is_unital() (in module qat.quops)": [[306, "qat.quops.is_unital"]], "make_avg_fid_equiv_depol_channel() (in module qat.quops)": [[307, "qat.quops.make_avg_fid_equiv_depol_channel"]], "make_depolarizing_channel() (in module qat.quops)": [[308, "qat.quops.make_depolarizing_channel"]], "make_generalized_amplitude_damping() (in module qat.quops)": [[309, "qat.quops.make_generalized_amplitude_damping"]], "make_pauli_matrix_basis() (in module qat.quops.math_util)": [[310, "qat.quops.math_util.make_pauli_matrix_basis"]], "make_standard_matrix_basis() (in module qat.quops.math_util)": [[311, "qat.quops.math_util.make_standard_matrix_basis"]], "make_standard_vector_basis() (in module qat.quops.math_util)": [[312, "qat.quops.math_util.make_standard_vector_basis"]], "multikron() (in module qat.quops.math_util)": [[313, "qat.quops.math_util.multikron"]], "parametricamplitudedamping (class in qat.quops)": [[314, "qat.quops.ParametricAmplitudeDamping"]], "t_1 (qat.quops.parametricamplitudedamping attribute)": [[314, "qat.quops.ParametricAmplitudeDamping.T_1"]], "name (qat.quops.parametricamplitudedamping attribute)": [[314, "qat.quops.ParametricAmplitudeDamping.name"]], "prob() (qat.quops.parametricamplitudedamping method)": [[314, "qat.quops.ParametricAmplitudeDamping.prob"]], "parametricgatenoise (class in qat.quops)": [[315, "qat.quops.ParametricGateNoise"]], "parametricpuredephasing (class in qat.quops)": [[316, "qat.quops.ParametricPureDephasing"]], "t_phi (qat.quops.parametricpuredephasing attribute)": [[316, "qat.quops.ParametricPureDephasing.T_phi"]], "name (qat.quops.parametricpuredephasing attribute)": [[316, "qat.quops.ParametricPureDephasing.name"]], "prob() (qat.quops.parametricpuredephasing method)": [[316, "qat.quops.ParametricPureDephasing.prob"]], "ptilde() (qat.quops.parametricpuredephasing method)": [[316, "qat.quops.ParametricPureDephasing.ptilde"]], "parametricquantumchannel (class in qat.quops)": [[317, "qat.quops.ParametricQuantumChannel"]], "partial_trace() (in module qat.quops.math_util)": [[318, "qat.quops.math_util.partial_trace"]], "quantumchannel (class in qat.quops)": [[319, "qat.quops.QuantumChannel"]], "quantumchannelchi (class in qat.quops)": [[320, "qat.quops.QuantumChannelChi"]], "apply_to() (qat.quops.quantumchannelchi method)": [[320, "qat.quops.QuantumChannelChi.apply_to"]], "arity (qat.quops.quantumchannelchi attribute)": [[320, "qat.quops.QuantumChannelChi.arity"]], "matrix (qat.quops.quantumchannelchi attribute)": [[320, "qat.quops.QuantumChannelChi.matrix"]], "matrix_basis (qat.quops.quantumchannelchi attribute)": [[320, "qat.quops.QuantumChannelChi.matrix_basis"]], "name (qat.quops.quantumchannelchi attribute)": [[320, "qat.quops.QuantumChannelChi.name"]], "to_kraus() (qat.quops.quantumchannelchi method)": [[320, "qat.quops.QuantumChannelChi.to_kraus"]], "quantumchannelchoi (class in qat.quops)": [[321, "qat.quops.QuantumChannelChoi"]], "arity (qat.quops.quantumchannelchoi attribute)": [[321, "qat.quops.QuantumChannelChoi.arity"]], "matrix (qat.quops.quantumchannelchoi attribute)": [[321, "qat.quops.QuantumChannelChoi.matrix"]], "name (qat.quops.quantumchannelchoi attribute)": [[321, "qat.quops.QuantumChannelChoi.name"]], "to_kraus() (qat.quops.quantumchannelchoi method)": [[321, "qat.quops.QuantumChannelChoi.to_kraus"]], "to_ptm() (qat.quops.quantumchannelchoi method)": [[321, "qat.quops.QuantumChannelChoi.to_ptm"]], "quantumchannelkraus (class in qat.quops)": [[322, "qat.quops.QuantumChannelKraus"]], "apply_to() (qat.quops.quantumchannelkraus method)": [[322, "qat.quops.QuantumChannelKraus.apply_to"]], "apply_to_vector() (qat.quops.quantumchannelkraus method)": [[322, "qat.quops.QuantumChannelKraus.apply_to_vector"]], "kraus_operators (qat.quops.quantumchannelkraus attribute)": [[322, "qat.quops.QuantumChannelKraus.kraus_operators"]], "kraus_rank (qat.quops.quantumchannelkraus attribute)": [[322, "qat.quops.QuantumChannelKraus.kraus_rank"]], "kraus_rank() (qat.quops.quantumchannelkraus method)": [[322, "id0"]], "name (qat.quops.quantumchannelkraus attribute)": [[322, "qat.quops.QuantumChannelKraus.name"]], "to_chi() (qat.quops.quantumchannelkraus method)": [[322, "qat.quops.QuantumChannelKraus.to_chi"]], "to_choi() (qat.quops.quantumchannelkraus method)": [[322, "qat.quops.QuantumChannelKraus.to_choi"]], "to_ptm() (qat.quops.quantumchannelkraus method)": [[322, "qat.quops.QuantumChannelKraus.to_ptm"]], "quantumchannelptm (class in qat.quops)": [[323, "qat.quops.QuantumChannelPTM"]], "apply_to() (qat.quops.quantumchannelptm method)": [[323, "qat.quops.QuantumChannelPTM.apply_to"]], "arity (qat.quops.quantumchannelptm attribute)": [[323, "qat.quops.QuantumChannelPTM.arity"]], "matrix (qat.quops.quantumchannelptm attribute)": [[323, "qat.quops.QuantumChannelPTM.matrix"]], "matrix (qat.quops.quantumchannelptm property)": [[323, "id0"]], "name (qat.quops.quantumchannelptm attribute)": [[323, "qat.quops.QuantumChannelPTM.name"]], "ptm (qat.quops.quantumchannelptm property)": [[323, "qat.quops.QuantumChannelPTM.ptm"]], "tensor (qat.quops.quantumchannelptm property)": [[323, "qat.quops.QuantumChannelPTM.tensor"]], "to_choi() (qat.quops.quantumchannelptm method)": [[323, "qat.quops.QuantumChannelPTM.to_choi"]], "to_kraus() (qat.quops.quantumchannelptm method)": [[323, "qat.quops.QuantumChannelPTM.to_kraus"]]}})