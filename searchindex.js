Search.setIndex({"docnames": ["01_getting_started", "01_getting_started/02_write", "01_getting_started/03_execute", "01_getting_started/04_variational", "01_getting_started/:myqlm:01_install", "01_getting_started/:myqlm:license", "01_getting_started/:myqlm:macos", "01_getting_started/compatibility_matrix", "02_user_guide", "02_user_guide/01_write", "02_user_guide/01_write/01_digital_circuit", "02_user_guide/01_write/01_digital_circuit/01_quantum_gates", "02_user_guide/01_write/01_digital_circuit/02_variational", "02_user_guide/01_write/01_digital_circuit/03_program", "02_user_guide/01_write/01_digital_circuit/04_routines", "02_user_guide/01_write/01_digital_circuit/04_routines/01_naming_routines", "02_user_guide/01_write/01_digital_circuit/04_routines/02_ancillae", "02_user_guide/01_write/01_digital_circuit/04_routines/03_oracles", "02_user_guide/01_write/01_digital_circuit/05_aqasm", "02_user_guide/01_write/02_analog_schedule", "02_user_guide/01_write/02_analog_schedule/01_building_schedules", "02_user_guide/01_write/02_analog_schedule/02_manip_schedules", "02_user_guide/01_write/02_analog_schedule/03_an_jobs", "02_user_guide/01_write/03_annealing_problems", "02_user_guide/01_write/03_annealing_problems/01_ising", "02_user_guide/01_write/03_annealing_problems/02_qubo", "02_user_guide/01_write/03_annealing_problems/03_comb_prob", "02_user_guide/01_write/03_observable", "02_user_guide/02_execute", "02_user_guide/02_execute/01_job", "02_user_guide/02_execute/01_job/01_sample_job", "02_user_guide/02_execute/01_job/02_observable_job", "02_user_guide/02_execute/01_job/03_automated_batch_generation", "02_user_guide/02_execute/02_result", "02_user_guide/02_execute/03_qpu", "02_user_guide/02_execute/03_qpu/03_annealing", "02_user_guide/02_execute/03_qpu/04_custom_qpu", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/clinalg", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/pylinalg", "02_user_guide/02_execute/04_plugin", "02_user_guide/02_execute/04_plugin/01_custom_plugin", "02_user_guide/02_execute/04_plugin/02_custom_junction", "02_user_guide/02_execute/04_plugin/03_hardware_specs", "02_user_guide/02_execute/05_variational", "04_api_reference", "04_api_reference/module_qat", "04_api_reference/module_qat/:myqlm:module_interop", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/cirq_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/qlm_to_cirq", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm/oqasmparser", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmengine", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmparser", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquil_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquilqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/qlm_to_pyquil", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/asyncbackendtoqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/backendtoqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskit_to_qlm", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitjob", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitruntimeqpu", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qlm_to_qiskit", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qputobackend", "04_api_reference/module_qat/:myqlm:module_pylinalg", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/mat2nparray", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/measure", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/project", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/raise_break", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/reset", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/simulate", "04_api_reference/module_qat/module_comm", "04_api_reference/module_qat/module_comm/module_datamodel", "04_api_reference/module_qat/module_comm/module_datamodel/gatedefinition", "04_api_reference/module_qat/module_comm/module_datamodel/op", "04_api_reference/module_qat/module_comm/module_exceptions", "04_api_reference/module_qat/module_comm/module_exceptions/errortype", "04_api_reference/module_qat/module_comm/module_exceptions/pluginexception", "04_api_reference/module_qat/module_comm/module_exceptions/qpuexception", "04_api_reference/module_qat/module_comm/module_resource", "04_api_reference/module_qat/module_comm/module_resource/allocationmodel", "04_api_reference/module_qat/module_comm/module_resource/device", "04_api_reference/module_qat/module_comm/module_resource/resourcemodel", "04_api_reference/module_qat/module_comm/module_shared", "04_api_reference/module_qat/module_comm/module_shared/intermediatemeasurement", "04_api_reference/module_qat/module_comm/module_shared/processingtype", "04_api_reference/module_qat/module_core", "04_api_reference/module_qat/module_core/aggregate_data", "04_api_reference/module_qat/module_core/assert_plugin", "04_api_reference/module_qat/module_core/assert_qpu", "04_api_reference/module_qat/module_core/batch", "04_api_reference/module_qat/module_core/batchresult", "04_api_reference/module_qat/module_core/circuit", "04_api_reference/module_qat/module_core/display", "04_api_reference/module_qat/module_core/evaluate", "04_api_reference/module_qat/module_core/hardwarespecs", "04_api_reference/module_qat/module_core/job", "04_api_reference/module_qat/module_core/module_application", "04_api_reference/module_qat/module_core/module_application/application", "04_api_reference/module_qat/module_core/module_application/remoteapplication", "04_api_reference/module_qat/module_core/module_circuit_builder", "04_api_reference/module_qat/module_core/module_circuit_builder/default_gate_set", "04_api_reference/module_qat/module_core/module_circuit_builder/get_param_generator", "04_api_reference/module_qat/module_core/module_circuit_builder/get_predef_generator", "04_api_reference/module_qat/module_core/module_circuit_builder/variablenamenotavailable", "04_api_reference/module_qat/module_core/module_gate_set", "04_api_reference/module_qat/module_core/module_gate_set/gateset", "04_api_reference/module_qat/module_core/module_gate_set/gatesignature", "04_api_reference/module_qat/module_core/module_gate_set/gatesyntaxredefinition", "04_api_reference/module_qat/module_core/module_qpu", "04_api_reference/module_qat/module_core/module_qpu/commonqpu", "04_api_reference/module_qat/module_core/module_spins", "04_api_reference/module_qat/module_core/module_spins/integer_to_spins", "04_api_reference/module_qat/module_core/module_spins/spins_to_integer", "04_api_reference/module_qat/module_core/module_variables", "04_api_reference/module_qat/module_core/module_variables/arithexpression", "04_api_reference/module_qat/module_core/module_variables/symbol", "04_api_reference/module_qat/module_core/observable", "04_api_reference/module_qat/module_core/parameter", "04_api_reference/module_qat/module_core/plot_in_notebook", "04_api_reference/module_qat/module_core/result", "04_api_reference/module_qat/module_core/sample", "04_api_reference/module_qat/module_core/schedule", "04_api_reference/module_qat/module_core/state", "04_api_reference/module_qat/module_core/term", "04_api_reference/module_qat/module_core/topology", "04_api_reference/module_qat/module_core/topologytype", "04_api_reference/module_qat/module_core/variable", "04_api_reference/module_qat/module_devices", "04_api_reference/module_qat/module_devices/alltoall", "04_api_reference/module_qat/module_devices/google_sycamore", "04_api_reference/module_qat/module_devices/griddevice", "04_api_reference/module_qat/module_devices/ibm_burlington", "04_api_reference/module_qat/module_devices/ibm_johannesburg", "04_api_reference/module_qat/module_devices/ibm_melbourne", "04_api_reference/module_qat/module_devices/ibm_rueschlikon", "04_api_reference/module_qat/module_devices/ibm_singapore", "04_api_reference/module_qat/module_devices/ibm_tokyo", "04_api_reference/module_qat/module_devices/ibm_yorktown", "04_api_reference/module_qat/module_devices/linedevice", "04_api_reference/module_qat/module_devices/rigetti_agave", "04_api_reference/module_qat/module_devices/rigetti_aspen", "04_api_reference/module_qat/module_devices/squaregriddevice", "04_api_reference/module_qat/module_devices/zuchongzhi", "04_api_reference/module_qat/module_fermion", "04_api_reference/module_qat/module_fermion/apply_quantum_subspace_expansion", "04_api_reference/module_qat/module_fermion/compute_active_space_integrals", "04_api_reference/module_qat/module_fermion/construct_ucc_ansatz", "04_api_reference/module_qat/module_fermion/convert_to_h_integrals", "04_api_reference/module_qat/module_fermion/electronicstructurehamiltonian", "04_api_reference/module_qat/module_fermion/fermionichamiltonian", "04_api_reference/module_qat/module_fermion/get_cluster_ops", "04_api_reference/module_qat/module_fermion/get_hf_ket", "04_api_reference/module_qat/module_fermion/guess_init_params", "04_api_reference/module_qat/module_fermion/make_anderson_model", "04_api_reference/module_qat/module_fermion/make_compressed_ldca_circ", "04_api_reference/module_qat/module_fermion/make_embedded_model", "04_api_reference/module_qat/module_fermion/make_general_hwe_circ", "04_api_reference/module_qat/module_fermion/make_hubbard_model", "04_api_reference/module_qat/module_fermion/make_ldca_circ", "04_api_reference/module_qat/module_fermion/make_mr_circ", "04_api_reference/module_qat/module_fermion/make_mrep_circ", "04_api_reference/module_qat/module_fermion/make_shallow_circ", "04_api_reference/module_qat/module_fermion/make_trotterisation_routine", "04_api_reference/module_qat/module_fermion/molecularhamiltonian", "04_api_reference/module_qat/module_fermion/moleculeinfo", "04_api_reference/module_qat/module_fermion/perform_phase_estimation", "04_api_reference/module_qat/module_fermion/perform_pyscf_computation", "04_api_reference/module_qat/module_fermion/select_active_orbitals", "04_api_reference/module_qat/module_fermion/spinhamiltonian", "04_api_reference/module_qat/module_fermion/transform_integrals_to_new_basis", "04_api_reference/module_qat/module_fermion/transform_to_bk_basis", "04_api_reference/module_qat/module_fermion/transform_to_jw_basis", "04_api_reference/module_qat/module_fermion/transform_to_parity_basis", "04_api_reference/module_qat/module_generators", "04_api_reference/module_qat/module_generators/abstractgenerator", "04_api_reference/module_qat/module_generators/combinatorialoptimizergenerator", "04_api_reference/module_qat/module_generators/graphcolouringgenerator", "04_api_reference/module_qat/module_generators/graphpartitioninggenerator", "04_api_reference/module_qat/module_generators/kcliquegenerator", "04_api_reference/module_qat/module_generators/maxcutgenerator", "04_api_reference/module_qat/module_generators/remotebatchgenerator", "04_api_reference/module_qat/module_generators/vertexcovergenerator", "04_api_reference/module_qat/module_hardware", "04_api_reference/module_qat/module_hardware/defaultgatesspecification", "04_api_reference/module_qat/module_hardware/defaulthardwaremodel", "04_api_reference/module_qat/module_hardware/gatesspecification", "04_api_reference/module_qat/module_hardware/hardwaremodel", "04_api_reference/module_qat/module_hardware/make_depolarizing_hardware_model", "04_api_reference/module_qat/module_lang", "04_api_reference/module_qat/module_lang/abstractgate", "04_api_reference/module_qat/module_lang/amplification_step", "04_api_reference/module_qat/module_lang/boolformula", "04_api_reference/module_qat/module_lang/build_gate", "04_api_reference/module_qat/module_lang/cbit", "04_api_reference/module_qat/module_lang/cregister", "04_api_reference/module_qat/module_lang/gate", "04_api_reference/module_qat/module_lang/generate_gate_set", "04_api_reference/module_qat/module_lang/grover_diffusion", "04_api_reference/module_qat/module_lang/householder", "04_api_reference/module_qat/module_lang/kptree", "04_api_reference/module_qat/module_lang/linker", "04_api_reference/module_qat/module_lang/module_arithmetic", "04_api_reference/module_qat/module_lang/module_arithmetic/add_const_mod", "04_api_reference/module_qat/module_lang/module_arithmetic/add_mod", "04_api_reference/module_qat/module_lang/module_arithmetic/modular_exp", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const_mod", "04_api_reference/module_qat/module_lang/module_classarith", "04_api_reference/module_qat/module_lang/module_classarith/add", "04_api_reference/module_qat/module_lang/module_classarith/add_const", "04_api_reference/module_qat/module_lang/module_classarith/cuccaro_add", "04_api_reference/module_qat/module_lang/module_qftarith", "04_api_reference/module_qat/module_lang/module_qftarith/add", "04_api_reference/module_qat/module_lang/module_qftarith/add_const", "04_api_reference/module_qat/module_lang/module_qftarith/mult", "04_api_reference/module_qat/module_lang/module_qftarith/mult_const", "04_api_reference/module_qat/module_lang/module_qftarith/qft", "04_api_reference/module_qat/module_lang/paramgate", "04_api_reference/module_qat/module_lang/phase_estimation", "04_api_reference/module_qat/module_lang/program", "04_api_reference/module_qat/module_lang/qarithexp", "04_api_reference/module_qat/module_lang/qbit", "04_api_reference/module_qat/module_lang/qbool", "04_api_reference/module_qat/module_lang/qboolarray", "04_api_reference/module_qat/module_lang/qclause", "04_api_reference/module_qat/module_lang/qcompexp", "04_api_reference/module_qat/module_lang/qfunc", "04_api_reference/module_qat/module_lang/qint", "04_api_reference/module_qat/module_lang/qregister", "04_api_reference/module_qat/module_lang/qrout", "04_api_reference/module_qat/module_lang/qroutine", "04_api_reference/module_qat/module_lang/quantum_counting", "04_api_reference/module_qat/module_lang/uniform_distribution", "04_api_reference/module_qat/module_opt", "04_api_reference/module_qat/module_opt/ansatzfactory", "04_api_reference/module_qat/module_opt/bilp", "04_api_reference/module_qat/module_opt/circuitgenerator", "04_api_reference/module_qat/module_opt/clause", "04_api_reference/module_qat/module_opt/combinatorialproblem", "04_api_reference/module_qat/module_opt/graphcolouring", "04_api_reference/module_qat/module_opt/graphpartitioning", "04_api_reference/module_qat/module_opt/ising", "04_api_reference/module_qat/module_opt/kclique", "04_api_reference/module_qat/module_opt/maxcut", "04_api_reference/module_qat/module_opt/mixingfactory", "04_api_reference/module_qat/module_opt/module_mixing_factory", "04_api_reference/module_qat/module_opt/module_mixing_factory/independentannealing", "04_api_reference/module_qat/module_opt/module_mixing_factory/initialstatebuilder", "04_api_reference/module_qat/module_opt/module_mixing_factory/simpleinitialstate", "04_api_reference/module_qat/module_opt/module_results", "04_api_reference/module_qat/module_opt/module_results/combinatorialresult", "04_api_reference/module_qat/module_opt/module_results/graphpartitioningresult", "04_api_reference/module_qat/module_opt/module_results/kcliqueresult", "04_api_reference/module_qat/module_opt/module_results/vertexcoverresult", "04_api_reference/module_qat/module_opt/numberpartitioning", "04_api_reference/module_qat/module_opt/qubo", "04_api_reference/module_qat/module_opt/schedulegenerator", "04_api_reference/module_qat/module_opt/var", "04_api_reference/module_qat/module_opt/vertexcover", "04_api_reference/module_qat/module_plugins", "04_api_reference/module_qat/module_plugins/abstractplugin", "04_api_reference/module_qat/module_plugins/adaptvqeplugin", "04_api_reference/module_qat/module_plugins/circuitinliner", "04_api_reference/module_qat/module_plugins/costfunctionplugin", "04_api_reference/module_qat/module_plugins/display", "04_api_reference/module_qat/module_plugins/gradientdescentoptimizer", "04_api_reference/module_qat/module_plugins/junction", "04_api_reference/module_qat/module_plugins/multiplelaunchesanalyzer", "04_api_reference/module_qat/module_plugins/observablesplitter", "04_api_reference/module_qat/module_plugins/optimizer", "04_api_reference/module_qat/module_plugins/psominimizeplugin", "04_api_reference/module_qat/module_plugins/quameleonplugin", "04_api_reference/module_qat/module_plugins/remoteplugin", "04_api_reference/module_qat/module_plugins/scipyminimizeplugin", "04_api_reference/module_qat/module_plugins/seqoptim", "04_api_reference/module_qat/module_plugins/spsaminimizeplugin", "04_api_reference/module_qat/module_plugins/transformobservable", "04_api_reference/module_qat/module_plugins/zeronoiseextrapolator", "04_api_reference/module_qat/module_qpus", "04_api_reference/module_qat/module_qpus/:myqlm:clinalg", "04_api_reference/module_qat/module_qpus/:myqlm:pylinalg", "04_api_reference/module_qat/module_qpus/:myqlm:simulatedannealing", "04_api_reference/module_qat/module_qpus/classicalqpu", "04_api_reference/module_qat/module_qpus/get_current_qpu", "04_api_reference/module_qat/module_qpus/get_default_qpu", "04_api_reference/module_qat/module_qpus/qpuhandler", "04_api_reference/module_qat/module_qpus/remoteqpu", "04_api_reference/module_qat/module_quops", "04_api_reference/module_qat/module_quops/are_equal_up_to_phase", "04_api_reference/module_qat/module_quops/channelrepresentations", "04_api_reference/module_qat/module_quops/convert_density_mat_to_pauli_vec", "04_api_reference/module_qat/module_quops/convert_pauli_vec_to_density_mat", "04_api_reference/module_qat/module_quops/get_average_process_fidelity", "04_api_reference/module_qat/module_quops/get_diamond_norm", "04_api_reference/module_qat/module_quops/get_entanglement_process_fidelity", "04_api_reference/module_qat/module_quops/get_process_distance", "04_api_reference/module_qat/module_quops/get_state_fidelity", "04_api_reference/module_qat/module_quops/get_trace_distance", "04_api_reference/module_qat/module_quops/is_completely_positive", "04_api_reference/module_qat/module_quops/is_trace_preserving", "04_api_reference/module_qat/module_quops/is_trace_reducing", "04_api_reference/module_qat/module_quops/is_unital", "04_api_reference/module_qat/module_quops/make_avg_fid_equiv_depol_channel", "04_api_reference/module_qat/module_quops/make_depolarizing_channel", "04_api_reference/module_qat/module_quops/make_generalized_amplitude_damping", "04_api_reference/module_qat/module_quops/make_pauli_matrix_basis", "04_api_reference/module_qat/module_quops/make_standard_matrix_basis", "04_api_reference/module_qat/module_quops/make_standard_vector_basis", "04_api_reference/module_qat/module_quops/multikron", "04_api_reference/module_qat/module_quops/parametricamplitudedamping", "04_api_reference/module_qat/module_quops/parametricgatenoise", "04_api_reference/module_qat/module_quops/parametricpuredephasing", "04_api_reference/module_qat/module_quops/parametricquantumchannel", "04_api_reference/module_qat/module_quops/partial_trace", "04_api_reference/module_qat/module_quops/quantumchannel", "04_api_reference/module_qat/module_quops/quantumchannelchi", "04_api_reference/module_qat/module_quops/quantumchannelchoi", "04_api_reference/module_qat/module_quops/quantumchannelkraus", "04_api_reference/module_qat/module_quops/quantumchannelptm", "05_demos", "07_release_notes", ":myqlm:06_support", ":myqlm:interoperability", ":myqlm:interoperability/01_qiskit", ":myqlm:interoperability/02_pyquil", ":myqlm:interoperability/03_cirq", ":myqlm:interoperability/04_projectq", ":myqlm:interoperability/05_openqasm", "combinatorial_optim_applic", "combinatorial_optim_applic/01_np_probs_for_annealing", "combinatorial_optim_applic/01_np_probs_for_annealing/bilp_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_colouring_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_partitioning_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/kclique_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/max_cut_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/number_partitioning_ann_prob", "combinatorial_optim_applic/01_np_probs_for_annealing/vertex_cover_ann_prob", "combinatorial_optim_applic/02_qaoa", "combinatorial_optim_applic/03_qa", "combinatorial_optim_applic/04_np_problem_generators", "combinatorial_optim_applic/04_np_problem_generators/01_max_cut_generator", "combinatorial_optim_applic/04_np_problem_generators/02_graph_partitioning_generator", "combinatorial_optim_applic/04_np_problem_generators/03_kclique_generator", "combinatorial_optim_applic/04_np_problem_generators/04_vertex_cover_generator", "combinatorial_optim_applic/04_np_problem_generators/05_graph_colouring_generator", "fermion", "fermion/01_hamiltonians", "fermion/02_algorithms", "fermion/03_plugins", "fermion/04_migrating", "index", "interoperability_annealing"], "filenames": ["01_getting_started.rst", "01_getting_started/02_write.rst", "01_getting_started/03_execute.rst", "01_getting_started/04_variational.rst", "01_getting_started/:myqlm:01_install.rst", "01_getting_started/:myqlm:license.rst", "01_getting_started/:myqlm:macos.rst", "01_getting_started/compatibility_matrix.rst", "02_user_guide.rst", "02_user_guide/01_write.rst", "02_user_guide/01_write/01_digital_circuit.rst", "02_user_guide/01_write/01_digital_circuit/01_quantum_gates.rst", "02_user_guide/01_write/01_digital_circuit/02_variational.rst", "02_user_guide/01_write/01_digital_circuit/03_program.rst", "02_user_guide/01_write/01_digital_circuit/04_routines.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/01_naming_routines.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/02_ancillae.rst", "02_user_guide/01_write/01_digital_circuit/04_routines/03_oracles.rst", "02_user_guide/01_write/01_digital_circuit/05_aqasm.rst", "02_user_guide/01_write/02_analog_schedule.rst", "02_user_guide/01_write/02_analog_schedule/01_building_schedules.rst", "02_user_guide/01_write/02_analog_schedule/02_manip_schedules.rst", "02_user_guide/01_write/02_analog_schedule/03_an_jobs.rst", "02_user_guide/01_write/03_annealing_problems.rst", "02_user_guide/01_write/03_annealing_problems/01_ising.rst", "02_user_guide/01_write/03_annealing_problems/02_qubo.rst", "02_user_guide/01_write/03_annealing_problems/03_comb_prob.rst", "02_user_guide/01_write/03_observable.rst", "02_user_guide/02_execute.rst", "02_user_guide/02_execute/01_job.rst", "02_user_guide/02_execute/01_job/01_sample_job.rst", "02_user_guide/02_execute/01_job/02_observable_job.rst", "02_user_guide/02_execute/01_job/03_automated_batch_generation.rst", "02_user_guide/02_execute/02_result.rst", "02_user_guide/02_execute/03_qpu.rst", "02_user_guide/02_execute/03_qpu/03_annealing.rst", "02_user_guide/02_execute/03_qpu/04_custom_qpu.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/clinalg.rst", "02_user_guide/02_execute/03_qpu/:myqlm:01_gate_based/pylinalg.rst", "02_user_guide/02_execute/04_plugin.rst", "02_user_guide/02_execute/04_plugin/01_custom_plugin.rst", "02_user_guide/02_execute/04_plugin/02_custom_junction.rst", "02_user_guide/02_execute/04_plugin/03_hardware_specs.rst", "02_user_guide/02_execute/05_variational.rst", "04_api_reference.rst", "04_api_reference/module_qat.rst", "04_api_reference/module_qat/:myqlm:module_interop.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/cirq_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_cirq/qlm_to_cirq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_openqasm/oqasmparser.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmengine.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_projectq/aqasmparser.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquil_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/pyquilqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_pyquil/qlm_to_pyquil.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/asyncbackendtoqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/backendtoqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskit_to_qlm.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitjob.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qiskitruntimeqpu.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qlm_to_qiskit.rst", "04_api_reference/module_qat/:myqlm:module_interop/module_qiskit/qputobackend.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/mat2nparray.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/measure.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/project.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/raise_break.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/reset.rst", "04_api_reference/module_qat/:myqlm:module_pylinalg/module_simulator/simulate.rst", "04_api_reference/module_qat/module_comm.rst", "04_api_reference/module_qat/module_comm/module_datamodel.rst", "04_api_reference/module_qat/module_comm/module_datamodel/gatedefinition.rst", "04_api_reference/module_qat/module_comm/module_datamodel/op.rst", "04_api_reference/module_qat/module_comm/module_exceptions.rst", "04_api_reference/module_qat/module_comm/module_exceptions/errortype.rst", "04_api_reference/module_qat/module_comm/module_exceptions/pluginexception.rst", "04_api_reference/module_qat/module_comm/module_exceptions/qpuexception.rst", "04_api_reference/module_qat/module_comm/module_resource.rst", "04_api_reference/module_qat/module_comm/module_resource/allocationmodel.rst", "04_api_reference/module_qat/module_comm/module_resource/device.rst", "04_api_reference/module_qat/module_comm/module_resource/resourcemodel.rst", "04_api_reference/module_qat/module_comm/module_shared.rst", "04_api_reference/module_qat/module_comm/module_shared/intermediatemeasurement.rst", "04_api_reference/module_qat/module_comm/module_shared/processingtype.rst", "04_api_reference/module_qat/module_core.rst", "04_api_reference/module_qat/module_core/aggregate_data.rst", "04_api_reference/module_qat/module_core/assert_plugin.rst", "04_api_reference/module_qat/module_core/assert_qpu.rst", "04_api_reference/module_qat/module_core/batch.rst", "04_api_reference/module_qat/module_core/batchresult.rst", "04_api_reference/module_qat/module_core/circuit.rst", "04_api_reference/module_qat/module_core/display.rst", "04_api_reference/module_qat/module_core/evaluate.rst", "04_api_reference/module_qat/module_core/hardwarespecs.rst", "04_api_reference/module_qat/module_core/job.rst", "04_api_reference/module_qat/module_core/module_application.rst", "04_api_reference/module_qat/module_core/module_application/application.rst", "04_api_reference/module_qat/module_core/module_application/remoteapplication.rst", "04_api_reference/module_qat/module_core/module_circuit_builder.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/default_gate_set.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/get_param_generator.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/get_predef_generator.rst", "04_api_reference/module_qat/module_core/module_circuit_builder/variablenamenotavailable.rst", "04_api_reference/module_qat/module_core/module_gate_set.rst", "04_api_reference/module_qat/module_core/module_gate_set/gateset.rst", "04_api_reference/module_qat/module_core/module_gate_set/gatesignature.rst", "04_api_reference/module_qat/module_core/module_gate_set/gatesyntaxredefinition.rst", "04_api_reference/module_qat/module_core/module_qpu.rst", "04_api_reference/module_qat/module_core/module_qpu/commonqpu.rst", "04_api_reference/module_qat/module_core/module_spins.rst", "04_api_reference/module_qat/module_core/module_spins/integer_to_spins.rst", "04_api_reference/module_qat/module_core/module_spins/spins_to_integer.rst", "04_api_reference/module_qat/module_core/module_variables.rst", "04_api_reference/module_qat/module_core/module_variables/arithexpression.rst", "04_api_reference/module_qat/module_core/module_variables/symbol.rst", "04_api_reference/module_qat/module_core/observable.rst", "04_api_reference/module_qat/module_core/parameter.rst", "04_api_reference/module_qat/module_core/plot_in_notebook.rst", "04_api_reference/module_qat/module_core/result.rst", "04_api_reference/module_qat/module_core/sample.rst", "04_api_reference/module_qat/module_core/schedule.rst", "04_api_reference/module_qat/module_core/state.rst", "04_api_reference/module_qat/module_core/term.rst", "04_api_reference/module_qat/module_core/topology.rst", "04_api_reference/module_qat/module_core/topologytype.rst", "04_api_reference/module_qat/module_core/variable.rst", "04_api_reference/module_qat/module_devices.rst", "04_api_reference/module_qat/module_devices/alltoall.rst", "04_api_reference/module_qat/module_devices/google_sycamore.rst", "04_api_reference/module_qat/module_devices/griddevice.rst", "04_api_reference/module_qat/module_devices/ibm_burlington.rst", "04_api_reference/module_qat/module_devices/ibm_johannesburg.rst", "04_api_reference/module_qat/module_devices/ibm_melbourne.rst", "04_api_reference/module_qat/module_devices/ibm_rueschlikon.rst", "04_api_reference/module_qat/module_devices/ibm_singapore.rst", "04_api_reference/module_qat/module_devices/ibm_tokyo.rst", "04_api_reference/module_qat/module_devices/ibm_yorktown.rst", "04_api_reference/module_qat/module_devices/linedevice.rst", "04_api_reference/module_qat/module_devices/rigetti_agave.rst", "04_api_reference/module_qat/module_devices/rigetti_aspen.rst", "04_api_reference/module_qat/module_devices/squaregriddevice.rst", "04_api_reference/module_qat/module_devices/zuchongzhi.rst", "04_api_reference/module_qat/module_fermion.rst", "04_api_reference/module_qat/module_fermion/apply_quantum_subspace_expansion.rst", "04_api_reference/module_qat/module_fermion/compute_active_space_integrals.rst", "04_api_reference/module_qat/module_fermion/construct_ucc_ansatz.rst", "04_api_reference/module_qat/module_fermion/convert_to_h_integrals.rst", "04_api_reference/module_qat/module_fermion/electronicstructurehamiltonian.rst", "04_api_reference/module_qat/module_fermion/fermionichamiltonian.rst", "04_api_reference/module_qat/module_fermion/get_cluster_ops.rst", "04_api_reference/module_qat/module_fermion/get_hf_ket.rst", "04_api_reference/module_qat/module_fermion/guess_init_params.rst", "04_api_reference/module_qat/module_fermion/make_anderson_model.rst", "04_api_reference/module_qat/module_fermion/make_compressed_ldca_circ.rst", "04_api_reference/module_qat/module_fermion/make_embedded_model.rst", "04_api_reference/module_qat/module_fermion/make_general_hwe_circ.rst", "04_api_reference/module_qat/module_fermion/make_hubbard_model.rst", "04_api_reference/module_qat/module_fermion/make_ldca_circ.rst", "04_api_reference/module_qat/module_fermion/make_mr_circ.rst", "04_api_reference/module_qat/module_fermion/make_mrep_circ.rst", "04_api_reference/module_qat/module_fermion/make_shallow_circ.rst", "04_api_reference/module_qat/module_fermion/make_trotterisation_routine.rst", "04_api_reference/module_qat/module_fermion/molecularhamiltonian.rst", "04_api_reference/module_qat/module_fermion/moleculeinfo.rst", "04_api_reference/module_qat/module_fermion/perform_phase_estimation.rst", "04_api_reference/module_qat/module_fermion/perform_pyscf_computation.rst", "04_api_reference/module_qat/module_fermion/select_active_orbitals.rst", "04_api_reference/module_qat/module_fermion/spinhamiltonian.rst", "04_api_reference/module_qat/module_fermion/transform_integrals_to_new_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_bk_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_jw_basis.rst", "04_api_reference/module_qat/module_fermion/transform_to_parity_basis.rst", "04_api_reference/module_qat/module_generators.rst", "04_api_reference/module_qat/module_generators/abstractgenerator.rst", "04_api_reference/module_qat/module_generators/combinatorialoptimizergenerator.rst", "04_api_reference/module_qat/module_generators/graphcolouringgenerator.rst", "04_api_reference/module_qat/module_generators/graphpartitioninggenerator.rst", "04_api_reference/module_qat/module_generators/kcliquegenerator.rst", "04_api_reference/module_qat/module_generators/maxcutgenerator.rst", "04_api_reference/module_qat/module_generators/remotebatchgenerator.rst", "04_api_reference/module_qat/module_generators/vertexcovergenerator.rst", "04_api_reference/module_qat/module_hardware.rst", "04_api_reference/module_qat/module_hardware/defaultgatesspecification.rst", "04_api_reference/module_qat/module_hardware/defaulthardwaremodel.rst", "04_api_reference/module_qat/module_hardware/gatesspecification.rst", "04_api_reference/module_qat/module_hardware/hardwaremodel.rst", "04_api_reference/module_qat/module_hardware/make_depolarizing_hardware_model.rst", "04_api_reference/module_qat/module_lang.rst", "04_api_reference/module_qat/module_lang/abstractgate.rst", "04_api_reference/module_qat/module_lang/amplification_step.rst", "04_api_reference/module_qat/module_lang/boolformula.rst", "04_api_reference/module_qat/module_lang/build_gate.rst", "04_api_reference/module_qat/module_lang/cbit.rst", "04_api_reference/module_qat/module_lang/cregister.rst", "04_api_reference/module_qat/module_lang/gate.rst", "04_api_reference/module_qat/module_lang/generate_gate_set.rst", "04_api_reference/module_qat/module_lang/grover_diffusion.rst", "04_api_reference/module_qat/module_lang/householder.rst", "04_api_reference/module_qat/module_lang/kptree.rst", "04_api_reference/module_qat/module_lang/linker.rst", "04_api_reference/module_qat/module_lang/module_arithmetic.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/add_const_mod.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/add_mod.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/modular_exp.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const.rst", "04_api_reference/module_qat/module_lang/module_arithmetic/mult_const_mod.rst", "04_api_reference/module_qat/module_lang/module_classarith.rst", "04_api_reference/module_qat/module_lang/module_classarith/add.rst", "04_api_reference/module_qat/module_lang/module_classarith/add_const.rst", "04_api_reference/module_qat/module_lang/module_classarith/cuccaro_add.rst", "04_api_reference/module_qat/module_lang/module_qftarith.rst", "04_api_reference/module_qat/module_lang/module_qftarith/add.rst", "04_api_reference/module_qat/module_lang/module_qftarith/add_const.rst", "04_api_reference/module_qat/module_lang/module_qftarith/mult.rst", "04_api_reference/module_qat/module_lang/module_qftarith/mult_const.rst", "04_api_reference/module_qat/module_lang/module_qftarith/qft.rst", "04_api_reference/module_qat/module_lang/paramgate.rst", "04_api_reference/module_qat/module_lang/phase_estimation.rst", "04_api_reference/module_qat/module_lang/program.rst", "04_api_reference/module_qat/module_lang/qarithexp.rst", "04_api_reference/module_qat/module_lang/qbit.rst", "04_api_reference/module_qat/module_lang/qbool.rst", "04_api_reference/module_qat/module_lang/qboolarray.rst", "04_api_reference/module_qat/module_lang/qclause.rst", "04_api_reference/module_qat/module_lang/qcompexp.rst", "04_api_reference/module_qat/module_lang/qfunc.rst", "04_api_reference/module_qat/module_lang/qint.rst", "04_api_reference/module_qat/module_lang/qregister.rst", "04_api_reference/module_qat/module_lang/qrout.rst", "04_api_reference/module_qat/module_lang/qroutine.rst", "04_api_reference/module_qat/module_lang/quantum_counting.rst", "04_api_reference/module_qat/module_lang/uniform_distribution.rst", "04_api_reference/module_qat/module_opt.rst", "04_api_reference/module_qat/module_opt/ansatzfactory.rst", "04_api_reference/module_qat/module_opt/bilp.rst", "04_api_reference/module_qat/module_opt/circuitgenerator.rst", "04_api_reference/module_qat/module_opt/clause.rst", "04_api_reference/module_qat/module_opt/combinatorialproblem.rst", "04_api_reference/module_qat/module_opt/graphcolouring.rst", "04_api_reference/module_qat/module_opt/graphpartitioning.rst", "04_api_reference/module_qat/module_opt/ising.rst", "04_api_reference/module_qat/module_opt/kclique.rst", "04_api_reference/module_qat/module_opt/maxcut.rst", "04_api_reference/module_qat/module_opt/mixingfactory.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/independentannealing.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/initialstatebuilder.rst", "04_api_reference/module_qat/module_opt/module_mixing_factory/simpleinitialstate.rst", "04_api_reference/module_qat/module_opt/module_results.rst", "04_api_reference/module_qat/module_opt/module_results/combinatorialresult.rst", "04_api_reference/module_qat/module_opt/module_results/graphpartitioningresult.rst", "04_api_reference/module_qat/module_opt/module_results/kcliqueresult.rst", "04_api_reference/module_qat/module_opt/module_results/vertexcoverresult.rst", "04_api_reference/module_qat/module_opt/numberpartitioning.rst", "04_api_reference/module_qat/module_opt/qubo.rst", "04_api_reference/module_qat/module_opt/schedulegenerator.rst", "04_api_reference/module_qat/module_opt/var.rst", "04_api_reference/module_qat/module_opt/vertexcover.rst", "04_api_reference/module_qat/module_plugins.rst", "04_api_reference/module_qat/module_plugins/abstractplugin.rst", "04_api_reference/module_qat/module_plugins/adaptvqeplugin.rst", "04_api_reference/module_qat/module_plugins/circuitinliner.rst", "04_api_reference/module_qat/module_plugins/costfunctionplugin.rst", "04_api_reference/module_qat/module_plugins/display.rst", "04_api_reference/module_qat/module_plugins/gradientdescentoptimizer.rst", "04_api_reference/module_qat/module_plugins/junction.rst", "04_api_reference/module_qat/module_plugins/multiplelaunchesanalyzer.rst", "04_api_reference/module_qat/module_plugins/observablesplitter.rst", "04_api_reference/module_qat/module_plugins/optimizer.rst", "04_api_reference/module_qat/module_plugins/psominimizeplugin.rst", "04_api_reference/module_qat/module_plugins/quameleonplugin.rst", "04_api_reference/module_qat/module_plugins/remoteplugin.rst", "04_api_reference/module_qat/module_plugins/scipyminimizeplugin.rst", "04_api_reference/module_qat/module_plugins/seqoptim.rst", "04_api_reference/module_qat/module_plugins/spsaminimizeplugin.rst", "04_api_reference/module_qat/module_plugins/transformobservable.rst", "04_api_reference/module_qat/module_plugins/zeronoiseextrapolator.rst", "04_api_reference/module_qat/module_qpus.rst", "04_api_reference/module_qat/module_qpus/:myqlm:clinalg.rst", "04_api_reference/module_qat/module_qpus/:myqlm:pylinalg.rst", "04_api_reference/module_qat/module_qpus/:myqlm:simulatedannealing.rst", "04_api_reference/module_qat/module_qpus/classicalqpu.rst", "04_api_reference/module_qat/module_qpus/get_current_qpu.rst", "04_api_reference/module_qat/module_qpus/get_default_qpu.rst", "04_api_reference/module_qat/module_qpus/qpuhandler.rst", "04_api_reference/module_qat/module_qpus/remoteqpu.rst", "04_api_reference/module_qat/module_quops.rst", "04_api_reference/module_qat/module_quops/are_equal_up_to_phase.rst", "04_api_reference/module_qat/module_quops/channelrepresentations.rst", "04_api_reference/module_qat/module_quops/convert_density_mat_to_pauli_vec.rst", "04_api_reference/module_qat/module_quops/convert_pauli_vec_to_density_mat.rst", "04_api_reference/module_qat/module_quops/get_average_process_fidelity.rst", "04_api_reference/module_qat/module_quops/get_diamond_norm.rst", "04_api_reference/module_qat/module_quops/get_entanglement_process_fidelity.rst", "04_api_reference/module_qat/module_quops/get_process_distance.rst", "04_api_reference/module_qat/module_quops/get_state_fidelity.rst", "04_api_reference/module_qat/module_quops/get_trace_distance.rst", "04_api_reference/module_qat/module_quops/is_completely_positive.rst", "04_api_reference/module_qat/module_quops/is_trace_preserving.rst", "04_api_reference/module_qat/module_quops/is_trace_reducing.rst", "04_api_reference/module_qat/module_quops/is_unital.rst", "04_api_reference/module_qat/module_quops/make_avg_fid_equiv_depol_channel.rst", "04_api_reference/module_qat/module_quops/make_depolarizing_channel.rst", "04_api_reference/module_qat/module_quops/make_generalized_amplitude_damping.rst", "04_api_reference/module_qat/module_quops/make_pauli_matrix_basis.rst", "04_api_reference/module_qat/module_quops/make_standard_matrix_basis.rst", "04_api_reference/module_qat/module_quops/make_standard_vector_basis.rst", "04_api_reference/module_qat/module_quops/multikron.rst", "04_api_reference/module_qat/module_quops/parametricamplitudedamping.rst", "04_api_reference/module_qat/module_quops/parametricgatenoise.rst", "04_api_reference/module_qat/module_quops/parametricpuredephasing.rst", "04_api_reference/module_qat/module_quops/parametricquantumchannel.rst", "04_api_reference/module_qat/module_quops/partial_trace.rst", "04_api_reference/module_qat/module_quops/quantumchannel.rst", "04_api_reference/module_qat/module_quops/quantumchannelchi.rst", "04_api_reference/module_qat/module_quops/quantumchannelchoi.rst", "04_api_reference/module_qat/module_quops/quantumchannelkraus.rst", "04_api_reference/module_qat/module_quops/quantumchannelptm.rst", "05_demos.rst", "07_release_notes.rst", ":myqlm:06_support.rst", ":myqlm:interoperability.rst", ":myqlm:interoperability/01_qiskit.rst", ":myqlm:interoperability/02_pyquil.rst", ":myqlm:interoperability/03_cirq.rst", ":myqlm:interoperability/04_projectq.rst", ":myqlm:interoperability/05_openqasm.rst", "combinatorial_optim_applic.rst", "combinatorial_optim_applic/01_np_probs_for_annealing.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/bilp_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_colouring_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/graph_partitioning_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/kclique_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/max_cut_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/number_partitioning_ann_prob.rst", "combinatorial_optim_applic/01_np_probs_for_annealing/vertex_cover_ann_prob.rst", "combinatorial_optim_applic/02_qaoa.rst", "combinatorial_optim_applic/03_qa.rst", "combinatorial_optim_applic/04_np_problem_generators.rst", "combinatorial_optim_applic/04_np_problem_generators/01_max_cut_generator.rst", "combinatorial_optim_applic/04_np_problem_generators/02_graph_partitioning_generator.rst", "combinatorial_optim_applic/04_np_problem_generators/03_kclique_generator.rst", "combinatorial_optim_applic/04_np_problem_generators/04_vertex_cover_generator.rst", "combinatorial_optim_applic/04_np_problem_generators/05_graph_colouring_generator.rst", "fermion.rst", "fermion/01_hamiltonians.rst", "fermion/02_algorithms.rst", "fermion/03_plugins.rst", "fermion/04_migrating.rst", "index.rst", "interoperability_annealing.rst"], "titles": ["Getting started", "Writing quantum programs", "Executing quantum programs", "Variational algorithms with Qaptiva", "Installing myQLM", "myQLM license", "myQLM Installation on MacOS", "&lt;no title&gt;", "User guide", "Writing quantum programs", "Gate-based programming", "Creating and adding quantum gates to a circuit", "Creating variational circuits", "Quantum programs", "Quantum routines (and Oracles)", "Naming quantum routines", "Ancillae management and compute scopes", "Oracles and quantum types", "Atos Quantum Assembler (AQASM)", "Analog programming", "Building schedules", "Manipulating schedules", "Analog Jobs", "Annealing programming", "Ising Hamiltonians", "Quadratic Unconstrained Binary Optimization (QUBO)", "General Combinatorial Problems", "Creating observables", "Executing quantum programs", "Constructing one or multiple Jobs (using Batch)", "Sample Job", "Observable Job", "Automated batch generation", "Result of a quantum program", "Quantum Processing Unit (QPU)", "Annealing computing", "Make your own QPU", "Gate based computing", "CLinalg: C++ Linear-algebra-based simulator", "PyLinalg: Python Linear-algebra-based simulator", "Extending a QPU (by using Plugins)", "Make your own plugin", "Make you own junction", "Getting information from the QPU", "Running variational algorithms", "API reference", "qat", "qat.interop", "qat.interop.cirq", "qat.interop.cirq.cirq_to_qlm", "qat.interop.cirq.qlm_to_cirq", "qat.interop.openqasm", "qat.interop.openqasm.OqasmParser", "qat.interop.projectq", "qat.interop.projectq.AqasmEngine", "qat.interop.projectq.AqasmPrinter", "qat.interop.pyquil", "qat.interop.pyquil.pyquil_to_qlm", "qat.interop.pyquil.PyquilQPU", "qat.interop.pyquil.qlm_to_pyquil", "qat.interop.qiskit", "qat.interop.qiskit.AsyncBackendToQPU", "qat.interop.qiskit.BackendToQPU", "qat.interop.qiskit.qiskit_to_qlm", "qat.interop.qiskit.QiskitJob", "qat.interop.qiskit.runtime.QiskitRuntimeQPU", "qat.interop.qiskit.qlm_to_qiskit", "qat.interop.qiskit.QPUToBackend", "qat.pylinalg", "qat.pylinalg.simulator", "qat.pylinalg.simulator.mat2nparray", "qat.pylinalg.simulator.measure", "qat.pylinalg.simulator.project", "qat.pylinalg.simulator.raise_break", "qat.pylinalg.simulator.reset", "qat.pylinalg.simulator.simulate", "qat.comm", "qat.comm.datamodel", "qat.comm.datamodel.ttypes.GateDefinition", "qat.comm.datamodel.ttypes.Op", "qat.comm.exceptions", "qat.comm.exceptions.ttypes.ErrorType", "qat.comm.exceptions.ttypes.PluginException", "qat.comm.exceptions.ttypes.QPUException", "qat.comm.resource", "qat.comm.resource.ttypes.AllocationModel", "qat.comm.resource.ttypes.Device", "qat.comm.resource.ttypes.ResourceModel", "qat.comm.shared", "qat.comm.shared.ttypes.IntermediateMeasurement", "qat.comm.shared.ttypes.ProcessingType", "qat.core", "qat.core.wrappers.result.aggregate_data", "qat.core.assertion.assert_plugin", "qat.core.assertion.assert_qpu", "qat.core.Batch", "qat.core.BatchResult", "qat.core.Circuit", "qat.core.console.display", "qat.core.formula_eval.evaluate", "qat.core.HardwareSpecs", "qat.core.Job", "qat.core.application", "qat.core.application.Application", "qat.core.application.RemoteApplication", "qat.core.circuit_builder", "qat.core.circuit_builder.matrix_util.default_gate_set", "qat.core.circuit_builder.matrix_util.get_param_generator", "qat.core.circuit_builder.matrix_util.get_predef_generator", "qat.core.circuit_builder.builder.VariableNameNotAvailable", "qat.core.gate_set", "qat.core.gate_set.GateSet", "qat.core.gate_set.GateSignature", "qat.core.gate_set.GateSyntaxRedefinition", "qat.core.qpu", "qat.core.qpu.CommonQPU", "qat.core.spins", "qat.core.spins.integer_to_spins", "qat.core.spins.spins_to_integer", "qat.core.variables", "qat.core.variables.ArithExpression", "qat.core.variables.Symbol", "qat.core.Observable", "qat.core.Parameter", "qat.core.printer.plot_in_notebook", "qat.core.Result", "qat.core.Sample", "qat.core.Schedule", "qat.core.wrappers.result.State", "qat.core.Term", "qat.core.Topology", "qat.core.TopologyType", "qat.core.Variable", "qat.devices", "qat.devices.AllToAll", "qat.devices.GOOGLE_SYCAMORE", "qat.devices.GridDevice", "qat.devices.IBM_BURLINGTON", "qat.devices.IBM_JOHANNESBURG", "qat.devices.IBM_MELBOURNE", "qat.devices.IBM_RUESCHLIKON", "qat.devices.IBM_SINGAPORE", "qat.devices.IBM_TOKYO", "qat.devices.IBM_YORKTOWN", "qat.devices.LineDevice", "qat.devices.RIGETTI_AGAVE", "qat.devices.RIGETTI_ASPEN", "qat.devices.SquareGridDevice", "qat.devices.ZUCHONGZHI", "qat.fermion", "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion", "qat.fermion.chemistry.ucc.compute_active_space_integrals", "qat.fermion.chemistry.ucc.construct_ucc_ansatz", "qat.fermion.chemistry.ucc.convert_to_h_integrals", "qat.fermion.hamiltonians.ElectronicStructureHamiltonian", "qat.fermion.hamiltonians.FermionHamiltonian", "qat.fermion.chemistry.ucc.get_cluster_ops", "qat.fermion.chemistry.ucc.get_hf_ket", "qat.fermion.chemistry.ucc.guess_init_params", "qat.fermion.hamiltonians.make_anderson_model", "qat.fermion.circuits.make_compressed_ldca_circ", "qat.fermion.hamiltonians.make_embedded_model", "qat.fermion.circuits.make_general_hwe_circ", "qat.fermion.hamiltonians.make_hubbard_model", "qat.fermion.circuits.make_ldca_circ", "qat.fermion.circuits.make_mr_circ", "qat.fermion.circuits.make_mrep_circ", "qat.fermion.circuits.make_shallow_circ", "qat.fermion.trotterisation.make_trotterisation_routine", "qat.fermion.chemistry.wrapper.MolecularHamiltonian", "qat.fermion.chemistry.wrapper.MoleculeInfo", "qat.fermion.phase_estimation.perform_phase_estimation", "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation", "qat.fermion.chemistry.ucc.select_active_orbitals", "qat.fermion.hamiltonians.SpinHamiltonian", "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis", "qat.fermion.transforms.transform_to_bk_basis", "qat.fermion.transforms.transform_to_jw_basis", "qat.fermion.transforms.transform_to_parity_basis", "qat.generators", "qat.generators.AbstractGenerator", "qat.generators.CombinatorialOptimizerGenerator", "qat.generators.GraphColouringGenerator", "qat.generators.GraphPartitioningGenerator", "qat.generators.KCliqueGenerator", "qat.generators.MaxCutGenerator", "qat.generators.RemoteBatchGenerator", "qat.generators.VertexCoverGenerator", "qat.hardware", "qat.hardware.DefaultGatesSpecification", "qat.hardware.DefaultHardwareModel", "qat.hardware.GatesSpecification", "qat.hardware.HardwareModel", "qat.hardware.make_depolarizing_hardware_model", "qat.lang", "qat.lang.AbstractGate", "qat.lang.algorithms.amplification_step", "qat.lang.AQASM.bits.BoolFormula", "qat.lang.build_gate", "qat.lang.AQASM.bits.Cbit", "qat.lang.AQASM.bits.CRegister", "qat.lang.AQASM.gates.Gate", "qat.lang.AQASM.misc.generate_gate_set", "qat.lang.algorithms.amplification.grover_diffusion", "qat.lang.algorithms.amplification.householder", "qat.lang.models.KPTree", "qat.lang.linking.Linker", "qat.lang.AQASM.arithmetic", "qat.lang.AQASM.arithmetic.add_const_mod", "qat.lang.AQASM.arithmetic.add_mod", "qat.lang.AQASM.arithmetic.modular_exp", "qat.lang.AQASM.arithmetic.mult_const", "qat.lang.AQASM.arithmetic.mult_const_mod", "qat.lang.AQASM.classarith", "qat.lang.AQASM.classarith.add", "qat.lang.AQASM.classarith.add_const", "qat.lang.AQASM.classarith.cuccaro_add", "qat.lang.AQASM.qftarith", "qat.lang.AQASM.qftarith.add", "qat.lang.AQASM.qftarith.add_const", "qat.lang.AQASM.qftarith.mult", "qat.lang.AQASM.qftarith.mult_const", "qat.lang.AQASM.qftarith.QFT", "qat.lang.AQASM.gates.ParamGate", "qat.lang.algorithms.phase_estimation", "qat.lang.Program", "qat.lang.AQASM.qint.QArithExp", "qat.lang.AQASM.bits.Qbit", "qat.lang.AQASM.qbool.QBool", "qat.lang.AQASM.qbool.QBoolArray", "qat.lang.AQASM.qbool.QClause", "qat.lang.AQASM.qint.QCompExp", "qat.lang.qfunc", "qat.lang.AQASM.qint.QInt", "qat.lang.AQASM.bits.QRegister", "qat.lang.qrout", "qat.lang.QRoutine", "qat.lang.algorithms.quantum_counting", "qat.lang.algorithms.amplification.uniform_distribution", "qat.opt", "qat.vsolve.ansatz.AnsatzFactory", "qat.opt.BILP", "qat.opt.circuit_generator.CircuitGenerator", "qat.opt.boolexpr.Clause", "qat.opt.CombinatorialProblem", "qat.opt.GraphColouring", "qat.opt.GraphPartitioning", "qat.opt.Ising", "qat.opt.KClique", "qat.opt.MaxCut", "qat.opt.MixingFactory", "qat.opt.mixing_factory", "qat.opt.mixing_factory.IndependentAnnealing", "qat.opt.mixing_factory.InitialStateBuilder", "qat.opt.mixing_factory.SimpleInitialState", "qat.opt.results", "qat.opt.results.CombinatorialResult", "qat.opt.results.GraphPartitioningResult", "qat.opt.results.KCliqueResult", "qat.opt.results.VertexCoverResult", "qat.opt.NumberPartitioning", "qat.opt.QUBO", "qat.opt.schedule_generator.ScheduleGenerator", "qat.opt.boolexpr.Var", "qat.opt.VertexCover", "qat.plugins", "qat.plugins.AbstractPlugin", "qat.plugins.AdaptVQEPlugin", "qat.plugins.CircuitInliner", "qat.plugins.CostFunctionPlugin", "qat.plugins.Display", "qat.plugins.GradientDescentOptimizer", "qat.plugins.Junction", "qat.plugins.MultipleLaunchesAnalyzer", "qat.plugins.ObservableSplitter", "qat.plugins.Optimizer", "qat.plugins.PSOMinimizePlugin", "qat.plugins.QuameleonPlugin", "qat.plugins.RemotePlugin", "qat.plugins.ScipyMinimizePlugin", "qat.plugins.SeqOptim", "qat.plugins.SPSAMinimizePlugin", "qat.plugins.TransformObservable", "qat.plugins.ZeroNoiseExtrapolator", "qat.qpus", "qat.qpus.CLinalg", "qat.qpus.PyLinalg", "qat.qpus.SimulatedAnnealing", "qat.qpus.ClassicalQPU", "qat.qpus.get_current_qpu", "qat.qpus.get_default_qpu", "qat.qpus.QPUHandler", "qat.qpus.RemoteQPU", "qat.quops", "qat.quops.math_util.are_equal_up_to_phase", "qat.quops.ChannelRepresentations", "qat.quops.math_util.convert_density_mat_to_pauli_vec", "qat.quops.math_util.convert_pauli_vec_to_density_mat", "qat.quops.metrics.get_average_process_fidelity", "qat.quops.metrics.get_diamond_norm", "qat.quops.metrics.get_entanglement_process_fidelity", "qat.quops.metrics.get_process_distance", "qat.quops.metrics.get_state_fidelity", "qat.quops.metrics.get_trace_distance", "qat.quops.is_completely_positive", "qat.quops.is_trace_preserving", "qat.quops.is_trace_reducing", "qat.quops.is_unital", "qat.quops.make_avg_fid_equiv_depol_channel", "qat.quops.make_depolarizing_channel", "qat.quops.make_generalized_amplitude_damping", "qat.quops.math_util.make_pauli_matrix_basis", "qat.quops.math_util.make_standard_matrix_basis", "qat.quops.math_util.make_standard_vector_basis", "qat.quops.math_util.multikron", "qat.quops.ParametricAmplitudeDamping", "qat.quops.ParametricGateNoise", "qat.quops.ParametricPureDephasing", "qat.quops.ParametricQuantumChannel", "qat.quops.math_util.partial_trace", "qat.quops.QuantumChannel", "qat.quops.QuantumChannelChi", "qat.quops.QuantumChannelChoi", "qat.quops.QuantumChannelKraus", "qat.quops.QuantumChannelPTM", "Demos", "Release notes", "Contributing to myQLM", "Interoperability with gate-based framework", "Qiskit interoperability", "PyQuil interoperability", "Cirq interoperability", "ProjectQ interoperability", "OpenQASM Compiler", "Combinatorial optimization", "NP-hard problems", "Binary Integer Linear Programming (BILP)", "Graph Colouring", "Graph Partitioning", "KClique", "Max Cut", "Number Partitioning", "Vertex Cover", "Quantum Approximate Optimization Algorithm (QAOA)", "Quantum Annealing (QA)", "Problem generators", "Max Cut Generator", "Graph Partitioning Generator", "K-Clique Generator", "Vertex Cover Generator", "Graph Colouring Generator", "Spin and fermionic systems", "Creating and manipulating Hamiltonians", "Quantum application (including Ans\u00e4tze and state preparation)", "Plugins", "Migrating code based on deprecated library qat.dqs", "Qaptiva 800s documentation", "Interoperability with annealing framework"], "terms": {"qaptiva": [0, 1, 12, 13, 19, 28, 29, 31, 32, 34, 35, 36, 37, 40, 41, 42, 44, 48, 53, 56, 60, 119, 149, 179, 265, 293, 328, 335, 336, 337, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354], "myqlm": [0, 8, 9, 10, 28, 31, 32, 34, 35, 37, 38, 39, 40, 47, 52, 58, 60, 76, 149, 179, 247, 261, 265, 269, 284, 286, 325, 328, 329, 330, 331, 332, 333, 335, 345, 351, 357], "contain": [0, 1, 2, 4, 5, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 52, 64, 68, 70, 71, 74, 75, 78, 79, 81, 97, 98, 101, 105, 107, 115, 119, 123, 125, 127, 129, 132, 133, 154, 155, 171, 172, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 195, 201, 207, 224, 225, 226, 235, 236, 237, 241, 242, 245, 246, 247, 248, 249, 255, 256, 260, 261, 264, 279, 286, 287, 295, 325, 326, 333, 343, 352, 354], "tool": [0, 1, 9, 10, 12, 13, 17, 32, 40, 44, 52, 149, 326, 335, 351, 352, 356], "write": [0, 3, 5, 8, 11, 12, 17, 18, 24, 25, 42, 44, 149, 150, 195, 210, 232, 269, 325, 352, 353, 356], "optim": [0, 3, 5, 8, 12, 13, 23, 24, 26, 32, 33, 35, 40, 42, 44, 62, 150, 181, 182, 183, 184, 185, 187, 225, 242, 244, 256, 257, 261, 269, 271, 273, 276, 279, 280, 281, 283, 291, 326, 335, 344, 346, 351, 353, 354, 355, 356], "simul": [0, 3, 5, 10, 11, 13, 19, 22, 23, 24, 26, 29, 30, 33, 35, 36, 46, 58, 61, 62, 68, 80, 97, 126, 127, 194, 195, 207, 225, 241, 245, 246, 247, 248, 249, 250, 260, 261, 264, 268, 277, 285, 286, 287, 288, 326, 334, 336, 337, 338, 339, 340, 341, 342, 356], "quantum": [0, 3, 4, 5, 8, 10, 12, 16, 19, 22, 24, 26, 27, 29, 32, 35, 36, 37, 39, 40, 42, 44, 58, 61, 62, 65, 69, 70, 72, 77, 78, 79, 88, 90, 91, 97, 125, 126, 127, 128, 133, 150, 171, 179, 188, 189, 190, 191, 195, 196, 201, 204, 205, 206, 207, 213, 217, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 236, 237, 239, 241, 245, 246, 247, 248, 249, 250, 253, 260, 261, 262, 264, 265, 279, 284, 287, 288, 295, 299, 300, 304, 305, 306, 307, 316, 318, 320, 321, 322, 323, 324, 328, 334, 336, 337, 345, 351, 352, 354, 356], "program": [0, 3, 4, 8, 11, 12, 14, 15, 16, 17, 30, 31, 32, 41, 42, 49, 57, 63, 78, 80, 91, 97, 98, 150, 152, 196, 197, 205, 206, 207, 210, 228, 229, 233, 234, 236, 239, 241, 269, 277, 288, 334, 335, 344, 353, 354, 356], "These": [0, 1, 4, 6, 8, 10, 13, 17, 34, 43, 52, 63, 79, 97, 101, 110, 120, 194, 197, 205, 206, 235, 241, 245, 246, 248, 249, 260, 264, 326, 328, 335, 345, 351, 352, 353, 354], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 29, 30, 34, 36, 40, 44, 49, 52, 54, 57, 63, 66, 69, 70, 76, 78, 79, 80, 81, 91, 96, 97, 98, 101, 103, 104, 110, 112, 120, 123, 127, 129, 131, 132, 133, 149, 153, 154, 155, 161, 162, 168, 169, 171, 179, 180, 183, 184, 187, 189, 190, 192, 194, 195, 197, 205, 206, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 230, 233, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 248, 249, 251, 260, 264, 265, 266, 268, 269, 270, 271, 272, 277, 278, 280, 281, 284, 285, 286, 291, 292, 293, 294, 309, 315, 317, 323, 325, 326, 328, 334, 335, 339, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355], "packag": [0, 5, 13, 172, 214, 225, 290, 351, 353], "python": [0, 1, 2, 4, 6, 7, 10, 11, 13, 17, 18, 34, 38, 78, 103, 112, 121, 126, 132, 186, 202, 206, 225, 226, 228, 229, 232, 268, 269, 284, 328, 330, 333, 356], "librari": [0, 1, 4, 6, 10, 11, 13, 15, 37, 39, 40, 47, 194, 244, 247, 261, 325, 351, 353, 357], "name": [0, 5, 9, 11, 14, 18, 22, 24, 36, 40, 52, 61, 62, 64, 65, 78, 79, 80, 87, 95, 96, 97, 98, 100, 101, 105, 109, 112, 113, 120, 124, 125, 127, 130, 132, 194, 198, 201, 206, 223, 225, 235, 240, 244, 247, 282, 288, 293, 315, 317, 321, 322, 323, 324, 326, 352, 357], "qat": [0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 326, 329, 330, 331, 332, 333, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357], "applic": [0, 5, 13, 17, 18, 19, 32, 35, 40, 46, 79, 91, 190, 192, 205, 225, 250, 280, 334, 344, 345, 351], "toolset": [0, 40], "also": [0, 5, 9, 10, 11, 13, 17, 18, 19, 20, 23, 24, 28, 29, 30, 32, 34, 35, 36, 40, 42, 44, 79, 97, 122, 125, 127, 133, 170, 171, 172, 180, 189, 191, 205, 232, 233, 235, 236, 241, 245, 246, 247, 248, 249, 255, 260, 261, 264, 280, 283, 286, 288, 292, 293, 326, 334, 335, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357], "interfac": [0, 4, 5, 9, 10, 12, 27, 35, 37, 38, 42, 61, 114, 115, 180, 225, 239, 242, 250, 251, 253, 262, 266, 272, 275, 284, 287, 291, 326, 343, 353, 356], "applianc": [0, 19, 32, 34, 35, 36, 37, 40, 119, 326, 335, 336, 337, 345, 351], "eviden": [0, 86, 356], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 52, 54, 57, 61, 62, 63, 64, 65, 67, 68, 72, 76, 78, 79, 80, 81, 84, 89, 91, 92, 97, 98, 100, 101, 103, 117, 119, 120, 121, 122, 123, 129, 130, 131, 132, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 154, 155, 156, 159, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 179, 180, 181, 183, 184, 186, 187, 188, 190, 192, 194, 195, 196, 197, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 280, 281, 283, 285, 286, 288, 290, 291, 293, 295, 300, 315, 317, 325, 326, 327, 329, 330, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 350, 351, 352, 353, 354, 355, 357], "provid": [0, 1, 2, 4, 5, 8, 9, 10, 11, 13, 14, 20, 27, 29, 32, 36, 40, 41, 42, 43, 52, 58, 61, 62, 65, 67, 69, 75, 76, 79, 84, 91, 97, 112, 133, 149, 150, 152, 171, 194, 195, 217, 225, 240, 244, 247, 257, 261, 267, 269, 271, 272, 275, 276, 277, 279, 280, 281, 285, 286, 291, 326, 327, 328, 329, 330, 331, 332, 333, 335, 343, 345, 351, 352, 353, 355, 356], "power": [0, 3, 5, 10, 28, 35, 123, 194, 205, 317, 326, 356], "semant": [0, 10, 28, 40, 121, 356], "creat": [0, 1, 3, 5, 8, 9, 10, 13, 24, 25, 26, 29, 30, 31, 32, 34, 35, 40, 41, 61, 64, 76, 78, 100, 119, 123, 127, 171, 186, 194, 197, 230, 236, 243, 247, 261, 293, 325, 326, 327, 329, 332, 334, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 353, 357], "circuit": [0, 1, 2, 3, 4, 5, 10, 14, 16, 17, 18, 19, 22, 27, 29, 30, 31, 32, 33, 34, 36, 37, 39, 41, 42, 44, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 69, 70, 75, 78, 79, 80, 81, 89, 91, 98, 101, 112, 120, 124, 129, 150, 152, 195, 198, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 230, 232, 233, 235, 236, 239, 240, 242, 267, 268, 269, 270, 274, 280, 283, 285, 286, 328, 334, 343, 354, 355], "analog": [0, 1, 8, 9, 34, 36, 123, 127, 190, 192, 239, 251, 253, 326, 334, 343, 345, 346, 347, 348, 349, 350, 354, 356], "schedul": [0, 2, 9, 19, 22, 34, 35, 36, 91, 101, 123, 181, 182, 183, 184, 185, 187, 190, 192, 250, 251, 253, 325, 334, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350], "anneal": [0, 1, 8, 9, 24, 25, 26, 34, 36, 181, 182, 183, 184, 185, 187, 239, 241, 245, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 264, 287, 325, 334, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 356], "job": [0, 1, 2, 3, 10, 17, 24, 25, 27, 28, 32, 33, 34, 35, 36, 40, 41, 42, 58, 60, 61, 62, 64, 65, 80, 81, 87, 95, 97, 127, 150, 179, 181, 182, 183, 184, 185, 187, 196, 206, 232, 242, 247, 252, 253, 254, 261, 262, 265, 267, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 325, 328, 329, 330, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 356], "object": [0, 1, 2, 5, 9, 10, 13, 15, 16, 17, 18, 19, 20, 29, 30, 32, 33, 34, 36, 40, 41, 42, 43, 50, 52, 61, 62, 64, 66, 67, 76, 79, 95, 96, 97, 100, 101, 103, 120, 122, 125, 126, 129, 130, 131, 132, 133, 159, 162, 180, 186, 188, 192, 194, 197, 198, 202, 205, 206, 225, 228, 235, 236, 239, 243, 244, 247, 250, 253, 261, 265, 266, 272, 284, 285, 291, 326, 351, 352, 354], "can": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 54, 55, 61, 62, 65, 69, 71, 78, 79, 84, 91, 97, 98, 101, 119, 121, 122, 123, 124, 127, 129, 130, 131, 132, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 155, 171, 174, 180, 181, 182, 183, 184, 185, 186, 187, 194, 196, 198, 199, 200, 202, 205, 223, 225, 232, 233, 234, 235, 236, 240, 242, 244, 247, 250, 251, 253, 256, 257, 258, 259, 261, 262, 266, 269, 272, 278, 279, 280, 283, 285, 286, 291, 293, 317, 323, 325, 326, 327, 329, 330, 334, 335, 337, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357], "parametr": [0, 3, 12, 18, 44, 91, 101, 105, 107, 149, 152, 158, 162, 189, 190, 191, 194, 195, 223, 280, 293, 318, 343, 353], "abstract": [0, 11, 15, 17, 18, 19, 24, 40, 42, 44, 52, 97, 119, 121, 179, 180, 181, 194, 195, 207, 223, 225, 235, 242, 253, 262, 265, 266, 272, 275, 291, 293, 334], "paramet": [0, 3, 11, 12, 13, 18, 20, 24, 30, 33, 36, 41, 42, 49, 50, 52, 54, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 74, 75, 78, 82, 83, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 111, 112, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 136, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 326, 329, 335, 338, 339, 340, 341, 342, 343, 345, 353, 354, 355], "variat": [0, 2, 8, 10, 28, 29, 32, 33, 40, 42, 91, 101, 150, 232, 239, 242, 244, 269, 271, 275, 276, 279, 280, 281, 326, 343, 345, 351, 354, 356], "comput": [0, 1, 2, 4, 5, 8, 13, 14, 17, 19, 22, 24, 27, 29, 30, 31, 32, 34, 36, 41, 42, 44, 69, 75, 79, 84, 90, 92, 97, 101, 111, 122, 125, 126, 127, 149, 154, 155, 156, 169, 171, 172, 173, 174, 179, 181, 182, 183, 184, 185, 187, 189, 191, 205, 206, 225, 230, 236, 240, 241, 245, 246, 248, 253, 260, 264, 267, 269, 274, 286, 291, 296, 297, 298, 299, 300, 301, 302, 303, 317, 326, 329, 334, 338, 339, 340, 341, 342, 344, 345, 352, 353, 354, 355], "compos": [0, 3, 10, 11, 17, 21, 27, 32, 33, 36, 40, 41, 43, 49, 52, 54, 57, 63, 74, 75, 78, 81, 95, 100, 103, 122, 171, 179, 194, 199, 205, 269, 272, 282, 323, 326, 329, 330, 332, 333, 336], "user": [0, 1, 4, 5, 6, 28, 29, 32, 33, 34, 40, 41, 42, 47, 49, 54, 57, 58, 61, 63, 75, 76, 97, 98, 125, 149, 179, 188, 194, 265, 267, 270, 280, 284, 292, 293, 345, 353, 356], "defin": [0, 3, 5, 9, 10, 12, 15, 18, 20, 24, 25, 26, 32, 34, 36, 40, 41, 42, 43, 44, 52, 61, 62, 70, 76, 78, 81, 91, 97, 98, 112, 119, 123, 153, 154, 161, 169, 170, 172, 180, 189, 191, 194, 195, 222, 239, 247, 250, 251, 261, 266, 267, 269, 276, 282, 286, 288, 293, 298, 300, 301, 302, 309, 310, 317, 319, 325, 328, 329, 330, 332, 333, 344, 346, 351, 353, 354], "item": [0, 32, 81, 119], "custom": [0, 1, 10, 36, 52, 76, 97, 98, 124, 130, 131, 210, 235, 239, 277, 325, 334, 354, 356], "gate": [0, 1, 2, 8, 9, 14, 16, 17, 19, 26, 32, 34, 36, 38, 40, 41, 43, 52, 66, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 91, 97, 98, 100, 105, 106, 107, 108, 110, 111, 112, 124, 130, 131, 162, 166, 168, 189, 190, 191, 192, 193, 195, 196, 202, 204, 205, 206, 207, 210, 224, 225, 228, 232, 236, 237, 239, 240, 242, 267, 269, 274, 275, 277, 280, 283, 286, 288, 293, 316, 321, 322, 324, 325, 326, 332, 333, 334, 354, 356], "time": [0, 1, 5, 6, 11, 12, 14, 17, 19, 20, 21, 23, 29, 31, 33, 36, 37, 38, 41, 78, 91, 97, 103, 123, 127, 159, 168, 171, 180, 188, 189, 191, 208, 209, 210, 212, 215, 216, 220, 221, 225, 247, 252, 261, 266, 280, 281, 286, 287, 291, 293, 315, 316, 317, 319, 325, 329, 335, 336, 344, 354], "depend": [0, 4, 11, 13, 15, 18, 19, 20, 32, 33, 37, 38, 91, 123, 127, 169, 205, 225, 247, 250, 261, 272, 276, 280, 286, 287, 293, 325, 326, 328, 343, 344, 354], "coeffici": [0, 12, 21, 24, 122, 129, 154, 158, 169, 170, 280, 283, 309, 318, 354], "an": [0, 1, 3, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 52, 60, 61, 62, 65, 70, 74, 78, 79, 80, 82, 83, 88, 89, 91, 93, 94, 97, 98, 101, 103, 104, 117, 119, 120, 121, 122, 123, 124, 125, 127, 129, 131, 132, 149, 150, 161, 162, 169, 170, 171, 173, 179, 180, 181, 190, 192, 194, 195, 197, 198, 200, 203, 205, 206, 207, 209, 214, 215, 216, 218, 219, 223, 225, 228, 229, 230, 231, 232, 234, 236, 239, 240, 244, 247, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 267, 268, 269, 272, 274, 276, 277, 278, 283, 286, 287, 290, 291, 292, 293, 320, 323, 325, 326, 329, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357], "etc": [0, 1, 2, 5, 6, 10, 18, 20, 36, 40, 52, 78, 79, 97, 120, 125, 189, 191, 194, 195, 236, 242, 247, 261, 272, 275, 288, 305, 326, 335, 351], "hello": 0, "world": 0, "The": [0, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 47, 52, 61, 62, 63, 66, 69, 70, 71, 72, 75, 78, 79, 81, 91, 97, 98, 101, 103, 119, 122, 126, 127, 130, 133, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 193, 194, 195, 198, 203, 205, 206, 214, 216, 217, 218, 220, 221, 222, 223, 224, 225, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 258, 259, 260, 261, 263, 264, 266, 267, 269, 271, 272, 273, 274, 275, 277, 278, 280, 282, 286, 287, 288, 290, 291, 292, 293, 298, 302, 303, 317, 319, 324, 325, 326, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355], "follow": [0, 1, 4, 5, 6, 13, 15, 17, 18, 19, 23, 24, 25, 31, 32, 33, 35, 36, 40, 41, 42, 78, 81, 91, 97, 101, 103, 119, 121, 129, 133, 158, 161, 179, 180, 193, 194, 195, 196, 203, 205, 206, 208, 210, 212, 228, 235, 236, 239, 242, 250, 251, 265, 277, 283, 284, 285, 286, 293, 295, 309, 330, 331, 333, 343, 344, 345, 351, 353, 354], "code": [0, 1, 3, 5, 6, 15, 17, 18, 24, 29, 32, 35, 36, 40, 41, 42, 52, 69, 72, 80, 81, 82, 83, 95, 97, 101, 119, 149, 228, 235, 236, 242, 269, 277, 327, 329, 330, 333, 344, 351, 353], "snippet": [0, 3, 17], "simpl": [0, 1, 17, 18, 20, 26, 27, 29, 30, 31, 32, 40, 42, 95, 96, 97, 100, 103, 121, 125, 126, 130, 180, 225, 235, 254, 263, 266, 273, 286, 288, 291, 316, 325, 326, 343, 344, 346, 347, 348, 349, 350, 353, 354], "bell": [0, 10, 30, 31, 333], "pair": [0, 10, 20, 30, 31, 43, 129, 130, 131, 189, 191, 250, 283, 325, 333, 354], "function": [0, 1, 3, 5, 10, 11, 12, 16, 17, 18, 23, 24, 25, 32, 35, 36, 41, 44, 49, 54, 57, 63, 71, 72, 78, 91, 97, 98, 100, 103, 112, 117, 118, 119, 121, 123, 124, 150, 152, 154, 155, 156, 168, 169, 171, 172, 173, 174, 180, 181, 189, 194, 195, 198, 201, 202, 225, 232, 235, 242, 244, 247, 256, 257, 258, 259, 261, 262, 269, 272, 279, 280, 281, 286, 287, 293, 315, 317, 329, 330, 331, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 355], "mode": [0, 1, 3, 12, 30, 31, 32, 34, 36, 40, 41, 65, 97, 127, 159, 186, 269, 278, 326, 329], "from": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 44, 49, 50, 52, 54, 57, 61, 62, 63, 66, 70, 72, 78, 79, 80, 81, 86, 89, 95, 96, 97, 98, 100, 101, 104, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 154, 155, 156, 158, 159, 165, 169, 170, 171, 173, 174, 176, 177, 178, 181, 183, 184, 187, 194, 195, 196, 197, 202, 205, 206, 207, 210, 223, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 256, 257, 260, 261, 264, 267, 269, 272, 273, 277, 278, 279, 283, 285, 286, 287, 288, 292, 293, 308, 309, 314, 315, 317, 319, 323, 325, 326, 328, 329, 330, 331, 332, 333, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357], "lang": [0, 1, 2, 3, 9, 10, 11, 12, 13, 15, 16, 17, 18, 30, 31, 32, 41, 42, 43, 44, 45, 46, 52, 78, 80, 91, 97, 98, 150, 162, 269, 277, 288, 326, 353, 354], "import": [0, 1, 2, 3, 5, 10, 11, 12, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 36, 40, 41, 42, 43, 44, 52, 78, 79, 80, 81, 86, 97, 98, 100, 101, 119, 120, 121, 123, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 154, 155, 169, 170, 174, 176, 177, 178, 195, 196, 197, 205, 206, 210, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 240, 241, 242, 244, 245, 246, 248, 249, 250, 260, 264, 269, 277, 279, 285, 288, 293, 308, 309, 315, 317, 323, 326, 329, 330, 331, 332, 333, 335, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357], "qrout": [0, 1, 2, 10, 11, 12, 41, 42, 44, 194, 232, 326, 353], "h": [0, 1, 2, 3, 10, 11, 12, 13, 15, 17, 18, 19, 20, 24, 30, 31, 32, 35, 41, 44, 66, 78, 97, 101, 127, 150, 153, 154, 155, 159, 161, 163, 168, 169, 171, 174, 176, 177, 178, 183, 184, 187, 189, 191, 196, 205, 206, 210, 232, 235, 236, 241, 243, 246, 247, 248, 249, 250, 260, 261, 264, 271, 274, 287, 326, 332, 333, 344, 352, 353, 357], "cnot": [0, 1, 2, 3, 10, 11, 13, 16, 17, 18, 30, 31, 32, 41, 43, 66, 97, 150, 162, 205, 206, 210, 214, 216, 230, 235, 236, 240, 242, 277, 283, 288, 326, 332, 333, 353, 354], "def": [0, 1, 2, 3, 10, 11, 12, 15, 17, 18, 32, 36, 41, 42, 44, 195, 198, 206, 232, 235, 240, 269, 326], "bell_pair": [0, 2, 10], "0": [0, 1, 2, 3, 5, 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 36, 40, 41, 42, 43, 44, 51, 52, 62, 69, 74, 75, 78, 79, 80, 90, 97, 98, 101, 117, 118, 120, 121, 122, 123, 124, 127, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 155, 158, 160, 164, 166, 168, 169, 170, 171, 173, 174, 176, 177, 178, 189, 191, 194, 195, 196, 197, 204, 205, 206, 210, 222, 223, 225, 228, 229, 230, 232, 233, 235, 236, 238, 240, 241, 243, 244, 245, 246, 247, 248, 250, 256, 260, 261, 264, 267, 269, 271, 277, 281, 283, 285, 286, 288, 295, 306, 308, 309, 310, 315, 317, 323, 330, 332, 333, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357], "1": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 41, 42, 43, 44, 52, 62, 69, 71, 74, 78, 79, 80, 81, 90, 97, 98, 101, 117, 118, 119, 121, 123, 127, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 159, 161, 162, 168, 169, 170, 174, 176, 177, 178, 183, 184, 187, 189, 191, 195, 196, 197, 200, 205, 206, 208, 209, 210, 215, 216, 217, 222, 225, 229, 230, 232, 233, 234, 235, 236, 240, 241, 243, 244, 245, 246, 247, 248, 250, 256, 260, 261, 263, 264, 269, 271, 276, 280, 281, 283, 285, 286, 287, 288, 295, 303, 306, 308, 309, 310, 311, 315, 317, 319, 322, 323, 324, 329, 330, 332, 333, 335, 336, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357], "result": [0, 1, 2, 3, 5, 9, 15, 16, 17, 18, 28, 29, 30, 31, 32, 34, 35, 36, 40, 41, 42, 44, 46, 49, 50, 54, 57, 58, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 79, 80, 81, 89, 96, 97, 101, 102, 103, 117, 127, 150, 168, 171, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 205, 211, 214, 216, 218, 219, 220, 221, 224, 225, 230, 231, 233, 235, 236, 237, 239, 242, 243, 245, 246, 248, 249, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 279, 280, 281, 284, 285, 286, 287, 288, 291, 292, 323, 326, 329, 330, 335, 345, 346, 347, 348, 349, 350, 353, 354], "run": [0, 1, 2, 3, 5, 6, 12, 15, 24, 25, 28, 36, 37, 38, 40, 42, 58, 78, 87, 97, 101, 103, 179, 180, 182, 183, 184, 185, 187, 225, 235, 239, 242, 247, 261, 265, 266, 267, 272, 277, 279, 286, 291, 326, 329, 330, 343, 354, 356], "sampl": [0, 1, 2, 9, 10, 12, 17, 22, 27, 29, 31, 32, 33, 34, 36, 40, 41, 43, 65, 69, 71, 72, 90, 91, 97, 101, 117, 122, 123, 125, 127, 181, 196, 228, 229, 232, 233, 235, 245, 246, 248, 249, 255, 256, 257, 258, 259, 264, 265, 269, 274, 283, 285, 286, 288, 326, 327, 329, 338, 339, 340, 341, 342, 345], "print": [0, 1, 2, 3, 5, 10, 12, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 41, 42, 44, 52, 54, 78, 80, 97, 100, 119, 120, 121, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 154, 155, 169, 170, 174, 176, 177, 178, 196, 197, 205, 206, 210, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 240, 241, 244, 245, 246, 248, 249, 260, 264, 269, 270, 273, 280, 285, 288, 308, 309, 315, 317, 323, 332, 333, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 352, 353, 354], "f": [0, 1, 2, 3, 10, 31, 32, 41, 52, 78, 123, 154, 155, 161, 174, 176, 177, 178, 186, 232, 269, 283, 298, 300, 301, 302, 308, 317, 352, 353, 354], "state": [0, 1, 2, 3, 5, 9, 10, 12, 13, 14, 16, 17, 19, 22, 24, 27, 29, 30, 32, 33, 34, 35, 36, 37, 39, 41, 69, 71, 72, 74, 75, 88, 90, 91, 92, 97, 101, 117, 118, 122, 125, 126, 127, 149, 150, 152, 157, 165, 171, 172, 188, 189, 191, 196, 204, 205, 222, 224, 228, 230, 232, 233, 235, 236, 237, 238, 243, 244, 250, 251, 252, 253, 254, 269, 283, 285, 286, 288, 293, 302, 323, 326, 338, 339, 340, 341, 342, 343, 344, 351, 354, 355], "amplitud": [0, 1, 10, 17, 29, 30, 33, 37, 38, 97, 101, 123, 125, 126, 127, 222, 293, 310, 315, 325], "00": [0, 2, 3, 10, 29, 30, 31, 32, 127, 235, 269, 285], "7071067811865475": [0, 10, 30, 78], "0j": [0, 10, 17, 30, 176, 177, 178, 352], "11": [0, 2, 5, 10, 17, 29, 30, 31, 32, 44, 80, 81, 133, 135, 138, 139, 140, 141, 142, 146, 148, 225, 235, 269, 340, 346, 347, 353], "first": [0, 1, 3, 11, 15, 16, 17, 29, 32, 35, 37, 39, 42, 58, 62, 65, 78, 97, 101, 103, 125, 130, 136, 149, 161, 168, 171, 180, 188, 194, 205, 209, 214, 216, 218, 220, 221, 224, 225, 230, 236, 237, 248, 250, 267, 271, 275, 276, 277, 279, 280, 281, 285, 286, 291, 293, 298, 300, 301, 302, 303, 331, 338, 340, 341, 346, 347, 353, 354], "line": [0, 1, 3, 5, 6, 13, 17, 18, 24, 52, 80, 82, 83, 97, 101, 232, 235, 288, 323, 331, 345, 352], "decor": [0, 1, 10, 15, 18, 194, 198, 202, 232, 235, 326], "two": [0, 1, 5, 6, 13, 17, 18, 21, 24, 26, 27, 29, 35, 36, 40, 41, 42, 43, 79, 97, 101, 119, 130, 131, 149, 151, 153, 158, 161, 169, 170, 172, 175, 189, 191, 193, 194, 205, 209, 214, 216, 218, 220, 225, 230, 233, 236, 243, 244, 247, 250, 269, 274, 281, 286, 287, 293, 298, 300, 301, 303, 309, 323, 325, 326, 338, 340, 341, 345, 346, 347, 353, 354], "i": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 52, 54, 57, 58, 61, 62, 63, 65, 66, 67, 69, 71, 72, 74, 75, 78, 79, 80, 81, 82, 83, 84, 91, 92, 93, 94, 97, 98, 101, 103, 105, 109, 110, 111, 112, 113, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 260, 261, 263, 264, 267, 269, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 288, 290, 291, 292, 293, 298, 300, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 317, 318, 319, 321, 322, 324, 326, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 28, 30, 31, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44, 47, 49, 52, 54, 57, 58, 61, 62, 63, 64, 65, 67, 71, 72, 75, 77, 78, 79, 80, 84, 87, 91, 98, 101, 103, 105, 109, 121, 122, 123, 124, 125, 127, 128, 130, 132, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 153, 154, 155, 158, 160, 168, 169, 171, 172, 174, 175, 180, 182, 183, 184, 185, 187, 190, 192, 194, 195, 196, 197, 198, 200, 201, 205, 206, 207, 208, 209, 210, 214, 215, 216, 218, 220, 225, 228, 229, 230, 231, 233, 234, 235, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 259, 260, 261, 262, 264, 268, 269, 271, 272, 273, 274, 276, 278, 279, 280, 285, 286, 287, 292, 293, 298, 317, 323, 325, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355], "declar": [0, 5, 9, 16, 17, 18, 20, 26, 27, 91, 97, 121, 195, 200, 228, 232, 233, 234, 239, 244, 329], "describ": [0, 5, 8, 9, 11, 12, 15, 17, 18, 19, 23, 26, 28, 29, 32, 33, 36, 37, 39, 44, 78, 79, 84, 86, 87, 91, 100, 110, 112, 119, 121, 122, 125, 127, 129, 130, 131, 133, 149, 152, 188, 189, 191, 192, 194, 195, 197, 205, 226, 229, 230, 231, 241, 244, 245, 246, 248, 249, 250, 256, 257, 260, 264, 271, 280, 291, 293, 325, 326, 343, 351, 352, 354], "our": [0, 1, 2, 3, 4, 15, 17, 23, 24, 29, 32, 34, 36, 40, 41, 42, 207, 230, 241, 250, 269, 286, 325, 327, 337, 339, 341, 342, 343, 353, 354], "A": [0, 2, 5, 9, 10, 11, 13, 14, 16, 19, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 40, 50, 54, 55, 66, 69, 78, 82, 83, 101, 117, 118, 121, 130, 133, 134, 136, 144, 147, 151, 154, 169, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 198, 205, 206, 207, 213, 225, 230, 235, 239, 241, 243, 244, 245, 246, 248, 250, 251, 253, 254, 260, 263, 264, 266, 268, 269, 273, 274, 275, 276, 277, 278, 279, 281, 287, 288, 294, 298, 300, 301, 318, 320, 321, 322, 324, 325, 326, 335, 338, 339, 342, 343, 344, 352, 353, 357], "detail": [0, 1, 2, 17, 33, 35, 36, 47, 79, 101, 186, 194, 205, 225, 232, 233, 276, 278, 326, 338, 339, 340, 341, 342, 351, 352, 353, 354], "descript": [0, 5, 18, 36, 37, 38, 43, 100, 123, 125, 134, 136, 144, 147, 285, 335, 344], "gener": [0, 5, 10, 12, 15, 16, 17, 18, 19, 23, 24, 29, 30, 35, 37, 38, 45, 46, 49, 52, 54, 57, 63, 78, 97, 101, 102, 103, 105, 106, 107, 112, 120, 123, 127, 132, 149, 150, 188, 189, 194, 195, 202, 205, 206, 208, 209, 210, 211, 212, 215, 216, 223, 224, 225, 233, 235, 236, 240, 242, 244, 247, 250, 256, 257, 262, 275, 281, 285, 293, 310, 326, 332, 333, 334, 335, 343, 344, 353, 354, 355], "found": [0, 3, 10, 23, 32, 36, 37, 97, 120, 149, 150, 171, 232, 241, 245, 246, 247, 248, 249, 255, 258, 260, 261, 264, 290, 326, 327, 335, 345, 351, 355], "section": [0, 1, 2, 3, 5, 8, 10, 11, 15, 18, 19, 23, 26, 27, 32, 34, 36, 40, 41, 43, 44, 47, 78, 79, 97, 180, 186, 194, 241, 245, 246, 248, 260, 264, 278, 326, 330, 334, 335, 353, 355], "directli": [0, 10, 13, 17, 18, 29, 44, 70, 124, 129, 201, 230, 235, 236, 244, 247, 261, 269, 285, 328, 343, 353, 354, 355], "via": [0, 10, 11, 15, 17, 18, 19, 21, 24, 25, 26, 27, 35, 91, 97, 101, 112, 119, 123, 127, 133, 168, 171, 197, 199, 206, 225, 226, 228, 229, 230, 231, 233, 235, 236, 239, 243, 244, 247, 250, 261, 266, 271, 272, 278, 326, 335, 343, 352, 353, 354, 355], "method": [0, 1, 2, 3, 6, 13, 15, 16, 17, 18, 19, 22, 25, 26, 27, 29, 30, 32, 33, 34, 35, 40, 42, 44, 91, 98, 100, 101, 103, 120, 123, 127, 128, 129, 130, 150, 152, 154, 155, 168, 170, 172, 174, 180, 186, 194, 195, 196, 200, 205, 206, 207, 208, 209, 210, 214, 215, 216, 223, 225, 228, 229, 230, 233, 234, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 257, 260, 261, 262, 264, 266, 267, 269, 271, 272, 274, 275, 276, 279, 280, 282, 285, 286, 291, 293, 308, 309, 318, 320, 326, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357], "look": [0, 1, 4, 15, 17, 24, 31, 35, 36, 41, 127, 247, 261, 283, 286, 326, 344], "avail": [0, 4, 5, 6, 9, 19, 26, 28, 30, 32, 33, 37, 38, 47, 64, 81, 133, 149, 154, 155, 168, 188, 240, 241, 245, 246, 247, 248, 249, 260, 261, 264, 293, 325, 326, 336, 337, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356], "qpu": [0, 1, 2, 3, 8, 9, 10, 15, 17, 19, 24, 25, 28, 29, 30, 31, 32, 33, 35, 39, 41, 42, 45, 46, 56, 58, 60, 61, 62, 65, 67, 68, 76, 80, 81, 83, 84, 86, 87, 91, 97, 100, 101, 103, 123, 125, 127, 150, 171, 179, 182, 183, 184, 185, 187, 190, 192, 196, 242, 247, 261, 266, 267, 269, 271, 272, 274, 275, 276, 277, 279, 280, 281, 325, 326, 328, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 353, 354, 356], "execut": [0, 3, 5, 8, 9, 10, 11, 15, 18, 19, 23, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 58, 61, 62, 65, 81, 87, 91, 97, 101, 103, 127, 171, 179, 182, 183, 184, 185, 186, 187, 225, 228, 229, 233, 255, 265, 268, 272, 275, 277, 278, 284, 285, 286, 287, 291, 325, 326, 328, 329, 334, 335, 345, 346, 347, 348, 349, 350, 354, 356], "more": [0, 1, 3, 5, 10, 12, 17, 18, 22, 24, 26, 27, 28, 32, 35, 36, 40, 42, 49, 54, 57, 63, 79, 91, 97, 101, 129, 170, 171, 181, 193, 205, 206, 228, 229, 232, 233, 240, 276, 283, 285, 308, 326, 329, 335, 344, 352, 353, 354], "inform": [0, 2, 3, 5, 6, 11, 29, 30, 33, 34, 36, 37, 38, 40, 41, 61, 79, 80, 97, 125, 126, 127, 128, 170, 181, 182, 183, 184, 185, 187, 188, 193, 201, 205, 217, 223, 228, 229, 292, 308, 325, 326, 329, 352, 353, 354], "about": [0, 32, 37, 38, 97, 188, 201, 326, 353], "process": [0, 2, 5, 9, 13, 23, 28, 29, 30, 33, 35, 36, 40, 41, 42, 43, 88, 90, 91, 97, 100, 103, 127, 180, 181, 186, 206, 217, 225, 265, 266, 268, 284, 287, 291, 292, 293, 298, 301, 308, 354, 356], "sequenti": [0, 1, 3, 12, 40, 280, 325, 326, 351, 354], "qprog": [0, 30, 31], "number": [0, 1, 2, 6, 11, 16, 17, 24, 25, 29, 30, 31, 32, 33, 34, 36, 37, 38, 43, 71, 78, 80, 81, 87, 97, 100, 101, 116, 117, 121, 122, 125, 126, 127, 130, 132, 134, 144, 149, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 174, 182, 205, 209, 210, 214, 216, 218, 219, 220, 221, 222, 224, 225, 226, 235, 236, 237, 238, 239, 241, 244, 245, 246, 248, 249, 250, 260, 264, 267, 269, 271, 273, 276, 280, 281, 283, 285, 286, 287, 308, 309, 311, 323, 325, 326, 335, 337, 338, 340, 342, 343, 346, 347, 349, 350, 352, 353, 354, 357], "qbit": [0, 1, 10, 12, 15, 16, 17, 18, 30, 31, 32, 41, 44, 78, 79, 80, 91, 97, 98, 101, 122, 129, 189, 191, 194, 196, 205, 206, 207, 214, 216, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 240, 269, 274, 277, 288, 308, 309, 323, 324, 353], "nbqbit": [0, 15, 27, 32, 36, 41, 43, 78, 81, 87, 97, 100, 122, 125, 130, 134, 155, 174, 210, 226, 233, 274, 353, 354], "2": [0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 36, 41, 42, 43, 44, 51, 52, 62, 70, 75, 78, 79, 81, 92, 97, 98, 119, 121, 123, 126, 127, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 158, 159, 161, 162, 163, 168, 169, 170, 171, 172, 174, 176, 177, 178, 187, 194, 196, 197, 203, 204, 205, 206, 208, 209, 210, 214, 216, 218, 219, 220, 221, 222, 225, 228, 229, 230, 232, 235, 236, 240, 243, 244, 245, 246, 248, 249, 250, 260, 261, 263, 264, 267, 269, 271, 274, 277, 280, 283, 285, 286, 295, 297, 302, 303, 308, 309, 311, 315, 317, 322, 323, 324, 332, 333, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357], "alloc": [0, 10, 11, 16, 52, 97, 208, 209, 210, 211, 212, 215, 216, 225, 228, 229, 230, 233, 236, 323, 331, 333], "some": [0, 5, 8, 10, 12, 15, 16, 17, 18, 19, 21, 22, 27, 29, 30, 32, 34, 35, 36, 40, 41, 42, 69, 80, 97, 101, 122, 123, 124, 127, 149, 166, 180, 194, 195, 201, 204, 205, 208, 211, 212, 223, 224, 225, 228, 229, 233, 235, 236, 237, 240, 242, 247, 251, 253, 254, 261, 266, 268, 272, 293, 326, 334, 335, 344, 346, 347, 348, 349, 350, 353], "qalloc": [0, 1, 3, 10, 11, 12, 13, 15, 16, 17, 30, 31, 32, 78, 80, 97, 98, 150, 196, 205, 206, 207, 210, 225, 228, 229, 233, 234, 236, 269, 277, 288, 353, 354], "appli": [0, 1, 5, 9, 11, 16, 18, 20, 24, 32, 35, 43, 52, 69, 74, 78, 98, 129, 130, 131, 149, 150, 162, 164, 168, 171, 188, 189, 190, 191, 192, 193, 197, 206, 207, 222, 225, 228, 230, 232, 236, 269, 277, 286, 293, 315, 316, 317, 321, 323, 324, 326, 344, 353, 354], "export": [0, 5, 53, 54, 225], "to_circ": [0, 1, 3, 10, 12, 13, 15, 16, 17, 30, 31, 32, 49, 54, 57, 63, 78, 80, 97, 98, 150, 194, 196, 205, 206, 207, 208, 209, 210, 214, 215, 216, 225, 236, 240, 269, 277, 288, 326, 353, 354], "processor": [0, 3, 29, 91, 97, 127, 133, 286, 325, 356], "unit": [0, 2, 9, 28, 29, 35, 287, 293, 307, 315, 317, 356], "factori": [0, 29, 250, 343], "default": [0, 2, 3, 6, 10, 29, 30, 31, 36, 37, 38, 44, 49, 52, 54, 57, 58, 61, 62, 63, 65, 67, 69, 71, 92, 97, 98, 101, 103, 105, 106, 107, 108, 115, 121, 122, 125, 127, 129, 130, 132, 150, 154, 155, 160, 161, 162, 164, 166, 168, 171, 172, 173, 174, 180, 183, 184, 187, 188, 189, 190, 191, 192, 193, 196, 205, 206, 211, 213, 214, 225, 233, 235, 236, 237, 240, 241, 242, 244, 246, 247, 248, 250, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 279, 280, 281, 283, 284, 285, 286, 288, 290, 291, 292, 298, 299, 300, 301, 304, 308, 309, 317, 322, 323, 324, 328, 329, 344, 352], "one": [0, 3, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 24, 25, 26, 27, 28, 30, 31, 32, 36, 40, 42, 72, 74, 75, 78, 80, 97, 103, 120, 121, 123, 127, 129, 130, 149, 151, 153, 162, 165, 169, 170, 171, 172, 175, 180, 193, 194, 205, 225, 232, 235, 239, 241, 245, 246, 247, 248, 249, 250, 251, 260, 261, 264, 265, 266, 269, 270, 272, 276, 280, 283, 285, 286, 291, 293, 309, 323, 325, 326, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 353, 354], "get_default_qpu": [0, 1, 2, 3, 17, 29, 30, 31, 32, 41, 42, 44, 97, 100, 101, 150, 196, 269, 284, 326, 345, 346, 347, 348, 349, 350, 353, 354], "to_job": [0, 1, 2, 3, 12, 17, 19, 22, 24, 25, 27, 29, 30, 31, 32, 34, 35, 41, 42, 44, 80, 97, 127, 129, 150, 196, 247, 261, 269, 277, 288, 326, 338, 339, 340, 341, 342, 345, 353, 354], "submit": [0, 1, 2, 3, 5, 17, 28, 29, 30, 31, 32, 35, 36, 40, 41, 42, 44, 58, 61, 62, 64, 65, 80, 97, 101, 150, 196, 269, 272, 277, 279, 285, 286, 288, 291, 292, 326, 329, 330, 338, 339, 340, 341, 342, 345, 353, 354], "iter": [0, 1, 3, 30, 32, 42, 180, 181, 202, 225, 236, 265, 267, 268, 271, 272, 276, 281, 326, 354], "over": [0, 1, 5, 12, 24, 30, 35, 41, 55, 58, 69, 75, 79, 91, 97, 122, 129, 205, 225, 232, 236, 250, 261, 283, 319], "final": [0, 1, 3, 9, 11, 13, 17, 19, 22, 27, 29, 30, 31, 32, 33, 34, 36, 41, 44, 75, 88, 90, 97, 122, 127, 195, 220, 221, 236, 239, 241, 244, 245, 246, 248, 249, 260, 262, 264, 269, 344, 353, 354], "vector": [0, 24, 33, 37, 38, 71, 72, 74, 75, 125, 149, 157, 159, 171, 241, 247, 261, 267, 293, 294, 296, 297, 302, 313, 323, 336], "all": [0, 1, 4, 5, 10, 17, 19, 20, 29, 30, 31, 32, 36, 37, 41, 42, 54, 55, 76, 79, 80, 81, 95, 97, 101, 105, 108, 127, 130, 131, 133, 134, 166, 170, 179, 188, 192, 194, 201, 202, 205, 206, 214, 216, 218, 219, 220, 221, 223, 225, 230, 236, 240, 247, 248, 250, 259, 260, 265, 267, 268, 270, 271, 274, 275, 276, 277, 279, 280, 281, 285, 288, 292, 293, 325, 326, 331, 334, 335, 346, 352, 353], "compon": [0, 36, 123], "": [0, 1, 3, 5, 11, 15, 17, 18, 20, 22, 30, 32, 44, 58, 60, 62, 64, 66, 100, 101, 133, 150, 158, 159, 161, 171, 194, 196, 203, 208, 210, 213, 225, 232, 241, 242, 244, 247, 253, 261, 262, 275, 280, 283, 287, 336, 353, 354, 357], "few": [0, 1, 3, 17, 43, 194, 335, 344], "dedic": [0, 5, 9, 19, 44, 127, 293, 335], "atom": [0, 172, 326, 351, 353], "task": [0, 274, 334], "languag": [0, 5, 18, 325], "Then": [0, 1, 17, 40, 75, 150, 171, 180, 205, 236, 269, 283, 325, 332], "remain": [0, 5, 169, 171, 173, 205, 206, 326], "instanti": [0, 3, 12, 36, 61, 62, 78, 103, 120, 150, 197, 198, 201, 206, 223, 226, 228, 229, 230, 231, 235, 242, 273, 287], "instal": [0, 5, 7, 47, 171, 325, 326, 328], "algorithm": [0, 5, 8, 9, 10, 12, 17, 26, 28, 29, 35, 40, 149, 182, 183, 184, 185, 187, 210, 240, 265, 267, 274, 276, 281, 326, 334, 337, 350, 353, 354, 356], "framework": [1, 2, 3, 4, 6, 8, 9, 10, 12, 13, 19, 32, 34, 36, 40, 41, 42, 44, 76, 91, 195, 247, 269, 344, 356], "advanc": [1, 4, 8, 10, 12, 14, 28, 32, 40, 49, 52, 54, 57, 63, 97, 112, 119, 194, 195, 325, 344], "onli": [1, 4, 5, 6, 7, 13, 16, 17, 18, 19, 22, 26, 27, 29, 30, 31, 33, 36, 41, 42, 43, 44, 97, 98, 101, 119, 121, 125, 126, 130, 131, 149, 150, 155, 160, 164, 171, 172, 193, 200, 206, 209, 214, 216, 218, 220, 221, 223, 225, 228, 230, 231, 234, 236, 242, 247, 257, 261, 274, 280, 284, 285, 286, 288, 298, 317, 326, 333, 334, 335, 346, 347, 348, 349, 350, 353, 354], "support": [1, 2, 4, 5, 6, 7, 8, 13, 16, 29, 31, 35, 36, 40, 43, 66, 80, 97, 100, 101, 112, 119, 129, 205, 247, 261, 285, 326, 333], "sever": [1, 5, 10, 13, 29, 32, 33, 36, 37, 64, 69, 71, 72, 91, 96, 97, 101, 120, 265, 280, 325, 352, 354], "paradigm": [1, 8, 9, 334], "base": [1, 5, 8, 9, 13, 17, 26, 32, 34, 44, 69, 76, 172, 179, 181, 194, 207, 210, 213, 214, 215, 216, 232, 239, 255, 265, 267, 268, 271, 276, 279, 281, 285, 286, 293, 316, 325, 326, 334, 351, 352, 353, 354, 356], "guid": [1, 4, 28, 47, 97, 188, 194, 293, 356], "page": [1, 4, 5, 12, 30, 34, 36, 37, 38, 44, 47, 285, 327, 328, 352, 353], "focu": [1, 269], "modul": [1, 2, 5, 9, 10, 13, 19, 24, 40, 47, 52, 68, 69, 76, 78, 82, 83, 84, 91, 119, 121, 133, 149, 188, 194, 202, 206, 207, 217, 225, 232, 235, 239, 286, 288, 293, 326, 327, 329, 330, 345, 351, 352, 353, 355], "requir": [1, 3, 5, 6, 17, 27, 32, 36, 41, 42, 44, 76, 79, 87, 97, 101, 121, 125, 130, 207, 225, 236, 253, 262, 266, 268, 269, 274, 280, 326, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 357], "which": [1, 3, 5, 6, 10, 13, 14, 17, 19, 20, 21, 25, 30, 32, 34, 35, 36, 40, 41, 42, 43, 44, 54, 55, 61, 65, 69, 72, 78, 79, 82, 83, 91, 97, 103, 117, 122, 123, 124, 127, 130, 131, 158, 161, 169, 171, 180, 183, 184, 187, 189, 191, 194, 214, 216, 218, 219, 224, 225, 228, 229, 233, 237, 239, 241, 242, 244, 246, 247, 248, 250, 256, 261, 264, 266, 267, 269, 279, 280, 283, 285, 286, 291, 317, 318, 319, 323, 324, 325, 329, 334, 335, 342, 343, 349, 352, 353, 354], "includ": [1, 5, 10, 24, 29, 35, 49, 52, 54, 57, 63, 72, 91, 97, 123, 160, 162, 164, 168, 171, 194, 195, 206, 209, 210, 225, 255, 256, 257, 258, 259, 272, 273, 285, 311, 326, 351, 352, 355, 356], "nativ": [1, 16, 29, 97], "reli": [1, 24, 298, 326, 334, 352], "ad": [1, 10, 17, 27, 33, 36, 49, 54, 57, 63, 209, 213, 225, 233, 267, 315, 326], "either": [1, 5, 11, 18, 33, 36, 40, 41, 97, 125, 130, 132, 171, 180, 181, 182, 183, 184, 185, 187, 193, 205, 232, 239, 243, 267, 283, 285, 290, 329, 354], "qfunc": [1, 3, 10, 194, 326], "class": [1, 5, 10, 11, 14, 17, 21, 24, 25, 26, 27, 29, 32, 35, 36, 41, 42, 44, 52, 54, 55, 58, 61, 62, 64, 65, 67, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 95, 96, 97, 100, 101, 102, 103, 104, 109, 110, 111, 112, 113, 115, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 144, 147, 149, 154, 155, 162, 169, 170, 171, 174, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 205, 206, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 295, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 329, 330, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 352, 353, 354], "let": [1, 15, 18, 31, 222, 232, 283, 326, 352, 353, 354], "search": [1, 42, 171, 196, 325, 344], "find": [1, 19, 23, 32, 35, 40, 97, 149, 158, 280, 336, 337, 339, 342, 344, 345, 348, 349, 350, 353], "element": [1, 24, 25, 123, 132, 150, 188, 192, 200, 234, 247, 261, 272, 287, 312, 313, 357], "unstructur": 1, "space": [1, 24, 42, 91, 122, 149, 169, 173, 225, 293, 326, 351, 353, 354], "quadrat": [1, 23, 35, 244, 247, 261, 357], "faster": [1, 20, 37, 38, 250, 326], "than": [1, 5, 26, 32, 35, 36, 91, 101, 122, 129, 169, 233, 236, 240, 248, 264, 281, 326, 352, 354], "random": [1, 12, 22, 24, 25, 35, 169, 170, 193, 205, 232, 260, 273, 276, 279, 280, 281, 287, 288, 308, 309, 335, 341, 354, 357], "classic": [1, 10, 24, 29, 30, 34, 35, 42, 69, 73, 75, 79, 89, 91, 97, 98, 128, 150, 194, 197, 199, 200, 205, 225, 230, 231, 233, 241, 245, 246, 248, 249, 250, 260, 264, 265, 271, 279, 288, 325, 326, 337, 343, 350, 351, 354], "In": [1, 3, 4, 5, 7, 9, 10, 14, 15, 16, 17, 19, 24, 28, 29, 30, 31, 32, 35, 36, 40, 41, 42, 43, 44, 71, 72, 79, 97, 168, 194, 202, 205, 210, 225, 235, 236, 242, 244, 250, 256, 269, 277, 280, 283, 286, 306, 330, 334, 335, 343, 344, 352], "model": [1, 19, 35, 86, 124, 149, 159, 163, 189, 190, 193, 194, 244, 247, 261, 293, 352, 353, 354, 355, 357], "problem": [1, 10, 12, 17, 23, 24, 25, 32, 35, 117, 122, 149, 150, 179, 181, 182, 183, 184, 185, 187, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 262, 264, 280, 287, 326, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 357], "specifi": [1, 2, 3, 6, 15, 17, 18, 19, 20, 26, 29, 35, 61, 62, 69, 71, 72, 74, 97, 123, 129, 130, 171, 188, 189, 190, 191, 192, 194, 196, 205, 206, 214, 216, 218, 219, 220, 221, 225, 231, 232, 235, 241, 244, 247, 251, 261, 269, 274, 287, 326, 338, 339, 340, 341, 342, 343, 344, 357], "e": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 16, 17, 18, 20, 23, 24, 25, 26, 29, 32, 34, 35, 36, 40, 41, 42, 43, 44, 52, 65, 69, 72, 78, 87, 92, 97, 101, 120, 121, 122, 127, 131, 150, 152, 155, 161, 168, 169, 171, 175, 189, 190, 191, 197, 200, 202, 205, 208, 209, 211, 222, 225, 228, 229, 230, 233, 234, 236, 239, 240, 242, 244, 247, 250, 261, 269, 271, 272, 275, 279, 280, 282, 283, 293, 298, 300, 301, 307, 309, 317, 321, 322, 323, 324, 326, 329, 336, 337, 338, 339, 340, 342, 343, 346, 347, 348, 349, 350, 353, 354, 356], "mathcal": [1, 151, 156, 158, 169, 283, 298, 300, 301, 307, 308, 309, 321, 322, 323, 324], "x": [1, 3, 10, 11, 12, 13, 17, 18, 20, 21, 27, 52, 66, 69, 74, 101, 121, 129, 142, 150, 151, 153, 163, 169, 171, 172, 174, 176, 178, 210, 222, 235, 241, 250, 261, 274, 288, 297, 303, 311, 326, 332, 336, 344, 352, 354], "rightarrow": 1, "we": [1, 3, 5, 9, 11, 12, 15, 16, 17, 18, 24, 25, 26, 28, 29, 30, 31, 42, 54, 72, 79, 92, 97, 119, 123, 149, 150, 171, 194, 195, 201, 205, 206, 210, 230, 232, 241, 246, 247, 260, 261, 271, 279, 280, 319, 330, 334, 335, 337, 341, 342, 344, 349, 350, 351, 352, 353, 354], "consist": [1, 5, 9, 13, 19, 25, 32, 35, 69, 129, 171, 225, 239, 244, 266, 280, 286, 336, 337, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350], "altern": [1, 11, 37, 38, 44, 162, 293, 326, 343, 352], "oper": [1, 10, 11, 12, 17, 18, 19, 20, 21, 24, 32, 37, 39, 41, 42, 44, 70, 77, 79, 97, 98, 119, 120, 121, 122, 127, 129, 149, 150, 152, 155, 156, 168, 169, 174, 189, 190, 191, 192, 194, 196, 197, 199, 201, 204, 206, 207, 208, 210, 212, 213, 217, 224, 225, 226, 230, 231, 232, 233, 239, 243, 250, 267, 272, 286, 304, 306, 307, 309, 310, 315, 317, 323, 326, 353, 354, 355], "pi": [1, 11, 18, 42, 52, 121, 169, 171, 175, 194, 222, 232, 235, 274, 354], "sqrt": [1, 18, 29, 30, 31, 92, 119, 126, 222, 302, 303, 309, 310, 315, 317, 323], "frac": [1, 18, 25, 101, 123, 154, 158, 159, 161, 168, 169, 171, 205, 222, 246, 250, 271, 303, 309, 317, 322, 324, 335, 344, 352], "4": [1, 5, 11, 12, 15, 17, 18, 22, 25, 26, 27, 32, 43, 44, 52, 80, 97, 105, 107, 119, 129, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 165, 166, 167, 170, 174, 176, 177, 178, 195, 205, 210, 223, 225, 235, 236, 241, 245, 246, 248, 257, 264, 269, 281, 295, 297, 324, 338, 339, 340, 342, 345, 346, 347, 348, 350, 352, 353, 354, 357], "where": [1, 5, 12, 18, 24, 25, 35, 42, 92, 97, 101, 121, 123, 126, 150, 153, 158, 161, 169, 171, 196, 203, 205, 214, 216, 218, 219, 220, 221, 224, 237, 244, 247, 250, 261, 263, 280, 285, 286, 315, 317, 319, 337, 338, 339, 340, 341, 342, 343, 350], "probabl": [1, 2, 15, 30, 32, 33, 35, 36, 41, 71, 72, 74, 89, 92, 97, 101, 125, 126, 127, 171, 193, 196, 235, 269, 286, 309, 315, 317, 344], "uniform": [1, 194, 203, 238], "distribut": [1, 4, 5, 7, 97, 125, 127, 194, 203, 205, 238, 286, 326, 354], "u_f": 1, "rangl": [1, 12, 14, 16, 17, 29, 30, 31, 32, 44, 69, 75, 92, 101, 126, 150, 152, 191, 194, 196, 203, 204, 205, 208, 209, 210, 212, 214, 215, 216, 218, 219, 220, 221, 222, 225, 232, 233, 236, 238, 244, 250, 269, 271, 283, 285, 286, 302, 315, 343, 344], "mapsto": [1, 208, 209, 210, 212, 214, 215, 216, 218, 219, 220, 221], "u_d": 1, "langl": [1, 12, 29, 31, 44, 92, 101, 126, 150, 191, 196, 203, 204, 271, 283, 302, 343, 354], "sum_": [1, 24, 25, 35, 151, 154, 159, 161, 163, 169, 175, 205, 222, 244, 250, 286, 287, 321, 322, 323, 352], "dive": 1, "implement": [1, 10, 11, 14, 15, 16, 17, 18, 19, 35, 36, 42, 67, 77, 78, 79, 91, 97, 98, 112, 121, 122, 149, 152, 155, 168, 169, 173, 174, 194, 196, 198, 203, 204, 205, 206, 207, 213, 214, 215, 216, 217, 225, 237, 240, 250, 252, 253, 262, 267, 268, 269, 272, 274, 280, 291, 315, 316, 318, 320, 323, 326, 343, 352, 354], "To": [1, 5, 6, 11, 18, 19, 22, 24, 25, 29, 97, 98, 131, 149, 169, 194, 241, 245, 246, 248, 249, 260, 264, 269, 270, 273, 328, 329, 341, 342, 349, 351, 352, 353, 354], "keep": [1, 17, 32, 44, 206, 225, 265, 273, 325], "thing": [1, 16, 24, 207, 326], "consid": [1, 11, 15, 17, 18, 29, 43, 101, 205, 222, 225, 236, 240, 285, 329, 352, 354], "2k": [1, 101], "set": [1, 2, 3, 5, 6, 10, 11, 13, 14, 18, 29, 30, 32, 36, 40, 42, 43, 44, 49, 54, 57, 58, 63, 65, 67, 71, 78, 79, 91, 97, 98, 100, 105, 106, 108, 111, 112, 119, 120, 121, 125, 126, 127, 130, 150, 155, 158, 166, 169, 171, 172, 173, 174, 189, 195, 202, 206, 223, 225, 228, 230, 232, 233, 235, 236, 237, 240, 242, 243, 250, 268, 270, 272, 275, 277, 279, 280, 281, 285, 318, 325, 326, 335, 337, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 354, 355], "put": [1, 6, 49, 54, 57, 63, 161], "qubit": [1, 10, 11, 14, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 36, 37, 38, 40, 43, 49, 52, 54, 57, 63, 65, 66, 69, 71, 72, 74, 75, 78, 79, 81, 87, 91, 100, 101, 122, 125, 127, 129, 130, 131, 134, 144, 149, 155, 156, 157, 160, 162, 164, 165, 166, 167, 169, 170, 171, 174, 189, 190, 191, 192, 193, 194, 196, 205, 208, 209, 210, 211, 212, 215, 216, 224, 225, 228, 229, 230, 231, 233, 236, 237, 242, 250, 263, 265, 269, 274, 285, 286, 288, 308, 309, 311, 322, 323, 324, 325, 326, 329, 331, 333, 352, 353, 354, 357], "diagon": [1, 24, 25, 150, 163, 171, 240, 242, 243, 244, 247, 263, 274, 343, 353, 357], "basi": [1, 5, 17, 22, 29, 30, 90, 91, 97, 125, 127, 129, 149, 154, 155, 169, 171, 172, 174, 175, 176, 177, 178, 189, 191, 210, 225, 230, 242, 265, 274, 282, 286, 296, 297, 311, 312, 313, 321, 323, 326, 344, 351, 352, 353], "wall": [1, 32], "flip": [1, 13, 17, 35, 97, 228, 230, 231, 233, 244, 250, 353], "control": [1, 5, 10, 17, 18, 19, 42, 69, 78, 79, 98, 130, 172, 194, 201, 205, 225, 236, 325, 326], "z": [1, 2, 11, 17, 18, 20, 21, 22, 24, 26, 27, 29, 30, 32, 66, 129, 172, 176, 177, 178, 225, 228, 242, 244, 274, 311, 352], "undo": 1, "chang": [1, 5, 6, 18, 19, 22, 24, 35, 97, 149, 169, 171, 175, 214, 216, 218, 220, 221, 269, 274, 279, 285, 326, 344, 353, 354], "given": [1, 3, 5, 11, 24, 25, 29, 30, 32, 35, 41, 42, 44, 78, 97, 101, 103, 112, 119, 123, 149, 150, 151, 171, 189, 191, 204, 222, 225, 241, 245, 246, 248, 249, 260, 264, 267, 269, 287, 296, 300, 315, 317, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 353, 354], "k": [1, 74, 92, 101, 126, 161, 163, 168, 184, 205, 222, 224, 235, 237, 239, 248, 250, 255, 271, 323, 325, 335, 339, 345, 352], "return": [1, 3, 10, 11, 15, 17, 18, 28, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 49, 50, 52, 54, 57, 58, 59, 61, 62, 63, 64, 65, 66, 70, 71, 72, 74, 75, 79, 92, 95, 96, 97, 99, 100, 101, 103, 105, 107, 108, 111, 112, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 130, 132, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 193, 195, 196, 198, 203, 204, 205, 206, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 269, 270, 271, 272, 275, 276, 277, 279, 280, 281, 282, 284, 285, 286, 287, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 321, 322, 323, 324, 326, 329, 345], "routin": [1, 10, 11, 16, 17, 18, 29, 42, 97, 162, 164, 166, 171, 196, 203, 204, 205, 207, 208, 209, 210, 211, 212, 215, 216, 217, 222, 224, 225, 236, 237, 238, 274], "numpi": [1, 3, 11, 12, 22, 24, 25, 32, 37, 39, 42, 69, 70, 71, 72, 74, 75, 112, 117, 118, 121, 122, 123, 125, 150, 154, 155, 169, 170, 205, 232, 235, 241, 245, 246, 247, 248, 250, 252, 254, 260, 261, 264, 276, 279, 287, 323, 326, 338, 339, 340, 341, 342, 348, 350, 352, 353, 354, 357], "np": [1, 3, 11, 12, 22, 24, 25, 26, 32, 35, 42, 75, 101, 112, 121, 122, 127, 150, 151, 153, 154, 155, 158, 159, 161, 163, 169, 170, 172, 173, 174, 175, 195, 205, 232, 235, 241, 245, 246, 247, 248, 260, 261, 264, 279, 280, 281, 286, 296, 297, 311, 312, 313, 314, 319, 321, 322, 323, 324, 334, 338, 339, 340, 341, 342, 344, 348, 350, 352, 353, 354, 357], "everyth": [1, 17, 354], "need": [1, 4, 5, 11, 13, 19, 20, 24, 25, 29, 32, 35, 40, 41, 42, 61, 62, 71, 74, 76, 87, 91, 97, 121, 123, 130, 156, 210, 232, 235, 236, 241, 245, 246, 248, 249, 260, 264, 266, 287, 291, 326, 327, 335, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 349, 350, 352, 353, 354], "standard": [1, 24, 29, 30, 31, 67, 92, 119, 126, 188, 193, 195, 231, 250, 272, 285, 312, 313, 354], "unrol": [1, 235], "fals": [1, 17, 36, 41, 49, 52, 54, 57, 63, 65, 79, 80, 93, 94, 97, 98, 119, 121, 125, 130, 150, 154, 155, 160, 164, 166, 171, 172, 174, 194, 202, 206, 225, 233, 235, 237, 240, 242, 244, 245, 246, 248, 249, 250, 256, 257, 264, 268, 269, 270, 271, 272, 273, 275, 276, 279, 280, 281, 285, 288, 299, 322, 323, 324], "wire": [1, 11, 15, 16, 206, 225, 230, 236], "rang": [1, 3, 11, 12, 18, 21, 32, 36, 40, 44, 150, 171, 196, 235, 236, 240, 250, 288, 335], "ctrl": [1, 11, 18, 32, 66, 78, 97, 206, 270], "list": [1, 2, 5, 8, 10, 19, 29, 30, 32, 33, 34, 36, 37, 40, 41, 42, 49, 52, 54, 57, 58, 62, 63, 65, 66, 69, 71, 72, 74, 75, 78, 79, 87, 89, 91, 95, 96, 97, 99, 100, 101, 112, 115, 119, 120, 122, 125, 126, 127, 128, 129, 130, 132, 149, 150, 151, 152, 155, 156, 158, 162, 169, 170, 172, 173, 174, 188, 190, 192, 195, 202, 206, 223, 225, 228, 229, 230, 231, 233, 235, 236, 243, 244, 245, 246, 248, 249, 250, 256, 263, 264, 267, 271, 283, 285, 286, 291, 292, 293, 302, 311, 312, 313, 314, 316, 318, 319, 321, 323, 324, 326, 329, 332, 333, 338, 339, 340, 341, 342, 353, 354, 355], "qroutin": [1, 10, 11, 14, 15, 16, 17, 18, 152, 168, 171, 194, 196, 198, 203, 204, 205, 206, 208, 210, 211, 212, 222, 224, 226, 228, 229, 230, 231, 233, 235, 237, 238, 274, 353], "new_wir": [1, 11, 15, 16, 17, 196, 206, 226, 228, 229, 230, 231, 233, 236], "As": [1, 5, 16, 20, 26, 27, 30, 171, 232, 233, 274, 334, 342, 343, 349], "you": [1, 4, 5, 6, 11, 12, 13, 15, 16, 17, 21, 40, 44, 49, 54, 57, 61, 62, 63, 98, 119, 149, 186, 195, 214, 223, 225, 242, 272, 285, 325, 326, 327, 343, 351, 352, 353, 355], "see": [1, 5, 18, 20, 23, 24, 27, 30, 31, 32, 35, 42, 71, 79, 97, 101, 120, 161, 164, 170, 193, 199, 205, 225, 228, 229, 230, 232, 233, 235, 246, 248, 249, 260, 264, 274, 275, 276, 279, 281, 308, 326, 343, 352, 353, 354], "repeat": [1, 29, 31, 42, 220, 221, 335, 341], "lot": [1, 17, 41, 225, 240], "do": [1, 3, 4, 5, 6, 15, 24, 29, 36, 41, 92, 97, 101, 127, 169, 171, 223, 268, 269, 285, 286, 344, 352, 353, 354], "revert": [1, 97, 125], "them": [1, 2, 5, 9, 14, 16, 17, 19, 21, 23, 97, 103, 156, 179, 194, 236, 280, 335, 341, 353], "simplifi": [1, 14, 193, 194, 352, 353], "uncomput": [1, 14, 17, 206, 236, 325], "block": [1, 17, 29, 78, 235], "notic": [1, 5, 17, 18, 22, 42, 209, 291], "how": [1, 3, 5, 8, 17, 18, 19, 21, 23, 32, 34, 35, 40, 42, 43, 97, 161, 205, 236, 343, 352, 353, 354, 355], "don": [1, 5, 42, 72], "t": [1, 2, 5, 11, 12, 17, 18, 19, 20, 21, 22, 35, 42, 44, 49, 54, 57, 61, 63, 66, 72, 97, 101, 120, 121, 123, 127, 132, 152, 153, 161, 168, 169, 171, 225, 247, 250, 261, 287, 315, 317, 333, 338, 339, 340, 341, 342, 344, 346, 347, 348, 349, 350, 353, 354], "explicit": [1, 97, 123], "automat": [1, 4, 12, 17, 44, 98, 122, 155, 208, 209, 210, 215, 216, 223, 241, 245, 246, 248, 249, 260, 264, 326, 344, 354], "when": [1, 11, 12, 13, 15, 17, 24, 28, 29, 33, 35, 40, 44, 70, 71, 72, 74, 76, 80, 81, 91, 97, 98, 101, 105, 109, 110, 112, 113, 121, 171, 194, 195, 207, 225, 228, 229, 232, 233, 235, 236, 240, 242, 244, 250, 267, 274, 280, 281, 292, 293, 326, 331, 334, 335, 344, 352, 353, 354], "exit": [1, 17], "clearer": 1, "now": [1, 3, 4, 15, 16, 31, 43, 132, 150, 242, 326, 351, 352, 353, 354, 355], "have": [1, 2, 4, 5, 6, 8, 11, 12, 15, 16, 17, 19, 20, 29, 32, 35, 36, 42, 61, 71, 72, 74, 78, 79, 97, 101, 119, 120, 123, 131, 149, 163, 194, 225, 230, 233, 235, 247, 261, 269, 274, 280, 288, 323, 326, 327, 335, 343, 344, 352, 353, 354, 355], "palindrom": 1, "bit": [1, 4, 7, 10, 13, 15, 17, 18, 21, 41, 69, 79, 89, 97, 125, 171, 194, 210, 222, 224, 225, 233, 237, 250, 285, 288, 344], "string": [1, 18, 52, 79, 97, 99, 120, 127, 129, 171, 189, 191, 223, 225, 250, 271, 282, 308, 309, 315, 317, 323, 324, 344], "own": [1, 5, 10, 11, 15, 19, 32, 34, 40, 78, 91, 123, 149, 251, 272, 325], "mirror": 1, "rememb": 1, "sign": [1, 97, 171, 244, 283], "xor": [1, 17, 197, 230, 243, 244], "b_1": 1, "b_": [1, 222], "b_2": 1, "place": [1, 5, 18, 41, 97, 101, 206, 214, 216, 218, 225, 247, 252, 253, 254, 268, 344], "second": [1, 16, 17, 30, 31, 32, 130, 136, 159, 161, 166, 180, 194, 209, 221, 247, 261, 286, 298, 300, 301, 302, 303, 335, 338, 340, 341, 346, 347], "half": [1, 286, 326], "its": [1, 5, 8, 11, 12, 16, 17, 19, 24, 30, 32, 35, 36, 40, 42, 44, 91, 92, 97, 101, 117, 123, 126, 127, 150, 168, 188, 191, 201, 202, 225, 230, 239, 244, 250, 251, 306, 321, 322, 324, 326, 335, 352, 353, 354], "so": [1, 3, 5, 9, 17, 29, 35, 42, 75, 97, 127, 159, 161, 162, 169, 171, 236, 247, 280, 288, 334, 335, 346, 352, 353, 354], "perform": [1, 3, 5, 10, 17, 19, 29, 31, 35, 36, 37, 39, 40, 42, 44, 69, 84, 97, 101, 127, 149, 168, 171, 172, 194, 196, 205, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 224, 225, 230, 237, 247, 250, 261, 262, 265, 266, 267, 268, 271, 274, 275, 282, 283, 319, 326, 354], "thu": [1, 17, 29, 80, 171, 189, 191, 193, 205, 206, 225, 233, 235, 236, 247, 268, 277, 344, 352, 354], "origin": [1, 5, 354], "onc": [1, 6, 12, 13, 23, 27, 79, 205, 267, 343, 353, 354], "again": [1, 236, 353], "is_palindrom": 1, "first_half": 1, "second_half": 1, "w1": [1, 236], "w2": [1, 236], "zip": [1, 32, 101, 325], "revers": [1, 5, 6, 16, 21, 40, 222, 233, 240, 285, 353], "And": [1, 11], "There": [1, 6, 78, 193, 194], "exactli": [1, 17, 233, 250, 334], "henc": [1, 19, 26, 171, 235, 334], "approx": [1, 168], "good": [1, 5, 17, 36, 171, 335, 354], "diff": [1, 121], "start": [1, 4, 17, 18, 22, 24, 25, 30, 31, 32, 34, 36, 40, 41, 42, 44, 69, 97, 103, 171, 180, 186, 206, 229, 233, 241, 245, 246, 248, 249, 250, 251, 260, 264, 266, 273, 278, 286, 291, 325, 343, 353, 356], "superposit": [1, 127, 230, 250], "nstep": [1, 42], "int": [1, 11, 15, 18, 62, 66, 71, 74, 78, 82, 83, 86, 87, 89, 97, 98, 100, 101, 103, 104, 112, 117, 118, 120, 121, 122, 125, 127, 128, 129, 130, 134, 136, 144, 147, 150, 151, 152, 153, 155, 156, 157, 158, 160, 162, 164, 166, 168, 169, 170, 171, 172, 173, 174, 180, 182, 184, 186, 189, 190, 191, 192, 195, 198, 199, 203, 205, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 233, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 257, 260, 263, 264, 266, 267, 271, 273, 276, 278, 280, 281, 283, 285, 286, 287, 291, 292, 298, 308, 309, 311, 312, 313, 316, 321, 322, 323, 324, 338, 339, 340, 341, 342], "_": [1, 17, 150, 151, 161, 169, 175, 196, 210, 212, 222, 236, 271, 283, 308, 317, 321, 322, 324, 352], "0000": 1, "2499999999999995": [1, 196], "0110": 1, "1001": 1, "1111": 1, "build": [1, 3, 10, 11, 12, 13, 14, 18, 19, 36, 42, 44, 78, 95, 96, 97, 100, 101, 120, 121, 125, 126, 130, 132, 149, 150, 152, 160, 165, 167, 196, 204, 209, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 230, 242, 247, 250, 265, 267, 272, 310, 353, 354], "evalu": [1, 22, 42, 69, 73, 79, 91, 97, 101, 119, 121, 123, 125, 171, 225, 226, 228, 229, 230, 231, 232, 233, 243, 263, 275, 283, 286, 326], "output": [1, 3, 17, 32, 33, 34, 36, 52, 75, 79, 97, 101, 125, 127, 171, 222, 226, 228, 230, 231, 236, 286, 299, 325, 335], "decent": 1, "high": [1, 9, 10, 12, 17, 19, 35, 97, 101, 156, 158, 169, 173, 201, 207, 260, 286, 341, 346, 347, 348, 349, 350], "Of": [1, 11, 16, 17, 27, 29, 42], "cours": [1, 11, 16, 17, 27, 29, 344], "particularli": [1, 80], "help": [1, 9, 17, 32, 149, 150, 240, 272, 326, 327, 339, 351, 352, 354], "solv": [1, 23, 25, 26, 35, 149, 150, 179, 181, 182, 183, 184, 185, 187, 239, 241, 245, 246, 248, 249, 255, 256, 260, 262, 264, 325, 334, 335, 336, 337, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 354], "practic": [1, 16, 19, 29, 31, 35, 72, 244, 334, 335, 343, 344], "come": [1, 4, 11, 12, 16, 17, 18, 19, 44, 80, 171, 183, 184, 187, 194, 205, 241, 246, 247, 248, 261, 264, 286, 287, 344, 354], "level": [1, 9, 10, 12, 17, 19, 76, 95, 96, 97, 100, 101, 125, 126, 130, 170, 201, 207, 225, 228, 275, 286, 326, 343, 352, 353, 354, 355], "construct": [1, 3, 9, 15, 17, 18, 20, 27, 28, 42, 120, 122, 129, 149, 150, 153, 159, 162, 163, 164, 166, 169, 193, 195, 205, 225, 228, 233, 261, 267, 277, 304, 308, 309, 311, 312, 313, 314, 326, 343, 351, 353], "If": [1, 4, 5, 6, 18, 25, 32, 34, 36, 40, 41, 42, 49, 54, 57, 58, 61, 62, 63, 65, 78, 97, 101, 111, 119, 121, 122, 123, 125, 127, 130, 150, 155, 168, 171, 172, 180, 193, 195, 196, 205, 206, 214, 223, 225, 231, 235, 236, 242, 244, 250, 256, 266, 267, 271, 272, 275, 276, 277, 279, 280, 281, 285, 286, 290, 291, 312, 313, 317, 323, 326, 327, 338, 339, 340, 341, 342, 343, 352], "curiou": 1, "document": [1, 5, 8, 10, 37, 38, 42, 47, 69, 91, 170, 193, 201, 228, 229, 233, 239, 244, 279, 281, 285, 308, 326, 329, 352, 353], "complic": [1, 17, 225, 228], "data": [1, 32, 34, 36, 41, 42, 44, 52, 55, 70, 76, 78, 89, 91, 92, 95, 96, 97, 101, 125, 126, 130, 171, 205, 237, 272, 326, 345], "structur": [1, 13, 18, 32, 33, 70, 76, 79, 86, 87, 89, 91, 97, 121, 127, 149, 154, 155, 169, 171, 172, 195, 205, 223, 225, 242, 250, 268, 272, 285, 286, 291, 345, 352, 353], "ani": [2, 5, 10, 11, 14, 15, 17, 18, 24, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 54, 55, 61, 62, 67, 78, 79, 97, 101, 103, 112, 125, 130, 131, 132, 180, 186, 194, 208, 209, 211, 223, 225, 235, 236, 273, 279, 305, 327, 335, 344, 353, 355, 356], "must": [2, 5, 10, 32, 41, 42, 98, 101, 131, 151, 153, 154, 156, 161, 162, 269, 271, 273, 274, 280, 291, 318, 320, 326, 329, 355], "lift": [2, 198], "addit": [2, 3, 5, 9, 11, 14, 15, 16, 17, 21, 29, 33, 36, 42, 79, 80, 97, 101, 122, 150, 186, 194, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 225, 226, 256, 326, 342, 349, 352, 353], "shot": [2, 29, 30, 31, 34, 36, 44, 97, 101, 126, 127, 150, 286, 329, 354], "what": [2, 15, 34, 36, 41, 43, 72, 194, 223, 232, 291], "should": [2, 5, 17, 23, 32, 34, 36, 40, 41, 42, 49, 54, 57, 63, 64, 79, 97, 101, 119, 122, 123, 127, 154, 155, 171, 172, 174, 195, 200, 201, 206, 207, 214, 223, 224, 225, 228, 230, 234, 235, 237, 241, 242, 247, 248, 261, 264, 267, 268, 269, 272, 280, 287, 291, 326, 334, 352, 353, 355], "measur": [2, 3, 5, 10, 13, 18, 19, 29, 30, 31, 33, 34, 36, 40, 43, 44, 49, 52, 54, 57, 63, 65, 66, 69, 72, 74, 75, 79, 80, 88, 89, 97, 98, 101, 125, 126, 127, 150, 189, 191, 194, 210, 225, 232, 274, 280, 283, 285, 325, 326, 329, 333, 344, 353, 354], "observ": [2, 3, 9, 10, 12, 19, 21, 22, 26, 29, 32, 33, 34, 36, 40, 42, 43, 44, 65, 90, 97, 101, 127, 129, 150, 190, 192, 232, 240, 242, 243, 244, 247, 250, 252, 261, 263, 265, 267, 269, 273, 274, 282, 283, 286, 287, 325, 326, 329, 352, 353, 354, 356], "call": [2, 3, 10, 11, 13, 16, 17, 18, 20, 23, 24, 29, 36, 37, 39, 40, 42, 52, 97, 98, 100, 101, 120, 121, 123, 155, 162, 174, 180, 186, 194, 195, 198, 205, 208, 209, 210, 211, 212, 225, 232, 235, 236, 241, 245, 246, 247, 248, 249, 260, 261, 264, 268, 272, 288, 293, 300, 315, 317, 318, 326, 334, 335, 345, 352, 354, 355, 357], "select": [2, 101, 149, 169, 173, 267, 326, 351, 353, 354], "take": [2, 13, 17, 22, 30, 32, 34, 35, 36, 40, 41, 42, 44, 80, 128, 171, 188, 195, 205, 232, 235, 236, 269, 275, 286, 323, 343, 344, 353], "argument": [2, 11, 13, 18, 20, 22, 32, 34, 36, 40, 41, 61, 62, 81, 96, 97, 101, 103, 112, 121, 128, 130, 132, 171, 186, 195, 196, 202, 205, 208, 209, 210, 211, 212, 223, 225, 228, 232, 233, 235, 236, 240, 242, 269, 272, 274, 275, 276, 279, 281, 282, 326, 345], "4999999999999999": [2, 17, 30, 41, 235], "context": [2, 17, 24, 284, 289, 293, 353], "clinalg": [2, 34, 100, 284, 290, 326], "extend": [2, 5, 8, 28, 96, 97, 119, 195, 236, 326], "plugin": [2, 3, 28, 29, 31, 32, 33, 36, 42, 43, 44, 45, 46, 58, 61, 62, 76, 80, 82, 91, 97, 100, 101, 115, 150, 179, 180, 182, 183, 184, 185, 187, 242, 286, 291, 292, 326, 343, 345, 346, 347, 348, 349, 350, 351, 353, 356], "capabl": [2, 8, 19, 28, 36, 37, 40, 41, 43, 102, 329, 335], "instanc": [2, 10, 11, 13, 15, 17, 18, 24, 25, 26, 29, 32, 34, 36, 37, 40, 41, 43, 58, 70, 78, 79, 95, 96, 97, 100, 101, 119, 121, 125, 126, 133, 194, 195, 206, 214, 225, 228, 229, 233, 240, 241, 245, 246, 247, 248, 249, 260, 261, 264, 269, 285, 293, 315, 317, 326, 329, 333, 335, 343, 344, 345], "compil": [2, 5, 10, 12, 13, 14, 36, 40, 42, 43, 52, 53, 54, 55, 58, 91, 97, 101, 206, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 291, 292, 326, 328, 356], "befor": [2, 4, 5, 6, 7, 16, 32, 41, 44, 47, 161, 198, 206, 225, 268, 326, 344], "won": [2, 49, 54, 57, 63, 225], "limit": [2, 5, 19, 29, 37, 38, 40], "topologi": [2, 36, 43, 91, 100, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 277], "scipyminimizeplugin": [2, 3, 32, 44, 100, 242, 265, 269, 326, 345, 346, 347, 348, 349, 350, 353, 354], "tri": [2, 32, 35], "minim": [2, 3, 12, 23, 25, 32, 42, 44, 244, 265, 269, 276, 279, 281, 291, 325, 334, 338, 343, 346, 347, 353, 354], "averag": [2, 29, 31, 34, 36, 42, 44, 293, 298, 308, 335], "valu": [2, 3, 5, 10, 11, 18, 24, 29, 31, 33, 34, 35, 36, 40, 42, 44, 58, 67, 69, 72, 74, 75, 79, 90, 96, 97, 99, 101, 117, 119, 121, 123, 125, 127, 128, 130, 132, 150, 171, 194, 195, 196, 210, 212, 214, 216, 218, 220, 223, 225, 228, 229, 230, 231, 232, 233, 235, 243, 244, 247, 251, 254, 256, 261, 263, 267, 271, 273, 275, 279, 280, 281, 283, 285, 286, 287, 288, 295, 336, 344, 353, 354], "rx": [2, 11, 18, 32, 43, 66, 97, 195, 232, 235, 269, 280, 326, 353, 354], "core": [2, 3, 9, 12, 13, 20, 21, 22, 27, 28, 31, 32, 36, 41, 42, 43, 44, 45, 46, 79, 149, 150, 151, 155, 169, 170, 173, 174, 176, 177, 178, 180, 189, 195, 206, 210, 232, 240, 252, 253, 254, 277, 326, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 352, 354], "theta": [2, 3, 11, 12, 18, 44, 97, 101, 150, 152, 195, 232, 235, 271, 280, 326, 353, 354], "angl": [2, 32, 40, 42, 52, 97, 119, 166, 232, 235, 269, 273, 280, 343, 354], "parameter_map": [2, 32, 42, 44, 101, 125, 150, 269], "3": [2, 3, 4, 5, 6, 7, 8, 12, 16, 17, 18, 21, 25, 26, 27, 32, 34, 36, 41, 42, 43, 44, 62, 81, 97, 98, 119, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 154, 155, 170, 174, 176, 177, 178, 194, 196, 205, 225, 233, 235, 236, 239, 240, 241, 245, 246, 247, 248, 264, 267, 269, 277, 279, 285, 287, 295, 309, 319, 328, 330, 334, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 357], "141592648680871": 2, "141592659964379": 2, "believ": 3, "well": [3, 5, 18, 35, 42, 91, 188, 247, 261, 326, 335, 343, 352, 353, 355, 356], "suit": [3, 149], "noisi": [3, 5, 37, 150, 188, 283, 354], "intermedi": [3, 10, 17, 32, 33, 75, 88, 89, 125, 126, 194], "scale": 3, "nisq": [3, 356], "thei": [3, 5, 8, 9, 17, 24, 26, 27, 42, 69, 70, 76, 91, 97, 112, 188, 194, 195, 200, 225, 234, 236, 239, 248, 264, 267, 272, 291, 292, 293, 326, 333, 343, 345, 352, 353], "necessarili": [3, 5, 17], "long": [3, 35, 97, 225, 279], "nevertheless": [3, 40, 353, 355], "prepar": [3, 5, 29, 149, 150, 152, 165, 171, 188, 189, 194, 204, 205, 224, 237, 238, 250, 251, 252, 253, 254, 326, 344, 351, 354], "ansatz": [3, 32, 44, 150, 160, 162, 166, 239, 242, 265, 267, 273, 280, 283, 326, 343, 351, 354], "below": [3, 4, 5, 8, 17, 29, 30, 33, 43, 79, 97, 161, 205, 225, 230, 235, 274, 326, 335, 346, 347, 348, 349, 350], "illustr": [3, 30, 44, 170, 269, 353], "hamiltonian": [3, 9, 19, 23, 25, 34, 91, 122, 123, 127, 150, 153, 168, 169, 170, 171, 176, 177, 178, 183, 184, 187, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 260, 261, 262, 264, 282, 287, 326, 343, 344, 351, 353, 354, 355], "here": [3, 4, 11, 13, 15, 16, 17, 18, 20, 26, 30, 31, 69, 79, 80, 149, 161, 169, 205, 206, 228, 232, 236, 277, 286, 293, 326, 334, 335, 345, 346, 347, 348, 349, 350, 353, 354], "antiferromagnet": [3, 35], "heisenberg": 3, "whose": [3, 17, 79, 226, 232, 243, 267, 308, 326, 343, 344, 353], "ground": [3, 19, 24, 32, 150, 172, 244, 250, 343, 344, 353, 354], "energi": [3, 12, 19, 23, 24, 32, 35, 42, 44, 101, 125, 150, 158, 159, 169, 170, 171, 172, 232, 241, 244, 245, 246, 247, 248, 249, 260, 261, 264, 269, 287, 326, 334, 343, 353, 354], "want": [3, 4, 24, 29, 40, 42, 119, 123, 125, 150, 195, 206, 232, 235, 241, 242, 260, 280, 342, 349, 354], "approxim": [3, 26, 33, 37, 126, 150, 168, 171, 245, 246, 248, 249, 250, 264, 265, 281, 315, 325, 334, 337, 350, 354], "theta_i": [3, 271], "stack": [3, 11, 31, 32, 33, 40, 41, 42, 44, 97, 100, 101, 150, 179, 180, 181, 182, 183, 184, 185, 187, 236, 265, 268, 269, 272, 273, 279, 283, 326, 345, 353, 354, 356], "go": [3, 6, 40, 171, 283, 346, 347, 348, 349, 350], "ob": [3, 12, 27, 29, 31, 32, 44, 97, 127, 232, 244, 287, 354], "ry": [3, 11, 12, 18, 42, 44, 66, 97, 150, 162, 195, 205, 274, 280, 353, 354], "arrai": [3, 11, 17, 41, 69, 70, 74, 101, 117, 118, 122, 123, 125, 127, 151, 153, 154, 158, 161, 169, 189, 191, 194, 195, 200, 205, 225, 228, 229, 232, 234, 235, 241, 244, 247, 250, 260, 261, 279, 281, 285, 287, 310, 315, 317, 321, 322, 323, 324, 352, 353], "length": [3, 15, 32, 41, 71, 97, 101, 127, 144, 200, 225, 229, 233, 234, 236, 244, 250], "ans\u00e4tz": [3, 12, 240, 244, 247, 261, 343, 351], "sigma_z": [3, 20, 27, 32, 42, 232, 243, 250, 263, 309], "sigma_x": [3, 12, 20, 27, 44, 250, 309, 343, 344], "sigma_i": [3, 27, 250, 309], "scipi": [3, 40, 44, 122, 265, 279, 325], "re": [3, 5, 17, 36, 40, 41, 78, 97, 271, 353], "x0": [3, 26, 150, 271, 276, 279, 280, 281, 353, 354], "8": [3, 4, 5, 6, 7, 17, 44, 133, 135, 138, 139, 140, 141, 142, 146, 147, 148, 149, 154, 166, 167, 205, 207, 246, 249, 257, 338, 340, 341, 346, 347, 348, 353], "equival": [3, 5, 15, 27, 30, 41, 52, 74, 97, 101, 343, 354], "deleg": [3, 5, 272], "equip": [3, 35], "minimum": [3, 23, 24, 35, 246, 247, 261, 280, 344], "vqe": [3, 40, 44, 150, 267, 273, 325, 326, 351, 354, 356], "messag": [3, 36, 41, 80, 82, 83, 93, 94, 225], "termin": [3, 5, 6, 91, 97, 98, 265], "successfulli": 3, "success": [3, 64, 69, 281], "true": [3, 10, 17, 36, 41, 49, 52, 54, 57, 58, 63, 65, 69, 73, 78, 79, 92, 93, 94, 97, 98, 121, 122, 125, 126, 127, 129, 150, 155, 166, 172, 206, 225, 226, 228, 230, 231, 233, 235, 237, 240, 242, 250, 256, 257, 266, 268, 269, 270, 271, 272, 285, 288, 298, 300, 305, 306, 317, 322, 323, 324, 326, 344, 354], "statu": [3, 64, 326], "fun": [3, 112, 235], "3099330343247272": 3, "810e": 3, "800e": 3, "nit": 3, "jac": 3, "000e": 3, "hess_inv": 3, "nfev": 3, "6": [3, 4, 5, 7, 17, 24, 27, 44, 133, 135, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 154, 241, 245, 246, 248, 249, 257, 260, 264, 299, 323, 328, 330, 335, 338, 340, 342, 345, 346, 347, 348, 349, 352, 353, 357], "njev": 3, "999999999999913": 3, "No": [3, 10, 16, 62, 71, 232, 326, 328], "gpu": [3, 10, 87, 232], "tpu": [3, 10, 232], "fall": [3, 10, 232], "back": [3, 6, 10, 29, 40, 42, 232, 272, 354], "cpu": [3, 10, 232], "tf_cpp_min_log_level": [3, 10, 232], "rerun": [3, 10, 232], "info": [3, 10, 72, 172, 232, 273, 353], "term": [3, 4, 5, 12, 17, 20, 21, 22, 24, 25, 26, 31, 33, 36, 44, 91, 122, 149, 150, 155, 161, 163, 171, 174, 176, 177, 178, 183, 184, 187, 233, 240, 241, 242, 246, 248, 264, 274, 326, 352, 353, 354], "prog": [3, 10, 12, 15, 16, 17, 32, 78, 80, 97, 98, 150, 197, 205, 206, 207, 225, 236, 269, 277, 288, 326, 353, 354], "reg": [3, 150, 353, 354], "new_var": [3, 12, 26, 32, 91, 97, 150, 225, 244, 269, 353, 354], "float": [3, 11, 12, 18, 32, 74, 89, 92, 97, 101, 112, 122, 123, 125, 126, 127, 129, 132, 150, 151, 154, 155, 156, 158, 159, 161, 163, 168, 169, 170, 171, 172, 173, 174, 189, 190, 191, 193, 195, 225, 235, 244, 247, 250, 252, 261, 267, 269, 271, 275, 276, 280, 281, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 315, 317, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 353, 354], "theta_": [3, 150, 158, 354], "circ": [3, 10, 13, 18, 32, 49, 78, 97, 98, 150, 236, 247, 269, 332, 333, 353, 354], "handl": [3, 17, 35, 149, 150, 194, 232, 239, 242, 277, 288, 343, 352, 356], "optimizer_scipi": 3, "cobyla": [3, 44, 279, 345, 346, 347, 348, 349, 350, 353, 354], "tol": [3, 44, 193, 271, 279, 294, 304, 305, 306, 307, 345, 346, 347, 348, 349, 350, 354], "1e": [3, 32, 44, 92, 150, 193, 225, 267, 271, 279, 281, 294, 299, 304, 305, 306, 307, 345, 346, 347, 348, 349, 350, 354], "option": [3, 19, 29, 32, 34, 36, 41, 44, 49, 52, 54, 57, 58, 62, 63, 65, 66, 71, 78, 79, 82, 83, 86, 87, 89, 92, 97, 98, 101, 103, 104, 112, 115, 120, 121, 122, 123, 125, 126, 127, 128, 130, 150, 154, 155, 156, 158, 160, 161, 162, 164, 166, 168, 169, 170, 171, 172, 173, 174, 180, 183, 184, 186, 187, 189, 190, 191, 192, 193, 196, 205, 206, 209, 210, 225, 226, 228, 229, 230, 231, 235, 236, 237, 240, 241, 242, 244, 246, 247, 248, 250, 256, 257, 261, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 291, 292, 298, 299, 300, 301, 304, 308, 309, 317, 322, 323, 324, 345, 346, 347, 348, 349, 350, 352, 354], "maxit": [3, 44, 271, 279, 281, 345, 346, 347, 348, 349, 350, 354], "200": [3, 271, 345, 346, 347, 348, 349, 350], "exact": [3, 29, 37, 79, 150, 250, 353], "g": [3, 4, 5, 6, 7, 8, 10, 11, 14, 18, 24, 26, 34, 36, 40, 52, 65, 78, 87, 97, 123, 150, 189, 190, 191, 208, 209, 211, 213, 236, 239, 242, 247, 261, 271, 272, 275, 279, 280, 283, 326, 354, 356], "meta_data": [3, 29, 33, 36, 41, 42, 44, 58, 62, 65, 92, 95, 96, 101, 125, 150, 272, 285, 286, 291, 326, 353], "optimizer_data": 3, "999999999998534": 3, "571e": 3, "142e": 3, "66": 3, "maxcv": 3, "For": [3, 5, 6, 10, 12, 13, 17, 18, 19, 24, 29, 32, 33, 34, 36, 37, 38, 40, 41, 76, 97, 119, 121, 123, 132, 133, 170, 171, 195, 206, 225, 228, 235, 236, 241, 246, 247, 248, 255, 256, 257, 261, 264, 269, 271, 285, 309, 317, 326, 333, 335, 344, 345, 352, 353, 354], "explain": [3, 8, 32, 34, 35, 40, 326, 352, 353, 355], "pleas": [4, 5, 7, 10, 33, 36, 37, 38, 42, 47, 61, 62, 78, 97, 285, 325, 326, 327, 328, 329, 351, 354], "read": [4, 5, 44, 101, 171, 188, 293], "ato": [4, 5, 10, 11, 325, 326], "end": [4, 5, 6, 12, 14, 18, 22, 24, 36, 97, 171, 225, 250, 273, 286, 291, 302, 310, 315, 317, 326], "licenc": 4, "agreement": [4, 5], "eula": [4, 5], "carefulli": [4, 5], "permit": [4, 5], "pursuant": 4, "condit": [4, 5, 13, 18, 180, 225, 230, 233, 335], "between": [4, 19, 24, 26, 36, 41, 43, 79, 119, 130, 161, 186, 193, 209, 211, 230, 239, 247, 250, 262, 267, 269, 281, 283, 287, 293, 298, 300, 301, 302, 303, 306, 309, 326, 343, 354], "individu": [4, 5, 33, 214, 274, 338, 347], "legal": [4, 5], "entiti": [4, 5], "bull": [4, 5], "sa": [4, 5, 24, 26, 35, 241, 245, 246, 247, 248, 249, 260, 261, 264, 335, 338, 339, 340, 341, 342], "By": [4, 5, 11, 29, 97, 98, 196, 211, 225, 230, 235, 276, 328, 329, 354], "download": [4, 5, 6, 325], "otherwis": [4, 5, 41, 58, 65, 97, 101, 130], "render": 4, "your": [4, 5, 6, 10, 11, 13, 15, 34, 37, 38, 40, 42, 78, 97, 98, 119, 130, 149, 242, 266, 272, 326, 327, 329, 332, 351, 352], "agre": [4, 5], "bound": [4, 5, 97, 171, 225, 299], "licens": 4, "copi": [4, 5, 17, 97, 124, 154, 155, 174, 233], "promptli": 4, "delet": [4, 355], "pip": 4, "ensur": [4, 16, 36, 41, 42, 47, 91, 241, 248, 264], "command": [4, 6, 13, 18, 54, 325, 333], "machin": [4, 5, 24, 326, 335, 352], "orphan": 4, "o": [4, 7, 24, 25, 29, 31, 91, 150, 151, 156, 158, 169, 250, 283, 330, 337, 350, 354], "7": [4, 5, 7, 17, 29, 44, 97, 129, 133, 135, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 154, 246, 269, 338, 340, 346, 347, 348, 352, 353, 354], "9": [4, 5, 6, 7, 11, 16, 17, 18, 44, 97, 133, 135, 138, 139, 140, 141, 142, 146, 148, 225, 232, 233, 240, 246, 309, 335, 338, 340, 345, 346, 347], "10": [4, 7, 11, 13, 15, 16, 17, 20, 24, 29, 44, 80, 81, 92, 103, 133, 134, 135, 138, 139, 140, 141, 142, 146, 148, 150, 170, 180, 198, 207, 213, 217, 225, 226, 231, 233, 235, 240, 241, 246, 250, 266, 269, 271, 276, 279, 280, 281, 286, 288, 291, 304, 326, 335, 338, 340, 344, 346, 347, 349], "linux": [4, 7, 326], "window": [4, 7, 171, 326], "maco": [4, 7, 326], "64": [4, 7, 148], "version": [4, 5, 6, 7, 18, 78, 120, 132, 149, 160, 170, 255, 256, 257, 258, 259, 326, 333, 351, 353, 355], "x86_64": [4, 7], "architectur": [4, 7, 42, 133, 326], "org": [4, 5, 6, 7, 24, 207, 213, 217, 281, 298, 326], "brew": [4, 6, 7, 326], "while": [4, 5, 7, 9, 26, 29, 32, 97, 127, 277, 298, 329, 352, 353, 354], "same": [4, 5, 6, 7, 10, 11, 15, 17, 20, 22, 23, 24, 30, 32, 61, 79, 91, 97, 101, 105, 109, 120, 159, 170, 189, 191, 193, 205, 207, 225, 271, 280, 326, 334, 337, 350, 354], "caus": [4, 5, 7, 171, 188, 326], "segment": [4, 6, 7, 326], "fault": [4, 5, 6, 7, 326], "situat": [4, 7], "uninstal": [4, 7], "being": [4, 7, 16, 19, 29, 35, 52, 73, 225, 236, 285], "major": [4, 7, 356], "minor": [4, 7], "type": [4, 5, 10, 14, 18, 28, 29, 30, 31, 32, 33, 34, 36, 41, 42, 43, 49, 54, 57, 58, 62, 63, 65, 69, 70, 71, 72, 74, 75, 78, 79, 80, 82, 83, 86, 88, 90, 91, 92, 97, 100, 101, 103, 111, 112, 117, 118, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 203, 204, 205, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 236, 237, 238, 242, 243, 244, 245, 246, 247, 248, 249, 250, 261, 263, 266, 267, 269, 271, 272, 275, 276, 277, 279, 280, 281, 282, 285, 286, 287, 291, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 334, 345, 346, 347, 348, 349, 350, 352], "prompt": 4, "jupyt": [4, 91, 124, 125, 325, 326, 351, 352, 353, 354], "interact": [4, 24, 36, 155, 172, 239, 285, 352, 353], "tutori": [4, 354], "notebook": [4, 35, 44, 91, 97, 98, 124, 125, 325, 326, 335, 338, 339, 340, 341, 342, 351, 352, 353, 354], "environ": [4, 61, 62, 97, 119, 188, 190, 191, 192, 293, 325, 330], "configur": [4, 5, 24, 29, 35, 67, 97, 116, 117, 118, 127, 172, 272, 287, 338, 339, 340, 341, 342], "featur": [4, 5, 9, 10, 14, 17, 28, 33, 40, 44, 354], "design": [4, 5, 8, 9, 13, 14, 15, 24, 28, 32, 34, 40, 41, 47, 78, 97, 103, 120, 179, 194, 197, 226, 228, 229, 230, 231, 233, 236, 269, 326, 329, 343, 345, 353, 356], "work": [4, 5, 6, 37, 38, 42, 44, 74, 125, 171, 189, 191, 210, 283, 298, 326, 333, 354, 357], "imagemagick": 4, "wand": 4, "displai": [4, 5, 10, 32, 41, 52, 91, 97, 121, 124, 125, 126, 223, 225, 232, 235, 244, 255, 257, 258, 259, 265, 285, 325, 326, 345, 346, 347, 348, 349, 350, 353], "ghostscript": 4, "pdf": [4, 124, 326], "format": [4, 5, 13, 17, 29, 33, 54, 69, 70, 79, 95, 96, 97, 99, 100, 121, 124, 125, 128, 130, 132, 172, 225, 240, 250, 305, 306, 328, 330, 354], "alreadi": [4, 36, 171, 205, 224, 225, 235, 237, 291, 293, 344, 353, 354], "magic": 4, "qatdisplai": 4, "insid": [4, 10, 11, 14, 15, 16, 17, 20, 42, 80, 91, 95, 96, 97, 98, 99, 100, 103, 120, 124, 125, 130, 171, 180, 183, 184, 187, 200, 208, 209, 210, 211, 212, 225, 234, 235, 236, 241, 242, 246, 248, 264, 265, 266, 267, 271, 272, 274, 275, 276, 277, 279, 280, 281, 286, 291, 292, 325], "m": [4, 66, 161, 232, 235, 241, 319, 336], "overview": [4, 13, 325], "ipynb": [4, 325], "tabl": [4, 52, 325], "content": [4, 5, 17, 78, 97, 98, 206, 214, 216, 218, 220, 221, 325, 326], "deprec": [4, 78, 324, 326, 330, 351], "enabl": [4, 19, 172], "access": [4, 6, 10, 29, 32, 34, 36, 40, 41, 69, 79, 97, 119, 123, 133, 186, 194, 200, 205, 234, 247, 258, 259, 261, 278, 285, 326, 352, 353, 354], "other": [4, 5, 6, 17, 24, 32, 34, 40, 91, 97, 122, 168, 171, 172, 197, 201, 225, 226, 230, 231, 233, 250, 280, 283, 286, 309, 326, 328, 333, 351, 354], "qiskit": [4, 46, 47, 325, 326, 328], "projectq": [4, 46, 47, 325, 328], "pyquil": [4, 46, 47, 325, 328], "cirq": [4, 46, 47, 325, 328, 333], "becaus": [4, 25, 29, 30], "someon": 4, "who": [4, 5], "mai": [4, 5, 6, 19, 29, 32, 40, 78, 126, 127, 149, 163, 166, 171, 240, 242, 273, 276, 326, 328, 335, 344, 352], "desir": [4, 26, 33, 171, 328, 334, 339], "cherri": 4, "pick": [4, 250, 276, 290, 343, 354], "interop": [4, 45, 46, 325, 326, 329, 330, 331, 332, 333], "qiskit_bind": 4, "projectq_bind": 4, "cirq_bind": 4, "pyquil_bind": 4, "could": [4, 10, 15, 23, 32, 35, 36, 43, 120, 180, 181, 241, 245, 246, 247, 248, 249, 255, 257, 258, 259, 260, 261, 264, 326, 335, 352], "conflict": [4, 5], "fail": [4, 5, 15, 17, 119, 235, 277, 326], "softwar": [5, 34, 326, 356], "FOR": 5, "hereinaft": 5, "refer": [5, 6, 24, 33, 37, 38, 78, 80, 97, 149, 161, 163, 165, 166, 198, 235, 236, 241, 245, 246, 248, 249, 260, 264, 281, 285, 298, 300, 301, 325, 326, 328, 329, 335, 351, 353, 354, 356], "recit": 5, "bind": [5, 29, 42, 97, 101, 119, 223, 242, 275, 276, 279, 281], "compani": 5, "physic": [5, 19, 23, 24, 34, 37, 86, 249, 323, 352], "person": 5, "oblig": 5, "present": [5, 19, 23, 34, 35, 72, 97, 122, 194, 206, 267, 269, 271, 275, 276, 277, 279, 280, 281, 334, 335, 353, 357], "identifi": [5, 52, 86, 158, 263, 282, 293], "footnot": 5, "product": [5, 16, 27, 101, 122, 168, 193, 236, 250, 280, 293, 298, 309, 314, 319, 323, 336, 344, 354], "associ": [5, 36, 42, 101, 161, 171, 244, 273, 353, 354], "media": 5, "materi": [5, 19], "onlin": 5, "electron": [5, 149, 154, 155, 156, 157, 158, 169, 170, 171, 172, 173, 353], "collect": [5, 9, 12, 18, 20, 44, 91, 101, 110, 111, 206, 225, 235, 242, 271, 272, 275, 276, 279, 280, 281, 326, 343, 353], "primari": [5, 201], "allow": [5, 9, 11, 12, 15, 17, 18, 21, 25, 28, 29, 33, 35, 40, 44, 80, 121, 194, 205, 225, 232, 239, 241, 242, 245, 246, 247, 248, 249, 251, 257, 260, 261, 264, 265, 272, 292, 293, 334, 343, 352, 353, 354], "student": 5, "research": 5, "develop": [5, 285, 356], "test": [5, 35, 101, 304, 305, 307, 326, 333, 335], "infrastructur": 5, "learn": [5, 326, 354], "qlm": [5, 42, 49, 50, 52, 54, 57, 58, 59, 61, 63, 66, 67, 100, 240, 241, 242, 245, 246, 247, 248, 249, 260, 261, 264, 272, 275, 326, 329, 332], "benefit": [5, 277, 326], "combin": [5, 17, 26, 29, 166, 233, 239], "accordingli": [5, 36, 170], "under": [5, 9, 13, 29, 92, 97, 101, 127, 257, 267, 275, 325, 326, 354], "runtim": [5, 60, 326, 329], "apach": 5, "v2": 5, "file": [5, 13, 24, 29, 33, 52, 61, 64, 80, 82, 83, 95, 96, 97, 100, 101, 125, 127, 130, 225, 232, 235, 247, 288, 323, 325, 326, 333, 345, 352], "each": [5, 9, 17, 28, 29, 30, 31, 32, 35, 41, 74, 81, 92, 97, 101, 103, 122, 123, 130, 133, 159, 163, 171, 180, 189, 190, 191, 192, 193, 225, 239, 243, 244, 245, 247, 263, 266, 270, 273, 274, 280, 283, 286, 287, 291, 315, 317, 335, 338, 347, 354], "categori": [5, 37, 326], "root": [5, 210], "folder": 5, "compli": 5, "thereof": 5, "out": [5, 6, 18, 29, 30, 40, 41, 44, 71, 97, 120, 127, 169, 222, 247, 273, 319, 339, 348], "shall": [5, 36], "complet": [5, 6, 37, 42, 169, 172, 173, 293, 299, 304, 335, 339, 348], "THE": 5, "AND": [5, 17, 18, 79, 230, 244], "definit": [5, 15, 23, 24, 34, 52, 78, 97, 131, 169, 193, 206, 225, 242, 298, 309, 325, 326, 352], "equal": [5, 11, 40, 41, 189, 211, 276, 293, 294, 326, 338, 341, 347, 352], "b": [5, 17, 97, 119, 120, 132, 156, 158, 183, 184, 187, 209, 212, 214, 216, 218, 220, 221, 232, 241, 243, 246, 248, 264, 283, 294, 336, 338, 339, 342, 354, 357], "mean": [5, 25, 29, 30, 36, 65, 80, 92, 97, 126, 127, 194, 214, 225, 244, 329, 353, 354], "accord": [5, 97, 149, 169, 173, 194, 266, 271, 344], "c": [5, 6, 18, 52, 74, 78, 95, 97, 101, 151, 154, 159, 161, 163, 169, 175, 186, 197, 210, 215, 219, 220, 221, 241, 268, 270, 280, 281, 283, 284, 326, 333, 336, 343, 344, 352, 354], "natur": [5, 29, 62, 149, 156, 158, 165, 169, 170, 173, 265, 271, 325, 326, 351, 353, 354], "wish": [5, 9, 214, 241, 245, 246, 248, 249, 260, 264], "variou": [5, 9, 10, 13, 30, 79, 97, 122, 133, 149, 172, 194, 195, 197, 202, 217, 225, 335, 353], "d": [5, 97, 153, 161, 169, 246, 298, 301, 303, 309, 317, 322, 324, 343], "OF": 5, "grant": 5, "accept": [5, 26, 29, 35, 37, 38, 42, 96, 103, 156, 180, 225, 266, 286, 291, 352], "specif": [5, 19, 24, 32, 33, 149, 189, 191, 214, 270, 283, 286, 317, 326, 343], "both": [5, 6, 17, 43, 65, 111, 123, 261, 264, 329, 341, 343, 345, 351, 352, 354], "author": [5, 97, 127], "repres": [5, 15, 17, 19, 20, 23, 28, 78, 79, 89, 91, 111, 118, 119, 120, 121, 122, 123, 127, 128, 169, 194, 205, 236, 239, 243, 247, 255, 256, 261, 263, 286, 287, 293, 334, 335, 354], "acknowledg": 5, "refrain": 5, "violat": 5, "wai": [5, 6, 9, 11, 13, 19, 26, 40, 41, 42, 44, 78, 79, 91, 97, 122, 195, 222, 285, 326, 335, 353, 354], "whatsoev": 5, "thereund": 5, "confidenti": 5, "subject": [5, 241], "provis": 5, "nondisclosur": 5, "parti": [5, 47], "receiv": [5, 35, 42, 79, 80, 97, 272, 280], "reproduc": [5, 327], "disclos": 5, "purpos": [5, 18, 35, 122, 128, 170, 206, 225, 250, 288, 354], "exercis": 5, "right": [5, 11, 13, 24, 25, 32, 92, 126, 149, 153, 157, 168, 169, 173, 189, 191, 196, 197, 204, 222, 231, 233, 241, 246, 248, 250, 264, 271, 283, 286, 298, 302, 310, 315, 317, 324, 335, 338, 339, 342], "extent": 5, "necessari": [5, 6, 9, 29, 119, 188, 192, 223], "restrict": [5, 24, 149, 151, 169, 250, 344, 353], "disclosur": 5, "employe": 5, "consult": [5, 352], "advisor": 5, "know": [5, 72, 171, 223, 235, 342, 349, 353], "third": [5, 47, 220], "without": [5, 10, 15, 17, 19, 72, 79, 225, 235, 242, 265, 270, 273, 302, 325, 354], "prior": [5, 230, 265], "written": [5, 25, 27, 37, 38, 39, 91, 286, 297, 326, 352], "approv": 5, "forego": 5, "satisfi": [5, 13, 239, 243], "through": [5, 6, 18, 28, 33, 40, 172, 200, 202, 205, 223, 234, 236, 241, 245, 246, 247, 248, 249, 258, 259, 260, 264, 267, 271, 275, 276, 277, 279, 280, 281, 285, 292, 293, 322, 324, 325, 329, 332, 356], "least": [5, 17, 42, 125, 285, 326, 335, 343], "degre": [5, 246], "care": [5, 44, 250, 283, 343, 353], "like": [5, 15, 17, 19, 24, 36, 41, 42, 79, 97, 126, 127, 171, 239, 326, 335], "less": [5, 22, 206], "reason": [5, 97, 352], "whom": 5, "non": [5, 18, 25, 35, 78, 80, 97, 125, 205, 236, 274, 284, 326, 335, 344], "protect": 5, "notwithstand": 5, "breach": 5, "compel": 5, "law": [5, 17], "judici": 5, "government": 5, "investig": [5, 123, 273], "proceed": [5, 6], "ha": [5, 11, 13, 16, 17, 21, 24, 25, 29, 32, 34, 35, 40, 41, 47, 61, 75, 78, 80, 97, 101, 119, 123, 129, 159, 180, 208, 209, 210, 214, 215, 216, 223, 235, 236, 240, 243, 269, 286, 306, 315, 317, 324, 325, 326, 341, 342, 349, 352, 354, 355], "assist": 5, "opportun": 5, "except": [5, 36, 41, 46, 69, 73, 76, 93, 94, 98, 105, 109, 110, 113, 170, 194, 232, 244, 247, 261, 290, 326], "anyth": [5, 42, 325], "contrari": 5, "herein": 5, "neither": [5, 32, 36], "liabl": 5, "prove": 5, "wa": [5, 17, 37, 39, 64, 72, 97, 123, 160, 228, 232, 233, 283, 289, 326, 335], "public": [5, 208, 209, 210, 215, 216, 236, 267, 271, 354], "domain": 5, "enter": [5, 42, 123, 171, 280], "ii": [5, 151, 169], "known": [5, 13, 32, 35, 75, 112, 119, 280, 337, 350], "demonstr": 5, "exist": [5, 236, 339, 348, 355], "iii": 5, "iv": 5, "independ": [5, 188, 191, 236, 250, 252, 275, 344], "v": [5, 12, 17, 32, 101, 151, 153, 159, 169, 243, 269, 337, 338, 339, 340, 342, 346, 347, 348, 349, 350, 352], "becom": [5, 6, 17, 44, 97], "vi": 5, "similar": [5, 18, 19, 25, 161, 183, 184, 187, 235, 241, 246, 248, 264, 326], "those": [5, 27, 29, 37, 103, 223, 235], "remedi": 5, "immedi": 5, "irrepar": 5, "harm": 5, "monei": 5, "damag": 5, "alon": [5, 19], "inadequ": 5, "compens": 5, "therefor": [5, 13, 15, 17, 19, 32, 34, 35, 40, 171, 335, 337, 346, 347, 348, 349, 350], "event": 5, "entitl": 5, "seek": 5, "equit": 5, "relief": 5, "temporari": [5, 17, 231, 325], "restrain": 5, "order": [5, 11, 15, 18, 19, 24, 27, 29, 40, 79, 97, 101, 121, 125, 149, 155, 156, 158, 161, 168, 169, 171, 172, 173, 194, 195, 210, 222, 230, 233, 236, 240, 242, 252, 253, 254, 285, 326, 331, 335, 343, 352, 353, 355], "injunct": 5, "perman": 5, "post": [5, 33, 40, 41, 42, 97, 101, 127, 180, 181, 186, 265, 266, 292], "bond": 5, "secur": 5, "miscellan": [5, 37, 38], "assign": [5, 72, 243, 256, 263, 288], "sublicens": 5, "transfer": [5, 189, 190, 242, 293, 298, 300, 324], "consent": 5, "trigger": [5, 17, 80, 233], "merg": [5, 21, 43], "consolid": 5, "purchas": 5, "substanti": 5, "asset": 5, "stock": 5, "assigne": 5, "assum": [5, 32, 34, 36, 40, 43, 205, 224, 233, 235, 237, 269, 279, 280, 291, 315, 319, 324, 330, 353, 354], "upon": [5, 16, 17, 30, 42, 80, 158, 263, 272], "enforc": [5, 100], "against": [5, 225], "successor": 5, "unauthor": 5, "null": [5, 29, 101], "void": 5, "constitut": [5, 18, 76], "regul": 5, "underli": [5, 15, 17, 18, 119, 121, 125, 194, 198, 228, 229, 230, 231, 233, 277, 352, 355], "technologi": 5, "full": [5, 15, 19, 35, 37, 71, 72, 74, 98, 171, 172, 205, 214, 222, 272, 326, 335, 336, 337, 345, 354], "complianc": 5, "forc": [5, 251, 254, 322, 324], "majeur": 5, "respons": [5, 67, 84], "delai": [5, 21], "failur": 5, "payment": 5, "connect": [5, 32, 34, 40, 58, 61, 62, 65, 100, 103, 104, 115, 130, 133, 134, 136, 144, 147, 179, 180, 186, 265, 266, 277, 278, 284, 286, 291, 292, 328, 335, 337, 338, 340, 346, 347, 350, 356], "act": [5, 17, 18, 79, 97, 101, 122, 205, 247, 263, 269, 287, 352, 354], "circumst": [5, 326], "beyond": 5, "forese": 5, "Such": [5, 24, 232, 280], "god": 5, "earthquak": 5, "hurrican": 5, "volcan": 5, "erupt": 5, "strike": 5, "lockout": 5, "riot": 5, "civil": 5, "unrest": 5, "protest": 5, "war": 5, "epidem": 5, "communic": 5, "diseas": 5, "outbreak": 5, "health": 5, "emerg": 5, "superimpos": 5, "after": [5, 6, 9, 18, 33, 42, 122, 190, 192, 206, 241, 245, 246, 247, 248, 249, 260, 261, 264, 280, 281, 283], "fact": [5, 17, 19, 79, 97, 334], "fire": 5, "commun": [5, 327], "disast": 5, "whether": [5, 29, 52, 64, 125, 154, 155, 160, 164, 166, 172, 174, 271, 280, 281, 285, 294, 304, 305, 307, 317, 323, 337, 339, 348, 350], "been": [5, 8, 24, 25, 29, 32, 35, 47, 61, 72, 74, 123, 236, 247, 261, 269, 325, 326, 333, 335, 354, 355], "relev": [5, 79], "abov": [5, 15, 24, 25, 26, 29, 36, 205, 223, 232, 280, 286, 326, 334, 335], "period": 5, "dure": [5, 13, 18, 20, 32, 34, 40, 169, 173, 207, 209, 225, 232, 236, 344, 354], "opinion": 5, "affect": [5, 172], "prevent": [5, 42], "continu": [5, 32, 240, 344], "six": [5, 127], "month": 5, "date": 5, "initi": [5, 11, 14, 22, 29, 34, 36, 37, 39, 40, 41, 75, 97, 101, 127, 149, 158, 169, 170, 171, 189, 191, 205, 206, 223, 225, 250, 251, 252, 253, 254, 262, 271, 272, 273, 276, 279, 280, 281, 288, 343, 344, 353, 354, 355], "due": [5, 23, 30, 31, 97, 156, 158], "virtu": 5, "aforesaid": 5, "endeavor": 5, "mitig": [5, 325, 326, 351, 354], "effect": [5, 25, 26, 31, 97, 120, 194, 228, 233, 236, 286, 344], "particular": [5, 16, 29, 37, 39, 42, 44, 97, 182, 183, 184, 185, 187, 214, 225, 236, 250, 252, 253, 254, 255, 276, 277, 279, 280, 281], "cooper": 5, "faith": 5, "adopt": [5, 240, 242], "togeth": [5, 40, 97, 101, 127, 239, 335], "decreas": [5, 30, 35, 225, 247, 261, 353, 354], "impact": 5, "remot": [5, 32, 34, 40, 41, 80, 102, 119, 179, 186, 265, 278, 326], "off": [5, 6, 353], "nearshor": 5, "far": [5, 17, 353], "proportion": 5, "adequ": 5, "govern": 5, "disput": 5, "resolut": 5, "interpret": [5, 181, 182, 183, 184, 185, 187], "franc": 5, "give": [5, 13, 19, 41, 42, 180, 334], "rule": [5, 97, 101, 171, 271, 280, 326, 354], "exclus": 5, "jurisdict": 5, "venu": 5, "compet": 5, "court": 5, "pari": 5, "settl": [5, 35], "friendli": [5, 32, 97, 345], "manner": [5, 19], "within": [5, 36, 72, 75, 91, 236, 286, 306, 329], "sixti": 5, "60": [5, 148, 335], "dai": 5, "copyright": 5, "2021": [5, 280, 326, 354], "2022": [5, 326], "reserv": [5, 84], "worldwid": 5, "sub": [5, 11, 97, 98, 208, 209, 210, 211, 212], "forth": [5, 354], "multipl": [5, 17, 21, 28, 36, 78, 172, 207, 211, 217, 220, 221, 226, 326, 354], "locat": [5, 205, 250, 352, 353, 355], "premis": 5, "sole": [5, 11], "intend": [5, 235, 326], "make": [5, 6, 24, 25, 34, 40, 123, 171, 195, 210, 242, 268, 285, 327, 357], "anoth": [5, 10, 14, 17, 42, 44, 47, 78, 80, 111, 194, 214, 225, 228, 232, 236, 266, 293, 326, 328, 353], "network": [5, 207, 213], "modifi": [5, 33, 97, 101, 170, 206, 252, 253, 254], "deriv": [5, 44, 61, 101, 293, 326], "market": 5, "publish": [5, 103, 180, 266, 286, 291], "rent": 5, "leas": 5, "loan": 5, "commerci": 5, "share": [5, 43, 46, 75, 76], "alter": 5, "adapt": [5, 36, 41, 42, 43, 97, 267, 326, 351, 354, 355], "translat": [5, 17, 21, 24, 25, 26, 35, 52, 66, 116, 117, 118, 244, 247, 261, 326, 328, 357], "decompil": 5, "engin": [5, 41, 53, 54, 55, 332], "disassembl": 5, "reduc": [5, 17, 32, 172, 236, 240, 293, 306, 353], "human": [5, 13], "perceiv": 5, "form": [5, 17, 24, 27, 40, 71, 72, 78, 80, 159, 161, 199, 204, 257, 258, 259, 279, 280, 283, 287, 304, 315, 317, 326, 335, 349, 354], "free": [5, 16, 97, 225, 283, 353, 354], "lend": 5, "sell": 5, "resel": 5, "intellectu": 5, "properti": [5, 19, 97, 100, 101, 123, 125, 126, 128, 130, 247, 258, 259, 261, 285, 293, 324, 335], "intern": [5, 16, 70, 172, 206, 243, 256, 267, 268, 278, 292, 326], "treati": 5, "sold": 5, "furthermor": 5, "doe": [5, 24, 31, 32, 35, 36, 40, 41, 42, 72, 97, 180, 209, 210, 229, 233, 235, 247, 266, 269, 335], "trademark": 5, "servic": [5, 13, 32, 65, 287, 326], "mark": 5, "pertain": 5, "5": [5, 12, 17, 20, 21, 25, 26, 32, 43, 44, 81, 97, 98, 123, 133, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 154, 225, 240, 244, 246, 248, 250, 264, 273, 281, 283, 315, 317, 335, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 357], "NO": 5, "warranti": 5, "AS": 5, "ITS": 5, "supplier": 5, "licensor": 5, "TO": 5, "OR": [5, 6, 17, 79], "maximum": [5, 103, 180, 249, 266, 267, 271, 276, 283, 286, 291, 340, 346], "BY": 5, "disclaim": 5, "represent": [5, 13, 37, 71, 74, 91, 117, 120, 122, 128, 150, 152, 154, 155, 168, 174, 176, 177, 178, 183, 184, 187, 189, 190, 194, 241, 245, 246, 247, 248, 249, 257, 260, 261, 264, 293, 295, 300, 301, 317, 321, 322, 323, 324, 334, 353, 354], "express": [5, 9, 15, 18, 20, 25, 40, 119, 120, 121, 123, 127, 132, 222, 223, 226, 228, 229, 230, 231, 233, 252, 317], "impli": [5, 37, 38], "statutori": 5, "BUT": 5, "NOT": [5, 13, 17, 18, 80], "merchant": 5, "satisfactori": 5, "qualiti": [5, 35, 150], "fit": [5, 42, 283, 354], "titl": 5, "infring": 5, "entir": [5, 33, 37, 38, 39, 74, 172, 286], "risk": 5, "aris": [5, 354], "WITH": 5, "liabil": 5, "IN": 5, "BE": 5, "cost": [5, 17, 23, 24, 25, 35, 44, 150, 206, 239, 242, 243, 244, 256, 262, 263, 269, 280, 312, 313, 343, 344, 345, 346, 352, 353], "substitut": 5, "special": [5, 35, 77, 182, 183, 184, 185, 187, 239, 241, 245, 246, 248, 249, 251, 260, 264, 265, 356], "incident": 5, "indirect": 5, "consequenti": [5, 6], "loss": [5, 354], "busi": 5, "profit": 5, "interrupt": [5, 13], "inabl": 5, "even": [5, 12, 15, 19, 24, 25, 32, 35, 40, 156, 162, 170, 171, 194, 326], "IF": 5, "advis": [5, 18, 188, 293], "possibl": [5, 11, 12, 15, 16, 17, 18, 20, 22, 24, 27, 28, 29, 42, 90, 91, 97, 119, 122, 127, 168, 171, 172, 190, 193, 195, 235, 242, 244, 250, 251, 271, 288, 326, 327, 341, 343, 344], "SUCH": 5, "case": [5, 9, 26, 28, 29, 30, 32, 33, 35, 40, 42, 79, 127, 161, 168, 189, 194, 202, 205, 235, 242, 250, 267, 279, 280, 283, 286, 323, 326, 343, 352], "amount": [5, 97, 127], "paid": 5, "THAT": 5, "exampl": [5, 6, 10, 19, 20, 26, 27, 28, 29, 30, 32, 33, 35, 36, 43, 44, 52, 78, 97, 122, 123, 150, 154, 155, 169, 170, 171, 174, 176, 177, 178, 180, 199, 205, 206, 230, 232, 233, 236, 240, 250, 251, 269, 277, 279, 293, 308, 309, 315, 317, 325, 326, 335, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350, 353, 354, 357], "bear": 5, "technic": 5, "inaccuraci": 5, "typograph": 5, "error": [5, 15, 30, 31, 33, 36, 41, 80, 81, 82, 83, 92, 93, 94, 125, 126, 193, 232, 308, 315, 326, 354], "updat": [5, 15, 18, 24, 35, 36, 58, 75, 97, 130, 169, 209, 225, 241, 245, 246, 248, 249, 260, 264, 271, 351, 353, 354, 355], "januari": [5, 326], "2004": [5, 213], "http": [5, 6, 24, 207, 213, 217, 281, 298, 330], "www": 5, "reproduct": 5, "owner": 5, "union": [5, 111, 168, 170, 176, 177, 178], "common": [5, 16, 114, 115], "direct": [5, 24, 97, 130, 323, 352, 353], "manag": [5, 14, 17, 268, 325], "contract": [5, 101, 286], "ownership": 5, "fifti": 5, "percent": [5, 308], "50": [5, 29, 32, 42, 135, 148, 250, 341, 354], "outstand": 5, "benefici": 5, "permiss": [5, 326], "prefer": [5, 352, 353], "modif": [5, 29], "mechan": [5, 12, 15, 29, 44, 91, 119], "transform": [5, 19, 40, 42, 78, 154, 155, 168, 169, 171, 175, 196, 203, 204, 217, 222, 225, 244, 247, 261, 265, 282, 321, 325, 326, 351, 352, 353, 354], "convers": [5, 50, 66], "authorship": 5, "made": [5, 16, 35, 162, 201], "indic": [5, 18, 64, 78, 79, 149, 151, 161, 169, 175, 189, 191, 194, 225, 235, 236, 286, 319, 353], "attach": [5, 11, 15, 27, 44, 97, 115, 194, 195, 206, 225, 268], "appendix": 5, "editori": 5, "revis": 5, "annot": [5, 198], "elabor": 5, "whole": [5, 19, 171, 326], "separ": [5, 15, 49, 54, 57, 63, 194, 355], "mere": [5, 30], "link": [5, 11, 14, 16, 17, 32, 47, 62, 130, 194, 207, 210, 213, 214, 225, 242, 325, 326], "contribut": [5, 163, 356], "intention": 5, "inclus": [5, 100], "behalf": 5, "verbal": 5, "sent": [5, 13, 19, 23, 29, 52, 54, 55, 180, 182, 183, 184, 185, 187, 283, 292], "mail": 5, "system": [5, 8, 9, 16, 19, 23, 24, 34, 35, 42, 149, 156, 157, 158, 171, 205, 250, 293, 326, 344, 352, 353, 354], "issu": [5, 326, 354], "track": 5, "discuss": [5, 10, 44], "improv": [5, 36, 40, 150, 158, 351, 354, 355], "exclud": [5, 326], "conspicu": 5, "Not": [5, 122, 125], "contributor": 5, "subsequ": [5, 352], "incorpor": 5, "herebi": 5, "perpetu": 5, "charg": [5, 172, 353], "royalti": 5, "irrevoc": 5, "publicli": 5, "patent": 5, "offer": [5, 9, 11, 12, 33, 42, 179, 265, 284, 335], "claim": 5, "institut": 5, "litig": 5, "cross": 5, "counterclaim": 5, "lawsuit": 5, "alleg": 5, "contributori": 5, "redistribut": 5, "medium": 5, "meet": [5, 13], "recipi": 5, "carri": [5, 10, 17, 29, 71, 169, 194, 205, 207, 213, 223, 230, 273, 356], "promin": 5, "retain": 5, "attribut": [5, 36, 42, 43, 69, 78, 79, 95, 96, 100, 101, 125, 126, 205, 228, 229, 233, 235, 258, 259, 286, 318, 326, 352, 353], "text": [5, 13, 225, 286, 333, 335], "readabl": [5, 13, 24], "along": [5, 6, 23, 29, 246, 249, 260, 335, 343], "wherev": 5, "normal": [5, 49, 54, 57, 63, 155, 205, 326], "appear": [5, 30, 80, 95, 97, 101, 120, 127, 223, 225, 243, 335], "add": [5, 15, 16, 17, 26, 32, 92, 96, 98, 111, 119, 125, 190, 194, 206, 208, 209, 211, 212, 213, 215, 216, 217, 219, 225, 233, 240, 244, 258, 259, 274, 353], "alongsid": 5, "addendum": 5, "cannot": [5, 17], "constru": 5, "statement": [5, 16, 230, 232, 236, 286], "differ": [5, 6, 8, 9, 16, 17, 19, 22, 25, 28, 29, 30, 31, 78, 90, 103, 169, 171, 180, 194, 240, 266, 273, 274, 281, 283, 286, 291, 293, 298, 326, 335, 343, 345, 346, 347, 348, 349, 350, 353, 354], "submiss": [5, 32, 326], "unless": [5, 214, 216, 218, 219, 220, 221], "explicitli": [5, 26], "noth": [5, 36, 41, 190, 229, 233, 269], "supersed": 5, "regard": [5, 6, 23, 36, 97, 171, 250], "trade": 5, "customari": 5, "kind": [5, 272, 276, 353], "determin": [5, 79, 294, 345, 354], "appropri": [5, 101, 112, 205, 250], "theori": [5, 149, 158, 343, 353, 355], "tort": 5, "neglig": [5, 35], "deliber": 5, "grossli": 5, "charact": [5, 129], "goodwil": 5, "stoppag": 5, "malfunct": 5, "choos": [5, 35, 119, 250, 267, 271, 285, 353, 354], "fee": 5, "indemn": 5, "howev": [5, 11, 18, 19, 26, 30, 91, 123, 171, 225, 241, 245, 246, 248, 249, 260, 264, 280, 285, 334, 335, 354], "indemnifi": 5, "defend": 5, "hold": [5, 13, 17, 214, 216, 218, 219, 220, 221], "harmless": 5, "incur": [5, 35], "assert": [5, 32, 36, 41, 91, 134, 288], "boilerpl": 5, "field": [5, 19, 24, 25, 29, 30, 31, 79, 97, 121, 127, 241, 245, 246, 247, 248, 249, 253, 260, 264, 280, 287, 326, 357], "enclos": [5, 171], "bracket": [5, 200, 234], "replac": [5, 97, 194, 206, 232, 235, 283, 329, 354, 355], "comment": [5, 6, 225], "syntax": [5, 10, 18, 78, 97, 194, 223, 323, 326], "recommend": [5, 155, 205, 285], "easier": [5, 269], "identif": 5, "archiv": 5, "obtain": [5, 9, 29, 33, 92, 122, 126, 160, 172, 271, 341, 354, 355], "twice": [6, 101], "sourc": [6, 18, 42, 52, 69, 149, 326, 335, 351, 353], "behavior": [6, 34, 40, 72, 80, 97, 194, 269, 277, 288], "homebrew": 6, "sudo": 6, "taken": [6, 166, 189], "sh": 6, "bin": 6, "bash": [6, 333], "curl": 6, "fssl": 6, "raw": [6, 95, 97, 101, 125, 126, 130, 255], "githubusercont": 6, "com": 6, "head": [6, 18], "At": [6, 23, 35, 97, 230], "ask": [6, 71, 72, 286, 327], "path": [6, 13, 325], "screen": [6, 41], "shell_profil": 6, "bash_profil": 6, "zsh": 6, "zprofil": 6, "echo": 6, "manpath": 6, "johnsmith": 6, "eval": [6, 97, 101, 150], "opt": [6, 24, 25, 26, 45, 46, 338, 339, 340, 341, 342, 344, 346, 347, 348, 349, 350, 357], "shellenv": 6, "setup": [6, 253], "verifi": [6, 17, 31], "next": [6, 270], "latest": 6, "python3": [6, 232], "compat": [6, 81, 228, 345, 352], "matrix": [6, 18, 24, 25, 69, 70, 78, 80, 97, 112, 122, 150, 154, 155, 159, 161, 163, 169, 172, 174, 175, 189, 190, 191, 194, 195, 201, 206, 225, 241, 245, 246, 247, 248, 249, 260, 261, 264, 275, 287, 293, 294, 296, 297, 298, 300, 302, 303, 312, 319, 321, 322, 323, 324, 326, 336, 352, 353, 354, 355, 357], "anaconda": 6, "unfortun": 6, "easi": [6, 100, 269, 356], "get": [6, 27, 29, 30, 36, 40, 42, 101, 126, 149, 157, 189, 191, 284, 325, 326, 329, 353, 354, 355, 356], "log": [6, 17, 119, 125, 205, 337, 350], "sure": [6, 250], "open": [6, 12, 16, 19, 20, 42, 149, 236, 326, 351], "part": [8, 15, 16, 19, 24, 25, 42, 91, 149, 171, 180, 201, 272, 326, 351], "clarifi": [8, 355], "main": [8, 9, 36, 79, 171, 206, 225, 250, 268, 277, 286, 288, 326, 329, 330], "concept": [8, 32, 40, 91, 253, 316], "devid": 8, "kei": [8, 36, 52, 79, 130, 189, 191, 223, 225, 241, 245, 246, 248, 249, 260, 264, 317], "It": [8, 10, 14, 17, 18, 20, 24, 30, 33, 35, 37, 38, 39, 42, 71, 72, 74, 75, 97, 101, 119, 122, 123, 129, 169, 171, 173, 188, 190, 193, 194, 195, 205, 232, 235, 236, 241, 244, 245, 246, 247, 248, 249, 260, 261, 262, 264, 276, 279, 280, 287, 288, 289, 293, 300, 326, 343, 344, 353, 354, 355], "procedur": [8, 17, 18, 42, 47, 150, 232], "spin": [8, 24, 35, 46, 91, 150, 154, 155, 156, 158, 161, 163, 168, 172, 174, 176, 177, 178, 241, 245, 246, 247, 248, 249, 260, 261, 264, 287, 326, 335, 336, 337, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 353], "fermion": [8, 45, 46, 91, 282, 326, 354, 355], "combinatori": [8, 10, 12, 23, 35, 181, 182, 183, 184, 185, 187, 244, 247, 256, 257, 261, 335, 343, 344, 345, 346, 347, 348, 349, 350, 357], "interoper": 8, "mainli": [9, 33, 68, 69, 122], "sequenc": [9, 10, 14, 17, 18, 97, 195, 205, 225], "instruct": [9, 10, 13, 80, 97, 197, 253], "comprehens": [9, 20], "mostli": [9, 76, 120, 335], "wrap": [9, 10, 11, 14, 17, 29, 34, 35, 44, 60, 65, 125, 126, 194, 225, 235, 236, 257, 285, 286, 329, 330], "higher": [9, 42, 95, 96, 97, 100, 125, 126, 130, 168, 170, 194, 225, 269, 275], "three": [9, 31, 78, 131, 194, 225, 274, 280, 329, 334, 343, 352], "seri": [9, 29, 171], "manipul": [9, 10, 18, 19, 26, 28, 40, 97, 122, 197, 230, 231, 235, 265, 286, 293, 325, 326, 351], "evolv": [9, 19, 35, 127, 344], "encod": [9, 19, 23, 26, 35, 91, 101, 122, 123, 127, 149, 233, 239, 241, 242, 244, 245, 246, 247, 248, 249, 260, 261, 262, 264, 269, 334, 338, 339, 342, 343, 344, 357], "often": [9, 19, 20, 36, 240, 344, 352], "u": [9, 15, 17, 18, 31, 52, 66, 151, 153, 159, 161, 163, 169, 175, 194, 196, 204, 222, 232, 334, 352, 353, 354], "pure": [10, 13, 14, 95, 101, 194, 293, 317], "built": [10, 12, 20, 97, 104, 119, 150, 205, 226, 231, 232, 243, 278, 292, 352], "hybrid": [10, 161, 265, 279, 326, 351, 354], "nice": [10, 17, 44, 72], "api": [10, 33, 40, 42, 103, 180, 194, 266, 286, 291, 326, 329, 335, 356], "usual": [10, 16, 17, 20, 24, 97, 125, 171, 189, 193, 309, 326, 343, 344, 354], "fed": [10, 20, 30, 97, 190, 192], "note": [10, 18, 21, 97, 152, 163, 168, 193, 274, 302, 306, 308, 354, 356], "qaoa": [10, 26, 181, 182, 183, 184, 185, 187, 240, 242, 247, 261, 334, 345, 346, 347, 348, 349, 350, 356], "batchmod": [10, 98, 235, 270, 326], "manual": [10, 29, 58, 78, 353], "oracl": [10, 194, 196, 233, 237, 288], "assembl": [10, 11], "aqasm": [10, 11, 13, 15, 16, 17, 30, 31, 32, 41, 46, 52, 54, 74, 78, 79, 80, 97, 98, 150, 162, 194, 196, 205, 206, 225, 236, 269, 277, 288, 325, 332, 353, 354], "submodul": [10, 194, 355], "pyaqasm": [10, 11, 12, 13, 15, 17, 18, 49, 57, 63, 79, 91, 97, 194, 197, 205, 206, 325], "qftarith": [10, 16, 17, 18, 46, 78, 97, 98, 194, 207, 208, 209, 210, 211], "qft": [10, 11, 17, 18, 78, 97, 194, 207, 210, 217], "arithmet": [10, 16, 18, 19, 20, 27, 46, 119, 120, 121, 132, 213, 217, 226, 233, 326], "itself": [10, 12, 244, 275, 353], "classarith": [10, 16, 17, 46, 194, 207, 208, 209, 211], "unifi": 10, "basic": [11, 12, 27, 32, 35, 44, 52, 67, 129, 195, 244, 269, 286, 326, 352, 353], "Their": [11, 40], "rather": [11, 18, 32, 42, 95, 101, 171, 197, 226, 228, 229, 231, 233, 352], "self": [11, 32, 36, 41, 42, 228, 233, 263], "explanatori": 11, "constant": [11, 17, 18, 24, 105, 108, 120, 122, 123, 151, 154, 155, 169, 170, 172, 174, 183, 184, 187, 189, 194, 207, 208, 209, 211, 212, 213, 215, 219, 221, 241, 246, 248, 250, 264, 276, 283, 344, 353, 354], "y": [11, 18, 27, 66, 129, 172, 176, 178, 206, 274, 311, 352, 354], "ccnot": [11, 18, 66, 288], "csign": [11, 18, 66, 206], "swap": [11, 18, 66, 210], "sqrtswap": [11, 18], "iswap": [11, 18], "rz": [11, 12, 18, 43, 44, 66, 78, 80, 150, 189, 191, 194, 195, 225, 235, 280, 354], "ph": [11, 16, 18, 52, 97, 210, 213, 274, 298], "phase": [11, 18, 171, 194, 196, 224, 228, 230, 231, 233, 293, 294, 325, 326, 351], "shift": [11, 18, 21, 97, 101, 280, 326, 334, 354], "mathemat": [11, 35], "my_program": [11, 13], "qbits_reg": [11, 13, 195], "regist": [11, 14, 17, 29, 52, 97, 125, 126, 128, 189, 191, 200, 205, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 225, 226, 228, 229, 233, 234, 236, 237], "new": [11, 17, 40, 41, 42, 44, 79, 97, 103, 111, 119, 149, 160, 169, 171, 175, 179, 180, 195, 206, 213, 223, 225, 236, 244, 266, 272, 279, 286, 291, 329, 353, 355], "dag": [11, 18, 66, 97, 154, 155, 174, 195, 223, 326], "convent": [11, 23, 24, 97, 125, 127, 159, 163, 285, 286, 298], "outermost": 11, "alwai": [11, 19, 32, 35, 80, 125, 155, 171, 205, 244, 269, 288], "index": [11, 18, 32, 41, 42, 75, 79, 82, 83, 97, 120, 125, 130, 131, 149, 157, 160, 163, 164, 199, 227, 228, 229, 233, 240, 243, 263, 271, 286, 323], "my_routin": 11, "idx": [11, 32, 44, 269], "parameter": [11, 267, 280, 354], "think": [11, 171], "quit": [11, 16, 17, 40, 42], "conveni": [11, 40, 326], "hardwar": [11, 19, 32, 36, 43, 45, 46, 87, 100, 124, 149, 162, 186, 265, 266, 269, 270, 277, 325, 353], "black": 11, "box": [11, 194, 225], "properli": [11, 47], "might": [11, 15, 17, 24, 42, 97, 119, 125, 194, 206, 208, 211, 212, 235, 236, 240, 242, 244, 253, 268, 274, 333, 344, 352, 354], "abl": [11, 17, 19, 32, 53, 119, 195, 225, 235, 242, 247, 268, 284], "simplic": [11, 353, 354], "input": [11, 17, 24, 50, 52, 66, 69, 75, 98, 101, 127, 156, 179, 205, 206, 222, 230, 235, 236, 240, 270, 286, 326, 346, 347, 348, 349, 350, 352, 353], "signatur": [11, 18, 97, 111, 198, 206], "phase_matrix": 11, "diag": [11, 24, 357], "exp": [11, 119, 195, 267, 280, 315, 317], "1j": [11, 195], "phase_g": 11, "matrix_gener": [11, 112, 195], "Or": [11, 230, 329, 330, 331], "set_matrix_gener": [11, 112], "similarli": [11, 13, 17, 18, 22, 200, 233, 234, 247, 292, 346, 347, 348, 349, 350, 352], "c_phase": 11, "c_phase_g": 11, "circuit_gener": [11, 112, 239], "set_circuit_gener": [11, 112], "variabl": [11, 15, 21, 22, 25, 26, 29, 35, 40, 42, 44, 46, 61, 62, 95, 97, 98, 101, 105, 109, 123, 127, 223, 225, 232, 235, 239, 240, 242, 243, 244, 247, 252, 261, 263, 271, 275, 276, 279, 281, 287, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 354], "lambda": [11, 15, 17, 18, 97, 119, 121, 161, 189, 190, 191, 192, 195, 271, 310, 317], "n": [11, 15, 18, 20, 21, 24, 25, 26, 32, 35, 37, 41, 75, 168, 169, 176, 177, 178, 214, 216, 218, 219, 220, 221, 222, 224, 235, 237, 240, 241, 246, 250, 283, 286, 308, 311, 319, 336, 337, 338, 339, 340, 341, 342, 344, 350, 352, 354], "static": [11, 95, 96, 97, 100, 120, 125, 130, 235, 240, 243, 250, 326], "check": [11, 32, 36, 41, 84, 93, 94, 122, 129, 280, 293, 306, 323, 326], "instead": [11, 20, 29, 97, 194, 196, 207, 275, 317, 326, 345, 352, 355], "previou": [11, 32, 44, 171, 329, 352], "done": [11, 13, 15, 17, 18, 32, 65, 97, 155, 214, 216, 218, 236, 244, 251, 275, 352, 354], "customg": 11, "mat": [11, 296], "my_minus_z": 11, "effici": [12, 17, 18, 21, 44, 122, 149, 158, 162, 265, 323, 326, 343, 353, 354], "introduc": [12, 28, 32, 44, 353], "scheme": [12, 16, 44], "usag": [12, 17, 84, 97, 125, 186, 195, 205, 225, 235, 277, 278, 325, 352], "most": [12, 15, 18, 19, 24, 26, 29, 42, 52, 76, 91, 101, 149, 207, 222, 232, 233, 235, 250, 285, 288, 326, 334, 335, 345, 352, 354], "interest": [12, 17, 19, 150, 171, 283, 352, 354], "psi": [12, 29, 30, 31, 44, 101, 150, 250, 271, 286, 302, 323], "get_vari": [12, 42, 95, 97, 101, 120, 127, 132, 223, 243, 263, 271, 326], "addition": [12, 80, 120, 133, 194], "sum_i": [12, 19, 101, 127, 163, 205, 250, 287, 309, 343], "qbit_idx": 12, "layer": [12, 162, 164, 240, 343, 353], "tradeoff": 12, "up": [12, 16, 17, 18, 20, 26, 28, 36, 40, 97, 149, 159, 194, 225, 293, 294, 335, 352, 354], "ve": 12, "overload": [12, 21, 42, 97, 115, 120, 121, 128, 233, 239, 243, 318, 326], "__call__": [12, 42, 121, 235], "step": [12, 13, 15, 28, 36, 40, 42, 119, 152, 168, 171, 194, 196, 225, 271, 287, 353, 354], "job_2": 12, "job_3": 12, "op": [12, 17, 41, 69, 73, 77, 78, 97, 129, 150, 205, 206, 236, 240, 326, 332], "iterate_simpl": [12, 17, 36, 41, 52, 97, 205, 206, 240, 332, 333], "6663486761279838": 12, "26293133498335286": 12, "0517253399334114": 12, "13286701102213283": 12, "18128427226556842": 12, "7251370890622737": 12, "store": [13, 16, 17, 18, 42, 43, 69, 75, 78, 79, 97, 99, 101, 122, 125, 127, 132, 149, 157, 201, 220, 224, 225, 230, 231, 237, 241, 245, 246, 248, 249, 260, 264, 286, 326, 329], "serial": [13, 18, 29, 33, 36, 41, 69, 70, 95, 97, 101, 125, 129, 326], "pictur": [13, 35], "figur": [13, 257], "aqasm2circ": [13, 18], "left": [13, 24, 25, 92, 126, 149, 153, 157, 168, 169, 189, 191, 196, 197, 204, 222, 225, 231, 233, 250, 271, 283, 286, 298, 302, 310, 315, 317, 324], "sinc": [13, 17, 29, 61, 80, 194, 201, 206, 207, 228, 232, 236, 317, 334, 344, 346, 354], "mandatori": [13, 32], "facilit": 13, "calloc": [13, 80, 97, 197, 200, 225], "cbits_reg": 13, "reset": [13, 14, 18, 69, 72, 79, 97, 206, 210, 225, 285, 326], "outcom": [13, 88, 89, 189, 191], "cc_appli": [13, 225], "condition": 13, "cbreak": [13, 80, 225, 232], "fine": [13, 250, 335], "tune": [13, 280, 335], "creation": [14, 20, 32, 34, 40, 123, 325], "abstractg": [14, 15, 18, 52, 78, 97, 110, 194, 198, 202, 206, 207, 223, 225], "ancilla": [14, 17, 78, 97, 225, 230, 236, 325], "scope": [14, 17, 41, 202, 226, 227, 228, 229, 230, 231, 233, 234, 236, 325, 326], "moreov": [14, 32, 40, 97, 228, 233, 236, 250], "flag": [14, 17], "reus": [14, 31, 236], "later": [14, 17, 29, 33, 64, 194, 225], "though": [15, 285], "veri": [15, 19, 28, 32, 97, 172, 201, 225, 251, 254, 273, 325, 326, 346, 347, 348, 349, 350, 352, 353, 354], "still": [15, 19, 26, 97, 171, 225, 233, 235, 277, 285, 355], "seem": 15, "clunki": 15, "build_gat": [15, 18, 194, 202, 206], "simplfi": 15, "turn": [15, 17, 22, 42, 91, 97, 194, 225, 232, 235, 265], "walsh_hadamard": 15, "ariti": [15, 16, 17, 18, 37, 38, 52, 70, 78, 97, 112, 119, 121, 162, 195, 198, 201, 203, 206, 207, 208, 209, 210, 215, 216, 223, 224, 225, 236, 237, 243, 274, 286, 321, 322, 324], "wht": 15, "subcircuit": [15, 16, 18, 78, 97, 194, 206, 236], "subroutin": [15, 78, 268], "adder": [15, 17, 194, 207, 213, 214, 217], "n1": 15, "n2": 15, "singl": [15, 17, 18, 21, 29, 32, 35, 42, 43, 58, 61, 62, 65, 79, 91, 103, 132, 149, 155, 159, 169, 180, 193, 194, 196, 205, 253, 266, 267, 271, 274, 275, 276, 277, 279, 280, 281, 285, 286, 291, 352], "attempt": [15, 64, 235], "imagin": [15, 18, 123], "ly": 15, "namespac": [15, 18, 194, 214], "foo": [15, 21, 198], "Its": [15, 121, 128, 172, 201, 250, 315, 317, 344, 354], "my_add": 15, "length1": 15, "length2": 15, "proper": [15, 17, 42, 97, 121, 228, 229, 232, 343, 357], "keyword": [15, 18, 61, 62, 96, 97, 180, 186, 225, 235, 326], "piec": [15, 17, 30, 79, 101, 119, 205, 226, 228, 242, 344], "stai": 15, "had": [15, 17, 71, 72, 74], "mani": [15, 19, 20, 23, 26, 29, 32, 42, 44, 127, 171, 205, 239, 241, 242, 245, 246, 248, 260, 264, 326, 334, 335, 352, 354], "fresh": [16, 40, 97, 105, 106, 206, 223, 225, 236, 244, 272], "set_ancilla": [16, 17, 236], "dynam": [16, 32, 40, 97, 225, 279, 293, 344], "pass": [16, 97, 101, 103, 123, 171, 186, 195, 206, 223, 225, 235, 236, 240, 257, 269, 275, 276, 279, 345, 346, 347, 348, 349, 350], "recurs": [16, 195, 244], "across": 16, "tree": [16, 194, 205, 223, 243, 335], "freed": [16, 17, 236], "leav": [16, 20, 67, 79, 243], "consequ": [16, 24, 97, 101, 236, 243], "20": [16, 17, 37, 38, 135, 148, 225, 335, 340, 341, 346, 347], "resourc": [16, 17, 18, 46, 76, 125, 291], "close": [16, 225, 236, 239, 250, 341, 353], "pop": [16, 42, 236], "last": [16, 17, 24, 32, 52, 161, 224, 232, 235, 237, 288, 289, 345, 352], "dagger": [16, 78, 97, 150, 154, 159, 161, 168, 169, 171, 175, 195, 196, 201, 204, 223, 236, 283, 303, 306, 321, 323, 343, 352, 354], "nest": 16, "aglorithm": 17, "sometim": [17, 24, 302], "hard": [17, 26, 35, 37, 38, 269, 334, 344, 357], "quickli": [17, 232], "overwhelm": 17, "fair": 17, "er": 17, "qint": [17, 194, 196, 225, 228, 236], "comparison": [17, 194, 225, 231, 233], "qint1": [17, 233], "qint2": [17, 233], "unimpl": 17, "circuit_ab": 17, "circuit_qft": [17, 207], "circuit_class": [17, 207], "subsect": 17, "qbool": [17, 194, 225, 236], "simplest": [17, 44, 97], "qboolarrai": [17, 194, 225, 228, 230], "correspond": [17, 18, 19, 25, 28, 30, 36, 41, 52, 54, 58, 61, 62, 65, 72, 78, 79, 92, 97, 100, 101, 112, 118, 121, 123, 130, 154, 155, 159, 161, 169, 174, 189, 191, 195, 205, 241, 244, 245, 246, 248, 249, 250, 260, 264, 272, 283, 285, 286, 289, 291, 315, 317, 326, 333, 343, 354], "rout": [17, 198, 206, 226, 228, 229, 230, 231, 233, 236], "and_expr": [17, 197], "expr1": 17, "expr2": 17, "q": [17, 18, 25, 52, 65, 74, 152, 158, 159, 161, 169, 175, 222, 225, 233, 241, 245, 248, 261, 264, 270, 332, 333], "append": [17, 42, 96, 190, 192, 240], "current": [17, 36, 41, 79, 97, 131, 154, 155, 174, 179, 195, 206, 236, 251, 252, 265, 268, 280, 284, 286, 289, 345, 346, 347, 348, 349, 350], "were": [17, 72, 334, 335], "produc": [17, 24, 25, 27, 97, 101, 171, 205, 233, 239, 247, 256, 261, 277, 343, 344], "q_4": 17, "q_5": 17, "toffoli": [17, 18, 214, 216], "q_3": 17, "de": 17, "morgan": 17, "NOTS": 17, "inde": [17, 25, 42], "mind": [17, 352], "just": [17, 19, 344], "syntact": 17, "sugar": 17, "releas": [17, 97, 206, 225, 236, 356], "free_ancilla": [17, 225, 236], "expr": [17, 119, 120, 132], "set_valu": [17, 233], "circuit1": [17, 97], "circuit2": [17, 97], "empti": [17, 18, 97, 101, 125, 206, 225, 291, 324, 353], "did": [17, 18, 127], "qint3": [17, 233], "depth": [17, 97, 98, 120, 124, 240, 242, 343, 353], "mult": [17, 21, 217], "14": [17, 80, 81, 133, 135, 138, 140, 141, 142, 146, 148, 225, 233, 340, 346, 347], "13": [17, 81, 97, 133, 135, 138, 139, 140, 141, 142, 146, 148, 335, 340, 346, 347, 352], "12": [17, 26, 81, 133, 135, 138, 139, 140, 141, 142, 146, 148, 153, 169, 193, 236, 245, 257, 269, 288, 340, 346, 347], "compar": [17, 20, 194, 285, 292], "increment": 17, "cast_to": [17, 228], "cast": [17, 43, 56, 95, 97, 100, 101, 126, 128, 130, 132, 225, 228, 229, 230, 233, 282], "sai": [17, 162, 232], "anc": 17, "3535533905932732": 17, "813961400789805e": 17, "17j": 17, "3535533905932733": 17, "831019179913692e": 17, "35355339059327334": 17, "1180695148086566e": 17, "58020831115014e": 17, "3535533905932734": 17, "231448391212731e": 17, "3535533905932729": 17, "289974949513096e": 17, "16j": 17, "353553390593273": 17, "0594047723252207e": 17, "686323053012687e": 17, "straightforward": [17, 24, 31, 40, 97, 251], "networkx": [17, 43, 100, 130, 182, 183, 184, 185, 187, 245, 246, 248, 249, 257, 264, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 357], "clean": [17, 36], "functool": [17, 32], "coloring_oracl": 17, "bitlength": [17, 210], "node": [17, 120, 130, 243, 245, 246, 248, 249, 257, 258, 259, 264, 335, 337, 338, 339, 340, 342, 346, 347, 348, 349, 350], "edg": [17, 335, 337, 338, 339, 340, 342, 346, 347, 348, 349, 350], "nx": [17, 43, 130, 245, 246, 248, 249, 264, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 350, 357], "path_graph": 17, "len": [17, 32, 41, 71, 74, 78, 236, 240, 241, 245, 246, 248, 249, 264, 288, 326, 338, 339, 340, 341, 342, 349], "19": [17, 135, 138, 141, 142, 148, 210, 340, 341, 346, 347], "vertex": [17, 179, 187, 239, 255, 259, 264, 325, 335, 337, 338, 339, 340, 345, 346, 347, 348, 350], "formula": [17, 18, 24, 29, 69, 73, 78, 79, 80, 91, 97, 99, 158, 194, 197, 199, 225, 230, 233, 243], "c_i": 17, "neq": [17, 25, 344], "c_j": [17, 163], "j": [17, 24, 25, 35, 41, 150, 155, 156, 158, 161, 169, 174, 175, 235, 246, 247, 249, 250, 260, 287, 308, 309, 315, 317, 321, 324, 326, 352, 354, 357], "loop": [17, 41, 69, 75, 267, 271, 275, 276, 277, 279, 280, 281, 286], "asymptot": [17, 283], "save": [17, 41, 124, 206, 225, 329], "increas": [17, 35, 97, 98, 171, 206, 283, 343, 344, 354], "counter": 17, "larg": [17, 19, 35, 101, 154, 155, 171, 174, 240, 250, 344], "enough": [17, 35, 84, 353], "count": [17, 97, 194, 237, 240, 242, 269, 325, 326, 335], "number_of_edg": [17, 134], "bit_length": 17, "frugal": 17, "didn": [17, 97], "mention": [17, 27, 280], "strongli": [18, 280], "binari": [18, 23, 29, 33, 35, 61, 64, 71, 74, 95, 96, 97, 100, 101, 117, 118, 125, 127, 130, 239, 241, 244, 247, 261, 354, 357], "dump": [18, 29, 33, 44, 61, 64, 95, 96, 97, 100, 101, 125, 127, 130, 247, 326], "potenti": [18, 153, 159, 161, 163, 169, 225, 341], "matric": [18, 52, 70, 91, 97, 105, 108, 150, 189, 194, 206, 225, 242, 280, 293, 298, 300, 302, 303, 309, 311, 312, 314, 319, 354], "constructor": [18, 36, 42, 110, 112, 190, 195, 225, 236, 242, 272, 275, 318, 320, 326, 345, 353], "bodi": [18, 79, 151, 153, 158, 169, 170, 172, 175, 206, 232, 268, 352, 353], "sum": [18, 21, 24, 25, 32, 40, 44, 101, 122, 161, 194, 205, 239, 240, 244, 250, 269, 326, 335, 341, 344], "begin": [18, 24, 32, 35, 302, 310, 315, 317, 326], "cbit": [18, 52, 73, 78, 79, 80, 81, 89, 99, 194, 197, 200, 225, 333], "straightfoward": 18, "my_z": 18, "involv": [18, 35, 255, 257, 344], "param": [18, 97, 189, 190, 191, 223, 281, 310], "my_rxrz": 18, "my_qft": 18, "none": [18, 30, 36, 41, 52, 58, 59, 61, 62, 65, 66, 78, 79, 80, 85, 89, 95, 97, 98, 100, 101, 103, 104, 111, 112, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 154, 155, 156, 158, 161, 162, 171, 172, 174, 180, 186, 189, 190, 191, 192, 196, 197, 198, 201, 206, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 240, 242, 244, 247, 250, 256, 261, 262, 266, 267, 271, 274, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 291, 292, 298, 300, 301, 317, 318, 319, 323, 345, 346, 347, 348, 349, 350], "ressourc": 18, "constitu": [18, 127], "qbit_list": [18, 229], "referenc": 18, "predefin": 18, "my_cz": 18, "conj": 18, "tran": 18, "mea": [18, 74, 189, 191], "boolean": [18, 26, 41, 64, 73, 79, 197, 199, 225, 228, 229, 230, 233, 243, 263, 304, 307], "logic": [18, 69, 91, 98, 99, 197, 199, 210, 225, 230, 239, 243, 244, 354], "stand": [18, 44, 171], "break": [18, 69, 73, 79, 80, 81, 210, 225, 240], "hadamard": [18, 101, 326], "vmatrix": 18, "pauli": [18, 20, 27, 91, 122, 129, 168, 189, 190, 193, 242, 280, 293, 296, 297, 298, 300, 308, 309, 311, 324, 326, 354], "ident": [18, 225, 283, 298, 300, 301, 309, 311, 354], "foral": [18, 25, 151, 169], "rm": 18, "r": [18, 66, 101, 120, 132, 153, 158, 159, 161, 169, 170, 352], "rotat": [18, 97, 101, 160, 162, 164, 195, 225, 242, 280, 343], "co": [18, 119, 120, 121, 123, 274], "sin": [18, 119, 120, 121], "infil": 18, "outfil": 18, "wrote": 18, "my_lib": 18, "py": [18, 52, 80, 232, 235, 325, 326], "misc": [18, 194], "qb": [18, 32, 97, 240, 269], "inlin": [18, 97, 98, 124, 194, 206, 225, 265, 268, 325, 326], "l": [18, 161, 169, 175, 205, 352, 354], "my_aqasm": 18, "beneath": 19, "everi": [19, 158, 282, 335, 337, 342, 349, 350, 352], "realiz": 19, "digit": [19, 242, 326, 343, 345, 354], "li": [19, 353], "magnet": [19, 24, 25, 241, 245, 246, 247, 248, 249, 260, 264, 287, 326, 357], "experienc": 19, "vari": [19, 354], "devic": [19, 45, 46, 84, 85, 87, 100, 326], "sort": [19, 95, 97, 101, 127, 156, 158, 169, 326], "varieti": [19, 35, 37], "would": [19, 24, 32, 42, 49, 54, 57, 63, 97, 158, 171, 195, 232, 235, 241, 245, 246, 248, 249, 260, 264, 266, 326, 335, 341, 342, 349, 354], "rich": 19, "actual": [19, 29, 30, 69, 334, 345], "chemistri": [19, 149, 325, 352, 355], "scienc": [19, 205], "explor": [19, 42, 97, 250], "door": 19, "answer": [19, 334, 341], "struggl": 19, "evolut": [19, 37, 39, 127, 149, 168, 250, 287, 343], "defect": 19, "steer": 19, "decompos": [19, 40], "lambda_i": [19, 127], "h_i": [19, 101, 127, 287], "hermitian": [19, 122, 127], "send": [19, 36, 41, 55, 91, 119, 127, 326, 338, 339, 340, 341, 342], "simpli": [20, 22, 42, 132, 225, 228, 232, 244, 253, 254, 343, 357], "drive": [20, 21, 22, 127], "t_variabl": [20, 21, 22], "pauli_term": [20, 21, 22, 27, 31, 122, 354], "tmax": [20, 21, 22, 24, 127, 247, 250, 252, 261, 262, 338, 339, 340, 341, 342, 344], "23": [20, 27, 42, 135, 148, 269, 326, 340, 346, 347, 353, 354], "lead": [20, 266, 334, 344, 354], "especi": 20, "ten": 20, "hundr": 20, "straight": [20, 171], "respect": [20, 25, 34, 123, 127, 171, 247, 261, 287, 300, 306, 311, 335, 354, 357], "speed": [20, 149, 352], "tuppl": 20, "scalar": [20, 21, 27, 33, 125, 232, 298], "tmax_expr": 20, "15": [20, 133, 135, 138, 140, 141, 142, 146, 148, 150, 207, 210, 232, 269, 309, 323, 329, 335, 340, 341, 346, 347], "145": 20, "tempor": 21, "composit": [21, 27, 97, 197], "pipe": [21, 41, 42, 61, 103, 179, 180, 272, 291, 326, 345], "schedule1": 21, "schedule2": 21, "heavisid": [21, 119, 326], "ponder": 21, "signal": [21, 123], "filter": [21, 30], "parallel": 21, "rescal": [21, 280], "45": [21, 134, 135, 148, 341], "past": 21, "futur": 21, "bar": [21, 92, 126], "One": [22, 71, 91, 97, 123, 127, 156, 169, 170, 171, 172, 175, 251, 326, 342, 344, 357], "psi_0": [22, 101, 127, 250, 253, 254], "vec": [22, 44, 150, 152, 271], "linalg": [22, 154, 279, 286, 326, 353, 354], "norm": [22, 72, 267, 293, 299, 304, 305, 307], "real": [23, 24, 25, 58, 101, 119, 122, 205, 250, 306, 326, 335, 341], "life": 23, "formul": [23, 24, 25, 26, 239, 241, 245, 246, 248, 260, 262, 264, 334, 335, 352, 357], "maxim": [23, 36, 98, 101, 241, 244, 246, 269, 281, 334, 336], "lowest": [23, 44, 171, 273, 334, 343], "intim": 23, "relat": [23, 29, 222, 293, 317], "qubo": [23, 24, 26, 35, 241, 244, 245, 247, 248, 264, 326, 335, 343, 357], "Ising": [23, 25, 26, 34, 35, 122, 241, 244, 245, 246, 248, 249, 260, 261, 264, 287, 326, 335, 343, 345, 357], "solut": [23, 32, 35, 158, 244, 245, 246, 248, 249, 250, 257, 264, 287, 335, 338, 339, 340, 341, 342, 343, 344, 345], "precis": [23, 42, 79, 89, 171, 281, 285, 353], "unconstrain": [23, 35, 239, 261], "local": [24, 35, 80, 115, 280, 291, 292, 330, 354], "h_": [24, 25, 35, 153, 154, 158, 159, 161, 168, 169, 171, 344, 352], "sigma_": [24, 27, 311], "j_": [24, 25, 35, 287, 319], "ij": [24, 25, 35, 151, 156, 158, 161, 163, 169, 175, 271, 287, 321, 324], "pmatrix": 24, "symmetr": [24, 25, 247, 261, 357], "zero": [24, 25, 30, 78, 97, 127, 154, 158, 171, 189, 247, 265, 283, 326, 351, 352, 353, 354], "coupl": [24, 159, 188, 246, 247, 249, 260, 287, 293, 326, 353, 357], "quantiz": [24, 159, 161], "s_": [24, 25, 35, 150, 250], "clariti": [24, 355], "offset": [24, 25, 97, 101, 200, 234, 241, 245, 246, 247, 248, 249, 260, 261, 264, 287, 326, 357], "landscap": 24, "match": [24, 97, 225, 235, 243, 263, 280, 323], "convert": [24, 29, 48, 49, 50, 54, 56, 57, 59, 60, 63, 66, 69, 70, 71, 74, 149, 153, 154, 155, 168, 169, 293, 297, 321, 322, 323, 324, 352, 353], "vice": [24, 328, 329, 330, 331], "versa": [24, 328, 329, 331], "typic": [24, 162], "try": [24, 42, 80, 97, 127, 242, 244, 269, 326, 327, 353], "reach": [24, 25, 40, 283, 353], "adiabat": [24, 171, 344], "theorem": [24, 344], "al18": 24, "markov": [24, 35], "chain": [24, 35, 101, 122], "low": [24, 35, 42, 76, 125, 156, 158, 169, 173, 225, 260, 326, 341, 346, 347, 348, 349, 350, 353, 354], "ferromagnet": 24, "align": 24, "onto": [24, 69, 72, 289], "tend": [24, 44], "lower": [24, 35, 36, 101, 169, 170, 173, 194, 207, 242, 272, 281, 285, 343, 353, 355], "closer": 24, "word": [24, 223, 225, 283, 335], "aim": [24, 35, 149, 241, 326, 351], "tackl": [24, 334, 335], "min_": [24, 25], "problem_s": [24, 25, 357], "100": [24, 25, 30, 31, 150, 232, 281, 354], "1000": [24, 25, 31, 271], "seed": [24, 25, 123, 281, 287, 357], "248": [24, 25], "h_field": [24, 357], "rand": [24, 25, 169, 170, 357], "any_mat": [24, 25, 357], "j_mat": [24, 357], "transpos": [24, 25, 78, 154, 155, 174, 357], "18": [24, 135, 138, 141, 142, 148, 340, 341, 346, 347, 357], "problem_is": [24, 357], "offset_i": [24, 247, 287, 357], "magnetic_field_h": [24, 247], "j_coupling_matrix": [24, 247], "problem_ising_job": 24, "gamma_t": [24, 25, 127, 247, 261, 338, 339, 340, 341, 342], "gamma_t_fun": 24, "nan": 24, "readi": [24, 25, 239, 242, 247, 261, 326, 343], "69198662": [24, 25], "48503501": 24, "02913885": 24, "56996588": 24, "84630373": 24, "99216786": 24, "72490608": 24, "36270136": 24, "21518767": 24, "43237698": 24, "53659164": 24, "43329047": 24, "63995666": 24, "75877295": 24, "67301865": 24, "74051823": 24, "84432295": 24, "68663996": 24, "76994591": 24, "78961076": 24, "38143552": 24, "traceback": [24, 52, 232, 235, 288, 345, 352], "recent": [24, 52, 232, 235, 288, 345, 352], "stdin": [24, 25, 52, 232, 235, 288, 323, 338, 339, 340, 341, 342, 345, 352], "30": [24, 37, 38, 135, 148, 326, 335, 340, 341, 346, 347], "nameerror": [24, 52, 288], "to_qubo": [24, 26, 244, 247], "combinatorialproblem": [24, 25, 26, 35, 239, 247, 256, 261, 343, 357], "to_combinatorial_problem": [24, 25, 247, 261], "tameem": 24, "albash": 24, "daniel": 24, "lidar": 24, "review": 24, "modern": 24, "90": 24, "015002": 24, "2018": 24, "url": [24, 103, 207, 213, 217, 266, 286, 291], "journal": [24, 213], "ap": [24, 207, 213], "rmp": 24, "1103": [24, 207, 213], "revmodphi": 24, "x_": [25, 352], "q_": 25, "quad": 25, "linear": [25, 131, 133, 144, 239, 241, 262, 283, 284, 285, 286, 326, 343, 354], "seen": [25, 27, 42, 79, 244, 272, 352, 353, 354], "2x_": 25, "q_mat": 25, "52": [25, 30, 135, 148], "problem_qubo": 25, "offset_q": [25, 261], "q_matrix": [25, 261], "problem_qubo_job": 25, "na": [25, 328], "73860143": 25, "23485743": 25, "65543516": 25, "74898502": 25, "19440743": 25, "55240091": 25, "42782353": 25, "46931252": 25, "9406734": 25, "5541593": 25, "73200663": 25, "65215284": 25, "63773675": 25, "28187286": 25, "22": [25, 97, 135, 148, 232, 240, 340, 346, 347, 353], "userwarn": [25, 338, 339, 340, 341, 342], "sqaqpu": [25, 338, 339, 340, 341, 342], "to_is": [25, 26, 244, 261], "var": [26, 35, 239, 243, 244], "claus": [26, 35, 194, 230, 239, 240, 244], "achiev": [26, 29, 334], "famou": [26, 334], "sat": [26, 239], "comb_prob": 26, "five": 26, "x1": 26, "x2": 26, "x3": 26, "x4": 26, "weight": [26, 239, 244, 250, 269, 276, 323, 344], "add_claus": [26, 244], "75": [26, 353], "86": 26, "comb_prob_ob": 26, "get_observ": [26, 242, 243, 244, 247, 261, 262, 263], "1500000000000001": 26, "1875": 26, "zz": [26, 27, 97, 150, 176, 177, 178, 240, 244, 352], "zzz": [26, 240], "56": [26, 148], "215": 26, "per": [26, 75, 269, 286, 336, 338, 339, 340, 341, 342, 346, 348, 349], "exemplifi": 26, "my_observ": 27, "xz": [27, 31, 176, 178, 352], "zxzx": 27, "constant_coeff": [27, 122, 154, 155, 169, 170, 174, 353], "multipli": [27, 183, 184, 187, 220, 221, 241, 246, 248, 264, 354], "obs1": 27, "obs2": 27, "tensor": [27, 129, 159, 193, 205, 271, 280, 319, 324, 354], "__xor__": 27, "zzx": 27, "commut": [27, 267, 274, 352, 354], "__or__": 27, "2j": [27, 232], "yz": [27, 176, 178], "shorthand": 27, "notat": [27, 194], "obs3": 27, "previous": [27, 353, 354], "complex": [27, 78, 101, 125, 126, 127, 337, 350], "ones": [27, 171, 334, 335], "zx": 27, "nbshot": [27, 29, 30, 31, 36, 92, 97, 101, 127, 150, 242, 286], "2048": 27, "retriev": [28, 43, 55, 61, 205, 269, 326], "showcas": 28, "batch": [28, 34, 36, 40, 41, 58, 61, 62, 64, 65, 91, 97, 101, 103, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 256, 257, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 291, 292, 326, 345, 346, 347, 348, 349, 350], "view": [29, 326], "memori": [29, 37, 38, 87, 205, 206, 285, 312, 313, 352], "he": 29, "wavefunct": [29, 153, 169], "commonli": [29, 293], "project": [29, 69, 71, 150], "formal": [29, 35, 269], "speak": 29, "axi": [29, 205, 353], "yield": [29, 30, 31, 32, 97, 180, 267, 343], "bitstr": [29, 30, 32, 127, 128, 244, 250, 256, 269], "rest": [29, 32, 35, 41, 42], "statist": [29, 97, 210, 326], "accur": [29, 171], "estim": [29, 30, 31, 65, 92, 125, 126, 171, 194, 224, 325, 326, 329, 351, 354], "frequenc": [29, 30, 92, 97, 123, 126, 127], "01": [29, 127, 269, 281, 308, 326, 342, 357], "repetit": [29, 225], "emul": [29, 34, 80, 97, 265, 268, 277, 325], "infinit": [29, 30, 31, 126, 127, 150], "decid": [29, 30], "subset": [29, 71, 74, 248, 250, 259, 274, 325, 335, 341, 345, 346, 347, 350], "On": [29, 42, 290], "subresult": 29, "absenc": [29, 71], "observablesplitt": [29, 31, 265], "enhanc": 29, "capac": 29, "aggreg": [29, 34, 36, 91, 92, 97, 127, 225, 266], "threshold": [29, 30, 36, 92, 97, 101, 127, 150, 169, 170, 173, 225, 267], "uncertainti": 29, "meant": [29, 95, 101, 171, 172, 243, 353], "request": [29, 84, 125], "metadata": [29, 33], "show": [29, 97, 171, 236, 335, 338, 341, 353, 354], "1024": [29, 36, 97], "reconstruct": [29, 33], "load": [29, 33, 36, 61, 62, 95, 96, 97, 100, 101, 125, 127, 130, 205, 247, 326], "autom": [29, 44, 149], "conduct": 30, "amp_threshold": [30, 97, 101, 127], "certain": [30, 44, 354], "finit": [30, 31, 126], "err": [30, 33, 125, 126, 150, 232], "05021167315686783": 30, "48": [30, 135, 148], "ideal": [30, 31, 37], "nois": [30, 31, 37, 44, 123, 188, 189, 190, 191, 192, 193, 265, 283, 293, 315, 316, 317, 325, 326, 351, 354], "n_": [30, 162, 163, 283, 322, 324, 354], "mathrm": [30, 152, 153, 159, 161, 162, 169, 171, 189, 191, 222, 271, 283, 298, 300, 301, 302, 303, 308, 317, 322, 324, 354], "expect": [30, 31, 32, 40, 41, 121, 127, 171, 210, 232, 267, 269, 283, 353, 354], "took": 30, "x_0": 31, "otim": [31, 250, 309, 311, 314, 319, 322, 344], "z_1": 31, "devoid": 31, "10000": [31, 260], "10000000000000003": 31, "03163859985841663": 31, "017000000000000043": 31, "009999054860826147": 31, "grasp": 32, "understand": 32, "perfectli": 32, "pars": [32, 52, 179, 180, 181, 182, 183, 184, 185, 187, 255, 256, 257, 258, 259, 345, 346, 347, 348, 349, 350], "flexibl": [32, 49, 54, 57, 63], "insert": [32, 44, 97, 283], "my_stack": [32, 40], "batchgener": [32, 103, 326], "post_process": [32, 33, 40, 180, 181, 186, 266], "spec": [32, 41, 43, 97, 100, 101, 180, 181, 182, 183, 184, 185, 186, 187, 266, 269, 270, 273, 277, 278, 282, 283], "cat": 32, "abstractgener": [32, 103, 179, 186, 326], "catstategener": 32, "target": [32, 43, 79, 97, 101, 130, 171, 239, 252, 262, 343, 344], "2f": 32, "000": [32, 41, 335], "111": [32, 41], "advantag": 32, "dummi": [32, 44, 52, 180, 326], "prod": 32, "rx_i": 32, "alpha_i": 32, "best": [32, 42, 44, 97, 127, 241, 244, 245, 246, 247, 248, 249, 255, 256, 257, 258, 259, 260, 261, 264, 265, 286, 325, 334, 335, 337, 345, 350, 354], "fix": [32, 119, 130, 250, 273, 344], "dummyenergyminim": 32, "practis": [32, 36, 269], "better": [32, 36, 171, 266, 326, 343, 353, 355], "enumer": [32, 41, 80, 81, 91, 131, 240, 269, 295, 354], "best_angles_circ": 32, "z_i": 32, "\u03c3": 32, "isclos": 32, "atol": 32, "11111": 32, "nor": [32, 36], "batchresult": [32, 40, 41, 58, 62, 64, 65, 91, 180, 181, 186, 245, 246, 248, 249, 256, 264, 266, 272, 285, 286, 291, 326], "catstateresult": 32, "__init__": [32, 36, 42, 232, 345], "invalid": [32, 36, 81, 323], "server": [32, 34, 36, 40, 41, 80, 103, 179, 180, 186, 265, 266, 278, 284, 286, 291], "synchron": [32, 34, 40, 61, 62, 329], "asynchron": [32, 40, 60, 61, 62, 64, 329], "side": [32, 36, 40, 41, 97, 277], "serv": [32, 34, 40, 103, 180, 186, 266, 286, 291], "port": [32, 34, 40, 103, 104, 180, 186, 266, 278, 286, 291, 292, 330], "ip": [32, 34, 40, 104, 186, 278, 292, 330], "maxcutgener": [32, 179, 340, 345, 346], "1234": [32, 34, 40], "client": [32, 34, 36, 40, 41, 80, 272, 326], "distant": [32, 34, 40, 41], "listen": [32, 34, 40, 103, 180, 266, 286, 291, 330], "127": [32, 34, 40, 330], "remotebatchgener": [32, 179], "disconnect": [32, 34, 40], "lost": [32, 34, 40, 236], "encapsul": 33, "raw_data": [33, 41, 92, 125, 288, 338, 339, 340, 341, 342], "value_data": [33, 41, 125], "statevector": [33, 41, 125, 302, 326], "intermediate_measur": [33, 125, 126], "summar": 33, "trace": [33, 44, 293, 299, 301, 303, 305, 306, 319, 323], "meta": [34, 36, 42, 44, 95, 96, 272, 326], "remoteqpu": [34, 284, 326], "albeit": 35, "solver": [35, 42, 241, 245, 246, 248, 249, 260, 264, 287, 335, 355], "resembl": 35, "simulatedann": [35, 117, 284, 326, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350], "sqa": [35, 241, 245, 246, 247, 248, 249, 260, 261, 264], "benchmark": [35, 241, 245, 246, 247, 248, 249, 260, 261, 264], "98": [35, 335], "histor": 35, "heurist": [35, 242, 285, 343], "stochast": [35, 123, 126, 265, 281, 354], "temperatur": [35, 241, 245, 246, 247, 248, 249, 260, 261, 264, 287, 317, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350], "jump": [35, 190, 192], "barrier": 35, "escap": 35, "optima": 35, "hopefulli": 35, "global": [35, 293, 344, 354], "optimum": 35, "p_": [35, 92, 126], "min": [35, 42, 119, 246, 247, 250, 261, 353, 354], "delta": [35, 171], "switch": 35, "wherea": [35, 91, 283], "pseudo": [35, 354], "inherit": [36, 41, 42, 114, 194, 239, 244, 247, 261, 272, 286, 326, 343, 352], "qpuhandl": [36, 67, 97, 101, 114, 150, 277, 284, 285, 286, 292], "hardwarespec": [36, 40, 41, 43, 91, 97, 101, 103, 130, 133, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 182, 183, 184, 185, 186, 187, 269, 270, 277, 282, 291, 326], "integr": [36, 149, 151, 153, 158, 169, 170, 172, 175, 317, 353], "rais": [36, 41, 69, 73, 80, 81, 82, 83, 93, 94, 97, 98, 105, 109, 110, 111, 113, 225, 244, 247, 261, 290, 326], "qpuexcept": [36, 80, 94, 326], "remotli": [36, 41], "assert_qpu": [36, 91], "my_condit": [36, 41], "parent": [36, 42, 194, 201, 241, 245, 246, 247, 248, 249, 260, 261, 264], "myqpu": 36, "super": [36, 42], "_paramet": 36, "dict": [36, 52, 58, 62, 65, 95, 96, 97, 98, 101, 111, 120, 130, 172, 189, 190, 191, 192, 272, 275, 276, 279, 281, 285, 286, 291, 317, 346, 347, 348, 349, 350], "str": [36, 52, 61, 62, 65, 78, 79, 82, 83, 86, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 111, 112, 120, 121, 125, 127, 129, 130, 132, 154, 155, 161, 168, 171, 172, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 206, 223, 225, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 254, 260, 264, 266, 271, 274, 276, 278, 282, 283, 286, 291, 292, 308, 309, 317, 321, 322, 324, 338, 339, 340, 341, 342, 354], "remov": [36, 97, 101, 206, 225, 240, 319, 326], "valid": [36, 91, 236, 335], "overrid": [36, 206, 277], "temporarli": 36, "dictionari": [36, 52, 79, 97, 98, 101, 111, 120, 124, 130, 172, 189, 191, 223, 241, 245, 246, 247, 248, 249, 260, 261, 264, 317], "json": [36, 44], "_default_opt": 36, "_overrid": 36, "split": [36, 37, 274, 355], "correct": [36, 223, 233, 242, 252, 253, 335, 354], "exceut": 36, "add_sampl": [36, 125], "aggregate_data": [36, 91, 97, 101, 127], "card": 36, "underneath": [36, 232, 285], "skeleton": [36, 194], "wrapper": [36, 58, 60, 61, 62, 64, 91, 95, 96, 97, 100, 101, 125, 126, 130, 149, 198, 202, 232, 326], "max_nb_shot": 36, "qpuskeleton": 36, "arg": [36, 54, 55, 67, 97, 103, 112, 180, 181, 186, 189, 190, 191, 192, 195, 202, 225, 236, 240, 257, 258, 259, 266, 270], "nb_shot": 36, "processingtyp": [36, 43, 88, 100, 101, 286], "integ": [36, 71, 72, 74, 78, 79, 97, 117, 118, 128, 152, 226, 228, 229, 231, 233, 235, 236, 239, 241, 276, 335], "measured_qubit": 36, "todo": 36, "compress": [36, 149, 160, 353], "caster": [36, 326], "shorter": 36, "tupl": [36, 49, 54, 57, 63, 71, 72, 74, 75, 97, 123, 127, 150, 151, 153, 169, 171, 172, 173, 175, 189, 190, 191, 247, 257, 261, 287, 326], "size": [36, 41, 79, 159, 169, 171, 184, 205, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 225, 236, 241, 246, 248, 249, 257, 260, 271, 276, 319, 323, 335, 336, 338, 339, 341, 347, 348], "compris": 37, "propos": [37, 38, 149, 167], "pybind11": [37, 38], "remark": [37, 38], "exponenti": [37, 38, 210, 283, 354, 355], "around": [37, 38, 60, 61, 62, 64, 162, 171], "ram": [37, 38], "deliv": [37, 39], "unitari": [37, 39, 78, 97, 194, 196, 201, 204, 224, 298, 353, 354], "pylinalg": [38, 45, 46, 80, 225, 269, 277, 284, 285, 290, 326, 329], "my": 40, "transpil": [40, 65], "incom": [40, 42, 97], "aver": 40, "flow": [40, 97, 292], "plugin1": 40, "plugin2": 40, "my_qpu": [40, 41], "overal": [40, 97, 240, 242, 335, 354], "wide": [40, 42, 352], "remap": [40, 78, 79, 97, 210], "remoteplugin": [40, 265, 326], "pre": [40, 41, 194, 344], "subtyp": 40, "junction": [40, 265, 275, 325, 326], "resubmit": [40, 41], "repair": [40, 41], "abstractplugin": [41, 97, 101, 115, 265, 292], "pluginexcept": [41, 80, 93], "assert_plugin": [41, 91], "get_spec": [41, 43, 291], "stage": [41, 42, 43, 171, 225, 230], "myplugin": 41, "hardware_spec": 41, "someth": [41, 326], "batch_result": [41, 186, 266], "do_post_process": [41, 266], "deloc": 41, "debug": [41, 52, 120, 206, 225, 288], "ghz": 41, "all_result": 41, "need_flip": 41, "lsb_first": [41, 125], "has_statevector": [41, 125], "70710678": 41, "resdata": 41, "_serial": 41, "mem_ptr": 41, "data_typ": 41, "data_s": 41, "qreg": [41, 52, 97, 126, 128, 225, 333], "qregist": [41, 97, 126, 127, 128, 194, 225, 236], "0x14bcf33b3370": 41, "msb": [41, 128], "_subtype_metadata": 41, "0x14bcf17aa460": 41, "0x14bcf17aa4c0": 41, "0x14bcf17aa2e0": 41, "_valu": [41, 223], "error_data": 41, "in_memori": 41, "_parameter_map": 41, "values_data": 41, "emb": [42, 161], "middl": 42, "simpler": [42, 250], "deal": [42, 171, 225], "eigensolv": [42, 325, 326, 351], "until": [42, 171], "satfisfi": 42, "cous": 42, "outsid": [42, 171], "workflow": 42, "With": 42, "trivial": [42, 205, 228, 274, 344], "treatment": 42, "iterativeexplor": 42, "naiv": [42, 274], "width": [42, 71, 74, 250], "ecount": 42, "initial_job": 42, "linspac": 42, "all_valu": 42, "val": [42, 228, 229, 233], "current_job": 42, "min_val": 42, "best_index": 42, "best_param": 42, "entri": [42, 79, 97, 250], "point": [42, 123, 235, 273, 283, 286, 326], "recept": [42, 272], "acc": [42, 210], "transmit": [42, 80, 125, 129, 272], "down": [42, 159, 161, 272, 343, 354], "upper": [42, 169, 170, 171, 173], "variational_circ": 42, "beta": [42, 172, 205, 317, 343], "9979453927503363": 42, "077478517802246": 42, "bother": 42, "administr": [42, 225, 275], "burden": [42, 275], "extract": [42, 70, 78, 125, 194, 207, 225, 239, 244, 256, 258, 259, 287, 338, 339, 340, 341, 342, 352], "slightli": [42, 326], "graph": [43, 100, 130, 131, 179, 182, 183, 184, 185, 187, 239, 240, 245, 246, 248, 249, 255, 257, 258, 259, 264, 274, 325, 339, 340, 342, 344, 345, 346, 348, 349, 357], "gateset": [43, 97, 100, 110, 113, 193, 206, 225, 277], "explan": 43, "from_nx": [43, 130], "gate_set": [43, 46, 91, 97, 195, 206, 242, 277], "comm": [43, 45, 46, 69, 70, 75, 326], "ttype": [43, 69, 70, 75, 77, 80, 84, 88], "my_spec": 43, "processing_typ": [43, 100, 326], "exisit": 44, "150": 44, "optimization_trac": 44, "159205436404164": 44, "116873765517227": 44, "8404612837693991": 44, "4875720430303865": 44, "49368293745518443": 44, "21193092700900396": 44, "5255995130962899": 44, "503085045148301": 44, "13283140536854712": 44, "783491230255": 44, "4963870341353935": 44, "6511498167500664": 44, "1440021430681515": 44, "8171750052724285": 44, "5046598921615995": 44, "0254856418037264": 44, "072842964674157": 44, "190588476859089": 44, "262023402059351": 44, "019509843534917": 44, "417677820966498": 44, "4552969099544995": 44, "153972324577925": 44, "6214895824968028": 44, "7004846705456536": 44, "8582757431947896": 44, "966351356267941": 44, "113214690042543": 44, "243079964104541": 44, "3792708539389675": 44, "516055756229239": 44, "653724745157091": 44, "791146883177052": 44, "926719950778997": 44, "0629723398429824": 44, "199320763414942": 44, "332988805110594": 44, "462155741538632": 44, "598882245669733": 44, "738105495967989": 44, "872102827343351": 44, "009426417970143": 44, "145771480226587": 44, "28195158328494": 44, "415878828390888": 44, "553437265716839": 44, "685939255440046": 44, "822761526466617": 44, "94969398850521": 44, "0633905475046195": 44, "201377564340534": 44, "349511422575376": 44, "469225684190021": 44, "614047125838164": 44, "717184466902699": 44, "843975108090747": 44, "891305424536656": 44, "0224717429579": 44, "798401084484717": 44, "954914041779761": 44, "06989428172971": 44, "057518070954664": 44, "094341205134276": 44, "133095526988358": 44, "159957294953603": 44, "194981308664083": 44, "228962116044245": 44, "263042769608344": 44, "297086532809052": 44, "33117273462552": 44, "36524188910162": 44, "399316194788115": 44, "433388827476708": 44, "46745245977281": 44, "501524727708635": 44, "535587226687738": 44, "56956237416871": 44, "603630495174656": 44, "637641158964426": 44, "6717079062579": 44, "70575215213419": 44, "739830532904783": 44, "77388957692592": 44, "807969447598555": 44, "842040618905571": 44, "87611732945243": 44, "910193494642503": 44, "944268830665825": 44, "97834502405204": 44, "012420831852639": 44, "046496821185517": 44, "080572807908595": 44, "1146487891836": 44, "148724751646075": 44, "182800558252941": 44, "216873869604193": 44, "250950195625395": 44, "285026550259149": 44, "319102614730358": 44, "353178595847206": 44, "387254569450858": 44, "42133025950167": 44, "45540632594907": 44, "489482345280285": 44, "523558315252052": 44, "557634321850617": 44, "591710310868367": 44, "62578630994125": 44, "65986230638379": 44, "693937533999009": 44, "728013779043426": 44, "762089481530925": 44, "79616552120957": 44, "830241542771287": 44, "864317495496795": 44, "898393508155115": 44, "932469488892357": 44, "966545488882044": 44, "000621490605049": 44, "034697489274947": 44, "0687734876366": 44, "102849486307537": 44, "136925485209787": 44, "17100147744967": 44, "20507747790505": 44, "239153474236344": 44, "273229473933888": 44, "307305472024225": 44, "341381471135714": 44, "375457470075453": 44, "409533466869052": 44, "443609466071157": 44, "47768546428261": 44, "511761463348861": 44, "54583746212234": 44, "57991346000216": 44, "613989459197738": 44, "648065458064831": 44, "682141456977407": 44, "716217455678049": 44, "750293454383293": 44, "784369453352266": 44, "81844544893474": 44, "852521448960252": 44, "886597445985455": 44, "92067344545519": 44, "954749444041585": 44, "98882544303125": 44, "022901441109802": 44, "056977440212009": 44, "09105343868252": 44, "125129437556055": 44, "choic": [44, 293], "optimizer_arg": 44, "924742059663798": 44, "550830483778759": 44, "8404614115759171": 44, "08401976200658699": 44, "08233517771074313": 44, "6023529598891653": 44, "510297905323923": 44, "5270533247845244": 44, "5012324382343425": 44, "30591502486654626": 44, "5915100608247061": 44, "420341031419571": 44, "3064088466525914": 44, "8333537124918893": 44, "084143741987277": 44, "3577462014919113": 44, "6335185795945693": 44, "910626176991359": 44, "1826109492883172": 44, "4557371317152255": 44, "7282737673307222": 44, "9950970012463753": 44, "250717090332203": 44, "529612996795096": 44, "8004745749716955": 44, "064438588821647": 44, "22063066070576": 44, "541316031156243": 44, "415847840857058": 44, "514822139372984": 44, "406582435467088": 44, "557441676285006": 44, "444165643837258": 44, "649661481602026": 44, "6830690201901675": 44, "75970716474425": 44, "827333567670686": 44, "894869930425053": 44, "9624861812159295": 44, "030590552756527": 44, "095814611979874": 44, "160178561068972": 44, "225886363398013": 44, "286841950138058": 44, "240164248113073": 44, "329262330987829": 44, "2282712459346055": 44, "366790039198461": 44, "401466687689834": 44, "4318019215609326": 44, "466071912216181": 44, "500157937561308": 44, "534084850806664": 44, "56762644356643": 44, "596292035207991": 44, "632184184513294": 44, "664558440467622": 44, "698634866658601": 44, "732595618919122": 44, "766360013676194": 44, "79903680834121": 44, "82293121633197": 44, "856757488674391": 44, "890871226675827": 44, "925195563589001": 44, "959692272813623": 44, "994264472127922": 44, "028743634689009": 44, "0630336457149845": 44, "097163165981084": 44, "130954257247035": 44, "165166851027995": 44, "199025973089443": 44, "233127404744561": 44, "2672025414684205": 44, "301278417430586": 44, "335334100126067": 44, "369396188486896": 44, "403465702367088": 44, "437524007094742": 44, "471419568188592": 44, "505537800492096": 44, "539530677851376": 44, "573621555045166": 44, "607700840065992": 44, "641777098320204": 44, "675850239008805": 44, "709769863770611": 44, "743878185175871": 44, "777961536127528": 44, "812028214016097": 44, "846105546879409": 44, "880182461751119": 44, "914258500082366": 44, "948334460345512": 44, "982410403604176": 44, "016486048021566": 44, "050562099698244": 44, "084638138616288": 44, "118714129397544": 44, "15279012522775": 44, "186866123876827": 44, "220942122217203": 44, "255018115791025": 44, "289094115094318": 44, "323170111044984": 44, "357246110509834": 44, "391322108687456": 44, "425398107733841": 44, "459474106670234": 44, "49355010550492": 44, "527626104459138": 44, "561702103363714": 44, "595778102289177": 44, "629854101213533": 44, "663930100135078": 44, "69800609903912": 44, "7320820979627": 44, "766158096859286": 44, "800234095494872": 44, "83431009442576": 44, "868386093170585": 44, "90246209211436": 44, "93653809096394": 44, "970614089913257": 44, "004690088823562": 44, "038766087750549": 44, "072842086677817": 44, "106918085605432": 44, "140994084533599": 44, "175070083462455": 44, "209146082391307": 44, "24322208131911": 44, "2772980802465": 44, "311374079172726": 44, "345450078098143": 44, "37952607702562": 44, "413602075952976": 44, "447678074880178": 44, "481754073806732": 44, "515830072733879": 44, "54990607166": 44, "583982070575955": 44, "618058069502641": 44, "652134068421383": 44, "686210067346781": 44, "72028606626867": 44, "754362065193266": 44, "788438064116454": 44, "822514063022329": 44, "856590061937453": 44, "89066606084476": 44, "seqoptim": [44, 150, 265, 354], "resili": 44, "gradient": [44, 101, 265, 267, 271, 325, 326, 351, 354], "sensit": [44, 354], "multiplelaunchesanalyz": [44, 265, 354], "quop": [45, 46, 189, 190], "datamodel": [46, 69, 70, 76], "circuit_build": [46, 91, 189], "openqasm": [46, 47, 325, 328], "mixing_factori": [46, 239], "cirq_to_qlm": [48, 331], "qlm_to_cirq": [48, 331], "sep_measur": [49, 54, 57, 63], "kwarg": [49, 52, 54, 55, 57, 63, 67, 96, 97, 100, 101, 103, 125, 126, 127, 130, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 195, 223, 225, 228, 232, 235, 236, 241, 242, 244, 245, 246, 247, 248, 249, 257, 258, 259, 260, 261, 262, 264, 266, 270, 274, 276, 279, 281, 288], "googl": [49, 133, 135, 331], "measureless": [49, 54, 57, 63], "resulting_circuit": [49, 54, 57, 63], "list_qubit": [49, 54, 57, 63], "regular": [49, 54, 57, 63, 133, 271], "qlm_circuit": [50, 59, 66, 329, 330], "oqasmpars": [51, 333], "parser": [51, 52, 333], "include_matric": [52, 80, 206, 225], "bool": [52, 65, 78, 89, 93, 94, 97, 98, 99, 101, 121, 122, 125, 127, 129, 130, 150, 154, 155, 160, 164, 166, 171, 172, 174, 194, 206, 225, 228, 229, 233, 235, 237, 240, 242, 243, 244, 250, 256, 257, 263, 268, 269, 270, 271, 272, 273, 275, 280, 281, 285, 294, 299, 304, 305, 306, 307, 317, 322, 323, 324], "creg": [52, 333], "openqasm_cod": 52, "p": [52, 101, 158, 159, 161, 164, 169, 175, 189, 191, 222, 235, 280, 308, 309, 310, 315, 317, 324, 354], "my_custom_g": 52, "alia": [52, 98], "custom_g": 52, "oqasm_cod": 52, "els": [52, 240, 286, 352], "17": [52, 135, 138, 141, 142, 148, 340, 346, 347], "write_t": 52, "tabmodul": 52, "oqasm_tab": 52, "chunk": 52, "activ": [52, 149, 151, 156, 157, 158, 169, 170, 173, 326, 351, 353], "tab": [52, 99], "aqasmengin": [53, 55, 332], "projectq_to_qlm": [54, 332], "stream": 55, "pyquil_to_qlm": [56, 330], "pyquilqpu": [56, 330], "qlm_to_pyquil": [56, 330], "pyquil_prog": 57, "rigetti": [58, 133, 145, 146], "chip": [58, 61, 62, 133, 148, 326], "tell": [58, 291], "skip": [58, 65, 194, 201, 206, 225], "set_qpu": [58, 67], "embed": [58, 62, 65, 161, 267, 271, 275, 276, 277, 279, 280, 281, 285, 286, 291, 352], "submit_job": [58, 272, 286, 287, 291], "qlm_job": [58, 330], "program_pragma": 59, "asyncbackendtoqpu": [60, 62, 64, 329], "backend": [60, 61, 62, 65, 67, 101], "useabl": 60, "backendtoqpu": [60, 61, 329], "qiskit_to_qlm": [60, 329], "qiskitjob": [60, 61, 329], "qlm_to_qiskit": [60, 329], "qputobackend": [60, 329], "qiskitruntimeqpu": [60, 326, 329], "token": [61, 62, 119, 121, 329], "ibmq_backend": [61, 62, 329], "ibmq_qasm_simul": [61, 62, 65, 329], "ibm": [61, 62, 65, 133, 137, 138, 139, 140, 141, 142, 143, 326, 329], "aer_simul": [61, 62], "argment": [61, 62], "suppos": [61, 62, 67, 82, 83], "ibmq": [61, 62, 329], "login": [61, 62], "suppli": [61, 62, 317], "qiskit_token": [61, 62], "retrieve_job": [61, 64], "file_nam": [61, 64], "qlm_batch": [61, 64], "jobv1": 61, "optimization_level": 62, "despit": 62, "light": 62, "heavi": 62, "highest": [62, 335], "qiskit_circuit": [63, 329], "async_job": 64, "max_shot": 64, "cancel": 64, "job_id": 64, "id": [64, 78], "skip_transpil": 65, "experi": [65, 171, 326], "sampler": [65, 329], "primit": [65, 329], "backend_nam": 65, "qiskitruntimeservic": [65, 329], "rxx": 66, "rzz": 66, "quantumcircuit": 66, "connector": 67, "plugabl": 67, "backendconfigur": 67, "gatetyp": [69, 79, 98], "classicctrl": [69, 79], "clasic": [69, 194], "mat2nparrai": 69, "raise_break": 69, "ndarrai": [70, 71, 72, 74, 75, 101, 112, 122, 127, 150, 151, 153, 154, 155, 158, 159, 161, 163, 169, 170, 172, 173, 174, 175, 205, 252, 254, 276, 280, 286, 296, 297, 311, 312, 313, 314, 319, 323], "shape": [70, 169, 170, 205, 232, 235, 286, 324, 343, 353], "state_vec": [71, 72, 74], "nb_sampl": 71, "thank": [71, 158], "intprob_list": 71, "occur": [71, 72, 74, 75, 97, 232, 326, 354], "renorm": [71, 72], "afterward": [71, 225], "short": 71, "prob": [71, 74, 309, 310, 315, 317, 318, 353], "intprob": 72, "But": 72, "undergo": 72, "intermediari": [72, 280], "ax": 72, "recomput": 72, "op_po": 73, "nd": 74, "tensordot": [75, 286], "intermediatemeasur": [75, 88, 125, 126], "descriptor": 75, "branch": 75, "gatedefinit": [77, 79], "gated": [78, 79, 97], "writ": 78, "subgat": [78, 97], "ncol": 78, "column": 78, "nrow": 78, "row": 78, "is_ctrl": 78, "is_dag": 78, "is_conj": 78, "conjug": [78, 154, 155, 174, 225], "is_tran": 78, "nbctrl": 78, "signifi": [78, 225], "strict": 78, "posit": [78, 89, 97, 161, 183, 184, 187, 241, 246, 248, 264, 276, 293, 304, 345], "circuit_implement": 78, "complexnumb": [78, 127], "im": 78, "_0": [78, 161, 250], "_2": [78, 97], "distinguish": [79, 193, 309], "uniqu": [79, 86, 263], "identify": 79, "optyp": 79, "rpf": 79, "permut": 79, "prefix": [79, 99, 194], "abort": [79, 81], "formula_ev": [79, 91], "cbit_valu": 79, "rewir": 79, "thrift": [80, 95, 96, 97, 100, 101, 120, 125, 126, 129, 130, 132, 247, 278, 292], "useful": 80, "cleanli": [80, 236], "catch": 80, "errortyp": 80, "pack": 80, "character": 80, "excp": 80, "modulenam": [80, 82, 83], "103": 80, "encount": 80, "abort_cod": 81, "invalid_arg": 81, "nonresult": 81, "illegal_g": 81, "nbcbit": [81, 97], "not_simulat": 81, "stop": [81, 225, 267, 270, 271, 281], "unknown": [81, 171], "simulat": [81, 326], "allocationmodel": [84, 291], "resourcemodel": [84, 291], "sequential_round_count": 85, "parallel_job_count": 85, "allocated_thread_count_per_job": 85, "allocated_total_memory_mb": 85, "estimated_batch_completion_tim": 85, "reservation_id": 85, "devicetyp": 86, "manufactur": 86, "qaptivaqpu": 86, "job_count": 87, "exect": 87, "mem_necessary_biggest_job_mb": 87, "biggest": 87, "wished_thread_count": 87, "thread": [87, 103, 180, 266, 285, 286, 291, 323], "gate_po": 89, "hat": [91, 150, 169, 175, 283, 322, 354], "boson": 91, "hilbert": [91, 122], "span": [91, 122], "topologytyp": [91, 130, 277], "quantiti": [91, 269, 343], "arithexpress": [91, 119, 121, 123, 132, 247, 261, 287, 326], "consol": [91, 97, 232, 270], "ascii": [91, 98], "art": [91, 98], "printer": [91, 97], "plot_in_notebook": [91, 97, 98], "thriftresult": [92, 125], "report": [92, 327], "varepsilon_": [92, 126], "equiv": [92, 126, 153, 163, 169, 222, 298, 322, 324], "f_": [92, 126, 159, 161, 298, 300], "p_k": [92, 126], "math": 92, "f_k": [92, 126], "unicod": [93, 94, 104, 186], "serializ": [95, 96, 97, 100, 125, 126, 130, 132], "fname": [95, 96, 97, 100, 101, 125, 127, 130, 225, 247], "classmethod": [95, 96, 97, 100, 101, 125, 126, 127, 130, 247], "from_byt": [95, 97, 101, 125, 126, 130], "byte": [95, 97, 101, 125, 126, 130], "from_thrift": [95, 96, 97, 100, 101, 125, 126, 130, 247], "tobject": [95, 96, 97, 100, 101, 125, 126, 130, 247], "to_cpp": [95, 101], "transmiss": [95, 101], "to_thrift": [95, 101, 120, 132], "map": [96, 97, 101, 105, 107, 108, 125, 130, 152, 154, 155, 168, 223, 275, 293, 326], "_gate_set": 97, "has_matric": 97, "var_dic": [97, 120], "ancilla_map": 97, "_serialized_gate_set": 97, "hand": [97, 103, 120, 197, 226, 228, 229, 230, 231, 233], "0x1472a5aa00d0": 97, "bind_vari": [97, 150, 223], "v_name": 97, "v_valu": 97, "fulli": [97, 134, 333, 343], "regener": 97, "portion": 97, "avoid": 97, "feel": 97, "deepcopi": [97, 154, 155, 174, 268], "beforehand": [97, 268], "freshli": 97, "v_dictionari": 97, "fill": 97, "shuffl": 97, "dagger_from_param": 97, "crawl": [97, 206], "clear": 97, "typeerror": [97, 345], "valueerror": 97, "callabl": [97, 121, 269, 274], "linker": [97, 225], "_10": 97, "_8": 97, "asbtract": 97, "invert": [97, 210], "334": 97, "smarter": 97, "smart_dagg": 97, "gate_tim": [97, 189, 190, 191], "unspecifi": 97, "fill_matric": 97, "submatrices_onli": [97, 206, 225, 326], "include_default_gate_set": 97, "insert_g": 97, "remove_lock": [97, 225], "lock": [97, 206, 225], "placehold": [97, 291], "shift_qbit": [97, 101], "job_typ": [97, 127, 181, 182, 183, 184, 185, 187, 345, 346, 347, 348, 349, 350, 354], "094947017729282e": 97, "largest": [97, 127], "constain": 97, "apparit": [97, 127], "doubl": [97, 127, 155, 156, 158, 183, 184, 187, 241, 245, 246, 247, 248, 249, 260, 261, 264, 285, 287], "prune": [97, 127], "unlik": [97, 127], "40": [97, 127, 135, 148, 335, 341], "easili": [97, 196, 269, 286, 335, 352], "concaten": 97, "__add__": 97, "cat_circuit": 97, "tensori": 97, "__mult__": 97, "kron_circuit": 97, "among": [97, 193, 245, 246, 248, 249, 271, 308, 309, 326, 335, 351], "deseri": 97, "my_circuit": 97, "new_circuit": 97, "34": [97, 135, 148, 338, 339, 341], "5707963267948966": 97, "7853981633974483": 97, "39269908169872414": 97, "_4": 97, "_6": 97, "total": [97, 155, 169, 170, 174, 236, 283, 326], "extens": [97, 354], "max_depth": 98, "circuit_nam": 98, "renaming_dict": [98, 124], "wait": [98, 270, 329], "visual": [98, 257], "ipython": [98, 124, 326], "detect": 98, "formula_str": 99, "as_graph": 100, "nqbit": [100, 122, 127, 130, 155, 156, 157, 162, 169, 170, 174, 297, 308, 309, 311, 324, 352, 353], "to_nx": [100, 130, 134], "rigetti_aspen": [100, 133], "nx_graph": [100, 130], "as_quameleon": 100, "quameleonplugin": [100, 265, 326], "quameleon": [100, 277], "differenti": [101, 120, 121, 132, 325, 326], "vname": 101, "equat": [101, 183, 184, 187, 241, 246, 248, 264], "partial": [101, 271, 293, 319, 326], "w": [101, 120, 132, 151, 153, 169], "theta_j": [101, 271], "psi_i": 101, "induc": 101, "possibli": [101, 127, 128, 189, 190, 191], "unpack": [101, 125], "job_to_run": 101, "group": [101, 161, 274, 327], "icreas": 101, "probail": 101, "remoteappl": 102, "commonqpu": [103, 114], "host_ip": [103, 180, 266, 286, 291], "localhost": [103, 180, 266, 286, 291], "server_typ": [103, 180, 266, 286, 291], "multi": [103, 149, 165, 166, 180, 266, 286, 291, 353], "pool": [103, 180, 236, 266, 267, 286, 291, 354], "fork": [103, 180, 266, 286, 291], "address": [104, 186, 205, 278, 292], "builder": [105, 251, 254], "variablenamenotavail": [105, 225], "redefin": [105, 109, 110, 111, 113], "matrix_util": [105, 189], "default_gate_set": [105, 225], "get_param_gener": [105, 189], "get_predef_gener": [105, 189], "hidden": 110, "behind": 110, "gatesignatur": [110, 111, 195, 202, 206], "gatesyntaxredefinit": [110, 111], "gatesyntax": [110, 113], "dictio": 111, "add_signatur": [111, 206], "signa": 111, "new_gate_set": 111, "arg_typ": 112, "func": [112, 123, 195, 198, 232], "get_circuit": 112, "get_matrix": [112, 154, 155, 174, 353, 354, 355], "gen": 112, "handler": [115, 292], "integer_to_spin": [116, 338, 339, 340, 341, 342], "decim": [116, 117, 118, 353], "spins_to_integ": 116, "n_spin": 117, "1d": [117, 118, 123, 241, 247, 260, 287, 297], "solution_configur": [118, 338, 339, 340, 341, 342], "spins_arrai": 118, "symbol": [119, 120], "label": [119, 120, 121, 163, 243], "ast": [119, 121], "constraint": [119, 225, 241, 265, 338, 339, 342, 357], "all_symbol": 119, "cyfunct": 119, "0x155464425ba0": 119, "0x155464425d40": 119, "0x155464425ee0": 119, "uminu": 119, "0x15546442f110": 119, "0x15546442f2b0": 119, "0x15546442f450": 119, "ufunc": 119, "0x15546442f930": 119, "max": [119, 171, 179, 185, 239, 247, 249, 261, 325, 335, 345], "ln": 119, "0x155464e7ea60": 119, "imag": 119, "0x155464e7ec10": 119, "0x155464df43a0": 119, "ab": [119, 150, 156, 158, 213, 298], "absolut": 119, "atan2": 119, "get_item": 119, "0x15546442fad0": 119, "numer": [119, 120, 121, 132, 150], "infix": [119, 121], "my_min": 119, "awar": [119, 293], "children": [120, 243], "arbitrari": [120, 205], "other_var": [120, 132], "from_str": 120, "thrift_str": 120, "rpn": [120, 132], "invers": [120, 245, 246, 248, 249, 256, 264, 317, 354], "pretty_print": 120, "pretti": [120, 121, 126], "pretty_token": 121, "omit": [121, 237], "wouldn": 121, "dx": 121, "behav": [121, 194, 195, 225, 233, 236, 292], "ising": [122, 247], "to_matrix": [122, 326], "spars": [122, 154, 155, 174, 285, 323, 326], "spmatrix": 122, "psd": [123, 322, 324], "sampling_frequ": 123, "alpha": [123, 172, 205, 244, 281], "spectral": [123, 315, 317], "densiti": [123, 172, 293, 297, 302, 303, 321, 323, 324], "tild": [123, 198, 222, 317], "cos_expr": 123, "psd_expr": 123, "plot": [123, 124, 125, 232], "versu": 123, "generate_nois": 123, "hardwaremodel": [123, 188], "dependend": 123, "tf": 123, "get_nois": 123, "durat": [123, 189, 190, 191, 247, 250, 261, 293, 315, 317], "fmt": 124, "filenam": 124, "hardware_model": 124, "cell": [124, 352], "shell": 124, "get_ipython": 124, "svg": 124, "timeplot": 124, "alias": 124, "signific": [125, 222, 233, 285], "deviat": [125, 171], "iff": [125, 130, 266], "dictionnari": 125, "histogram": 125, "wrap_sampl": 125, "qreg_list": 125, "set_qreg": 126, "tname": 127, "driven": 127, "halt": 127, "int_msb_valu": 128, "__str__": 128, "lsb_int": 128, "lsb": [128, 285], "reprensent": 128, "pauli_op": 129, "do_validity_check": 129, "coeffcient": 129, "xxy": 129, "front": 129, "concern": [129, 327, 335], "check_valid": 129, "coeff": [129, 280], "is_direct": 130, "thrifttopologi": 130, "undirect": [130, 337, 338, 339, 340, 342, 346, 347, 348, 349, 350], "lnn": [130, 131, 133, 144, 277], "add_edg": [130, 131], "qb1": 130, "qb2": 130, "toplogi": 130, "vmap": 130, "init_non": 130, "getter": 130, "set_nbqbit": 130, "helper": [130, 149, 169, 170, 172, 335, 353], "all_to_al": 131, "consecut": [131, 281], "pm": [131, 283, 354], "init": 131, "var_typ": [132, 225], "ignor": [132, 225, 228, 235, 240, 274, 282, 326], "forbidden": 132, "superconduct": 133, "google_sycamor": 133, "sycamor": [133, 135], "ibm_burlington": 133, "burlington": [133, 137], "ibm_johannesburg": 133, "johannesburg": [133, 138], "ibm_melbourn": 133, "melbourn": [133, 139], "ibm_rueschlikon": 133, "rueschlikon": [133, 140], "ibm_singapor": 133, "singapor": [133, 141], "ibm_tokyo": 133, "tokyo": [133, 142], "ibm_yorktown": 133, "yorktown": [133, 143], "rigetti_agav": 133, "agav": [133, 145], "aspen": [133, 146], "zuchongzhi": [133, 326], "__name__": 133, "alltoal": 133, "griddevic": 133, "grid": [133, 136, 147, 331], "linedevic": 133, "nearest": [133, 144, 162, 166], "neighbor": [133, 144], "squaregriddevic": 133, "squar": [133, 147, 302, 312, 319], "35": [135, 148, 176, 177, 178, 341], "44": [135, 148], "31": [135, 148, 326, 342], "49": [135, 148, 341], "27": [135, 148, 335, 340, 341, 346, 347], "36": [135, 148, 240, 341], "24": [135, 148, 240, 335, 340, 346, 347], "32": [135, 148, 210], "41": [135, 148], "28": [135, 148, 340, 346, 347], "37": [135, 148, 341], "46": [135, 148, 341], "16": [135, 138, 141, 142, 148, 340, 346, 347], "25": [135, 148, 281, 326, 340, 346, 347], "33": [135, 148, 226, 231, 341], "42": [135, 148, 341], "51": [135, 148, 235], "21": [135, 148, 335, 340, 346, 347], "29": [135, 148, 340, 341, 346, 347], "38": [135, 148, 341], "47": [135, 148, 344], "26": [135, 148, 340, 341, 346, 347], "43": [135, 148, 240, 341], "39": [135, 148, 341], "dimx": 136, "dimi": 136, "3x2": 136, "dimens": [136, 147, 159, 205, 235, 312, 313, 319], "dim": [147, 312, 313, 319], "3x3": 147, "53": 148, "54": [148, 207, 213], "55": 148, "57": 148, "58": 148, "59": 148, "61": 148, "62": 148, "63": 148, "65": 148, "electronicstructurehamiltonian": [149, 153, 155, 159, 161, 163, 168, 169, 171, 176, 177, 178, 282, 352, 353], "spinhamiltonian": [149, 150, 152, 154, 155, 168, 171, 176, 177, 178, 282, 352, 354], "make_anderson_model": [149, 352], "impur": [149, 159, 161, 352, 355], "anderson": [149, 159, 352], "make_embedded_model": [149, 352], "make_hubbard_model": [149, 352, 353], "hubbard": [149, 163, 325, 352, 353], "transform_to_bk_basi": [149, 282, 352], "bravyi": [149, 154, 155, 168, 171, 176, 282, 326, 351, 352], "kitaev": [149, 154, 155, 168, 171, 176, 282, 326, 351, 352], "transform_to_jw_basi": [149, 282, 352], "jordan": [149, 154, 155, 168, 171, 177, 282, 326, 351, 352], "wigner": [149, 154, 155, 168, 171, 177, 282, 326, 351, 352], "transform_to_parity_basi": [149, 282, 352], "pariti": [149, 154, 155, 168, 171, 178, 282, 326, 351, 352], "make_compressed_ldca_circ": [149, 353], "ldca": [149, 160, 164, 353], "make_general_hwe_circ": [149, 353], "make_ldca_circ": [149, 353], "make_mr_circ": [149, 353], "small": [149, 150, 165, 171, 172, 250], "mr": [149, 165, 353], "make_mrep_circ": [149, 353], "excit": [149, 160, 164, 166, 353], "preserv": [149, 160, 164, 166, 250, 293, 305, 323, 353], "mrep": [149, 166, 353], "make_shallow_circ": [149, 353], "keen": [149, 167], "et": [149, 164, 165, 166, 167, 240, 267, 280, 354], "al": [149, 164, 165, 166, 167, 240, 267, 280, 354], "articl": [149, 164, 165, 166, 167, 354], "2019": [149, 164, 165, 166, 167], "aspect": 149, "molecularhamiltonian": [149, 170, 352], "moleculeinfo": 149, "compute_active_space_integr": 149, "construct_ucc_ansatz": [149, 355], "convert_to_h_integr": [149, 352], "get_cluster_op": [149, 355], "get_hf_ket": [149, 355], "hartre": [149, 152, 157, 158, 172, 354, 355], "fock": [149, 152, 157, 158, 172, 354, 355], "orbit": [149, 153, 156, 157, 158, 161, 163, 165, 169, 170, 172, 173, 265, 353], "guess_init_param": [149, 355], "m\u00f8ller": [149, 158, 353], "plesset": [149, 158, 172, 353, 355], "perturb": [149, 158, 172, 265, 281, 353, 355], "select_active_orbit": 149, "freez": [149, 169, 173], "occup": [149, 156, 158, 169, 170, 173, 353], "transform_integrals_to_new_basi": 149, "qse": 149, "apply_quantum_subspace_expans": [149, 353], "phase_estim": [149, 194, 353], "perform_phase_estim": [149, 353], "trotteris": [149, 353], "make_trotterisation_routin": [149, 353], "trotter": [149, 152, 168, 171, 241, 245, 246, 248, 249, 260, 264, 326, 351], "pyscf_tool": [149, 353], "perform_pyscf_comput": [149, 353], "calcul": [149, 172, 249, 354], "pyscf": [149, 172, 353], "state_prep_circ": 150, "expansion_oper": 150, "return_matric": 150, "subspac": [150, 319, 325, 344], "expans": [150, 325], "star": 150, "_i": [150, 161, 205, 271], "_j": 150, "eigenvalu": [150, 154, 306, 353, 355], "overlap": [150, 250, 343, 344], "o_i": 150, "matrix_h": 150, "matrix_": 150, "e_qs": 150, "xx": [150, 177], "yy": [150, 177], "ncycl": [150, 160, 164, 280], "e_min": 150, "e_vq": 150, "opt_circ": 150, "one_body_integr": [151, 153, 169, 170, 172, 175, 353], "two_body_integr": [151, 153, 158, 169, 170, 172, 175, 353], "active_indic": [151, 353], "occupied_indic": [151, 353], "uv": [151, 153, 169, 170, 352], "i_": [151, 153, 158, 161, 169, 170, 175, 205, 286, 352], "uvwx": [151, 153, 158, 169, 170, 352], "2i_": 151, "ijji": [151, 169], "ijij": [151, 169], "2d": [151, 153, 154, 241, 246, 247, 261, 287], "4d": [151, 153, 154, 158, 159, 161], "occupi": [151, 156, 169, 353], "cluster_op": 152, "ket_hf": 152, "n_step": [152, 287, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350], "cluster": [152, 156, 161, 353, 355], "vert": [152, 286], "hf": 152, "iT": 152, "factor": [152, 183, 184, 187, 210, 241, 246, 248, 264, 346], "uccsd": 152, "pq": [153, 154, 159, 161, 168, 169, 171, 175, 352], "pqr": [153, 154, 159, 161, 168, 169, 175, 352], "sigma": [153, 159, 163, 169, 352], "delta_": [153, 163, 169], "sigma_1": [153, 169], "sigma_2": [153, 169], "phi_": [153, 169], "ux": [153, 169], "vw": [153, 169], "iint": [153, 169], "r_": [153, 169, 324], "resp": [153, 156, 169], "phi_u": [153, 169], "molecular": [153, 158, 169, 172, 353], "hpq": [154, 353], "hpqr": [154, 353], "a_p": [154, 352], "a_q": [154, 352], "a_r": [154, 352], "a_": [154, 159, 222, 286, 319, 352], "mathbb": [154, 161, 169, 352], "h_pq": [154, 352], "h_pqr": [154, 352], "eigval": [154, 353], "eigvalsh": [154, 353, 354], "cc": [154, 155, 161, 176, 177, 178, 310, 315, 317, 352], "cccc": [154, 155, 176, 177, 178, 352], "fermionhamiltonian": [154, 156, 168, 176, 177, 178, 282, 352], "too": [154, 155, 171, 174, 352], "to_fermion": [154, 352], "to_spin": [154, 155, 352, 353], "normal_ord": 155, "wick": [155, 352], "to_electron": [155, 352], "n_electron": [156, 157, 158, 169, 170, 173, 353], "noon": [156, 158, 169, 170, 173, 353], "n_i": [156, 158, 169], "descend": [156, 158, 169, 173], "degeneraci": [156, 158], "t_": [156, 163, 317], "cup": [156, 158, 169], "it_": 156, "inoccupi": 156, "n_qbit": 156, "orbital_energi": [158, 170, 172, 353], "trial": 158, "mp2": 158, "theta_a": 158, "epsilon_i": [158, 159], "epsilon_j": 158, "epsilon_a": 158, "epsilon_b": 158, "theta_list": 158, "mu": [159, 161, 163, 353], "epsilon": 159, "canon": [159, 161, 293, 323], "csq": [159, 161], "f_p": [159, 161], "f_q": [159, 161], "f_r": [159, 161], "n_b": 159, "bath": [159, 161, 352], "siam": 159, "c_": [159, 161, 168, 169, 175, 244, 352], "uparrow": [159, 161, 163], "downarrow": [159, 161, 163], "v_i": 159, "coulomb": [159, 169], "repuls": [159, 161, 169, 170, 172, 353], "intens": [159, 317, 354], "chemic": [159, 161, 163, 168], "tunnel": 159, "2n_b": 159, "f_0": 159, "annihil": 159, "f_1": 159, "f_2": 159, "1st": 159, "f_3": 159, "nb_fermionic_mod": [160, 164], "eigstate_ind": [160, 164], "slater": [160, 164], "pattern": [160, 162], "synthoplin": 160, "cycl": [160, 162, 164, 166, 280], "eigenst": [160, 164, 171, 243], "lambda_c": 161, "t_loc": 161, "int_kernel": 161, "limits_": 161, "2m": 161, "ijkl": [161, 169, 175], "f_j": 161, "_k": 161, "f_l": 161, "loc": 161, "d_": [161, 205], "imp": 161, "onsit": 161, "site": [161, 163, 352], "hop": [161, 163], "correl": [161, 193, 352, 353], "uncorrel": 161, "conv": 161, "2i": [161, 222], "strategi": [161, 194, 240, 242, 343], "_1": [161, 250], "n_cycl": 162, "rotation_g": 162, "entangling_g": 162, "predefg": 162, "thinli": 162, "dress": 162, "entangl": [162, 240, 274, 293, 300], "surround": 162, "four": [162, 353], "neighbour": [162, 166], "odd": 162, "t_mat": [163, 353], "dagger_i": 163, "n_site": 163, "dallair": 164, "demer": 164, "matchgat": 164, "inspir": [165, 207, 217, 343], "sugisaki": [165, 166], "n_fsim_cycl": 166, "set_phi_to_0": 166, "fsim": 166, "phi": [166, 169, 353], "n_trotter_step": [168, 171, 353], "final_tim": [168, 353], "prod_": 168, "c_p": [168, 171], "c_q": 168, "c_r": 168, "dr": 169, "particl": [169, 265, 276], "chosen": [169, 211, 267, 269, 271, 281], "kin": 169, "pot": 169, "randn": [169, 170], "mol_h": [169, 170, 353], "004371296351522114": 169, "get_electronic_hamiltonian": [169, 352, 353], "select_active_spac": [169, 170, 353], "threshold_1": [169, 170, 173, 353], "02": [169, 170, 173, 353], "threshold_2": [169, 170, 173, 353], "001": [169, 170, 173, 267, 271], "ca": [169, 173], "approach": [169, 172, 173, 194, 239, 274, 334], "divid": [169, 173], "inact": [169, 173], "latter": [169, 173, 283, 354], "unchang": [169, 173, 326], "varepsilon_2": [169, 170, 173], "varepsilon_1": [169, 170, 173], "geq": [169, 246], "n_e": 169, "e_": [169, 171, 315, 317], "transform_basi": [169, 353], "transformation_matrix": 169, "u_": [169, 175, 222], "qi": [169, 175], "jq": [169, 175], "qj": [169, 175], "kr": [169, 175], "molecular_hamiltonian": 169, "studi": [170, 172, 326, 351, 353, 354], "molecul": [170, 172, 325, 326, 351, 353, 354], "33129927338717": 170, "8581547598493781": 170, "732819050062052": 170, "4256123721438503": 170, "11958717062609028": 170, "0945855006449214": 170, "30536659080837314": 170, "8044121795965283": 170, "6205669510937284": 170, "019303427567053": 170, "5239441435939519": 170, "4739213307556298": 170, "13026477476677145": 170, "4431554261836255": 170, "019227516210518353": 170, "9932750661548351": 170, "0776804467267234": 170, "012172278945679": 170, "082053440920983": 170, "2772676817710427": 170, "4437658290232952": 170, "restrict_active_spac": 170, "h_el": 171, "n_phase_bit": 171, "init_vec": 171, "n_adiab_step": 171, "e_target": [171, 353], "size_interv": [171, 353], "basis_transform": 171, "n_shot": 171, "verbos": [171, 273, 280, 299], "qpe": 171, "apriori": 171, "challeng": 171, "preliminari": 171, "collaps": [171, 225], "linearli": [171, 247, 261], "guarante": 171, "lie": 171, "adjust": 171, "suggest": 171, "interv": 171, "unbias": 171, "eigenenergi": [171, 353], "narrow": 171, "mislead": 171, "anymor": 171, "thumb": 171, "consider": [171, 354], "larger": [171, 236, 335, 343], "01101": 171, "fast": 171, "idea": [171, 354], "Will": 171, "_interv": 171, "geometri": [172, 353], "run_fci": 172, "kickstart": 172, "nuclear": [172, 353], "groundstat": 172, "2nd": [172, 355], "m\u00f6ller": 172, "ci": 172, "fci": 172, "expens": 172, "big": [172, 312, 313, 352], "atom1": 172, "atom2": 172, "atomn": 172, "guess": [172, 353, 355], "neutral": 172, "rdm1": [172, 353], "nuclear_repuls": [172, 353], "nel": 172, "active_so": 173, "spatial": 173, "inactive_occupied_so": 173, "zy": [174, 352], "4j": 174, "u_mat": 175, "h_hat_ij": 175, "h_hat_ijkl": 175, "fermion_hamiltonian": [176, 177, 178], "bk": 176, "spin_hamiltonian": [176, 177, 178], "075j": [176, 177, 178], "075": [176, 177, 178], "jw": 177, "yx": 177, "xy": 177, "combinatorialoptimizergener": [179, 182, 183, 184, 185, 187, 255], "graphcolouringgener": [179, 337, 350], "colour": [179, 182, 239, 245, 335, 342, 345, 349], "graphpartitioninggener": [179, 338, 347], "partit": [179, 183, 239, 245, 246, 248, 249, 255, 257, 260, 325, 335, 340, 345, 346], "kcliquegener": [179, 258, 339, 348], "kcliqu": [179, 184, 239, 258, 348], "cut": [179, 185, 239, 246, 249, 325, 335, 345], "vertexcovergener": [179, 259, 342, 349], "cover": [179, 187, 239, 255, 259, 264, 325, 335, 345], "abctract": 180, "met": 180, "hostnam": 180, "wrapper_post_process": 180, "abstractgenetor": 180, "parsedpostprocessedresult": 180, "combinatorialresult": [181, 255], "number_of_colour": [182, 245, 342], "graphpartitioningresult": [182, 183, 185, 245, 246, 248, 249, 255], "h_a": [183, 184, 187, 241, 246, 248, 264], "h_b": [183, 184, 187, 241, 246, 248, 264], "kcliqueresult": [184, 255], "cliqu": [184, 239, 248, 255, 258, 325, 335, 345], "vertexcoverresult": [187, 255], "imperfect": 188, "readout": [188, 193], "channel": [188, 189, 190, 191, 193, 295, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 315, 316, 317, 318, 320, 321, 322, 323, 324, 329, 354], "noise_model": [188, 293], "defaultgatesspecif": 188, "gatesspecif": [188, 189, 190, 192, 316], "perfect": [188, 189, 190, 191, 193, 250, 285], "defaulthardwaremodel": [188, 193], "make_depolarizing_hardware_model": 188, "depolar": [188, 193, 293, 308, 309, 354], "state_prep": [189, 191, 196, 204], "predef_gener": 189, "param_gener": 189, "channel_repr": [189, 190, 315, 317], "channelrepresent": [189, 190, 293, 315, 317], "krau": [189, 190, 293, 295, 298, 299, 300, 301, 304, 306, 309, 310, 315, 317, 321, 322, 323, 324], "wise": [189, 190, 191], "oppos": 189, "quantum_channel": [189, 191, 304, 305, 306, 307], "quantumchannel": [189, 190, 191, 192, 293, 298, 299, 300, 301, 304, 305, 306, 307], "rho_0": [189, 191], "povm": [189, 191], "lbrace": [189, 191, 309, 323], "rbrace": [189, 191], "tr": [189, 191, 283, 302, 303, 319, 324], "rho": [189, 191, 298, 309, 321, 322, 323], "get_gate_tim": [189, 191], "gate_typ": [189, 191, 316], "get_quantum_channel": [189, 191], "gate_d": [189, 191], "quantumchannelkrau": [189, 191, 293, 308, 309, 310, 321, 322, 324], "gate_nois": [190, 192], "idle_nois": [190, 192], "idl": [190, 192, 193], "instantan": 190, "parametricquantumchannel": [190, 192, 293, 316], "gates_specif": [190, 192, 316], "params_specif": [190, 192], "jump_oper": [190, 192], "lindblad": [190, 192, 315], "eps1": 193, "eps2": 193, "correl_typ": 193, "single_qubit": 193, "depol_typ": [193, 308, 309], "rate": [193, 308, 354], "multi_qubit": 193, "multiqubit": [193, 325, 326, 351, 354], "make_depolarizing_channel": [193, 293, 308], "paramg": [194, 195], "qclaus": [194, 228, 229, 233], "quantul": 194, "qarithexp": [194, 233], "qcompexp": [194, 233], "boolformula": [194, 199, 225], "cregist": [194, 225], "generate_gate_set": 194, "abtract": 194, "diagram": [194, 257], "arrow": 194, "green": 194, "rippl": [194, 213], "indep": 194, "agnost": [194, 207], "indepent": 194, "distinct": 194, "matter": 194, "kptree": [194, 326], "kerinidi": [194, 205], "prakash": [194, 205], "amplification_step": 194, "amplif": [194, 196, 325], "grover": [194, 196, 203, 325], "quantum_count": 194, "grover_diffus": 194, "diffus": [194, 196, 203], "household": [194, 196, 203], "uniform_distribut": 194, "famili": 195, "admiss": 195, "r_z": 195, "my_rz": [195, 223], "matrix_gen": 195, "set_dag": 195, "recip": [195, 343], "assumpt": [195, 354], "nbit": [196, 203, 224, 237, 238, 250], "reg1": 196, "reg2": 196, "neg": [197, 230, 243, 346], "my_gat": 198, "slice": [200, 234, 240], "littl": 201, "mother": [201, 223], "never": [201, 236], "safe": 202, "gather": [202, 326], "kp": 205, "multiplexor": 205, "kerenidi": [205, 326], "kp17": 205, "qram": 205, "k_1": [205, 309], "k_n": 205, "k_i": [205, 309], "pad": 205, "log_2": 205, "understood": [205, 232], "i_1": [205, 311, 319], "i_k": 205, "alpha_": 205, "adress": 205, "i_l": 205, "beta_": 205, "get_routin": 205, "flatten": [205, 235], "rout_0": 205, "rout_1": 205, "rout_2": 205, "proport": 205, "routine_state_prep": 205, "routine_1": 205, "4785486598649844": 205, "4869192620626128": 205, "2415017418164479": 205, "729391694054443": 205, "40963745347406094": 205, "0956270147858655": 205, "18758381966059917": 205, "addresses_count": 205, "mutliplexor": 205, "iordani": 205, "anupam": 205, "8th": 205, "innov": 205, "theoret": [205, 249], "confer": 205, "itc": 205, "2017": [205, 217], "schloss": 205, "dagstuhl": 205, "leibniz": 205, "zentrum": 205, "fuer": 205, "informatik": 205, "include_lock": [206, 225], "cz": 206, "my_cnot_implement": 206, "submatric": [206, 225], "footprint": 206, "gate_signatur": 206, "clear_gate_set": 206, "default_g": 206, "_spec": [206, 268, 274], "happen": [206, 225, 228, 229, 233], "link_gat": 206, "link_matric": 206, "set_gate_set": 206, "vbe96": [207, 213, 215], "reg_siz": [207, 208, 209, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222], "modulo": [207, 209, 210, 214, 216, 218, 219, 220, 221], "add_const_mod": [207, 212], "crash": 207, "modular": 207, "add_mod": 207, "modular_exp": 207, "exponanti": 207, "mult_const_mod": [207, 210], "mult_const": [207, 217], "vlatko": [207, 213], "vedral": [207, 213], "adriano": [207, 213], "barenco": [207, 213], "artur": [207, 213], "ekert": [207, 213], "elementari": [207, 213], "phy": [207, 213, 298, 300, 301], "rev": [207, 213, 298, 300, 301], "147": [207, 213], "153": [207, 213], "jul": [207, 213], "1996": [207, 213], "doi": [207, 213, 217], "physreva": [207, 213], "modulu": [208, 209, 210, 212], "textrm": [208, 210, 212], "mod": [208, 209, 210, 212], "add_const": [208, 209, 211, 213, 217], "reg_control_s": 210, "acc_siz": [210, 211, 212], "shor": 210, "phase_reg": 210, "util": [210, 344, 355], "3720": 210, "8988": 210, "1472": 210, "128": 210, "384": 210, "gate_s": 210, "14853": 210, "expon": 210, "accumul": [210, 211, 212], "euclid": 210, "coprim": 210, "ttk09": [213, 214], "cdkm04": [213, 216], "cuccaro_add": [213, 214], "cuccaro": 213, "steven": 213, "thoma": 213, "draper": 213, "samuel": 213, "kutin": 213, "david": 213, "petri": 213, "moulton": 213, "arxiv": [213, 280, 298, 343], "quant": [213, 298], "0410184": 213, "48550": 213, "miss": [213, 242, 345], "classadd": 213, "reg_size_2": [214, 216, 218, 220, 221], "7n": 214, "2n": [214, 216], "5n": 214, "6n": 216, "4n": 216, "rpge17": 217, "const": 217, "lidia": 217, "ruiz": 217, "perez": 217, "juan": 217, "carlo": [217, 241, 245, 246, 248, 249, 260, 264], "garcia": 217, "escartin": 217, "fourier": [217, 222, 325], "april": [217, 326], "1007": 217, "s11128": 217, "017": 217, "1603": 217, "res_reg_s": 220, "psi_": 222, "dot": [222, 286, 309, 314, 336], "xk": 222, "abstract_g": 223, "member": 223, "ctrlbit": 225, "gate1": 225, "gate2": 225, "get_free_ancilla": [225, 236], "class_nam": [225, 236], "destroi": 225, "usabl": 225, "var_nam": 225, "class_typ": 225, "qblist": 225, "cblist": 225, "do_link": 225, "comparison_ep": 225, "box_routin": 225, "untouch": 225, "demand": 225, "further": 225, "indentif": 225, "correspondig": 225, "systemat": 225, "infer": [225, 283, 326, 354], "operand": [226, 230], "reverse_bit_ord": [226, 233], "substract": [226, 326], "qbool_arrai": [228, 229], "cl": 228, "qbits_list": [228, 229, 230, 231, 233, 234], "implicitli": [230, 315], "toward": 230, "and_formula": 230, "got": 230, "similarili": 232, "love": 232, "my_funct": [232, 269], "some_random_point": 232, "qlm_obj": 232, "1049h": 232, "0t": 232, "24r": 232, "4l": 232, "7h": 232, "1l": 232, "3042906180997156": 232, "954059733784196": 232, "usr": 232, "lib64": 232, "curs": 232, "78": 232, "_curs": 232, "104": 232, "jobevalu": 232, "argspec": 232, "getfullargspec": 232, "712": 232, "648": 232, "521": 232, "_display_curs": 232, "nocbreak": 232, "smaller": [233, 335], "uniti": 233, "xore": 233, "everytim": 235, "bell_stat": 235, "h_rz": 235, "\u03c0": 235, "rx_rz": 235, "angles_0": 235, "angles_1": 235, "_basewrapp": 235, "fullargspec": 235, "namedtupl": 235, "attributeerror": [235, 352], "avoir": 235, "yet": 235, "notion": 236, "routop_l": 236, "max_wir": 236, "inbound": 236, "repeatedli": 236, "bl": 236, "unus": 236, "freed_ancilla": 236, "additin": 236, "tag": 236, "contruct": 236, "boolexpr": 239, "themselv": 239, "bilp": 239, "graphcolour": [239, 261, 337, 350], "graphpartit": [239, 338, 347], "maxcut": [239, 247, 340, 344, 346], "numberpartit": [239, 247, 341], "vertexcov": [239, 259, 261, 342, 349, 357], "mixingfactori": [239, 344], "mix": [239, 250, 251, 252, 262, 283, 331, 344], "circuitgener": [239, 244, 247, 261, 343, 345], "schedule_gener": 239, "schedulegener": 239, "vsolv": [239, 242], "ansatzfactori": [239, 343], "regroup": [240, 293], "qaoa_circuit": 240, "to_circ_arg": [240, 242], "line_ob": 240, "add_term": 240, "ansatz_with_cnot": 240, "ansatz_with_rzz": 240, "121": 240, "67": 240, "synthesi": [240, 343], "influenc": [240, 285, 354], "insert_in": 240, "slic": 240, "elif": 240, "ansatz_default": 240, "ansatz_color": 240, "color": [240, 242, 274], "gray_synth": 240, "cnot_count": 240, "ansatz_gray_synth": 240, "grai": 240, "synth": 240, "techniqu": [240, 280, 334, 354], "ami": 240, "graysynth": 240, "synthes": [240, 242], "onlt": 240, "maximis": 241, "obei": [241, 335], "produce_q_and_offset": [241, 245, 248, 264], "gg": [241, 283, 354], "luca": [241, 245, 246, 248, 260, 264], "2014": [241, 245, 246, 248, 260, 264, 343], "bilp_problem": 241, "get_best_paramet": [241, 245, 246, 247, 248, 249, 260, 261, 264, 338, 339, 340, 341, 342], "n_monte_carlo_upd": [241, 245, 246, 248, 249, 260, 264], "mont": [241, 245, 246, 248, 249, 260, 264], "n_trotter": [241, 245, 246, 248, 249, 260, 264], "replica": [241, 245, 246, 248, 249, 260, 264], "gamma_max": [241, 245, 246, 248, 249, 260, 264], "gamma_min": [241, 245, 246, 248, 249, 260, 264], "temp_max": [241, 245, 246, 247, 248, 249, 260, 261, 264, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350], "temp_min": [241, 245, 246, 247, 248, 249, 260, 261, 264, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350], "binary_linear_integer_program": 241, "qaoa_ansatz": [242, 345], "get_qaoa_gate_set": 242, "my_plugin": 242, "greedi": [242, 274], "and_claus": 243, "or_claus": 243, "xor_claus": 243, "neg_claus": 243, "subclaus": 243, "induct": 243, "wedg": 243, "vee": 243, "oplu": 243, "negat": 243, "myproblem": 244, "var1": 244, "var2": 244, "125": 244, "w_": 244, "nbvar": 244, "to_bqm": [244, 247, 261, 357], "dwave": [244, 247, 261, 357], "dimod": [244, 247, 261, 357], "binaryquadraticmodel": [244, 247, 261], "add_nodes_from": [245, 246, 248, 264, 338, 339, 342, 348, 350, 357], "arang": [245, 246, 248, 264, 338, 339, 342, 348, 350, 357], "add_edges_from": [245, 246, 248, 264, 338, 339, 342, 348, 350, 357], "graph_colouring_problem": 245, "parse_result": [245, 246, 248, 249, 264], "thatrepres": 245, "graph_colour": 245, "produce_j_h_and_offset": [246, 249, 260], "graph_partitioning_problem": [246, 338], "balanc": 246, "graph_partit": 246, "e_i": [247, 287], "child": [247, 261], "get_j_h_and_offset": 247, "aneal": [247, 261], "gamma": [247, 261, 281, 317, 343], "k_clique_problem": 248, "k_cliqu": 248, "bigger": [248, 264], "wikipedia": [249, 281], "full_rary_tre": [249, 340, 345, 346, 347, 349], "256": 249, "max_cut": 249, "initialstatebuild": [250, 251, 252], "bit_flip": 250, "restrict_to": 250, "h_0": [250, 343, 344], "simpleinitialst": [250, 251], "bit_mov": [250, 344], "hamming_weight": 250, "tmax_psi_0": 250, "move": [250, 344], "ham": [250, 269, 344], "equi": 250, "argu": 250, "gap": 250, "entail": 250, "polynomi": 250, "scalabl": 250, "inexact": 250, "70": 250, "independentann": [250, 251], "prepend": [251, 252, 253], "start_ham": 252, "end_ham": 252, "true_psi_0": 252, "inject_initial_st": [252, 253, 254], "annealing_job": [252, 253, 254, 262, 344], "inject": 253, "score": 256, "truthi": 256, "falsi": 256, "with_figur": 257, "figsiz": 257, "node_s": 257, "300": [257, 267, 279], "font_siz": 257, "draw_networkx": 257, "matplotlib": 257, "pyplot": 257, "font": 257, "array_of_numb": 260, "array_of_numbers_s": 260, "randint": [260, 341], "number_partitioning_problem": [260, 341], "7342": 260, "numbers_arrai": 260, "number_partit": 260, "e_q": 261, "get_q_and_offset": 261, "interpol": 262, "singleton": 263, "vertex_cover_problem": [264, 342, 357], "vertex_cov": 264, "circuitinlin": 265, "costfunctionplugin": 265, "psominimizeplugin": 265, "swarm": [265, 276], "pso": [265, 276], "spsaminimizeplugin": 265, "simultan": [265, 281], "spsa": [265, 281], "adaptvqeplugin": [265, 326, 354], "gradientdescentoptim": [265, 354], "descent": [265, 271, 354], "transformobserv": 265, "zeronoiseextrapol": [265, 354], "extrapol": [265, 283, 326, 351, 354], "edit": 266, "prost": 266, "operator_pool": 267, "n_iter": [267, 354], "tol_vanishing_grad": 267, "tau_k": 267, "theta_k": 267, "grimslei": 267, "antihermitian": 267, "inplac": 268, "qat_circ": 268, "fly": 268, "worst": 268, "perfom": 268, "weigth": 269, "cost_funct": 269, "job_fixed_angl": 269, "result_fixed_angl": 269, "6e": 269, "8e": 269, "3e": 269, "is_result_argu": 269, "use_result": 269, "press": 270, "lambda_step": 271, "natural_gradi": [271, 354], "stop_crit": 271, "grad_norm": 271, "user_custom_g": 271, "eta": [271, 354], "nabla": [271, 354], "metric": [271, 354], "g_": 271, "bigg": 271, "criterion": 271, "energy_dist": 271, "toler": [271, 294, 304, 305, 306, 307], "randomli": [271, 281], "saemlessli": 272, "qlm_object": 272, "initial_object": 272, "n_run": 273, "duplic": 273, "upstream": 273, "splitting_method": 274, "x_basis_chang": 274, "y_basis_chang": 274, "clifford": 274, "todai": 274, "coincid": 274, "binding_kwarg": 275, "particul": 275, "variablenam": 275, "fetch": 275, "hood": 275, "binding_arg": [276, 279, 281], "choose_inertia_funct": 276, "inertia": 276, "linearly_decreas": 276, "chaotic_random": 276, "name_method_us": 276, "clpso": 276, "fdr_pso": 276, "lip": 276, "hpso_tvac": 276, "max_it": 276, "swarm_numb": 276, "size_initial_vector_spac": 276, "hypercub": 276, "inertia_kwarg": 276, "inertia_funct": 276, "inertia_weight": 276, "univers": [277, 325], "compliant": 277, "lnn_topologi": 277, "initil": 279, "set_opt": 279, "my_job": [279, 326], "rotosolv": 280, "nakanishi": [280, 354], "1903": 280, "12166": 280, "2020": [280, 354], "ostaszewski": [280, 354], "1905": 280, "09692": 280, "leverag": [280, 354], "belong": [280, 335], "converg": [280, 343], "602": 281, "101": 281, "stop_condit": 281, "evalut": 281, "a_calibr": 281, "calibr": 281, "n_calibr": 281, "en": 281, "wiki": 281, "simultaneous_perturbation_stochastic_approxim": 281, "cf": [282, 286], "n_in": 283, "extrap_g": 283, "extrap_method": 283, "decomposit": 283, "occurr": [283, 326], "rho_": [283, 300, 301], "strength": 283, "propto": 283, "ins": 283, "an_": [283, 354], "shown": [283, 335, 346, 347, 348, 349, 350], "Be": [283, 293], "correctli": [283, 326], "classicalqpu": 284, "algebra": [284, 285, 286, 326, 352], "get_current_qpu": 284, "use_nbthreads_heurist": 285, "light_circuit": 285, "tqdm": 285, "readonly_statevector": 285, "omp_num_thread": 285, "progress": 285, "sens": 285, "throught": [285, 330, 331], "resiz": 285, "intuit": 285, "i_0i_1i_2i_3": 285, "i_3i_2i_1i_0": 285, "imbric": 286, "temp_t": [287, 338, 339, 340, 341, 342, 345, 346, 347, 348, 349, 350], "temp": 287, "simulated_ann": [287, 338, 339, 340, 341, 342], "extract_j_and_h_from_ob": 287, "s_i": 287, "s_j": 287, "1111111111": 288, "push": 289, "muqlm": 290, "mininm": 291, "apply_resource_consumption_limit": 291, "allocation_model": 291, "subclass": 291, "estimate_resources_for_batch": 291, "adjunct": 292, "goe": [292, 322, 324], "forward": 292, "extern": 293, "parametricgatenois": 293, "quantumchannelchi": [293, 323], "chi": [293, 295, 321, 322, 323, 324], "quantumchannelchoi": [293, 323, 324], "choi": [293, 295, 298, 299, 300, 301, 322, 323, 324], "jamiolkowski": [293, 301, 322], "quantumchannelptm": [293, 305, 322, 323], "ptm": [293, 295, 298, 299, 300, 301, 322, 323, 324], "to_chi": [293, 323], "exposit": 293, "is_completely_posit": 293, "is_trace_preserv": 293, "is_trace_reduc": 293, "is_unit": 293, "make_avg_fid_equiv_depol_channel": 293, "make_generalized_amplitude_damp": 293, "damp": [293, 310, 315], "parametricamplitudedamp": 293, "parametricpuredephas": 293, "dephas": [293, 317], "distanc": [293, 301, 303, 354], "fidel": [293, 298, 300, 302, 308], "get_average_process_fidel": 293, "get_diamond_norm": 293, "diamond": [293, 299], "get_entanglement_process_fidel": 293, "get_process_dist": 293, "get_state_fidel": [293, 298, 300], "get_trace_dist": [293, 301], "math_util": 293, "convert_density_mat_to_pauli_vec": 293, "convert_pauli_vec_to_density_mat": 293, "make_pauli_matrix_basi": 293, "make_standard_matrix_basi": 293, "make_standard_vector_basi": 293, "are_equal_up_to_phas": 293, "multikron": 293, "kroneck": [293, 314, 323], "partial_trac": 293, "07": [294, 326], "stinespr": 295, "coordin": [296, 331], "pauli_vec": 297, "chan1": [298, 300, 301, 323], "chan2": [298, 300, 301, 323], "use_formula": 298, "av": [298, 308], "71": [298, 300, 301], "062310": [298, 300, 301], "gilchrist": 298, "0408063": 298, "vfidel": 298, "hilebrt": 298, "schmidt": 298, "qchan": 299, "ep": 299, "06": 299, "aka": 299, "accuraci": 299, "cp": 299, "use_choi": 300, "ent": 300, "rho_i": 300, "pro": [300, 301], "rho1": [302, 303], "rho2": [302, 303], "eqnarrai": 302, "rho_1": [302, 303], "rho_2": [302, 303], "cdot": 303, "08": [305, 306, 307], "quantumchannekrau": 305, "e_k": [306, 323], "sum_k": 306, "rb_ep": 308, "method_2q": [308, 309], "tensor_1q_channel": [308, 309], "epsilon_": 308, "rb": 308, "depol": [308, 309], "015": 308, "99247166": 308, "07071068": 308, "07071068j": 308, "k_0": 309, "k_2": 309, "k_3": 309, "k_j": 309, "rbrace_": [309, 323], "equal_prob": 309, "denot": [309, 311], "p_i": 309, "17320508": 309, "17320508j": 309, "03333333": 309, "03333333j": 309, "lamb": 310, "i_2": 311, "ldot": [311, 319], "i_n": 311, "huge": [312, 313], "mat_list": 314, "a_1": [314, 319], "a_n": [314, 319], "t_1": 315, "langle0": 315, "langle1": 315, "relax": 315, "white": [315, 317], "tau": [315, 317], "amplitudedamp": 315, "81873075": 315, "57417763": 315, "noise_channel": 316, "t_phi": 317, "spectral_funct": 317, "variant": 317, "int_": 317, "infti": 317, "omega": 317, "cotanh": 317, "analyt": 317, "varphi": 317, "w_c": 317, "w_ir": 317, "noise_spectrum": 317, "ohmic": 317, "pd": 317, "9138709": 317, "4060049": 317, "ptild": 317, "schema": [318, 320], "axis1": 319, "axis2": 319, "traced_out_subspac": 319, "a_2": 319, "a_i": 319, "d_i": 319, "i_m": 319, "tr_": 319, "j_1": 319, "d_1": 319, "d_n": 319, "apply_to": [320, 321, 323, 324], "kraus_rank": [320, 323], "matrix_basi": [321, 323], "boldsymbol": [321, 322, 324], "chi_": 321, "to_krau": [321, 322, 324], "to_ptm": [322, 323], "kraus_oper": 323, "check_trace_preserv": 323, "check_trace_reduc": 323, "p1": 323, "p2": 323, "ey": 323, "chan3": 323, "syntaxerror": 323, "rank": 323, "density_matrix": [323, 324], "old_method": 323, "n_thread": 323, "dens": [323, 326], "repr": 323, "apply_to_vector": 323, "full_kroneck": 323, "to_choi": [323, 324], "clone": 325, "github": [325, 327, 351], "repositori": 325, "mybind": 325, "web": 325, "browser": 325, "binder": [325, 326, 329, 330, 331, 332], "beginn": 325, "h2": 325, "ucc": [325, 326, 351, 352, 353, 355], "lih": [325, 353], "multiplelaunchesplugin": 325, "avala": 325, "assembli": 325, "quick": 325, "splitter": 325, "epr": 325, "analyz": 325, "juli": 326, "2023": 326, "restructur": 326, "highlight": 326, "ticket": [326, 327], "brq": 326, "1487": 326, "redesign": 326, "much": [326, 352], "1482": 326, "html": 326, "1485": 326, "qlmaa": 326, "wheel": 326, "1490": 326, "1492": 326, "symengin": 326, "ration": 326, "mainten": [326, 355], "unexpect": 326, "behaviour": [326, 354], "dist": 326, "contrib": 326, "greater": [326, 343], "03": 326, "modulenotfounderror": 326, "jaxlib": 326, "warn": [326, 330], "deprecationwarn": 326, "layout_bas": 326, "pillow": 326, "layout": 326, "getsiz": 326, "getbbox": 326, "getlength": 326, "suppress": 326, "nowarn": 326, "directori": 326, "mayb": 326, "ipython_dir": 326, "home": 326, "profile_default": 326, "startup": 326, "simplefilt": 326, "action": 326, "futurewarn": 326, "restart": 326, "octob": 326, "chines": 326, "qiksit": 326, "throw": 326, "cleaner": 326, "u2": 326, "u3": 326, "decemb": 326, "june": 326, "nnizer": 326, "remote_stack": 326, "async_result": [326, 329], "join": [326, 327], "stdout": 326, "multivari": 326, "prakashqram": 326, "divis": 326, "sigsegv": 326, "question": 327, "bug": 327, "slack": 327, "ye": 328, "your_qiskit_circuit": 329, "your_qlm_circuit": [329, 330], "credenti": 329, "save_account": 329, "qiskit_ibm_runtim": 329, "my_ibm_token": 329, "ibm_quantum": 329, "ibmq_armonk": 329, "async_qpu": 329, "sleep": 329, "qiskit_result": 329, "vers": 330, "your_pyquil_circuit": 330, "pyquil_circuit": 330, "qvm": 330, "15011": 330, "get_qc": 330, "qcs_settings_applications_pyquil_qvm_url": 330, "9q": 330, "qlm_circ": 331, "your_google_circ": 331, "google_circ": 331, "your_qlm_circ": 331, "linequbit": 331, "gridqubit": 331, "aqasmprint": 332, "cengin": 332, "mainengin": 332, "aq": 332, "eng": 332, "engine_list": 332, "allocate_qureg": 332, "recov": 332, "script": 333, "qasm": 333, "oqasm2circ": 333, "bell_data": 333, "cx": 333, "flawlessli": 333, "haven": 333, "hint": [334, 335], "qa": 334, "seamless": [334, 356], "criteria": 335, "orient": [335, 356], "record": 335, "although": 335, "planar": 335, "gset": 335, "dataset": 335, "sec": 335, "vertic": [335, 337, 342, 349, 350], "leighton": 335, "dimac": 335, "88": 335, "95": 335, "99": 335, "subgraph": [335, 338, 339, 340, 346, 347, 348, 349], "bhoslib": 335, "450": 335, "4000": 335, "oei": 335, "instantli": 335, "nn": [337, 350], "impos": [338, 339, 342, 357], "problem_parameters_dict": [338, 339, 340, 341, 342], "sa_qpu": [338, 339, 340, 341, 342], "problem_job": [338, 339, 340, 341, 342], "problem_result": [338, 339, 340, 341, 342], "indices_spin_1": [338, 339, 340, 341, 342], "indices_spin_minus_1": [338, 340, 341], "kclique_problem": 339, "max_cut_problem": 340, "numbers_set": 341, "spin_1_subset": 341, "spin_minus_1_subset": 341, "smallest": [342, 349], "ramp": 343, "h_c": [343, 344], "propag": 343, "r_x": 343, "slow": 343, "fgg14": 343, "edward": 343, "farhi": 343, "jeffrei": 343, "goldston": 343, "sam": 343, "gutmann": 343, "1411": 343, "4028": 343, "slowli": 344, "erdos_renyi_graph": 344, "hamitonian": 344, "combintori": 345, "max_cut_appl": [345, 346], "combinatorial_result": [345, 346, 347, 348, 349, 350], "scipy_arg": [346, 347, 348, 349, 350], "sqa_best_paramet": [346, 347, 348, 349, 350], "sqa_best_parameters_dict": [346, 347, 348, 349, 350], "5000": [346, 347, 348, 349, 350], "max_cut_gener": 346, "schedule_batch": [346, 347, 348, 349, 350], "graph_partitioning_appl": 347, "graph_partitioning_gener": 347, "kclique_appl": 348, "kclique_gener": 348, "vertex_cover_appl": 349, "vertex_cover_gener": 349, "graph_colouring_appl": 350, "graph_colouring_gener": 350, "revamp": 351, "dq": 351, "changelog": 351, "spind": 351, "migrat": 351, "z_": 352, "y_": 352, "h_elec": 352, "htype": 352, "bare": 352, "5j": 352, "h_fermion": 352, "h_spin": 352, "825": 352, "175": 352, "h_fermion1": 352, "h_fermion2": 352, "h_spin1": 352, "h_spin2": 352, "fermion_comutator_matrix": 352, "spin_comutator_matrix": 352, "is_equal_sign": 352, "toi": 352, "strong": 352, "flagship": 353, "hamiltonian_sp": 353, "exact_energi": 353, "eigh": 353, "nenergi": 353, "ntheta": 353, "9999999974320526": 353, "1416940034276815": 353, "2147911128415545": 353, "chemist": 353, "h_2": 353, "thorough": 353, "whatev": 353, "sake": [353, 354], "31g": 353, "9071609330057144": 353, "basis_chang": 353, "mol_h_new_basi": 353, "proce": 353, "mol_h_act": 353, "002": 353, "bring": 353, "eight": 353, "eigenvector": 353, "round": 353, "nqbits_phas": 353, "guess_energi": 353, "1403": 353, "002343750000000089": 353, "earlier": [353, 354], "said": 354, "slower": 354, "cluster_oper": 354, "harre": 354, "hf_init": 354, "char": 354, "adaptvqe_plugin": 354, "theta_init": 354, "1372701679264894": 354, "1372701679265027": 354, "sgd": 354, "adam": 354, "euclidean": 354, "baseless": 354, "fisher": 354, "steepest": 354, "fubini": 354, "devis": 354, "theta_0": 354, "theta_1": 354, "theta_2": 354, "theta_3": 354, "theta_4": 354, "natgrad_opt": 354, "learning_paramet": 354, "8660254037652464": 354, "ic": 354, "outperform": 354, "whch": 354, "regim": 354, "artifici": 354, "2n_": 354, "faulti": 354, "boil": 354, "fold": 354, "endo": 354, "rangle_": 354, "richardson": 354, "giurgica": 354, "tiron": 354, "unclear": 354, "varianc": 354, "qchem": 355, "renam": 355, "fermionic_util": 355, "exact_eigen_energi": 355, "fermionic_hamiltonian_exponenti": 355, "reloc": 355, "ansatz_circuit": 355, "build_ucc_ansatz": 355, "ucc_deprec": 355, "get_initial_params_and_cluster_op": 355, "mollet": 355, "select_excitation_oper": 355, "get_active_space_hamiltonian": 355, "versatil": 356, "demo": 356, "achiv": 357, "316": 357, "bqm_problem": 357}, "objects": {"": [[46, 0, 0, "-", "qat"]], "qat": [[76, 0, 0, "-", "comm"], [91, 0, 0, "-", "core"], [133, 0, 0, "-", "devices"], [149, 0, 0, "-", "fermion"], [179, 0, 0, "-", "generators"], [188, 0, 0, "-", "hardware"], [47, 0, 0, "-", "interop"], [194, 0, 0, "-", "lang"], [239, 0, 0, "-", "opt"], [265, 0, 0, "-", "plugins"], [68, 0, 0, "-", "pylinalg"], [284, 0, 0, "-", "qpus"], [293, 0, 0, "-", "quops"]], "qat.comm": [[77, 0, 0, "-", "datamodel"], [80, 0, 0, "-", "exceptions"], [84, 0, 0, "-", "resource"], [88, 0, 0, "-", "shared"]], "qat.comm.datamodel.ttypes": [[78, 1, 1, "", "GateDefinition"], [79, 1, 1, "", "Op"]], "qat.comm.exceptions.ttypes": [[81, 1, 1, "", "ErrorType"], [82, 1, 1, "", "PluginException"], [83, 1, 1, "", "QPUException"]], "qat.comm.resource.ttypes": [[85, 1, 1, "", "AllocationModel"], [86, 1, 1, "", "Device"], [87, 1, 1, "", "ResourceModel"]], "qat.comm.shared.ttypes": [[89, 1, 1, "", "IntermediateMeasurement"], [90, 1, 1, "", "ProcessingType"]], "qat.core": [[95, 1, 1, "", "Batch"], [96, 1, 1, "", "BatchResult"], [97, 1, 1, "", "Circuit"], [100, 1, 1, "", "HardwareSpecs"], [101, 1, 1, "", "Job"], [122, 1, 1, "", "Observable"], [123, 1, 1, "", "Parameter"], [125, 1, 1, "", "Result"], [126, 1, 1, "", "Sample"], [127, 1, 1, "", "Schedule"], [129, 1, 1, "", "Term"], [130, 1, 1, "", "Topology"], [131, 1, 1, "", "TopologyType"], [132, 1, 1, "", "Variable"], [102, 0, 0, "-", "application"], [105, 0, 0, "-", "circuit_builder"], [110, 0, 0, "-", "gate_set"], [114, 0, 0, "-", "qpu"], [116, 0, 0, "-", "spins"], [119, 0, 0, "-", "variables"]], "qat.core.Batch": [[95, 2, 1, "", "dump"], [95, 2, 1, "", "from_bytes"], [95, 2, 1, "", "from_thrift"], [95, 2, 1, "", "get_variables"], [95, 2, 1, "", "load"], [95, 2, 1, "", "to_cpp"], [95, 2, 1, "", "to_thrift"]], "qat.core.BatchResult": [[96, 2, 1, "", "append"], [96, 2, 1, "", "dump"], [96, 2, 1, "", "extend"], [96, 2, 1, "", "from_thrift"], [96, 2, 1, "", "load"]], "qat.core.Circuit": [[97, 2, 1, "", "bind_variable"], [97, 2, 1, "", "bind_variables"], [97, 2, 1, "", "compile"], [97, 2, 1, "", "count"], [97, 2, 1, "", "dag"], [97, 2, 1, "", "depth"], [97, 2, 1, "", "display"], [97, 2, 1, "", "dump"], [97, 2, 1, "", "empty"], [97, 2, 1, "", "eval"], [97, 2, 1, "", "fill_matrices"], [97, 2, 1, "", "from_bytes"], [97, 2, 1, "", "from_thrift"], [97, 3, 1, "", "gate_set"], [97, 2, 1, "", "get_variables"], [97, 2, 1, "", "insert_gate"], [97, 2, 1, "", "iterate_simple"], [97, 2, 1, "", "load"], [97, 2, 1, "", "remove_locks"], [97, 2, 1, "", "run"], [97, 2, 1, "", "shift_qbits"], [97, 2, 1, "", "statistics"], [97, 2, 1, "", "to_job"]], "qat.core.HardwareSpecs": [[100, 2, 1, "", "as_graph"], [100, 2, 1, "", "as_quameleon"], [100, 2, 1, "", "dump"], [100, 2, 1, "", "from_thrift"], [100, 2, 1, "", "load"], [100, 3, 1, "", "nbqbits"]], "qat.core.Job": [[101, 2, 1, "", "compile"], [101, 2, 1, "", "differentiate"], [101, 2, 1, "", "dump"], [101, 2, 1, "", "eval"], [101, 2, 1, "", "from_bytes"], [101, 2, 1, "", "from_thrift"], [101, 2, 1, "", "get_variables"], [101, 2, 1, "", "gradient"], [101, 2, 1, "", "load"], [101, 3, 1, "", "parameter_map"], [101, 3, 1, "", "psi_0"], [101, 2, 1, "", "run"], [101, 2, 1, "", "shift_qbits"], [101, 3, 1, "", "threshold"], [101, 2, 1, "", "to_cpp"], [101, 2, 1, "", "to_thrift"]], "qat.core.Observable": [[122, 4, 1, "", "constant_coeff"], [122, 4, 1, "", "ising"], [122, 4, 1, "", "nbqbits"], [122, 4, 1, "", "terms"], [122, 2, 1, "", "to_matrix"]], "qat.core.Parameter": [[123, 3, 1, "", "func"], [123, 2, 1, "", "generate_noise"], [123, 2, 1, "", "get_noise"], [123, 3, 1, "", "psd"]], "qat.core.Result": [[125, 2, 1, "", "add_sample"], [125, 2, 1, "", "display"], [125, 2, 1, "", "dump"], [125, 2, 1, "", "from_bytes"], [125, 2, 1, "", "from_thrift"], [125, 2, 1, "", "load"], [125, 3, 1, "", "parameter_map"], [125, 2, 1, "", "plot"], [125, 2, 1, "", "unpack"], [125, 3, 1, "", "value"], [125, 3, 1, "", "values"], [125, 2, 1, "", "wrap_samples"]], "qat.core.Sample": [[126, 3, 1, "", "amplitude"], [126, 2, 1, "", "from_bytes"], [126, 2, 1, "", "from_thrift"], [126, 2, 1, "", "set_qreg"], [126, 3, 1, "", "state"]], "qat.core.Schedule": [[127, 2, 1, "", "dump"], [127, 2, 1, "", "get_variables"], [127, 2, 1, "", "load"], [127, 2, 1, "", "to_job"]], "qat.core.Term": [[129, 4, 1, "", "coeff"], [129, 4, 1, "", "op"], [129, 4, 1, "", "qbits"]], "qat.core.Topology": [[130, 2, 1, "", "add_edge"], [130, 2, 1, "", "dump"], [130, 2, 1, "", "from_bytes"], [130, 2, 1, "", "from_nx"], [130, 2, 1, "", "from_thrift"], [130, 2, 1, "", "load"], [130, 3, 1, "", "nbqbits"], [130, 2, 1, "", "set_nbqbits"], [130, 2, 1, "", "to_nx"]], "qat.core.Variable": [[132, 2, 1, "", "differentiate"], [132, 2, 1, "", "get_variables"], [132, 2, 1, "", "to_thrift"]], "qat.core.application": [[103, 1, 1, "", "Application"], [104, 1, 1, "", "RemoteApplication"]], "qat.core.application.Application": [[103, 2, 1, "", "execute"], [103, 2, 1, "", "serve"]], "qat.core.assertion": [[93, 5, 1, "", "assert_plugin"], [94, 5, 1, "", "assert_qpu"]], "qat.core.circuit_builder.builder": [[109, 1, 1, "", "VariableNameNotAvailable"]], "qat.core.circuit_builder.matrix_util": [[106, 5, 1, "", "default_gate_set"], [107, 5, 1, "", "get_param_generator"], [108, 5, 1, "", "get_predef_generator"]], "qat.core.console": [[98, 5, 1, "", "display"]], "qat.core.formula_eval": [[99, 5, 1, "", "evaluate"]], "qat.core.gate_set": [[111, 1, 1, "", "GateSet"], [112, 1, 1, "", "GateSignature"], [113, 1, 1, "", "GateSyntaxRedefinition"]], "qat.core.gate_set.GateSet": [[111, 2, 1, "", "add_signature"], [111, 2, 1, "", "union"]], "qat.core.gate_set.GateSignature": [[112, 2, 1, "", "get_circuit"], [112, 2, 1, "", "get_matrix"], [112, 2, 1, "", "set_circuit_generator"], [112, 2, 1, "", "set_matrix_generator"]], "qat.core.printer": [[124, 5, 1, "", "plot_in_notebook"]], "qat.core.qpu": [[115, 1, 1, "", "CommonQPU"]], "qat.core.spins": [[117, 5, 1, "", "integer_to_spins"], [118, 5, 1, "", "spins_to_integer"]], "qat.core.variables": [[120, 1, 1, "", "ArithExpression"], [121, 1, 1, "", "Symbol"]], "qat.core.variables.ArithExpression": [[120, 2, 1, "", "differentiate"], [120, 2, 1, "", "from_string"], [120, 2, 1, "", "get_variables"], [120, 2, 1, "", "pretty_print"], [120, 2, 1, "", "to_thrift"]], "qat.core.wrappers.result": [[128, 1, 1, "", "State"], [92, 5, 1, "", "aggregate_data"]], "qat.core.wrappers.result.State": [[128, 3, 1, "", "bitstring"], [128, 3, 1, "", "int"], [128, 3, 1, "", "lsb_int"], [128, 3, 1, "", "value"]], "qat.devices": [[134, 1, 1, "", "AllToAll"], [135, 6, 1, "", "GOOGLE_SYCAMORE"], [136, 1, 1, "", "GridDevice"], [137, 6, 1, "", "IBM_BURLINGTON"], [138, 6, 1, "", "IBM_JOHANNESBURG"], [139, 6, 1, "", "IBM_MELBOURNE"], [140, 6, 1, "", "IBM_RUESCHLIKON"], [141, 6, 1, "", "IBM_SINGAPORE"], [142, 6, 1, "", "IBM_TOKYO"], [143, 6, 1, "", "IBM_YORKTOWN"], [144, 1, 1, "", "LineDevice"], [145, 6, 1, "", "RIGETTI_AGAVE"], [146, 6, 1, "", "RIGETTI_ASPEN"], [147, 1, 1, "", "SquareGridDevice"], [148, 6, 1, "", "ZUCHONGZHI"]], "qat.fermion": [[149, 0, 0, "-", "chemistry"], [149, 0, 0, "-", "circuits"], [149, 0, 0, "-", "hamiltonians"], [149, 0, 0, "-", "phase_estimation"], [149, 0, 0, "-", "transforms"]], "qat.fermion.chemistry.pyscf_tools": [[172, 5, 1, "", "perform_pyscf_computation"]], "qat.fermion.chemistry": [[149, 0, 0, "-", "qse"], [149, 0, 0, "-", "ucc"]], "qat.fermion.chemistry.qse": [[150, 5, 1, "", "apply_quantum_subspace_expansion"]], "qat.fermion.chemistry.ucc": [[151, 5, 1, "", "compute_active_space_integrals"], [152, 5, 1, "", "construct_ucc_ansatz"], [153, 5, 1, "", "convert_to_h_integrals"], [156, 5, 1, "", "get_cluster_ops"], [157, 5, 1, "", "get_hf_ket"], [158, 5, 1, "", "guess_init_params"], [173, 5, 1, "", "select_active_orbitals"], [175, 5, 1, "", "transform_integrals_to_new_basis"]], "qat.fermion.chemistry.wrapper": [[169, 1, 1, "", "MolecularHamiltonian"], [170, 1, 1, "", "MoleculeInfo"]], "qat.fermion.chemistry.wrapper.MolecularHamiltonian": [[169, 4, 1, "", "constant_coeff"], [169, 2, 1, "", "get_electronic_hamiltonian"], [169, 4, 1, "", "nqbits"], [169, 4, 1, "", "one_body_integrals"], [169, 2, 1, "", "select_active_space"], [169, 2, 1, "", "transform_basis"], [169, 4, 1, "", "two_body_integrals"]], "qat.fermion.chemistry.wrapper.MoleculeInfo": [[170, 4, 1, "", "constant_coeff"], [170, 4, 1, "", "hamiltonian"], [170, 4, 1, "", "n_electrons"], [170, 4, 1, "", "noons"], [170, 4, 1, "", "nqbits"], [170, 4, 1, "", "one_body_integrals"], [170, 4, 1, "", "orbital_energies"], [170, 2, 1, "", "restrict_active_space"], [170, 4, 1, "", "two_body_integrals"]], "qat.fermion.circuits": [[160, 5, 1, "", "make_compressed_ldca_circ"], [162, 5, 1, "", "make_general_hwe_circ"], [164, 5, 1, "", "make_ldca_circ"], [165, 5, 1, "", "make_mr_circ"], [166, 5, 1, "", "make_mrep_circ"], [167, 5, 1, "", "make_shallow_circ"]], "qat.fermion.hamiltonians": [[154, 1, 1, "", "ElectronicStructureHamiltonian"], [155, 1, 1, "", "FermionHamiltonian"], [174, 1, 1, "", "SpinHamiltonian"], [159, 5, 1, "", "make_anderson_model"], [161, 5, 1, "", "make_embedded_model"], [163, 5, 1, "", "make_hubbard_model"]], "qat.fermion.hamiltonians.ElectronicStructureHamiltonian": [[154, 4, 1, "", "constant_coeff"], [154, 2, 1, "", "copy"], [154, 2, 1, "", "dag"], [154, 2, 1, "", "get_matrix"], [154, 4, 1, "", "hpq"], [154, 4, 1, "", "hpqrs"], [154, 2, 1, "", "to_fermion"], [154, 2, 1, "", "to_spin"]], "qat.fermion.hamiltonians.FermionHamiltonian": [[155, 4, 1, "", "constant_coeff"], [155, 2, 1, "", "copy"], [155, 2, 1, "", "dag"], [155, 2, 1, "", "get_matrix"], [155, 4, 1, "", "matrix"], [155, 4, 1, "", "nbqbits"], [155, 4, 1, "", "normal_order"], [155, 4, 1, "", "terms"], [155, 2, 1, "", "to_electronic"], [155, 2, 1, "", "to_spin"]], "qat.fermion.hamiltonians.SpinHamiltonian": [[174, 4, 1, "", "constant_coeff"], [174, 2, 1, "", "copy"], [174, 2, 1, "", "dag"], [174, 2, 1, "", "get_matrix"], [174, 4, 1, "", "matrix"], [174, 4, 1, "", "nbqbits"], [174, 4, 1, "", "terms"]], "qat.fermion.phase_estimation": [[171, 1, 1, "", "perform_phase_estimation"]], "qat.fermion.transforms": [[176, 5, 1, "", "transform_to_bk_basis"], [177, 5, 1, "", "transform_to_jw_basis"], [178, 5, 1, "", "transform_to_parity_basis"]], "qat.fermion.trotterisation": [[168, 5, 1, "", "make_trotterisation_routine"]], "qat.generators": [[180, 1, 1, "", "AbstractGenerator"], [181, 1, 1, "", "CombinatorialOptimizerGenerator"], [182, 1, 1, "", "GraphColouringGenerator"], [183, 1, 1, "", "GraphPartitioningGenerator"], [184, 1, 1, "", "KCliqueGenerator"], [185, 1, 1, "", "MaxCutGenerator"], [186, 1, 1, "", "RemoteBatchGenerator"], [187, 1, 1, "", "VertexCoverGenerator"]], "qat.generators.AbstractGenerator": [[180, 2, 1, "", "generate"], [180, 2, 1, "", "serve"], [180, 2, 1, "", "wrapper_post_process"]], "qat.generators.CombinatorialOptimizerGenerator": [[181, 2, 1, "", "generate"], [181, 2, 1, "", "post_process"]], "qat.generators.GraphColouringGenerator": [[182, 2, 1, "", "generate"]], "qat.generators.GraphPartitioningGenerator": [[183, 2, 1, "", "generate"]], "qat.generators.KCliqueGenerator": [[184, 2, 1, "", "generate"]], "qat.generators.MaxCutGenerator": [[185, 2, 1, "", "generate"]], "qat.generators.RemoteBatchGenerator": [[186, 2, 1, "", "generate"], [186, 2, 1, "", "post_process"]], "qat.generators.VertexCoverGenerator": [[187, 2, 1, "", "generate"]], "qat.hardware": [[189, 1, 1, "", "DefaultGatesSpecification"], [190, 1, 1, "", "DefaultHardwareModel"], [191, 1, 1, "", "GatesSpecification"], [192, 1, 1, "", "HardwareModel"], [193, 5, 1, "", "make_depolarizing_hardware_model"]], "qat.hardware.DefaultGatesSpecification": [[189, 4, 1, "", "gate_times"], [189, 2, 1, "", "get_gate_time"], [189, 2, 1, "", "get_quantum_channel"], [189, 4, 1, "", "meas"], [189, 4, 1, "", "quantum_channels"], [189, 4, 1, "", "state_prep"]], "qat.hardware.DefaultHardwareModel": [[190, 4, 1, "", "gate_noise"], [190, 4, 1, "", "gates_specification"], [190, 4, 1, "", "idle_noise"], [190, 4, 1, "", "jump_operators"], [190, 4, 1, "", "params_specification"]], "qat.hardware.GatesSpecification": [[191, 4, 1, "", "gate_times"], [191, 2, 1, "", "get_gate_time"], [191, 2, 1, "", "get_quantum_channel"], [191, 4, 1, "", "meas"], [191, 4, 1, "", "quantum_channels"], [191, 4, 1, "", "state_prep"]], "qat.hardware.HardwareModel": [[192, 4, 1, "", "gate_noise"], [192, 4, 1, "", "gates_specification"], [192, 4, 1, "", "idle_noise"], [192, 4, 1, "", "jump_operators"], [192, 4, 1, "", "params_specification"]], "qat.interop": [[48, 0, 0, "-", "cirq"], [51, 0, 0, "-", "openqasm"], [53, 0, 0, "-", "projectq"], [56, 0, 0, "-", "pyquil"], [60, 0, 0, "-", "qiskit"]], "qat.interop.cirq": [[49, 5, 1, "", "cirq_to_qlm"], [50, 5, 1, "", "qlm_to_cirq"]], "qat.interop.openqasm": [[52, 1, 1, "", "OqasmParser"]], "qat.interop.openqasm.OqasmParser": [[52, 2, 1, "", "compile"]], "qat.interop.projectq": [[54, 1, 1, "", "AqasmEngine"], [55, 1, 1, "", "AqasmPrinter"]], "qat.interop.projectq.AqasmEngine": [[54, 2, 1, "", "projectq_to_qlm"]], "qat.interop.pyquil": [[58, 1, 1, "", "PyquilQPU"], [57, 5, 1, "", "pyquil_to_qlm"], [59, 5, 1, "", "qlm_to_pyquil"]], "qat.interop.pyquil.PyquilQPU": [[58, 2, 1, "", "set_qpu"], [58, 2, 1, "", "submit"], [58, 2, 1, "", "submit_job"]], "qat.interop.qiskit": [[61, 1, 1, "", "AsyncBackendToQPU"], [62, 1, 1, "", "BackendToQPU"], [67, 1, 1, "", "QPUToBackend"], [64, 1, 1, "", "QiskitJob"], [63, 5, 1, "", "qiskit_to_qlm"], [66, 5, 1, "", "qlm_to_qiskit"]], "qat.interop.qiskit.AsyncBackendToQPU": [[61, 2, 1, "", "retrieve_job"], [61, 2, 1, "", "submit"]], "qat.interop.qiskit.BackendToQPU": [[62, 2, 1, "", "submit"]], "qat.interop.qiskit.QPUToBackend": [[67, 2, 1, "", "set_qpu"]], "qat.interop.qiskit.QiskitJob": [[64, 2, 1, "", "cancel"], [64, 2, 1, "", "dump"], [64, 2, 1, "", "job_id"], [64, 2, 1, "", "result"], [64, 2, 1, "", "status"]], "qat.interop.qiskit.runtime": [[65, 1, 1, "", "QiskitRuntimeQPU"]], "qat.interop.qiskit.runtime.QiskitRuntimeQPU": [[65, 2, 1, "", "submit"]], "qat.lang.AQASM": [[207, 0, 0, "-", "arithmetic"], [213, 0, 0, "-", "classarith"], [217, 0, 0, "-", "qftarith"]], "qat.lang.AQASM.arithmetic": [[208, 5, 1, "", "add_const_mod"], [209, 5, 1, "", "add_mod"], [210, 5, 1, "", "modular_exp"], [211, 5, 1, "", "mult_const"], [212, 5, 1, "", "mult_const_mod"]], "qat.lang.AQASM.bits": [[197, 1, 1, "", "BoolFormula"], [200, 1, 1, "", "CRegister"], [199, 1, 1, "", "Cbit"], [234, 1, 1, "", "QRegister"], [227, 1, 1, "", "Qbit"]], "qat.lang.AQASM.classarith": [[214, 5, 1, "", "add"], [215, 5, 1, "", "add_const"], [216, 5, 1, "", "cuccaro_add"]], "qat.lang.AQASM.gates": [[201, 1, 1, "", "Gate"], [223, 1, 1, "", "ParamGate"]], "qat.lang.AQASM.gates.ParamGate": [[223, 2, 1, "", "bind_variables"], [223, 2, 1, "", "dag"], [223, 2, 1, "", "display"], [223, 2, 1, "", "get_variables"]], "qat.lang.AQASM.misc": [[202, 5, 1, "", "generate_gate_set"]], "qat.lang.AQASM.qbool": [[228, 1, 1, "", "QBool"], [229, 1, 1, "", "QBoolArray"], [230, 1, 1, "", "QClause"]], "qat.lang.AQASM.qbool.QBool": [[228, 2, 1, "", "cast"], [228, 2, 1, "", "cast_to"], [228, 2, 1, "", "evaluate"], [228, 2, 1, "", "phase"], [228, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qbool.QBoolArray": [[229, 2, 1, "", "cast"], [229, 2, 1, "", "evaluate"], [229, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qbool.QClause": [[230, 2, 1, "", "evaluate"], [230, 2, 1, "", "phase"], [230, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qftarith": [[222, 5, 1, "", "QFT"], [218, 5, 1, "", "add"], [219, 5, 1, "", "add_const"], [220, 5, 1, "", "mult"], [221, 5, 1, "", "mult_const"]], "qat.lang.AQASM.qint": [[226, 1, 1, "", "QArithExp"], [231, 1, 1, "", "QCompExp"], [233, 1, 1, "", "QInt"]], "qat.lang.AQASM.qint.QArithExp": [[226, 2, 1, "", "evaluate"]], "qat.lang.AQASM.qint.QCompExp": [[231, 2, 1, "", "evaluate"], [231, 2, 1, "", "phase"], [231, 2, 1, "", "qbits_list"]], "qat.lang.AQASM.qint.QInt": [[233, 2, 1, "", "cast"], [233, 2, 1, "", "evaluate"], [233, 2, 1, "", "qbits_list"], [233, 2, 1, "", "set_value"]], "qat.lang": [[195, 1, 1, "", "AbstractGate"], [225, 1, 1, "", "Program"], [236, 1, 1, "", "QRoutine"], [194, 0, 0, "-", "algorithms"], [198, 5, 1, "", "build_gate"], [232, 5, 1, "", "qfunc"], [235, 5, 1, "", "qrout"]], "qat.lang.AbstractGate": [[195, 2, 1, "", "set_dag"]], "qat.lang.Program": [[225, 2, 1, "", "apply"], [225, 2, 1, "", "calloc"], [225, 2, 1, "", "cbreak"], [225, 2, 1, "", "cc_apply"], [225, 2, 1, "", "comment"], [225, 2, 1, "", "conjugate"], [225, 2, 1, "", "display"], [225, 2, 1, "", "export"], [225, 2, 1, "", "free_ancillae"], [225, 2, 1, "", "get_free_ancillae"], [225, 2, 1, "", "logic"], [225, 2, 1, "", "measure"], [225, 2, 1, "", "new_var"], [225, 2, 1, "", "qalloc"], [225, 2, 1, "", "reset"], [225, 2, 1, "", "run"], [225, 2, 1, "", "to_circ"]], "qat.lang.QRoutine": [[236, 2, 1, "", "apply"], [236, 2, 1, "", "compute"], [236, 2, 1, "", "free_ancillae"], [236, 2, 1, "", "get_free_ancillae"], [236, 2, 1, "", "new_wires"], [236, 2, 1, "", "set_ancillae"], [236, 2, 1, "", "uncompute"]], "qat.lang.algorithms.amplification": [[203, 5, 1, "", "grover_diffusion"], [204, 5, 1, "", "householder"], [238, 5, 1, "", "uniform_distribution"]], "qat.lang.algorithms": [[196, 5, 1, "", "amplification_step"], [224, 5, 1, "", "phase_estimation"], [237, 5, 1, "", "quantum_counting"]], "qat.lang.linking": [[206, 1, 1, "", "Linker"]], "qat.lang.linking.Linker": [[206, 2, 1, "", "add_signature"], [206, 2, 1, "", "clear_gate_set"], [206, 2, 1, "", "compile"], [206, 2, 1, "", "link"], [206, 2, 1, "", "link_gates"], [206, 2, 1, "", "link_matrices"], [206, 2, 1, "", "set_gate_set"]], "qat.lang.models": [[205, 1, 1, "", "KPTree"]], "qat.lang.models.KPTree": [[205, 2, 1, "", "get_routine"]], "qat.opt": [[241, 1, 1, "", "BILP"], [244, 1, 1, "", "CombinatorialProblem"], [245, 1, 1, "", "GraphColouring"], [246, 1, 1, "", "GraphPartitioning"], [247, 1, 1, "", "Ising"], [248, 1, 1, "", "KClique"], [249, 1, 1, "", "MaxCut"], [250, 1, 1, "", "MixingFactory"], [260, 1, 1, "", "NumberPartitioning"], [261, 1, 1, "", "QUBO"], [264, 1, 1, "", "VertexCover"], [251, 0, 0, "-", "mixing_factory"], [255, 0, 0, "-", "results"]], "qat.opt.BILP": [[241, 2, 1, "", "get_best_parameters"]], "qat.opt.CombinatorialProblem": [[244, 2, 1, "", "add_clause"], [244, 2, 1, "", "get_observable"], [244, 2, 1, "", "new_var"], [244, 2, 1, "", "new_vars"], [244, 2, 1, "", "to_bqm"], [244, 2, 1, "", "to_ising"], [244, 2, 1, "", "to_qubo"]], "qat.opt.GraphColouring": [[245, 2, 1, "", "get_best_parameters"], [245, 2, 1, "", "parse_result"]], "qat.opt.GraphPartitioning": [[246, 2, 1, "", "get_best_parameters"], [246, 2, 1, "", "parse_result"]], "qat.opt.Ising": [[247, 2, 1, "", "dump"], [247, 2, 1, "", "from_thrift"], [247, 2, 1, "", "get_best_parameters"], [247, 2, 1, "", "get_j_h_and_offset"], [247, 2, 1, "", "get_observable"], [247, 3, 1, "", "j_coupling_matrix"], [247, 2, 1, "", "load"], [247, 3, 1, "", "magnetic_field_h"], [247, 2, 1, "", "to_bqm"], [247, 2, 1, "", "to_combinatorial_problem"], [247, 2, 1, "", "to_job"], [247, 2, 1, "", "to_qubo"]], "qat.opt.KClique": [[248, 2, 1, "", "get_best_parameters"], [248, 2, 1, "", "parse_result"]], "qat.opt.MaxCut": [[249, 2, 1, "", "get_best_parameters"], [249, 2, 1, "", "parse_result"]], "qat.opt.MixingFactory": [[250, 2, 1, "", "bit_flip"], [250, 2, 1, "", "bit_move"]], "qat.opt.NumberPartitioning": [[260, 2, 1, "", "get_best_parameters"]], "qat.opt.QUBO": [[261, 2, 1, "", "get_best_parameters"], [261, 2, 1, "", "get_observable"], [261, 2, 1, "", "get_q_and_offset"], [261, 3, 1, "", "q_matrix"], [261, 2, 1, "", "to_bqm"], [261, 2, 1, "", "to_combinatorial_problem"], [261, 2, 1, "", "to_ising"], [261, 2, 1, "", "to_job"]], "qat.opt.VertexCover": [[264, 2, 1, "", "get_best_parameters"], [264, 2, 1, "", "parse_result"]], "qat.opt.binary_linear_integer_programming": [[241, 5, 1, "", "produce_q_and_offset"]], "qat.opt.boolexpr": [[243, 1, 1, "", "Clause"], [263, 1, 1, "", "Var"]], "qat.opt.boolexpr.Clause": [[243, 2, 1, "", "and_clause"], [243, 2, 1, "", "evaluate"], [243, 2, 1, "", "get_observable"], [243, 2, 1, "", "get_variables"], [243, 2, 1, "", "neg_clause"], [243, 2, 1, "", "or_clause"], [243, 2, 1, "", "xor_clause"]], "qat.opt.boolexpr.Var": [[263, 2, 1, "", "evaluate"], [263, 2, 1, "", "get_observable"], [263, 2, 1, "", "get_variables"], [263, 4, 1, "", "index"]], "qat.opt.circuit_generator": [[242, 1, 1, "", "CircuitGenerator"]], "qat.opt.circuit_generator.CircuitGenerator": [[242, 2, 1, "", "get_observable"], [242, 2, 1, "", "qaoa_ansatz"]], "qat.opt.graph_colouring": [[245, 5, 1, "", "produce_q_and_offset"]], "qat.opt.graph_partitioning": [[246, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.k_clique": [[248, 5, 1, "", "produce_q_and_offset"]], "qat.opt.max_cut": [[249, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.mixing_factory": [[252, 1, 1, "", "IndependentAnnealing"], [253, 1, 1, "", "InitialStateBuilder"], [254, 1, 1, "", "SimpleInitialState"]], "qat.opt.mixing_factory.IndependentAnnealing": [[252, 2, 1, "", "inject_initial_state"]], "qat.opt.mixing_factory.InitialStateBuilder": [[253, 2, 1, "", "inject_initial_state"]], "qat.opt.mixing_factory.SimpleInitialState": [[254, 2, 1, "", "inject_initial_state"]], "qat.opt.number_partitioning": [[260, 5, 1, "", "produce_j_h_and_offset"]], "qat.opt.results": [[256, 1, 1, "", "CombinatorialResult"], [257, 1, 1, "", "GraphPartitioningResult"], [258, 1, 1, "", "KCliqueResult"], [259, 1, 1, "", "VertexCoverResult"]], "qat.opt.results.GraphPartitioningResult": [[257, 2, 1, "", "display"]], "qat.opt.results.KCliqueResult": [[258, 3, 1, "", "clique"]], "qat.opt.results.VertexCoverResult": [[259, 3, 1, "", "cover"]], "qat.opt.schedule_generator": [[262, 1, 1, "", "ScheduleGenerator"]], "qat.opt.schedule_generator.ScheduleGenerator": [[262, 2, 1, "", "annealing_job"], [262, 2, 1, "", "get_observable"]], "qat.opt.vertex_cover": [[264, 5, 1, "", "produce_q_and_offset"]], "qat.plugins": [[266, 1, 1, "", "AbstractPlugin"], [267, 1, 1, "", "AdaptVQEPlugin"], [268, 1, 1, "", "CircuitInliner"], [269, 1, 1, "", "CostFunctionPlugin"], [270, 1, 1, "", "Display"], [271, 1, 1, "", "GradientDescentOptimizer"], [272, 1, 1, "", "Junction"], [273, 1, 1, "", "MultipleLaunchesAnalyzer"], [274, 1, 1, "", "ObservableSplitter"], [275, 1, 1, "", "Optimizer"], [276, 1, 1, "", "PSOMinimizePlugin"], [277, 1, 1, "", "QuameleonPlugin"], [278, 1, 1, "", "RemotePlugin"], [281, 1, 1, "", "SPSAMinimizePlugin"], [279, 1, 1, "", "ScipyMinimizePlugin"], [280, 1, 1, "", "SeqOptim"], [282, 1, 1, "", "TransformObservable"], [283, 1, 1, "", "ZeroNoiseExtrapolator"]], "qat.plugins.AbstractPlugin": [[266, 2, 1, "", "compile"], [266, 2, 1, "", "do_post_processing"], [266, 2, 1, "", "post_process"], [266, 2, 1, "", "serve"]], "qat.plugins.AdaptVQEPlugin": [[267, 2, 1, "", "compile"]], "qat.plugins.CircuitInliner": [[268, 2, 1, "", "compile"]], "qat.plugins.CostFunctionPlugin": [[269, 2, 1, "", "compile"]], "qat.plugins.Display": [[270, 2, 1, "", "compile"]], "qat.plugins.GradientDescentOptimizer": [[271, 2, 1, "", "compile"]], "qat.plugins.Junction": [[272, 2, 1, "", "execute"], [272, 2, 1, "", "run"]], "qat.plugins.MultipleLaunchesAnalyzer": [[273, 2, 1, "", "compile"]], "qat.plugins.ObservableSplitter": [[274, 2, 1, "", "compile"]], "qat.plugins.Optimizer": [[275, 2, 1, "", "compile"]], "qat.plugins.PSOMinimizePlugin": [[276, 2, 1, "", "compile"]], "qat.plugins.QuameleonPlugin": [[277, 2, 1, "", "compile"]], "qat.plugins.RemotePlugin": [[278, 2, 1, "", "compile"]], "qat.plugins.SPSAMinimizePlugin": [[281, 2, 1, "", "compile"]], "qat.plugins.ScipyMinimizePlugin": [[279, 2, 1, "", "compile"], [279, 2, 1, "", "set_options"]], "qat.plugins.SeqOptim": [[280, 2, 1, "", "compile"]], "qat.plugins.TransformObservable": [[282, 2, 1, "", "compile"]], "qat.plugins.ZeroNoiseExtrapolator": [[283, 2, 1, "", "compile"]], "qat.pylinalg": [[69, 0, 0, "-", "simulator"]], "qat.pylinalg.simulator": [[70, 5, 1, "", "mat2nparray"], [71, 5, 1, "", "measure"], [72, 5, 1, "", "project"], [73, 5, 1, "", "raise_break"], [74, 5, 1, "", "reset"], [75, 5, 1, "", "simulate"]], "qat.qpus": [[285, 1, 1, "", "CLinalg"], [288, 1, 1, "", "ClassicalQPU"], [286, 1, 1, "", "PyLinalg"], [291, 1, 1, "", "QPUHandler"], [292, 1, 1, "", "RemoteQPU"], [287, 1, 1, "", "SimulatedAnnealing"], [289, 5, 1, "", "get_current_qpu"], [290, 5, 1, "", "get_default_qpu"]], "qat.qpus.CLinalg": [[285, 2, 1, "", "submit"]], "qat.qpus.PyLinalg": [[286, 2, 1, "", "serve"], [286, 2, 1, "", "submit"], [286, 2, 1, "", "submit_job"]], "qat.qpus.QPUHandler": [[291, 2, 1, "", "apply_resource_consumption_limits"], [291, 2, 1, "", "estimate_resources_for_batch"], [291, 2, 1, "", "get_specs"], [291, 2, 1, "", "serve"], [291, 2, 1, "", "submit"], [291, 2, 1, "", "submit_job"]], "qat.qpus.SimulatedAnnealing": [[287, 2, 1, "", "submit_job"]], "qat.quops": [[295, 1, 1, "", "ChannelRepresentations"], [315, 1, 1, "", "ParametricAmplitudeDamping"], [316, 1, 1, "", "ParametricGateNoise"], [317, 1, 1, "", "ParametricPureDephasing"], [318, 1, 1, "", "ParametricQuantumChannel"], [320, 1, 1, "", "QuantumChannel"], [321, 1, 1, "", "QuantumChannelChi"], [322, 1, 1, "", "QuantumChannelChoi"], [323, 1, 1, "", "QuantumChannelKraus"], [324, 1, 1, "", "QuantumChannelPTM"], [304, 5, 1, "", "is_completely_positive"], [305, 5, 1, "", "is_trace_preserving"], [306, 5, 1, "", "is_trace_reducing"], [307, 5, 1, "", "is_unital"], [308, 5, 1, "", "make_avg_fid_equiv_depol_channel"], [309, 5, 1, "", "make_depolarizing_channel"], [310, 5, 1, "", "make_generalized_amplitude_damping"], [293, 0, 0, "-", "metrics"]], "qat.quops.ParametricAmplitudeDamping": [[315, 4, 1, "", "T_1"], [315, 4, 1, "", "name"], [315, 2, 1, "", "prob"]], "qat.quops.ParametricPureDephasing": [[317, 4, 1, "", "T_phi"], [317, 4, 1, "", "name"], [317, 2, 1, "", "prob"], [317, 2, 1, "", "ptilde"]], "qat.quops.QuantumChannelChi": [[321, 2, 1, "", "apply_to"], [321, 4, 1, "", "arity"], [321, 4, 1, "", "matrix"], [321, 4, 1, "", "matrix_basis"], [321, 4, 1, "", "name"], [321, 2, 1, "", "to_kraus"]], "qat.quops.QuantumChannelChoi": [[322, 4, 1, "", "arity"], [322, 4, 1, "", "matrix"], [322, 4, 1, "", "name"], [322, 2, 1, "", "to_kraus"], [322, 2, 1, "", "to_ptm"]], "qat.quops.QuantumChannelKraus": [[323, 2, 1, "", "apply_to"], [323, 2, 1, "", "apply_to_vector"], [323, 4, 1, "", "kraus_operators"], [323, 2, 1, "id0", "kraus_rank"], [323, 4, 1, "", "name"], [323, 2, 1, "", "to_chi"], [323, 2, 1, "", "to_choi"], [323, 2, 1, "", "to_ptm"]], "qat.quops.QuantumChannelPTM": [[324, 2, 1, "", "apply_to"], [324, 4, 1, "", "arity"], [324, 3, 1, "id0", "matrix"], [324, 4, 1, "", "name"], [324, 3, 1, "", "ptm"], [324, 3, 1, "", "tensor"], [324, 2, 1, "", "to_choi"], [324, 2, 1, "", "to_kraus"]], "qat.quops.math_util": [[294, 5, 1, "", "are_equal_up_to_phase"], [296, 5, 1, "", "convert_density_mat_to_pauli_vec"], [297, 5, 1, "", "convert_pauli_vec_to_density_mat"], [311, 5, 1, "", "make_pauli_matrix_basis"], [312, 5, 1, "", "make_standard_matrix_basis"], [313, 5, 1, "", "make_standard_vector_basis"], [314, 5, 1, "", "multikron"], [319, 5, 1, "", "partial_trace"]], "qat.quops.metrics": [[298, 5, 1, "", "get_average_process_fidelity"], [299, 5, 1, "", "get_diamond_norm"], [300, 5, 1, "", "get_entanglement_process_fidelity"], [301, 5, 1, "", "get_process_distance"], [302, 5, 1, "", "get_state_fidelity"], [303, 5, 1, "", "get_trace_distance"]], "qat.simulated_annealing.service": [[287, 5, 1, "", "extract_j_and_h_from_obs"]], "qat.vsolve.ansatz": [[240, 1, 1, "", "AnsatzFactory"]], "qat.vsolve.ansatz.AnsatzFactory": [[240, 2, 1, "", "qaoa_circuit"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "titleterms": {"get": [0, 43], "start": 0, "write": [1, 9, 91], "quantum": [1, 2, 9, 11, 13, 14, 15, 17, 18, 28, 33, 34, 149, 194, 251, 285, 286, 293, 325, 326, 329, 330, 331, 332, 333, 335, 343, 344, 353], "program": [1, 2, 9, 10, 13, 19, 23, 28, 33, 194, 225, 325, 336], "exampl": [1, 17, 41, 42, 352], "grover": [1, 17], "algorithm": [1, 3, 44, 194, 196, 203, 204, 224, 237, 238, 325, 343], "The": [1, 18, 149, 352], "diffus": 1, "oracl": [1, 14, 17], "execut": [2, 28], "variat": [3, 12, 44, 265, 325, 353], "qaptiva": [3, 8], "instal": [4, 6], "myqlm": [4, 5, 6, 326, 327, 356], "prerequisit": 4, "compat": 4, "matrix": [4, 11], "packag": 4, "interoper": [4, 325, 328, 329, 330, 331, 332, 357], "licens": 5, "proprietari": 5, "part": 5, "open": 5, "sourc": 5, "maco": 6, "user": [8, 11], "guid": 8, "librari": [8, 355], "built": 8, "upon": 8, "gate": [10, 11, 13, 15, 18, 37, 188, 194, 201, 223, 284, 328], "base": [10, 37, 38, 39, 284, 328, 355], "creat": [11, 12, 19, 27, 43, 251, 352], "ad": [11, 325], "circuit": [11, 12, 13, 15, 97, 149, 160, 162, 164, 165, 166, 167, 194, 265, 325, 326, 329, 330, 331, 332, 333, 353], "nativ": 11, "control": 11, "dagger": 11, "defin": [11, 326, 352], "parametr": 11, "abstractg": [11, 195], "definit": 11, "subcircuit": 11, "ariti": 11, "gener": [11, 13, 26, 32, 133, 179, 180, 181, 182, 183, 184, 185, 186, 187, 239, 255, 345, 346, 347, 348, 349, 350], "deprec": [11, 355], "custom": [11, 43, 251], "job": [12, 19, 22, 29, 30, 31, 44, 91, 101, 239, 251, 326], "bind": 12, "variabl": [12, 20, 91, 119, 120, 121, 132], "alloc": [13, 17], "qubit": [13, 97], "classic": [13, 17], "regist": [13, 194], "appli": 13, "advanc": 13, "oper": [13, 27, 293, 352], "export": 13, "routin": [14, 15, 194], "name": 15, "lift": 15, "python": [15, 37, 39, 326], "function": [15, 149, 326], "link": [15, 18, 206], "extract": 15, "ancilla": 16, "manag": [16, 194], "comput": [16, 35, 37, 325], "scope": 16, "autom": [16, 32], "uncomput": 16, "type": [17, 194], "boolean": [17, 194], "condit": 17, "logic": 17, "express": [17, 194], "evalu": [17, 99], "statement": 17, "build": [17, 20], "phase": [17, 149, 353], "integ": [17, 194, 336], "set": [17, 194], "valu": 17, "arithmet": [17, 194, 207, 208, 209, 210, 211, 212], "graph": [17, 335, 337, 338, 347, 350], "color": 17, "ato": 18, "assembl": 18, "aqasm": [18, 197, 199, 200, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234], "text": 18, "format": 18, "header": 18, "instruct": 18, "list": [18, 20], "compil": [18, 41, 333], "file": 18, "time": 18, "analog": [19, 22], "background": 19, "schedul": [20, 21, 127], "hamiltonian": [20, 24, 149, 154, 155, 159, 161, 163, 174, 352], "coeffici": 20, "observ": [20, 27, 31, 91, 122], "us": [20, 27, 29, 40, 97, 326, 352], "abstract": [20, 284], "one": [20, 29, 352], "manipul": [21, 194, 352], "anneal": [23, 35, 251, 284, 335, 344, 357], "Ising": [24, 239, 247], "bibliographi": [24, 343], "quadrat": [25, 239], "unconstrain": [25, 335], "binari": [25, 336], "optim": [25, 179, 239, 255, 265, 275, 325, 334, 343], "qubo": [25, 239, 261], "combinatori": [26, 179, 239, 255, 325, 334], "problem": [26, 239, 325, 335, 345], "singl": 27, "term": [27, 129], "an": 27, "construct": 29, "multipl": 29, "batch": [29, 32, 95], "sampl": [30, 126], "result": [33, 91, 92, 125, 128, 255, 256, 257, 258, 259], "process": [34, 285, 286], "unit": [34, 285, 286], "qpu": [34, 36, 37, 40, 43, 44, 114, 115, 284, 285, 286, 287, 288, 289, 290, 291, 292, 329, 330], "inner": 35, "work": 35, "make": [36, 41, 42], "your": [36, 41, 325], "own": [36, 41, 42], "method": [36, 41, 97, 352], "submit_job": 36, "get_spec": 36, "emul": 37, "clinalg": [37, 38, 285], "c": [37, 38, 285], "linear": [37, 38, 39, 336], "algebra": [37, 38, 39], "simul": [37, 38, 39, 69, 70, 71, 72, 73, 74, 75, 284, 325, 335], "pylinalg": [37, 39, 68, 69, 70, 71, 72, 73, 74, 75, 286], "extend": [40, 44], "plugin": [40, 41, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 325, 354], "post_process": 41, "A": [41, 42], "concret": [41, 42], "you": 42, "junction": [42, 272], "inform": 43, "from": 43, "specif": [43, 91, 188], "run": [44, 325], "support": [44, 239], "differenti": 44, "test": 44, "sever": 44, "initi": 44, "paramet": [44, 91, 123], "api": 45, "refer": [45, 205, 207, 213, 217], "qat": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 355], "interop": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "cirq": [48, 49, 50, 331], "cirq_to_qlm": 49, "qlm_to_cirq": 50, "openqasm": [51, 52, 333], "oqasmpars": 52, "projectq": [53, 54, 55, 332], "aqasmengin": 54, "aqasmprint": 55, "pyquil": [56, 57, 58, 59, 330], "pyquil_to_qlm": 57, "pyquilqpu": 58, "qlm_to_pyquil": 59, "qiskit": [60, 61, 62, 63, 64, 65, 66, 67, 329], "asyncbackendtoqpu": 61, "backendtoqpu": 62, "qiskit_to_qlm": 63, "qiskitjob": 64, "runtim": 65, "qiskitruntimeqpu": 65, "qlm_to_qiskit": 66, "qputobackend": 67, "mat2nparrai": 70, "measur": 71, "project": 72, "raise_break": 73, "reset": 74, "comm": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "datamodel": [77, 78, 79], "ttype": [78, 79, 81, 82, 83, 85, 86, 87, 89, 90], "gatedefinit": 78, "op": 79, "except": [80, 81, 82, 83], "errortyp": 81, "pluginexcept": 82, "qpuexcept": 83, "resourc": [84, 85, 86, 87], "allocationmodel": 85, "devic": [86, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "resourcemodel": 87, "share": [88, 89, 90], "intermediatemeasur": 89, "processingtyp": 90, "core": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "object": 91, "pars": 91, "relat": 91, "hardwar": [91, 188, 189, 190, 191, 192, 193], "misc": [91, 202], "util": [91, 149, 179, 265, 284, 293], "wrapper": [92, 128, 169, 170], "aggregate_data": 92, "assert": [93, 94], "assert_plugin": 93, "assert_qpu": 94, "batchresult": 96, "most": 97, "iter": 97, "cbit": [97, 199], "consol": 98, "displai": [98, 270], "formula_ev": 99, "hardwarespec": 100, "applic": [102, 103, 104, 353], "remoteappl": 104, "circuit_build": [105, 106, 107, 108, 109], "matrix_util": [106, 107, 108], "default_gate_set": 106, "get_param_gener": 107, "get_predef_gener": 108, "builder": 109, "variablenamenotavail": 109, "gate_set": [110, 111, 112, 113], "gateset": 111, "gatesignatur": 112, "gatesyntaxredefinit": 113, "commonqpu": 115, "spin": [116, 117, 118, 149, 325, 351, 352], "integer_to_spin": 117, "spins_to_integ": 118, "arithexpress": 120, "symbol": 121, "printer": 124, "plot_in_notebook": 124, "state": [128, 194, 353], "topologi": 130, "topologytyp": 131, "predefin": [133, 188, 293], "alltoal": 134, "google_sycamor": 135, "griddevic": 136, "ibm_burlington": 137, "ibm_johannesburg": 138, "ibm_melbourn": 139, "ibm_rueschlikon": 140, "ibm_singapor": 141, "ibm_tokyo": 142, "ibm_yorktown": 143, "linedevic": 144, "rigetti_agav": 145, "rigetti_aspen": 146, "squaregriddevic": 147, "zuchongzhi": 148, "fermion": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 265, 325, 351, 352, 353], "constructor": [149, 352], "common": 149, "mani": 149, "bodi": 149, "transform": [149, 176, 177, 178], "ansatz": [149, 240, 353], "atom": 149, "molecular": 149, "studi": 149, "unitari": 149, "coupl": 149, "cluster": 149, "ucc": [149, 151, 152, 153, 156, 157, 158, 173, 175], "subspac": [149, 353], "expans": [149, 353], "estim": [149, 353], "chemistri": [150, 151, 152, 153, 156, 157, 158, 169, 170, 172, 173, 175, 353], "qse": 150, "apply_quantum_subspace_expans": 150, "compute_active_space_integr": 151, "construct_ucc_ansatz": 152, "convert_to_h_integr": 153, "electronicstructurehamiltonian": 154, "fermionhamiltonian": 155, "get_cluster_op": 156, "get_hf_ket": 157, "guess_init_param": 158, "make_anderson_model": 159, "make_compressed_ldca_circ": 160, "make_embedded_model": 161, "make_general_hwe_circ": 162, "make_hubbard_model": 163, "make_ldca_circ": 164, "make_mr_circ": 165, "make_mrep_circ": 166, "make_shallow_circ": 167, "trotteris": 168, "make_trotterisation_routin": 168, "molecularhamiltonian": [169, 353], "moleculeinfo": [170, 353], "phase_estim": [171, 224], "perform_phase_estim": 171, "pyscf_tool": 172, "perform_pyscf_comput": 172, "select_active_orbit": 173, "spinhamiltonian": 174, "transform_integrals_to_new_basi": 175, "transform_to_bk_basi": 176, "transform_to_jw_basi": 177, "transform_to_parity_basi": 178, "abstractgener": 180, "combinatorialoptimizergener": 181, "graphcolouringgener": 182, "graphpartitioninggener": 183, "kcliquegener": 184, "maxcutgener": 185, "remotebatchgener": 186, "vertexcovergener": 187, "model": [188, 205], "defaultgatesspecif": 189, "defaulthardwaremodel": 190, "gatesspecif": 191, "hardwaremodel": 192, "make_depolarizing_hardware_model": 193, "lang": [194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 325], "tool": [194, 353], "structur": 194, "linker": [194, 206], "low": [194, 285], "level": [194, 285], "labrari": 194, "basic": [194, 325], "preparat": 194, "qram": 194, "amplification_step": 196, "bit": [197, 199, 200, 227, 234], "boolformula": 197, "build_gat": 198, "cregist": 200, "generate_gate_set": 202, "amplif": [203, 204, 238], "grover_diffus": 203, "household": 204, "kptree": 205, "add_const_mod": 208, "add_mod": 209, "modular_exp": 210, "mult_const": [211, 221], "mult_const_mod": 212, "classarith": [213, 214, 215, 216], "add": [214, 218], "add_const": [215, 219], "cuccaro_add": 216, "qftarith": [217, 218, 219, 220, 221, 222], "mult": 220, "qft": 222, "paramg": 223, "qint": [226, 231, 233], "qarithexp": 226, "qbit": 227, "qbool": [228, 229, 230], "qboolarrai": 229, "qclaus": 230, "qcompexp": 231, "qfunc": 232, "qregist": 234, "qrout": 235, "qroutin": 236, "quantum_count": 237, "uniform_distribut": 238, "opt": [239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "class": [239, 284], "np": [239, 335, 345], "hard": [239, 335, 345], "qaoa": [239, 343], "ans\u00e4tz": [239, 353], "qa": [239, 344], "vsolv": 240, "ansatzfactori": 240, "bilp": [241, 336], "circuit_gener": 242, "circuitgener": 242, "boolexpr": [243, 263], "claus": 243, "combinatorialproblem": 244, "graphcolour": 245, "graphpartit": 246, "kcliqu": [248, 339], "maxcut": 249, "mixingfactori": 250, "mixing_factori": [251, 252, 253, 254], "independentann": 252, "initialstatebuild": 253, "simpleinitialst": 254, "combinatorialresult": 256, "graphpartitioningresult": 257, "kcliqueresult": 258, "vertexcoverresult": 259, "numberpartit": 260, "schedule_gener": 262, "schedulegener": 262, "var": 263, "vertexcov": 264, "rewrit": 265, "system": [265, 325, 351], "abstractplugin": 266, "adaptvqeplugin": 267, "circuitinlin": 268, "costfunctionplugin": 269, "gradientdescentoptim": 271, "multiplelaunchesanalyz": 273, "observablesplitt": 274, "psominimizeplugin": 276, "quameleonplugin": 277, "remoteplugin": 278, "scipyminimizeplugin": 279, "seqoptim": 280, "spsaminimizeplugin": 281, "transformobserv": 282, "zeronoiseextrapol": 283, "high": 285, "statevector": 285, "pybind": 285, "interfac": 285, "simulatedann": 287, "classicalqpu": 288, "get_current_qpu": 289, "get_default_qpu": 290, "qpuhandl": 291, "remoteqpu": 292, "quop": [293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], "channel": 293, "metric": [293, 298, 299, 300, 301, 302, 303], "basi": 293, "mathemat": 293, "math_util": [294, 296, 297, 311, 312, 313, 314, 319], "are_equal_up_to_phas": 294, "channelrepresent": 295, "convert_density_mat_to_pauli_vec": 296, "convert_pauli_vec_to_density_mat": 297, "get_average_process_fidel": 298, "get_diamond_norm": 299, "get_entanglement_process_fidel": 300, "get_process_dist": 301, "get_state_fidel": 302, "get_trace_dist": 303, "is_completely_posit": 304, "is_trace_preserv": 305, "is_trace_reduc": 306, "is_unit": 307, "make_avg_fid_equiv_depol_channel": 308, "make_depolarizing_channel": 309, "make_generalized_amplitude_damp": 310, "make_pauli_matrix_basi": 311, "make_standard_matrix_basi": 312, "make_standard_vector_basi": 313, "multikron": 314, "parametricamplitudedamp": 315, "parametricgatenois": 316, "parametricpuredephas": 317, "parametricquantumchannel": 318, "partial_trac": 319, "quantumchannel": 320, "quantumchannelchi": 321, "quantumchannelchoi": 322, "quantumchannelkrau": 323, "quantumchannelptm": 324, "demo": [325, 351], "tutori": 325, "digit": 325, "stack": 325, "design": 325, "qlm": 325, "first": 325, "step": 325, "introduct": 325, "releas": 326, "note": 326, "what": 326, "": 326, "new": 326, "1": 326, "9": 326, "updat": 326, "featur": 326, "fix": 326, "7": 326, "3": 326, "2": 326, "6": 326, "5": 326, "4": 326, "0": 326, "contribut": 327, "framework": [328, 357], "avail": 328, "binder": 328, "translat": [329, 330, 331, 332, 333], "connect": [329, 330], "backend": 329, "constrain": 335, "other": 335, "benchmark": 335, "perform": 335, "colour": [337, 350], "partit": [338, 341, 347], "max": [340, 346], "cut": [340, 346], "number": 341, "vertex": [342, 349], "cover": [342, 349], "approxim": 343, "k": 348, "cliqu": 348, "tabl": [352, 353], "content": [352, 353], "two": 352, "electron": 352, "integr": 352, "get_matrix": 352, "represent": 352, "some": 352, "includ": 353, "prepar": 353, "eigensolv": 353, "vqe": 353, "trotter": 353, "migrat": 355, "code": 355, "dq": 355, "document": 356}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"qat.core.circuit_builder.matrix_util.get_predef_generator": [[108, "qat-core-circuit-builder-matrix-util-get-predef-generator"]], "qat.core.Parameter": [[123, "qat-core-parameter"]], "qat.core.spins.spins_to_integer": [[118, "qat-core-spins-spins-to-integer"]], "qat.core.Observable": [[122, "qat-core-observable"]], "qat.core.printer.plot_in_notebook": [[124, "qat-core-printer-plot-in-notebook"]], "qat.core.qpu.CommonQPU": [[115, "qat-core-qpu-commonqpu"]], "qat.core.circuit_builder.matrix_util.default_gate_set": [[106, "qat-core-circuit-builder-matrix-util-default-gate-set"]], "qat.core.qpu": [[114, "qat-core-qpu"]], "qat.core.variables.Symbol": [[121, "qat-core-variables-symbol"]], "qat.core.circuit_builder.builder.VariableNameNotAvailable": [[109, "qat-core-circuit-builder-builder-variablenamenotavailable"]], "qat.core.gate_set.GateSet": [[111, "qat-core-gate-set-gateset"]], "qat.core.spins": [[116, "qat-core-spins"]], "qat.core.Result": [[125, "qat-core-result"]], "qat.core.gate_set.GateSignature": [[112, "qat-core-gate-set-gatesignature"]], "qat.core.spins.integer_to_spins": [[117, "qat-core-spins-integer-to-spins"]], "qat.core.variables.ArithExpression": [[120, "qat-core-variables-arithexpression"]], "qat.core.circuit_builder": [[105, "qat-core-circuit-builder"]], "qat.core.circuit_builder.matrix_util.get_param_generator": [[107, "qat-core-circuit-builder-matrix-util-get-param-generator"]], "qat.core.gate_set": [[110, "qat-core-gate-set"]], "qat.core.gate_set.GateSyntaxRedefinition": [[113, "qat-core-gate-set-gatesyntaxredefinition"]], "qat.core.variables": [[119, "qat-core-variables"]], "Interoperability with annealing framework": [[357, "interoperability-with-annealing-framework"]], "qat.fermion.circuits.make_shallow_circ": [[167, "qat-fermion-circuits-make-shallow-circ"]], "qat.fermion.chemistry.ucc.get_hf_ket": [[157, "qat-fermion-chemistry-ucc-get-hf-ket"]], "qat.fermion.chemistry.ucc.convert_to_h_integrals": [[153, "qat-fermion-chemistry-ucc-convert-to-h-integrals"]], "qat.fermion.circuits.make_mrep_circ": [[166, "qat-fermion-circuits-make-mrep-circ"]], "qat.fermion.hamiltonians.make_anderson_model": [[159, "qat-fermion-hamiltonians-make-anderson-model"]], "qat.devices.SquareGridDevice": [[147, "qat-devices-squaregriddevice"]], "qat.fermion.chemistry.ucc.get_cluster_ops": [[156, "qat-fermion-chemistry-ucc-get-cluster-ops"]], "qat.fermion.circuits.make_general_hwe_circ": [[162, "qat-fermion-circuits-make-general-hwe-circ"]], "qat.fermion.circuits.make_ldca_circ": [[164, "qat-fermion-circuits-make-ldca-circ"]], "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion": [[150, "qat-fermion-chemistry-qse-apply-quantum-subspace-expansion"]], "qat.fermion.hamiltonians.make_hubbard_model": [[163, "qat-fermion-hamiltonians-make-hubbard-model"]], "qat.fermion.chemistry.ucc.compute_active_space_integrals": [[151, "qat-fermion-chemistry-ucc-compute-active-space-integrals"]], "qat.fermion.circuits.make_compressed_ldca_circ": [[160, "qat-fermion-circuits-make-compressed-ldca-circ"]], "qat.fermion": [[149, "qat-fermion"]], "Hamiltonians constructors": [[149, "hamiltonians-constructors"]], "Common many-body Hamiltonians": [[149, "common-many-body-hamiltonians"]], "The spin-fermion transforms": [[149, "module-qat.fermion.transforms"]], "Fermionic ansatz circuits": [[149, "module-qat.fermion.circuits"], [353, "fermionic-ansatz-circuits"]], "Atomic and molecular studies": [[149, "atomic-and-molecular-studies"]], "Unitary Coupled-Cluster (UCC)": [[149, "unitary-coupled-cluster-ucc"]], "Quantum subspace expansion": [[149, "module-qat.fermion.chemistry.qse"], [353, "quantum-subspace-expansion"]], "Quantum phase estimation": [[149, "module-qat.fermion.phase_estimation"], [353, "quantum-phase-estimation"]], "Utility functions": [[149, "utility-functions"]], "qat.fermion.hamiltonians.FermionHamiltonian": [[155, "qat-fermion-hamiltonians-fermionhamiltonian"]], "qat.fermion.chemistry.ucc.construct_ucc_ansatz": [[152, "qat-fermion-chemistry-ucc-construct-ucc-ansatz"]], "qat.fermion.hamiltonians.make_embedded_model": [[161, "qat-fermion-hamiltonians-make-embedded-model"]], "qat.fermion.circuits.make_mr_circ": [[165, "qat-fermion-circuits-make-mr-circ"]], "qat.fermion.hamiltonians.ElectronicStructureHamiltonian": [[154, "qat-fermion-hamiltonians-electronicstructurehamiltonian"]], "qat.fermion.chemistry.ucc.guess_init_params": [[158, "qat-fermion-chemistry-ucc-guess-init-params"]], "qat.devices.ZUCHONGZHI": [[148, "qat-devices-zuchongzhi"]], "qat.core.formula_eval.evaluate": [[99, "qat-core-formula-eval-evaluate"]], "qat.comm.shared": [[88, "qat-comm-shared"]], "qat.comm.shared.ttypes.ProcessingType": [[90, "qat-comm-shared-ttypes-processingtype"]], "qat.core.console.display": [[98, "qat-core-console-display"]], "qat.core.HardwareSpecs": [[100, "qat-core-hardwarespecs"]], "qat.core.application.RemoteApplication": [[104, "qat-core-application-remoteapplication"]], "qat.core.wrappers.result.aggregate_data": [[92, "qat-core-wrappers-result-aggregate-data"]], "qat.core.Circuit": [[97, "qat-core-circuit"]], "Most useful Circuit methods": [[97, "most-useful-circuit-methods"]], "Iterating of a Circuit": [[97, "iterating-of-a-circuit"]], "Qubits and cbits": [[97, "qubits-and-cbits"]], "qat.comm.resource.ttypes.ResourceModel": [[87, "qat-comm-resource-ttypes-resourcemodel"]], "qat.comm.resource.ttypes.AllocationModel": [[85, "qat-comm-resource-ttypes-allocationmodel"]], "qat.core.assertion.assert_plugin": [[93, "qat-core-assertion-assert-plugin"]], "qat.comm.resource": [[84, "qat-comm-resource"]], "qat.core.Batch": [[95, "qat-core-batch"]], "qat.core.application": [[102, "qat-core-application"]], "qat.core": [[91, "qat-core"]], "Objects for writing a job": [[91, "objects-for-writing-a-job"]], "Objects for parsing a job result": [[91, "objects-for-parsing-a-job-result"]], "Observable-related objects": [[91, "observable-related-objects"]], "Hardware specifications": [[91, "hardware-specifications"]], "Variables and Parameters": [[91, "variables-and-parameters"]], "Misc. utilities": [[91, "misc-utilities"]], "qat.comm.resource.ttypes.Device": [[86, "qat-comm-resource-ttypes-device"]], "qat.core.application.Application": [[103, "qat-core-application-application"]], "qat.core.BatchResult": [[96, "qat-core-batchresult"]], "qat.core.assertion.assert_qpu": [[94, "qat-core-assertion-assert-qpu"]], "qat.comm.shared.ttypes.IntermediateMeasurement": [[89, "qat-comm-shared-ttypes-intermediatemeasurement"]], "qat.core.Job": [[101, "qat-core-job"]], "qat.comm.exceptions.ttypes.ErrorType": [[81, "qat-comm-exceptions-ttypes-errortype"]], "qat.comm.datamodel.ttypes.GateDefinition": [[78, "qat-comm-datamodel-ttypes-gatedefinition"]], "qat.pylinalg.simulator.measure": [[71, "qat-pylinalg-simulator-measure"]], "qat.pylinalg.simulator.simulate": [[75, "qat-pylinalg-simulator-simulate"]], "qat.interop.qiskit.QiskitJob": [[64, "qat-interop-qiskit-qiskitjob"]], "qat.interop.qiskit.qlm_to_qiskit": [[66, "qat-interop-qiskit-qlm-to-qiskit"]], "qat.pylinalg.simulator.reset": [[74, "qat-pylinalg-simulator-reset"]], "qat.comm.exceptions.ttypes.PluginException": [[82, "qat-comm-exceptions-ttypes-pluginexception"]], "qat.pylinalg.simulator": [[69, "qat-pylinalg-simulator"]], "qat.comm.datamodel": [[77, "qat-comm-datamodel"]], "qat.interop.qiskit.QPUToBackend": [[67, "qat-interop-qiskit-qputobackend"]], "qat.interop.qiskit.qiskit_to_qlm": [[63, "qat-interop-qiskit-qiskit-to-qlm"]], "qat.pylinalg.simulator.raise_break": [[73, "qat-pylinalg-simulator-raise-break"]], "qat.interop.qiskit.runtime.QiskitRuntimeQPU": [[65, "qat-interop-qiskit-runtime-qiskitruntimeqpu"]], "qat.comm.datamodel.ttypes.Op": [[79, "qat-comm-datamodel-ttypes-op"]], "qat.comm.exceptions": [[80, "qat-comm-exceptions"]], "qat.comm.exceptions.ttypes.QPUException": [[83, "qat-comm-exceptions-ttypes-qpuexception"]], "qat.pylinalg.simulator.project": [[72, "qat-pylinalg-simulator-project"]], "qat.pylinalg": [[68, "qat-pylinalg"]], "qat.comm": [[76, "qat-comm"]], "qat.pylinalg.simulator.mat2nparray": [[70, "qat-pylinalg-simulator-mat2nparray"]], "qat.core.Term": [[129, "qat-core-term"]], "qat.core.Topology": [[130, "qat-core-topology"]], "qat.devices.IBM_JOHANNESBURG": [[138, "qat-devices-ibm-johannesburg"]], "qat.devices.AllToAll": [[134, "qat-devices-alltoall"]], "qat.core.Variable": [[132, "qat-core-variable"]], "qat.devices.RIGETTI_AGAVE": [[145, "qat-devices-rigetti-agave"]], "qat.devices.LineDevice": [[144, "qat-devices-linedevice"]], "qat.devices.IBM_BURLINGTON": [[137, "qat-devices-ibm-burlington"]], "qat.devices.IBM_RUESCHLIKON": [[140, "qat-devices-ibm-rueschlikon"]], "qat.core.TopologyType": [[131, "qat-core-topologytype"]], "qat.core.wrappers.result.State": [[128, "qat-core-wrappers-result-state"]], "qat.devices.GridDevice": [[136, "qat-devices-griddevice"]], "qat.core.Sample": [[126, "qat-core-sample"]], "qat.devices.IBM_TOKYO": [[142, "qat-devices-ibm-tokyo"]], "qat.core.Schedule": [[127, "qat-core-schedule"]], "qat.devices.IBM_SINGAPORE": [[141, "qat-devices-ibm-singapore"]], "qat.devices.RIGETTI_ASPEN": [[146, "qat-devices-rigetti-aspen"]], "qat.devices.GOOGLE_SYCAMORE": [[135, "qat-devices-google-sycamore"]], "qat.devices": [[133, "qat-devices"]], "Predefined devices": [[133, "predefined-devices"]], "Device generators": [[133, "device-generators"]], "qat.devices.IBM_YORKTOWN": [[143, "qat-devices-ibm-yorktown"]], "qat.devices.IBM_MELBOURNE": [[139, "qat-devices-ibm-melbourne"]], "qat.quops.make_avg_fid_equiv_depol_channel": [[308, "qat-quops-make-avg-fid-equiv-depol-channel"]], "qat.quops.metrics.get_entanglement_process_fidelity": [[300, "qat-quops-metrics-get-entanglement-process-fidelity"]], "qat.quops.math_util.make_pauli_matrix_basis": [[311, "qat-quops-math-util-make-pauli-matrix-basis"]], "qat.quops.math_util.make_standard_matrix_basis": [[312, "qat-quops-math-util-make-standard-matrix-basis"]], "qat.quops.make_depolarizing_channel": [[309, "qat-quops-make-depolarizing-channel"]], "qat.quops.math_util.convert_pauli_vec_to_density_mat": [[297, "qat-quops-math-util-convert-pauli-vec-to-density-mat"]], "qat.quops.math_util.are_equal_up_to_phase": [[294, "qat-quops-math-util-are-equal-up-to-phase"]], "qat.quops.metrics.get_process_distance": [[301, "qat-quops-metrics-get-process-distance"]], "qat.quops.is_unital": [[307, "qat-quops-is-unital"]], "qat.quops.math_util.make_standard_vector_basis": [[313, "qat-quops-math-util-make-standard-vector-basis"]], "qat.quops.make_generalized_amplitude_damping": [[310, "qat-quops-make-generalized-amplitude-damping"]], "qat.quops.metrics.get_average_process_fidelity": [[298, "qat-quops-metrics-get-average-process-fidelity"]], "qat.quops.math_util.convert_density_mat_to_pauli_vec": [[296, "qat-quops-math-util-convert-density-mat-to-pauli-vec"]], "qat.quops.metrics.get_state_fidelity": [[302, "qat-quops-metrics-get-state-fidelity"]], "qat.quops.is_trace_preserving": [[305, "qat-quops-is-trace-preserving"]], "qat.quops.is_completely_positive": [[304, "qat-quops-is-completely-positive"]], "qat.quops.ChannelRepresentations": [[295, "qat-quops-channelrepresentations"]], "qat.quops.math_util.multikron": [[314, "qat-quops-math-util-multikron"]], "qat.quops.metrics.get_diamond_norm": [[299, "qat-quops-metrics-get-diamond-norm"]], "qat.quops.metrics.get_trace_distance": [[303, "qat-quops-metrics-get-trace-distance"]], "qat.quops.is_trace_reducing": [[306, "qat-quops-is-trace-reducing"]], "qat.plugins.MultipleLaunchesAnalyzer": [[273, "qat-plugins-multiplelaunchesanalyzer"]], "qat.qpus.SimulatedAnnealing": [[287, "qat-qpus-simulatedannealing"]], "qat.plugins.SPSAMinimizePlugin": [[281, "qat-plugins-spsaminimizeplugin"]], "qat.plugins.SeqOptim": [[280, "qat-plugins-seqoptim"]], "qat.qpus.CLinalg": [[285, "qat-qpus-clinalg"]], "High-level Quantum Processing Unit": [[285, "high-level-quantum-processing-unit"]], "C++ Low-level Statevector": [[285, "c-low-level-statevector"]], "Pybind interface": [[285, "pybind-interface"]], "qat.quops": [[293, "qat-quops"]], "Quantum Channels": [[293, "quantum-channels"]], "Predefined quantum channels": [[293, "predefined-quantum-channels"]], "Metrics": [[293, "module-qat.quops.metrics"]], "Operator basis": [[293, "operator-basis"]], "Mathematical utilities": [[293, "mathematical-utilities"]], "qat.qpus": [[284, "qat-qpus"]], "Gate-based QPUs": [[284, "gate-based-qpus"]], "Simulated Annealing": [[284, "simulated-annealing"]], "Abstract and utility QPU classes": [[284, "abstract-and-utility-qpu-classes"]], "qat.qpus.RemoteQPU": [[292, "qat-qpus-remoteqpu"]], "qat.plugins.Optimizer": [[275, "qat-plugins-optimizer"]], "qat.qpus.QPUHandler": [[291, "qat-qpus-qpuhandler"]], "qat.qpus.get_current_qpu": [[289, "qat-qpus-get-current-qpu"]], "qat.plugins.ObservableSplitter": [[274, "qat-plugins-observablesplitter"]], "qat.qpus.PyLinalg": [[286, "qat-qpus-pylinalg"]], "Quantum Processing Unit": [[286, "quantum-processing-unit"]], "qat.plugins.QuameleonPlugin": [[277, "qat-plugins-quameleonplugin"]], "qat.plugins.ZeroNoiseExtrapolator": [[283, "qat-plugins-zeronoiseextrapolator"]], "qat.plugins.RemotePlugin": [[278, "qat-plugins-remoteplugin"]], "qat.plugins.ScipyMinimizePlugin": [[279, "qat-plugins-scipyminimizeplugin"]], "qat.plugins.PSOMinimizePlugin": [[276, "qat-plugins-psominimizeplugin"]], "qat.plugins.TransformObservable": [[282, "qat-plugins-transformobservable"]], "qat.qpus.ClassicalQPU": [[288, "qat-qpus-classicalqpu"]], "qat.qpus.get_default_qpu": [[290, "qat-qpus-get-default-qpu"]], "ProjectQ interoperability": [[332, "projectq-interoperability"]], "Translating quantum circuits": [[332, "translating-quantum-circuits"], [330, "translating-quantum-circuits"], [331, "translating-quantum-circuits"], [333, "translating-quantum-circuits"], [329, "translating-quantum-circuits"]], "PyQuil interoperability": [[330, "pyquil-interoperability"]], "Connecting to a QPU": [[330, "connecting-to-a-qpu"]], "qat.quops.ParametricQuantumChannel": [[318, "qat-quops-parametricquantumchannel"]], "Contributing to myQLM": [[327, "contributing-to-myqlm"]], "qat.quops.math_util.partial_trace": [[319, "qat-quops-math-util-partial-trace"]], "qat.quops.QuantumChannel": [[320, "qat-quops-quantumchannel"]], "qat.quops.ParametricAmplitudeDamping": [[315, "qat-quops-parametricamplitudedamping"]], "Release notes": [[326, "release-notes"]], "What\u2019s new in myQLM 1.9.1": [[326, "what-s-new-in-myqlm-1-9-1"]], "Defining quantum circuits / jobs using a Python function": [[326, "defining-quantum-circuits-jobs-using-a-python-function"]], "Updated features": [[326, "updated-features"]], "Fixes": [[326, "fixes"]], "What\u2019s new in myQLM 1.7.3": [[326, "what-s-new-in-myqlm-1-7-3"]], "What\u2019s new in myQLM 1.7.2": [[326, "what-s-new-in-myqlm-1-7-2"]], "What\u2019s new in myQLM 1.7.1": [[326, "what-s-new-in-myqlm-1-7-1"]], "What\u2019s new in myQLM 1.6.1": [[326, "what-s-new-in-myqlm-1-6-1"]], "What\u2019s new in myQLM 1.5.1": [[326, "what-s-new-in-myqlm-1-5-1"]], "What\u2019s new in myQLM 1.4.0": [[326, "what-s-new-in-myqlm-1-4-0"]], "Cirq interoperability": [[331, "cirq-interoperability"]], "qat.quops.QuantumChannelChi": [[321, "qat-quops-quantumchannelchi"]], "qat.quops.QuantumChannelPTM": [[324, "qat-quops-quantumchannelptm"]], "qat.quops.QuantumChannelKraus": [[323, "qat-quops-quantumchannelkraus"]], "Combinatorial optimization": [[334, "combinatorial-optimization"]], "qat.quops.QuantumChannelChoi": [[322, "qat-quops-quantumchannelchoi"]], "NP-hard problems": [[335, "np-hard-problems"]], "Unconstrained Graph Problems": [[335, "unconstrained-graph-problems"]], "Constrained Graph Problems": [[335, "constrained-graph-problems"]], "Other problems": [[335, "other-problems"]], "Simulated Quantum Annealing Benchmarking and Performance": [[335, "simulated-quantum-annealing-benchmarking-and-performance"]], "OpenQASM Compiler": [[333, "openqasm-compiler"]], "Qiskit interoperability": [[329, "qiskit-interoperability"]], "Connecting to a QPU/Backend": [[329, "connecting-to-a-qpu-backend"]], "qat.quops.ParametricPureDephasing": [[317, "qat-quops-parametricpuredephasing"]], "Interoperability with gate-based framework": [[328, "interoperability-with-gate-based-framework"]], "Available binders": [[328, "available-binders"]], "Demos": [[325, "demos"], [351, "demos"]], "Tutorials": [[325, "tutorials"]], "Running digital quantum simulations for spin and fermionic systems": [[325, "running-digital-quantum-simulations-for-spin-and-fermionic-systems"]], "Programming with qat.lang": [[325, "programming-with-qat-lang"]], "Basic quantum algorithms": [[325, "basic-quantum-algorithms"]], "Adding plugins to your computation stack": [[325, "adding-plugins-to-your-computation-stack"]], "Designing and running variational algorithms in the QLM": [[325, "designing-and-running-variational-algorithms-in-the-qlm"]], "First steps with the QLM": [[325, "first-steps-with-the-qlm"]], "Combinatorial Optimization Problems": [[325, "combinatorial-optimization-problems"]], "interoperability": [[325, "interoperability"]], "Simulation of quantum circuits on the QLM: introduction": [[325, "simulation-of-quantum-circuits-on-the-qlm-introduction"]], "qat.quops.ParametricGateNoise": [[316, "qat-quops-parametricgatenoise"]], "qat.interop.projectq.AqasmEngine": [[54, "qat-interop-projectq-aqasmengine"]], "qat.interop.pyquil": [[56, "qat-interop-pyquil"]], "Running variational algorithms": [[44, "running-variational-algorithms"]], "Extending a QPU to support variational jobs": [[44, "extending-a-qpu-to-support-variational-jobs"]], "Differentiating jobs": [[44, "differentiating-jobs"]], "Testing for several initializations of the parameters": [[44, "testing-for-several-initializations-of-the-parameters"]], "Getting information from the QPU": [[43, "getting-information-from-the-qpu"]], "Creating custom specifications": [[43, "creating-custom-specifications"]], "qat.interop": [[47, "qat-interop"]], "qat.interop.projectq.AqasmPrinter": [[55, "qat-interop-projectq-aqasmprinter"]], "qat.interop.pyquil.PyquilQPU": [[58, "qat-interop-pyquil-pyquilqpu"]], "qat.interop.pyquil.qlm_to_pyquil": [[59, "qat-interop-pyquil-qlm-to-pyquil"]], "qat": [[46, "qat"]], "qat.interop.qiskit.AsyncBackendToQPU": [[61, "qat-interop-qiskit-asyncbackendtoqpu"]], "qat.interop.openqasm": [[51, "qat-interop-openqasm"]], "Make you own junction": [[42, "make-you-own-junction"]], "A concrete example": [[42, "a-concrete-example"], [41, "a-concrete-example"]], "qat.interop.projectq": [[53, "qat-interop-projectq"]], "qat.interop.cirq.cirq_to_qlm": [[49, "qat-interop-cirq-cirq-to-qlm"]], "qat.interop.cirq": [[48, "qat-interop-cirq"]], "qat.interop.openqasm.OqasmParser": [[52, "qat-interop-openqasm-oqasmparser"]], "qat.interop.pyquil.pyquil_to_qlm": [[57, "qat-interop-pyquil-pyquil-to-qlm"]], "qat.interop.cirq.qlm_to_cirq": [[50, "qat-interop-cirq-qlm-to-cirq"]], "API reference": [[45, "api-reference"]], "qat.interop.qiskit": [[60, "qat-interop-qiskit"]], "qat.interop.qiskit.BackendToQPU": [[62, "qat-interop-qiskit-backendtoqpu"]], "qat.lang.AQASM.arithmetic.modular_exp": [[210, "qat-lang-aqasm-arithmetic-modular-exp"]], "qat.lang.AQASM.bits.Qbit": [[227, "qat-lang-aqasm-bits-qbit"]], "qat.lang.AQASM.arithmetic.mult_const_mod": [[212, "qat-lang-aqasm-arithmetic-mult-const-mod"]], "qat.lang.AQASM.qftarith.add_const": [[219, "qat-lang-aqasm-qftarith-add-const"]], "qat.lang.AQASM.qbool.QClause": [[230, "qat-lang-aqasm-qbool-qclause"]], "qat.lang.AQASM.classarith": [[213, "qat-lang-aqasm-classarith"]], "References": [[213, "references"], [217, "references"], [207, "references"], [205, "references"]], "qat.lang.AQASM.gates.ParamGate": [[223, "qat-lang-aqasm-gates-paramgate"]], "qat.lang.AQASM.qftarith.mult_const": [[221, "qat-lang-aqasm-qftarith-mult-const"]], "qat.lang.algorithms.phase_estimation": [[224, "qat-lang-algorithms-phase-estimation"]], "qat.lang.AQASM.arithmetic.mult_const": [[211, "qat-lang-aqasm-arithmetic-mult-const"]], "qat.lang.AQASM.classarith.cuccaro_add": [[216, "qat-lang-aqasm-classarith-cuccaro-add"]], "qat.lang.AQASM.qbool.QBoolArray": [[229, "qat-lang-aqasm-qbool-qboolarray"]], "qat.lang.AQASM.qftarith.QFT": [[222, "qat-lang-aqasm-qftarith-qft"]], "qat.lang.Program": [[225, "qat-lang-program"]], "qat.lang.AQASM.qftarith": [[217, "qat-lang-aqasm-qftarith"]], "qat.lang.AQASM.qftarith.mult": [[220, "qat-lang-aqasm-qftarith-mult"]], "qat.lang.AQASM.qbool.QBool": [[228, "qat-lang-aqasm-qbool-qbool"]], "qat.lang.AQASM.qint.QArithExp": [[226, "qat-lang-aqasm-qint-qarithexp"]], "qat.lang.AQASM.classarith.add": [[214, "qat-lang-aqasm-classarith-add"]], "qat.lang.AQASM.qftarith.add": [[218, "qat-lang-aqasm-qftarith-add"]], "qat.lang.AQASM.classarith.add_const": [[215, "qat-lang-aqasm-classarith-add-const"]], "qat.lang.AQASM.bits.Cbit": [[199, "qat-lang-aqasm-bits-cbit"]], "qat.hardware.GatesSpecification": [[191, "qat-hardware-gatesspecification"]], "qat.lang.AQASM.arithmetic.add_mod": [[209, "qat-lang-aqasm-arithmetic-add-mod"]], "qat.lang.AQASM.bits.CRegister": [[200, "qat-lang-aqasm-bits-cregister"]], "qat.hardware.HardwareModel": [[192, "qat-hardware-hardwaremodel"]], "qat.lang.algorithms.amplification_step": [[196, "qat-lang-algorithms-amplification-step"]], "qat.hardware.make_depolarizing_hardware_model": [[193, "qat-hardware-make-depolarizing-hardware-model"]], "qat.lang.algorithms.amplification.grover_diffusion": [[203, "qat-lang-algorithms-amplification-grover-diffusion"]], "qat.hardware.DefaultHardwareModel": [[190, "qat-hardware-defaulthardwaremodel"]], "qat.lang.AQASM.arithmetic.add_const_mod": [[208, "qat-lang-aqasm-arithmetic-add-const-mod"]], "qat.lang.AbstractGate": [[195, "qat-lang-abstractgate"]], "qat.lang.linking.Linker": [[206, "qat-lang-linking-linker"]], "qat.lang.algorithms.amplification.householder": [[204, "qat-lang-algorithms-amplification-householder"]], "qat.lang.AQASM.arithmetic": [[207, "qat-lang-aqasm-arithmetic"]], "qat.hardware.DefaultGatesSpecification": [[189, "qat-hardware-defaultgatesspecification"]], "qat.lang.models.KPTree": [[205, "qat-lang-models-kptree"]], "qat.lang.AQASM.bits.BoolFormula": [[197, "qat-lang-aqasm-bits-boolformula"]], "qat.lang.build_gate": [[198, "qat-lang-build-gate"]], "qat.lang": [[194, "qat-lang"]], "Programming tools": [[194, "programming-tools"]], "Gate structures": [[194, "gate-structures"]], "Quantum types": [[194, "quantum-types"]], "Quantum boolean and expressions": [[194, "quantum-boolean-and-expressions"]], "Quantum integers": [[194, "quantum-integers"], [17, "quantum-integers"]], "Managing registers": [[194, "managing-registers"]], "Gate set management": [[194, "gate-set-management"]], "Linker and low level circuit manipulation": [[194, "linker-and-low-level-circuit-manipulation"]], "Quantum labraries and basic algorithms": [[194, "quantum-labraries-and-basic-algorithms"]], "Arithmetic routines": [[194, "arithmetic-routines"]], "State preparatation and QRAM": [[194, "state-preparatation-and-qram"]], "Algorithms": [[194, "algorithms"]], "qat.lang.AQASM.misc.generate_gate_set": [[202, "qat-lang-aqasm-misc-generate-gate-set"]], "qat.lang.AQASM.gates.Gate": [[201, "qat-lang-aqasm-gates-gate"]], "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation": [[172, "qat-fermion-chemistry-pyscf-tools-perform-pyscf-computation"]], "qat.fermion.transforms.transform_to_parity_basis": [[178, "qat-fermion-transforms-transform-to-parity-basis"]], "qat.generators.KCliqueGenerator": [[184, "qat-generators-kcliquegenerator"]], "qat.hardware": [[188, "qat-hardware"]], "Hardware model and gates specifications": [[188, "hardware-model-and-gates-specifications"]], "Predefined hardware models": [[188, "predefined-hardware-models"]], "qat.generators.MaxCutGenerator": [[185, "qat-generators-maxcutgenerator"]], "qat.generators.GraphColouringGenerator": [[182, "qat-generators-graphcolouringgenerator"]], "qat.fermion.chemistry.wrapper.MolecularHamiltonian": [[169, "qat-fermion-chemistry-wrapper-molecularhamiltonian"]], "qat.fermion.transforms.transform_to_jw_basis": [[177, "qat-fermion-transforms-transform-to-jw-basis"]], "qat.generators.CombinatorialOptimizerGenerator": [[181, "qat-generators-combinatorialoptimizergenerator"]], "qat.generators.GraphPartitioningGenerator": [[183, "qat-generators-graphpartitioninggenerator"]], "qat.generators.AbstractGenerator": [[180, "qat-generators-abstractgenerator"]], "qat.fermion.chemistry.ucc.select_active_orbitals": [[173, "qat-fermion-chemistry-ucc-select-active-orbitals"]], "qat.generators": [[179, "qat-generators"]], "Combinatorial Optimization Generators": [[179, "combinatorial-optimization-generators"]], "Generator Utilities": [[179, "generator-utilities"]], "qat.generators.VertexCoverGenerator": [[187, "qat-generators-vertexcovergenerator"]], "qat.fermion.phase_estimation.perform_phase_estimation": [[171, "qat-fermion-phase-estimation-perform-phase-estimation"]], "qat.fermion.trotterisation.make_trotterisation_routine": [[168, "qat-fermion-trotterisation-make-trotterisation-routine"]], "qat.generators.RemoteBatchGenerator": [[186, "qat-generators-remotebatchgenerator"]], "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis": [[175, "qat-fermion-chemistry-ucc-transform-integrals-to-new-basis"]], "qat.fermion.transforms.transform_to_bk_basis": [[176, "qat-fermion-transforms-transform-to-bk-basis"]], "qat.fermion.hamiltonians.SpinHamiltonian": [[174, "qat-fermion-hamiltonians-spinhamiltonian"]], "qat.fermion.chemistry.wrapper.MoleculeInfo": [[170, "qat-fermion-chemistry-wrapper-moleculeinfo"]], "qat.opt.mixing_factory.SimpleInitialState": [[254, "qat-opt-mixing-factory-simpleinitialstate"]], "qat.plugins.CircuitInliner": [[268, "qat-plugins-circuitinliner"]], "qat.plugins": [[265, "qat-plugins"]], "Circuit rewriting plugins": [[265, "circuit-rewriting-plugins"]], "Variational optimization plugins": [[265, "variational-optimization-plugins"]], "Plugin for fermionic systems": [[265, "plugin-for-fermionic-systems"]], "Plugin utilities": [[265, "plugin-utilities"]], "qat.opt.results.CombinatorialResult": [[256, "qat-opt-results-combinatorialresult"]], "qat.opt.results.KCliqueResult": [[258, "qat-opt-results-kcliqueresult"]], "qat.plugins.CostFunctionPlugin": [[269, "qat-plugins-costfunctionplugin"]], "qat.opt.NumberPartitioning": [[260, "qat-opt-numberpartitioning"]], "qat.opt.mixing_factory.InitialStateBuilder": [[253, "qat-opt-mixing-factory-initialstatebuilder"]], "qat.opt.results.VertexCoverResult": [[259, "qat-opt-results-vertexcoverresult"]], "qat.plugins.Display": [[270, "qat-plugins-display"]], "qat.opt.VertexCover": [[264, "qat-opt-vertexcover"]], "qat.plugins.Junction": [[272, "qat-plugins-junction"]], "qat.plugins.AdaptVQEPlugin": [[267, "qat-plugins-adaptvqeplugin"]], "qat.opt.mixing_factory.IndependentAnnealing": [[252, "qat-opt-mixing-factory-independentannealing"]], "qat.opt.QUBO": [[261, "qat-opt-qubo"]], "qat.plugins.AbstractPlugin": [[266, "qat-plugins-abstractplugin"]], "qat.plugins.GradientDescentOptimizer": [[271, "qat-plugins-gradientdescentoptimizer"]], "qat.opt.results.GraphPartitioningResult": [[257, "qat-opt-results-graphpartitioningresult"]], "qat.opt.schedule_generator.ScheduleGenerator": [[262, "qat-opt-schedule-generator-schedulegenerator"]], "qat.opt.results": [[255, "qat-opt-results"]], "Combinatorial Optimization Generators Results": [[255, "combinatorial-optimization-generators-results"]], "qat.opt.boolexpr.Var": [[263, "qat-opt-boolexpr-var"]], "Make your own QPU": [[36, "make-your-own-qpu"]], "Method submit_job": [[36, "method-submit-job"]], "Method get_specs": [[36, "method-get-specs"]], "Sample Job": [[30, "sample-job"]], "Observable Job": [[31, "observable-job"]], "Quantum Processing Unit (QPU)": [[34, "quantum-processing-unit-qpu"]], "Make your own plugin": [[41, "make-your-own-plugin"]], "Method compile": [[41, "method-compile"]], "Method post_process": [[41, "method-post-process"]], "Automated batch generation": [[32, "automated-batch-generation"]], "Constructing one or multiple Jobs (using Batch)": [[29, "constructing-one-or-multiple-jobs-using-batch"]], "General Combinatorial Problems": [[26, "general-combinatorial-problems"]], "Quadratic Unconstrained Binary Optimization (QUBO)": [[25, "quadratic-unconstrained-binary-optimization-qubo"]], "Manipulating schedules": [[21, "manipulating-schedules"]], "Result of a quantum program": [[33, "result-of-a-quantum-program"]], "Executing quantum programs": [[28, "executing-quantum-programs"], [2, "executing-quantum-programs"]], "Creating observables": [[27, "creating-observables"]], "Observables": [[27, "observables"]], "Observables operations": [[27, "observables-operations"]], "Single term observables": [[27, "single-term-observables"]], "Using an observable": [[27, "using-an-observable"]], "Annealing computing": [[35, "annealing-computing"]], "Inner workings": [[35, "id10"]], "Gate based computing": [[37, "gate-based-computing"]], "QPU Emulators": [[37, "id4"]], "CLinalg: C++ Linear-algebra-based simulator": [[37, "clinalg-c-linear-algebra-based-simulator"], [38, "clinalg-c-linear-algebra-based-simulator"]], "PyLinalg: Python Linear-algebra-based simulator": [[37, "pylinalg-python-linear-algebra-based-simulator"], [39, "pylinalg-python-linear-algebra-based-simulator"]], "Annealing programming": [[23, "annealing-programming"]], "Analog Jobs": [[22, "analog-jobs"]], "Ising Hamiltonians": [[24, "ising-hamiltonians"]], "Bibliography": [[24, "bibliography"], [343, "bibliography"]], "Extending a QPU (by using Plugins)": [[40, "extending-a-qpu-by-using-plugins"]], "qat.lang.algorithms.quantum_counting": [[237, "qat-lang-algorithms-quantum-counting"]], "qat.opt.mixing_factory": [[251, "qat-opt-mixing-factory"]], "Creating custom Quantum Annealing Jobs": [[251, "creating-custom-quantum-annealing-jobs"]], "qat.lang.QRoutine": [[236, "qat-lang-qroutine"]], "qat.lang.qrout": [[235, "qat-lang-qrout"]], "qat.opt.Ising": [[247, "qat-opt-ising"]], "qat.opt.circuit_generator.CircuitGenerator": [[242, "qat-opt-circuit-generator-circuitgenerator"]], "qat.opt.MixingFactory": [[250, "qat-opt-mixingfactory"]], "qat.opt.MaxCut": [[249, "qat-opt-maxcut"]], "qat.vsolve.ansatz.AnsatzFactory": [[240, "qat-vsolve-ansatz-ansatzfactory"]], "qat.opt": [[239, "qat-opt"]], "Generic combinatorial optimization": [[239, "generic-combinatorial-optimization"]], "Quadratic problems: Ising and QUBO": [[239, "quadratic-problems-ising-and-qubo"]], "Classes for the supported NP-Hard problems": [[239, "classes-for-the-supported-np-hard-problems"]], "Generating QAOA Ans\u00e4tze or QA Jobs": [[239, "generating-qaoa-ansatze-or-qa-jobs"]], "qat.opt.boolexpr.Clause": [[243, "qat-opt-boolexpr-clause"]], "qat.lang.AQASM.bits.QRegister": [[234, "qat-lang-aqasm-bits-qregister"]], "qat.lang.AQASM.qint.QInt": [[233, "qat-lang-aqasm-qint-qint"]], "qat.lang.algorithms.amplification.uniform_distribution": [[238, "qat-lang-algorithms-amplification-uniform-distribution"]], "qat.opt.GraphColouring": [[245, "qat-opt-graphcolouring"]], "qat.opt.GraphPartitioning": [[246, "qat-opt-graphpartitioning"]], "qat.opt.KClique": [[248, "qat-opt-kclique"]], "qat.lang.AQASM.qint.QCompExp": [[231, "qat-lang-aqasm-qint-qcompexp"]], "qat.lang.qfunc": [[232, "qat-lang-qfunc"]], "qat.opt.BILP": [[241, "qat-opt-bilp"]], "qat.opt.CombinatorialProblem": [[244, "qat-opt-combinatorialproblem"]], "Quantum programs": [[13, "quantum-programs"]], "Allocating qubit and classical registers": [[13, "allocating-qubit-and-classical-registers"]], "Applying quantum gate": [[13, "applying-quantum-gate"]], "Advanced operations": [[13, "advanced-operations"]], "Generating the circuit": [[13, "generating-the-circuit"]], "Exporting the circuit": [[13, "exporting-the-circuit"]], "Writing quantum programs": [[9, "writing-quantum-programs"], [1, "writing-quantum-programs"]], "Ancillae management and compute scopes": [[16, "ancillae-management-and-compute-scopes"]], "Automated ancillae management": [[16, "automated-ancillae-management"]], "Compute/uncompute scopes": [[16, "compute-uncompute-scopes"]], "Example of a grover algorithm": [[1, "example-of-a-grover-algorithm"]], "The diffusion": [[1, "the-diffusion"]], "The oracle": [[1, "the-oracle"]], "myQLM license": [[5, "myqlm-license"]], "Proprietary part": [[5, "proprietary-part"]], "Open source part": [[5, "open-source-part"]], "Creating and adding quantum gates to a circuit": [[11, "creating-and-adding-quantum-gates-to-a-circuit"]], "Native gates, controls and daggers": [[11, "native-gates-controls-and-daggers"]], "User defined parametrized gates (AbstractGate)": [[11, "user-defined-parametrized-gates-abstractgate"]], "Matrix definition": [[11, "matrix-definition"]], "Subcircuit definition": [[11, "subcircuit-definition"]], "Arity generator": [[11, "arity-generator"]], "Deprecated custom gates": [[11, "deprecated-custom-gates"]], "Gate-based programming": [[10, "gate-based-programming"]], "Variational algorithms with Qaptiva": [[3, "variational-algorithms-with-qaptiva"]], "myQLM Installation on MacOS": [[6, "myqlm-installation-on-macos"]], "User guide": [[8, "user-guide"]], "Libraries built upon Qaptiva": [[8, "libraries-built-upon-qaptiva"]], "Quantum routines (and Oracles)": [[14, "quantum-routines-and-oracles"]], "Atos Quantum Assembler (AQASM)": [[18, "atos-quantum-assembler-aqasm"]], "The text format": [[18, "the-text-format"]], "Header": [[18, "header"]], "Instructions": [[18, "instructions"]], "List of gates": [[18, "list-of-gates"]], "Compiling .aqasm files": [[18, "compiling-aqasm-files"]], "Compilation time linking": [[18, "compilation-time-linking"]], "Building schedules": [[20, "building-schedules"]], "Hamiltonian as a list of coefficients and Observables": [[20, "hamiltonian-as-a-list-of-coefficients-and-observables"]], "Using abstract variables": [[20, "using-abstract-variables"]], "Hamiltonian as one Observable": [[20, "hamiltonian-as-one-observable"]], "Getting started": [[0, "id1"]], "Oracles and quantum types": [[17, "oracles-and-quantum-types"]], "Quantum booleans, quantum conditionals, and quantum oracles": [[17, "quantum-booleans-quantum-conditionals-and-quantum-oracles"]], "Allocation": [[17, "allocation"], [17, "id1"]], "Logical expressions": [[17, "logical-expressions"]], "Evaluating expressions": [[17, "evaluating-expressions"]], "Quantum conditionals and with statements": [[17, "quantum-conditionals-and-with-statements"]], "Building phase oracles": [[17, "building-phase-oracles"]], "Setting a classical value": [[17, "setting-a-classical-value"]], "Arithmetic expressions": [[17, "arithmetic-expressions"]], "Conditionals on quantum integers": [[17, "conditionals-on-quantum-integers"]], "Example: Grover oracle for graph coloring": [[17, "example-grover-oracle-for-graph-coloring"]], "Analog programming": [[19, "analog-programming"]], "Background": [[19, "background"]], "Creating analog Jobs": [[19, "creating-analog-jobs"]], "Installing myQLM": [[4, "installing-myqlm"]], "Prerequisites": [[4, "prerequisites"]], "Compatibility Matrix": [[4, "compatibility-matrix"]], "Install": [[4, "id8"]], "Install myQLM package": [[4, "install-myqlm-package"]], "Interoperability": [[4, "interoperability"]], "Naming quantum routines": [[15, "naming-quantum-routines"]], "Lifting Python functions into quantum gates": [[15, "lifting-python-functions-into-quantum-gates"]], "Linking at circuit extraction": [[15, "linking-at-circuit-extraction"]], "Creating variational circuits": [[12, "creating-variational-circuits"]], "Variational jobs": [[12, "variational-jobs"]], "Binding variables": [[12, "binding-variables"]], "Problem generators": [[345, "problem-generators"]], "NP-hard problems generators": [[345, "np-hard-problems-generators"]], "Number Partitioning": [[341, "number-partitioning"]], "Binary Integer Linear Programming (BILP)": [[336, "binary-integer-linear-programming-bilp"]], "Graph Partitioning Generator": [[347, "graph-partitioning-generator"]], "Plugins": [[354, "plugins"]], "Quantum Annealing (QA)": [[344, "quantum-annealing-qa"]], "Vertex Cover": [[342, "vertex-cover"]], "Quantum application (including Ans\u00e4tze and state preparation)": [[353, "quantum-application-including-ansatze-and-state-preparation"]], "Table of Contents": [[353, "table-of-contents"], [352, "table-of-contents"]], "Variational Quantum Eigensolver (VQE)": [[353, "variational-quantum-eigensolver-vqe"]], "Quantum Chemistry tools for VQE": [[353, "quantum-chemistry-tools-for-vqe"]], "MolecularHamiltonian": [[353, "molecularhamiltonian"]], "MoleculeInfo": [[353, "moleculeinfo"]], "Trotterization tools": [[353, "trotterization-tools"]], "Migrating code based on deprecated library qat.dqs": [[355, "migrating-code-based-on-deprecated-library-qat-dqs"]], "Max Cut Generator": [[346, "max-cut-generator"]], "Spin and fermionic systems": [[351, "spin-and-fermionic-systems"]], "myQLM documentation": [[356, "myqlm-documentation"]], "Graph Partitioning": [[338, "graph-partitioning"]], "K-Clique Generator": [[348, "k-clique-generator"]], "Graph Colouring": [[337, "graph-colouring"]], "Max Cut": [[340, "max-cut"]], "Creating and manipulating Hamiltonians": [[352, "creating-and-manipulating-hamiltonians"]], "Defining a Hamiltonian": [[352, "defining-a-hamiltonian"]], "Spin Hamiltonians": [[352, "spin-hamiltonians"]], "Fermionic Hamiltonians": [[352, "fermionic-hamiltonians"]], "Fermionic Hamiltonian using one and two-electrons integrals": [[352, "fermionic-hamiltonian-using-one-and-two-electrons-integrals"]], "The get_matrix() method": [[352, "the-get-matrix-method"]], "Fermionic to spin representation": [[352, "fermionic-to-spin-representation"]], "Example": [[352, "example"]], "Spin and fermionic Hamiltonian operations": [[352, "spin-and-fermionic-hamiltonian-operations"]], "Some Hamiltonian constructors": [[352, "some-hamiltonian-constructors"]], "Graph Colouring Generator": [[350, "graph-colouring-generator"]], "KClique": [[339, "kclique"]], "Vertex Cover Generator": [[349, "vertex-cover-generator"]], "Quantum Approximate Optimization Algorithm (QAOA)": [[343, "quantum-approximate-optimization-algorithm-qaoa"]]}, "indexentries": {"module": [[46, "module-qat"], [47, "module-qat.interop"], [48, "module-qat.interop.cirq"], [51, "module-qat.interop.openqasm"], [53, "module-qat.interop.projectq"], [56, "module-qat.interop.pyquil"], [60, "module-qat.interop.qiskit"], [68, "module-qat.pylinalg"], [69, "module-qat.pylinalg.simulator"], [76, "module-qat.comm"], [77, "module-qat.comm.datamodel"], [80, "module-qat.comm.exceptions"], [84, "module-qat.comm.resource"], [88, "module-qat.comm.shared"], [91, "module-qat.core"], [102, "module-qat.core.application"], [105, "module-qat.core.circuit_builder"], [110, "module-qat.core.gate_set"], [114, "module-qat.core.qpu"], [116, "module-qat.core.spins"], [119, "module-qat.core.variables"], [133, "module-qat.devices"], [149, "module-qat.fermion"], [149, "module-qat.fermion.chemistry"], [149, "module-qat.fermion.chemistry.qse"], [149, "module-qat.fermion.chemistry.ucc"], [149, "module-qat.fermion.circuits"], [149, "module-qat.fermion.hamiltonians"], [149, "module-qat.fermion.phase_estimation"], [149, "module-qat.fermion.transforms"], [179, "module-qat.generators"], [188, "module-qat.hardware"], [194, "module-qat.lang"], [194, "module-qat.lang.algorithms"], [207, "module-qat.lang.AQASM.arithmetic"], [213, "module-qat.lang.AQASM.classarith"], [217, "module-qat.lang.AQASM.qftarith"], [239, "module-qat.opt"], [251, "module-qat.opt.mixing_factory"], [255, "module-qat.opt.results"], [265, "module-qat.plugins"], [284, "module-qat.qpus"], [293, "module-qat.quops"], [293, "module-qat.quops.metrics"]], "qat": [[46, "module-qat"]], "qat.interop": [[47, "module-qat.interop"]], "qat.interop.cirq": [[48, "module-qat.interop.cirq"]], "cirq_to_qlm() (in module qat.interop.cirq)": [[49, "qat.interop.cirq.cirq_to_qlm"]], "qlm_to_cirq() (in module qat.interop.cirq)": [[50, "qat.interop.cirq.qlm_to_cirq"]], "qat.interop.openqasm": [[51, "module-qat.interop.openqasm"]], "oqasmparser (class in qat.interop.openqasm)": [[52, "qat.interop.openqasm.OqasmParser"]], "compile() (qat.interop.openqasm.oqasmparser method)": [[52, "qat.interop.openqasm.OqasmParser.compile"]], "qat.interop.projectq": [[53, "module-qat.interop.projectq"]], "aqasmengine (class in qat.interop.projectq)": [[54, "qat.interop.projectq.AqasmEngine"]], "projectq_to_qlm() (qat.interop.projectq.aqasmengine method)": [[54, "qat.interop.projectq.AqasmEngine.projectq_to_qlm"]], "aqasmprinter (class in qat.interop.projectq)": [[55, "qat.interop.projectq.AqasmPrinter"]], "qat.interop.pyquil": [[56, "module-qat.interop.pyquil"]], "pyquil_to_qlm() (in module qat.interop.pyquil)": [[57, "qat.interop.pyquil.pyquil_to_qlm"]], "pyquilqpu (class in qat.interop.pyquil)": [[58, "qat.interop.pyquil.PyquilQPU"]], "set_qpu() (qat.interop.pyquil.pyquilqpu method)": [[58, "qat.interop.pyquil.PyquilQPU.set_qpu"]], "submit() (qat.interop.pyquil.pyquilqpu method)": [[58, "qat.interop.pyquil.PyquilQPU.submit"]], "submit_job() (qat.interop.pyquil.pyquilqpu method)": [[58, "qat.interop.pyquil.PyquilQPU.submit_job"]], "qlm_to_pyquil() (in module qat.interop.pyquil)": [[59, "qat.interop.pyquil.qlm_to_pyquil"]], "qat.interop.qiskit": [[60, "module-qat.interop.qiskit"]], "asyncbackendtoqpu (class in qat.interop.qiskit)": [[61, "qat.interop.qiskit.AsyncBackendToQPU"]], "retrieve_job() (qat.interop.qiskit.asyncbackendtoqpu method)": [[61, "qat.interop.qiskit.AsyncBackendToQPU.retrieve_job"]], "submit() (qat.interop.qiskit.asyncbackendtoqpu method)": [[61, "qat.interop.qiskit.AsyncBackendToQPU.submit"]], "backendtoqpu (class in qat.interop.qiskit)": [[62, "qat.interop.qiskit.BackendToQPU"]], "submit() (qat.interop.qiskit.backendtoqpu method)": [[62, "qat.interop.qiskit.BackendToQPU.submit"]], "qiskit_to_qlm() (in module qat.interop.qiskit)": [[63, "qat.interop.qiskit.qiskit_to_qlm"]], "qiskitjob (class in qat.interop.qiskit)": [[64, "qat.interop.qiskit.QiskitJob"]], "cancel() (qat.interop.qiskit.qiskitjob method)": [[64, "qat.interop.qiskit.QiskitJob.cancel"]], "dump() (qat.interop.qiskit.qiskitjob method)": [[64, "qat.interop.qiskit.QiskitJob.dump"]], "job_id() (qat.interop.qiskit.qiskitjob method)": [[64, "qat.interop.qiskit.QiskitJob.job_id"]], "result() (qat.interop.qiskit.qiskitjob method)": [[64, "qat.interop.qiskit.QiskitJob.result"]], "status() (qat.interop.qiskit.qiskitjob method)": [[64, "qat.interop.qiskit.QiskitJob.status"]], "qiskitruntimeqpu (class in qat.interop.qiskit.runtime)": [[65, "qat.interop.qiskit.runtime.QiskitRuntimeQPU"]], "submit() (qat.interop.qiskit.runtime.qiskitruntimeqpu method)": [[65, "qat.interop.qiskit.runtime.QiskitRuntimeQPU.submit"]], "qlm_to_qiskit() (in module qat.interop.qiskit)": [[66, "qat.interop.qiskit.qlm_to_qiskit"]], "qputobackend (class in qat.interop.qiskit)": [[67, "qat.interop.qiskit.QPUToBackend"]], "set_qpu() (qat.interop.qiskit.qputobackend method)": [[67, "qat.interop.qiskit.QPUToBackend.set_qpu"]], "qat.pylinalg": [[68, "module-qat.pylinalg"]], "qat.pylinalg.simulator": [[69, "module-qat.pylinalg.simulator"]], "mat2nparray() (in module qat.pylinalg.simulator)": [[70, "qat.pylinalg.simulator.mat2nparray"]], "measure() (in module qat.pylinalg.simulator)": [[71, "qat.pylinalg.simulator.measure"]], "project() (in module qat.pylinalg.simulator)": [[72, "qat.pylinalg.simulator.project"]], "raise_break() (in module qat.pylinalg.simulator)": [[73, "qat.pylinalg.simulator.raise_break"]], "reset() (in module qat.pylinalg.simulator)": [[74, "qat.pylinalg.simulator.reset"]], "simulate() (in module qat.pylinalg.simulator)": [[75, "qat.pylinalg.simulator.simulate"]], "qat.comm": [[76, "module-qat.comm"]], "qat.comm.datamodel": [[77, "module-qat.comm.datamodel"]], "qat.comm.datamodel.ttypes.gatedefinition (built-in class)": [[78, "qat.comm.datamodel.ttypes.GateDefinition"]], "op (class in qat.comm.datamodel.ttypes)": [[79, "qat.comm.datamodel.ttypes.Op"]], "qat.comm.exceptions": [[80, "module-qat.comm.exceptions"]], "qat.comm.exceptions.ttypes.errortype (built-in class)": [[81, "qat.comm.exceptions.ttypes.ErrorType"]], "qat.comm.exceptions.ttypes.pluginexception (built-in class)": [[82, "qat.comm.exceptions.ttypes.PluginException"]], "qat.comm.exceptions.ttypes.qpuexception (built-in class)": [[83, "qat.comm.exceptions.ttypes.QPUException"]], "qat.comm.resource": [[84, "module-qat.comm.resource"]], "allocationmodel (class in qat.comm.resource.ttypes)": [[85, "qat.comm.resource.ttypes.AllocationModel"]], "qat.comm.resource.ttypes.device (built-in class)": [[86, "qat.comm.resource.ttypes.Device"]], "qat.comm.resource.ttypes.resourcemodel (built-in class)": [[87, "qat.comm.resource.ttypes.ResourceModel"]], "qat.comm.shared": [[88, "module-qat.comm.shared"]], "intermediatemeasurement (class in qat.comm.shared.ttypes)": [[89, "qat.comm.shared.ttypes.IntermediateMeasurement"]], "processingtype (class in qat.comm.shared.ttypes)": [[90, "qat.comm.shared.ttypes.ProcessingType"]], "qat.core": [[91, "module-qat.core"]], "aggregate_data() (in module qat.core.wrappers.result)": [[92, "qat.core.wrappers.result.aggregate_data"]], "assert_plugin() (in module qat.core.assertion)": [[93, "qat.core.assertion.assert_plugin"]], "assert_qpu() (in module qat.core.assertion)": [[94, "qat.core.assertion.assert_qpu"]], "batch (class in qat.core)": [[95, "qat.core.Batch"]], "dump() (qat.core.batch method)": [[95, "qat.core.Batch.dump"]], "from_bytes() (qat.core.batch class method)": [[95, "qat.core.Batch.from_bytes"]], "from_thrift() (qat.core.batch class method)": [[95, "qat.core.Batch.from_thrift"]], "get_variables() (qat.core.batch method)": [[95, "qat.core.Batch.get_variables"]], "load() (qat.core.batch static method)": [[95, "qat.core.Batch.load"]], "to_cpp() (qat.core.batch method)": [[95, "qat.core.Batch.to_cpp"]], "to_thrift() (qat.core.batch method)": [[95, "qat.core.Batch.to_thrift"]], "batchresult (class in qat.core)": [[96, "qat.core.BatchResult"]], "append() (qat.core.batchresult method)": [[96, "qat.core.BatchResult.append"]], "dump() (qat.core.batchresult method)": [[96, "qat.core.BatchResult.dump"]], "extend() (qat.core.batchresult method)": [[96, "qat.core.BatchResult.extend"]], "from_thrift() (qat.core.batchresult class method)": [[96, "qat.core.BatchResult.from_thrift"]], "load() (qat.core.batchresult static method)": [[96, "qat.core.BatchResult.load"]], "circuit (class in qat.core)": [[97, "qat.core.Circuit"]], "bind_variable() (qat.core.circuit method)": [[97, "qat.core.Circuit.bind_variable"]], "bind_variables() (qat.core.circuit method)": [[97, "qat.core.Circuit.bind_variables"]], "compile() (qat.core.circuit method)": [[97, "qat.core.Circuit.compile"]], "count() (qat.core.circuit method)": [[97, "qat.core.Circuit.count"]], "dag() (qat.core.circuit method)": [[97, "qat.core.Circuit.dag"]], "depth() (qat.core.circuit method)": [[97, "qat.core.Circuit.depth"]], "display() (qat.core.circuit method)": [[97, "qat.core.Circuit.display"]], "dump() (qat.core.circuit method)": [[97, "qat.core.Circuit.dump"]], "empty() (qat.core.circuit static method)": [[97, "qat.core.Circuit.empty"]], "eval() (qat.core.circuit method)": [[97, "qat.core.Circuit.eval"]], "fill_matrices() (qat.core.circuit method)": [[97, "qat.core.Circuit.fill_matrices"]], "from_bytes() (qat.core.circuit class method)": [[97, "qat.core.Circuit.from_bytes"]], "from_thrift() (qat.core.circuit class method)": [[97, "qat.core.Circuit.from_thrift"]], "gate_set (qat.core.circuit property)": [[97, "qat.core.Circuit.gate_set"]], "get_variables() (qat.core.circuit method)": [[97, "qat.core.Circuit.get_variables"]], "insert_gate() (qat.core.circuit method)": [[97, "qat.core.Circuit.insert_gate"]], "iterate_simple() (qat.core.circuit method)": [[97, "qat.core.Circuit.iterate_simple"]], "load() (qat.core.circuit class method)": [[97, "qat.core.Circuit.load"]], "remove_locks() (qat.core.circuit method)": [[97, "qat.core.Circuit.remove_locks"]], "run() (qat.core.circuit method)": [[97, "qat.core.Circuit.run"]], "shift_qbits() (qat.core.circuit method)": [[97, "qat.core.Circuit.shift_qbits"]], "statistics() (qat.core.circuit method)": [[97, "qat.core.Circuit.statistics"]], "to_job() (qat.core.circuit method)": [[97, "qat.core.Circuit.to_job"]], "display() (in module qat.core.console)": [[98, "qat.core.console.display"]], "evaluate() (in module qat.core.formula_eval)": [[99, "qat.core.formula_eval.evaluate"]], "hardwarespecs (class in qat.core)": [[100, "qat.core.HardwareSpecs"]], "as_graph() (qat.core.hardwarespecs method)": [[100, "qat.core.HardwareSpecs.as_graph"]], "as_quameleon() (qat.core.hardwarespecs method)": [[100, "qat.core.HardwareSpecs.as_quameleon"]], "dump() (qat.core.hardwarespecs method)": [[100, "qat.core.HardwareSpecs.dump"]], "from_thrift() (qat.core.hardwarespecs class method)": [[100, "qat.core.HardwareSpecs.from_thrift"]], "load() (qat.core.hardwarespecs static method)": [[100, "qat.core.HardwareSpecs.load"]], "nbqbits (qat.core.hardwarespecs property)": [[100, "qat.core.HardwareSpecs.nbqbits"]], "job (class in qat.core)": [[101, "qat.core.Job"]], "compile() (qat.core.job method)": [[101, "qat.core.Job.compile"]], "differentiate() (qat.core.job method)": [[101, "qat.core.Job.differentiate"]], "dump() (qat.core.job method)": [[101, "qat.core.Job.dump"]], "eval() (qat.core.job method)": [[101, "qat.core.Job.eval"]], "from_bytes() (qat.core.job class method)": [[101, "qat.core.Job.from_bytes"]], "from_thrift() (qat.core.job class method)": [[101, "qat.core.Job.from_thrift"]], "get_variables() (qat.core.job method)": [[101, "qat.core.Job.get_variables"]], "gradient() (qat.core.job method)": [[101, "qat.core.Job.gradient"]], "load() (qat.core.job class method)": [[101, "qat.core.Job.load"]], "parameter_map (qat.core.job property)": [[101, "qat.core.Job.parameter_map"]], "psi_0 (qat.core.job property)": [[101, "qat.core.Job.psi_0"]], "run() (qat.core.job method)": [[101, "qat.core.Job.run"]], "shift_qbits() (qat.core.job method)": [[101, "qat.core.Job.shift_qbits"]], "threshold (qat.core.job property)": [[101, "qat.core.Job.threshold"]], "to_cpp() (qat.core.job method)": [[101, "qat.core.Job.to_cpp"]], "to_thrift() (qat.core.job method)": [[101, "qat.core.Job.to_thrift"]], "qat.core.application": [[102, "module-qat.core.application"]], "application (class in qat.core.application)": [[103, "qat.core.application.Application"]], "execute() (qat.core.application.application method)": [[103, "qat.core.application.Application.execute"]], "serve() (qat.core.application.application method)": [[103, "qat.core.application.Application.serve"]], "remoteapplication (class in qat.core.application)": [[104, "qat.core.application.RemoteApplication"]], "qat.core.circuit_builder": [[105, "module-qat.core.circuit_builder"]], "default_gate_set() (in module qat.core.circuit_builder.matrix_util)": [[106, "qat.core.circuit_builder.matrix_util.default_gate_set"]], "get_param_generator() (in module qat.core.circuit_builder.matrix_util)": [[107, "qat.core.circuit_builder.matrix_util.get_param_generator"]], "get_predef_generator() (in module qat.core.circuit_builder.matrix_util)": [[108, "qat.core.circuit_builder.matrix_util.get_predef_generator"]], "variablenamenotavailable (class in qat.core.circuit_builder.builder)": [[109, "qat.core.circuit_builder.builder.VariableNameNotAvailable"]], "qat.core.gate_set": [[110, "module-qat.core.gate_set"]], "gateset (class in qat.core.gate_set)": [[111, "qat.core.gate_set.GateSet"]], "add_signature() (qat.core.gate_set.gateset method)": [[111, "qat.core.gate_set.GateSet.add_signature"]], "union() (qat.core.gate_set.gateset method)": [[111, "qat.core.gate_set.GateSet.union"]], "gatesignature (class in qat.core.gate_set)": [[112, "qat.core.gate_set.GateSignature"]], "get_circuit() (qat.core.gate_set.gatesignature method)": [[112, "qat.core.gate_set.GateSignature.get_circuit"]], "get_matrix() (qat.core.gate_set.gatesignature method)": [[112, "qat.core.gate_set.GateSignature.get_matrix"]], "set_circuit_generator() (qat.core.gate_set.gatesignature method)": [[112, "qat.core.gate_set.GateSignature.set_circuit_generator"]], "set_matrix_generator() (qat.core.gate_set.gatesignature method)": [[112, "qat.core.gate_set.GateSignature.set_matrix_generator"]], "gatesyntaxredefinition (class in qat.core.gate_set)": [[113, "qat.core.gate_set.GateSyntaxRedefinition"]], "qat.core.qpu": [[114, "module-qat.core.qpu"]], "commonqpu (class in qat.core.qpu)": [[115, "qat.core.qpu.CommonQPU"]], "qat.core.spins": [[116, "module-qat.core.spins"]], "integer_to_spins() (in module qat.core.spins)": [[117, "qat.core.spins.integer_to_spins"]], "spins_to_integer() (in module qat.core.spins)": [[118, "qat.core.spins.spins_to_integer"]], "qat.core.variables": [[119, "module-qat.core.variables"]], "arithexpression (class in qat.core.variables)": [[120, "qat.core.variables.ArithExpression"]], "differentiate() (qat.core.variables.arithexpression method)": [[120, "qat.core.variables.ArithExpression.differentiate"]], "from_string() (qat.core.variables.arithexpression static method)": [[120, "qat.core.variables.ArithExpression.from_string"]], "get_variables() (qat.core.variables.arithexpression method)": [[120, "qat.core.variables.ArithExpression.get_variables"]], "pretty_print() (qat.core.variables.arithexpression method)": [[120, "qat.core.variables.ArithExpression.pretty_print"]], "to_thrift() (qat.core.variables.arithexpression method)": [[120, "qat.core.variables.ArithExpression.to_thrift"]], "symbol (class in qat.core.variables)": [[121, "qat.core.variables.Symbol"]], "observable (class in qat.core)": [[122, "qat.core.Observable"]], "constant_coeff (qat.core.observable attribute)": [[122, "qat.core.Observable.constant_coeff"]], "ising (qat.core.observable attribute)": [[122, "qat.core.Observable.ising"]], "nbqbits (qat.core.observable attribute)": [[122, "qat.core.Observable.nbqbits"]], "terms (qat.core.observable attribute)": [[122, "qat.core.Observable.terms"]], "to_matrix() (qat.core.observable method)": [[122, "qat.core.Observable.to_matrix"]], "parameter (class in qat.core)": [[123, "qat.core.Parameter"]], "func (qat.core.parameter property)": [[123, "qat.core.Parameter.func"]], "generate_noise() (qat.core.parameter method)": [[123, "qat.core.Parameter.generate_noise"]], "get_noise() (qat.core.parameter method)": [[123, "qat.core.Parameter.get_noise"]], "psd (qat.core.parameter property)": [[123, "qat.core.Parameter.psd"]], "plot_in_notebook() (in module qat.core.printer)": [[124, "qat.core.printer.plot_in_notebook"]], "result (class in qat.core)": [[125, "qat.core.Result"]], "add_sample() (qat.core.result method)": [[125, "qat.core.Result.add_sample"]], "display() (qat.core.result method)": [[125, "qat.core.Result.display"]], "dump() (qat.core.result method)": [[125, "qat.core.Result.dump"]], "from_bytes() (qat.core.result class method)": [[125, "qat.core.Result.from_bytes"]], "from_thrift() (qat.core.result class method)": [[125, "qat.core.Result.from_thrift"]], "load() (qat.core.result static method)": [[125, "qat.core.Result.load"]], "parameter_map (qat.core.result property)": [[125, "qat.core.Result.parameter_map"]], "plot() (qat.core.result method)": [[125, "qat.core.Result.plot"]], "unpack() (qat.core.result method)": [[125, "qat.core.Result.unpack"]], "value (qat.core.result property)": [[125, "qat.core.Result.value"]], "values (qat.core.result property)": [[125, "qat.core.Result.values"]], "wrap_samples() (qat.core.result method)": [[125, "qat.core.Result.wrap_samples"]], "sample (class in qat.core)": [[126, "qat.core.Sample"]], "amplitude (qat.core.sample property)": [[126, "qat.core.Sample.amplitude"]], "from_bytes() (qat.core.sample class method)": [[126, "qat.core.Sample.from_bytes"]], "from_thrift() (qat.core.sample class method)": [[126, "qat.core.Sample.from_thrift"]], "set_qreg() (qat.core.sample method)": [[126, "qat.core.Sample.set_qreg"]], "state (qat.core.sample property)": [[126, "qat.core.Sample.state"]], "schedule (class in qat.core)": [[127, "qat.core.Schedule"]], "dump() (qat.core.schedule method)": [[127, "qat.core.Schedule.dump"]], "get_variables() (qat.core.schedule method)": [[127, "qat.core.Schedule.get_variables"]], "load() (qat.core.schedule class method)": [[127, "qat.core.Schedule.load"]], "to_job() (qat.core.schedule method)": [[127, "qat.core.Schedule.to_job"]], "state (class in qat.core.wrappers.result)": [[128, "qat.core.wrappers.result.State"]], "bitstring (qat.core.wrappers.result.state property)": [[128, "qat.core.wrappers.result.State.bitstring"]], "int (qat.core.wrappers.result.state property)": [[128, "qat.core.wrappers.result.State.int"]], "lsb_int (qat.core.wrappers.result.state property)": [[128, "qat.core.wrappers.result.State.lsb_int"]], "value (qat.core.wrappers.result.state property)": [[128, "qat.core.wrappers.result.State.value"]], "term (class in qat.core)": [[129, "qat.core.Term"]], "coeff (qat.core.term attribute)": [[129, "qat.core.Term.coeff"]], "op (qat.core.term attribute)": [[129, "qat.core.Term.op"]], "qbits (qat.core.term attribute)": [[129, "qat.core.Term.qbits"]], "topology (class in qat.core)": [[130, "qat.core.Topology"]], "add_edge() (qat.core.topology method)": [[130, "qat.core.Topology.add_edge"]], "dump() (qat.core.topology method)": [[130, "qat.core.Topology.dump"]], "from_bytes() (qat.core.topology class method)": [[130, "qat.core.Topology.from_bytes"]], "from_nx() (qat.core.topology static method)": [[130, "qat.core.Topology.from_nx"]], "from_thrift() (qat.core.topology class method)": [[130, "qat.core.Topology.from_thrift"]], "load() (qat.core.topology static method)": [[130, "qat.core.Topology.load"]], "nbqbits (qat.core.topology property)": [[130, "qat.core.Topology.nbqbits"]], "set_nbqbits() (qat.core.topology method)": [[130, "qat.core.Topology.set_nbqbits"]], "to_nx() (qat.core.topology method)": [[130, "qat.core.Topology.to_nx"]], "topologytype (class in qat.core)": [[131, "qat.core.TopologyType"]], "variable (class in qat.core)": [[132, "qat.core.Variable"]], "differentiate() (qat.core.variable method)": [[132, "qat.core.Variable.differentiate"]], "get_variables() (qat.core.variable method)": [[132, "qat.core.Variable.get_variables"]], "to_thrift() (qat.core.variable method)": [[132, "qat.core.Variable.to_thrift"]], "qat.devices": [[133, "module-qat.devices"]], "alltoall (class in qat.devices)": [[134, "qat.devices.AllToAll"]], "qat.devices.google_sycamore (built-in variable)": [[135, "qat.devices.GOOGLE_SYCAMORE"]], "griddevice (class in qat.devices)": [[136, "qat.devices.GridDevice"]], "qat.devices.ibm_burlington (built-in variable)": [[137, "qat.devices.IBM_BURLINGTON"]], "qat.devices.ibm_johannesburg (built-in variable)": [[138, "qat.devices.IBM_JOHANNESBURG"]], "qat.devices.ibm_melbourne (built-in variable)": [[139, "qat.devices.IBM_MELBOURNE"]], "qat.devices.ibm_rueschlikon (built-in variable)": [[140, "qat.devices.IBM_RUESCHLIKON"]], "qat.devices.ibm_singapore (built-in variable)": [[141, "qat.devices.IBM_SINGAPORE"]], "qat.devices.ibm_tokyo (built-in variable)": [[142, "qat.devices.IBM_TOKYO"]], "qat.devices.ibm_yorktown (built-in variable)": [[143, "qat.devices.IBM_YORKTOWN"]], "linedevice (class in qat.devices)": [[144, "qat.devices.LineDevice"]], "qat.devices.rigetti_agave (built-in variable)": [[145, "qat.devices.RIGETTI_AGAVE"]], "qat.devices.rigetti_aspen (built-in variable)": [[146, "qat.devices.RIGETTI_ASPEN"]], "squaregriddevice (class in qat.devices)": [[147, "qat.devices.SquareGridDevice"]], "qat.devices.zuchongzhi (built-in variable)": [[148, "qat.devices.ZUCHONGZHI"]], "qat.fermion": [[149, "module-qat.fermion"]], "qat.fermion.chemistry": [[149, "module-qat.fermion.chemistry"]], "qat.fermion.chemistry.qse": [[149, "module-qat.fermion.chemistry.qse"]], "qat.fermion.chemistry.ucc": [[149, "module-qat.fermion.chemistry.ucc"]], "qat.fermion.circuits": [[149, "module-qat.fermion.circuits"]], "qat.fermion.hamiltonians": [[149, "module-qat.fermion.hamiltonians"]], "qat.fermion.phase_estimation": [[149, "module-qat.fermion.phase_estimation"]], "qat.fermion.transforms": [[149, "module-qat.fermion.transforms"]], "apply_quantum_subspace_expansion() (in module qat.fermion.chemistry.qse)": [[150, "qat.fermion.chemistry.qse.apply_quantum_subspace_expansion"]], "compute_active_space_integrals() (in module qat.fermion.chemistry.ucc)": [[151, "qat.fermion.chemistry.ucc.compute_active_space_integrals"]], "construct_ucc_ansatz() (in module qat.fermion.chemistry.ucc)": [[152, "qat.fermion.chemistry.ucc.construct_ucc_ansatz"]], "convert_to_h_integrals() (in module qat.fermion.chemistry.ucc)": [[153, "qat.fermion.chemistry.ucc.convert_to_h_integrals"]], "electronicstructurehamiltonian (class in qat.fermion.hamiltonians)": [[154, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian"]], "constant_coeff (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[154, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.constant_coeff"]], "copy() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[154, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.copy"]], "dag() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[154, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.dag"]], "get_matrix() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[154, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.get_matrix"]], "hpq (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[154, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.hpq"]], "hpqrs (qat.fermion.hamiltonians.electronicstructurehamiltonian attribute)": [[154, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.hpqrs"]], "to_fermion() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[154, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.to_fermion"]], "to_spin() (qat.fermion.hamiltonians.electronicstructurehamiltonian method)": [[154, "qat.fermion.hamiltonians.ElectronicStructureHamiltonian.to_spin"]], "fermionhamiltonian (class in qat.fermion.hamiltonians)": [[155, "qat.fermion.hamiltonians.FermionHamiltonian"]], "constant_coeff (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[155, "qat.fermion.hamiltonians.FermionHamiltonian.constant_coeff"]], "copy() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[155, "qat.fermion.hamiltonians.FermionHamiltonian.copy"]], "dag() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[155, "qat.fermion.hamiltonians.FermionHamiltonian.dag"]], "get_matrix() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[155, "qat.fermion.hamiltonians.FermionHamiltonian.get_matrix"]], "matrix (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[155, "qat.fermion.hamiltonians.FermionHamiltonian.matrix"]], "nbqbits (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[155, "qat.fermion.hamiltonians.FermionHamiltonian.nbqbits"]], "normal_order (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[155, "qat.fermion.hamiltonians.FermionHamiltonian.normal_order"]], "terms (qat.fermion.hamiltonians.fermionhamiltonian attribute)": [[155, "qat.fermion.hamiltonians.FermionHamiltonian.terms"]], "to_electronic() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[155, "qat.fermion.hamiltonians.FermionHamiltonian.to_electronic"]], "to_spin() (qat.fermion.hamiltonians.fermionhamiltonian method)": [[155, "qat.fermion.hamiltonians.FermionHamiltonian.to_spin"]], "get_cluster_ops() (in module qat.fermion.chemistry.ucc)": [[156, "qat.fermion.chemistry.ucc.get_cluster_ops"]], "get_hf_ket() (in module qat.fermion.chemistry.ucc)": [[157, "qat.fermion.chemistry.ucc.get_hf_ket"]], "guess_init_params() (in module qat.fermion.chemistry.ucc)": [[158, "qat.fermion.chemistry.ucc.guess_init_params"]], "make_anderson_model() (in module qat.fermion.hamiltonians)": [[159, "qat.fermion.hamiltonians.make_anderson_model"]], "make_compressed_ldca_circ() (in module qat.fermion.circuits)": [[160, "qat.fermion.circuits.make_compressed_ldca_circ"]], "make_embedded_model() (in module qat.fermion.hamiltonians)": [[161, "qat.fermion.hamiltonians.make_embedded_model"]], "make_general_hwe_circ() (in module qat.fermion.circuits)": [[162, "qat.fermion.circuits.make_general_hwe_circ"]], "make_hubbard_model() (in module qat.fermion.hamiltonians)": [[163, "qat.fermion.hamiltonians.make_hubbard_model"]], "make_ldca_circ() (in module qat.fermion.circuits)": [[164, "qat.fermion.circuits.make_ldca_circ"]], "make_mr_circ() (in module qat.fermion.circuits)": [[165, "qat.fermion.circuits.make_mr_circ"]], "make_mrep_circ() (in module qat.fermion.circuits)": [[166, "qat.fermion.circuits.make_mrep_circ"]], "make_shallow_circ() (in module qat.fermion.circuits)": [[167, "qat.fermion.circuits.make_shallow_circ"]], "make_trotterisation_routine() (in module qat.fermion.trotterisation)": [[168, "qat.fermion.trotterisation.make_trotterisation_routine"]], "molecularhamiltonian (class in qat.fermion.chemistry.wrapper)": [[169, "qat.fermion.chemistry.wrapper.MolecularHamiltonian"]], "constant_coeff (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[169, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.constant_coeff"]], "get_electronic_hamiltonian() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[169, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.get_electronic_hamiltonian"]], "nqbits (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[169, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.nqbits"]], "one_body_integrals (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[169, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.one_body_integrals"]], "select_active_space() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[169, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.select_active_space"]], "transform_basis() (qat.fermion.chemistry.wrapper.molecularhamiltonian method)": [[169, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.transform_basis"]], "two_body_integrals (qat.fermion.chemistry.wrapper.molecularhamiltonian attribute)": [[169, "qat.fermion.chemistry.wrapper.MolecularHamiltonian.two_body_integrals"]], "moleculeinfo (class in qat.fermion.chemistry.wrapper)": [[170, "qat.fermion.chemistry.wrapper.MoleculeInfo"]], "constant_coeff (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[170, "qat.fermion.chemistry.wrapper.MoleculeInfo.constant_coeff"]], "hamiltonian (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[170, "qat.fermion.chemistry.wrapper.MoleculeInfo.hamiltonian"]], "n_electrons (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[170, "qat.fermion.chemistry.wrapper.MoleculeInfo.n_electrons"]], "noons (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[170, "qat.fermion.chemistry.wrapper.MoleculeInfo.noons"]], "nqbits (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[170, "qat.fermion.chemistry.wrapper.MoleculeInfo.nqbits"]], "one_body_integrals (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[170, "qat.fermion.chemistry.wrapper.MoleculeInfo.one_body_integrals"]], "orbital_energies (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[170, "qat.fermion.chemistry.wrapper.MoleculeInfo.orbital_energies"]], "restrict_active_space() (qat.fermion.chemistry.wrapper.moleculeinfo method)": [[170, "qat.fermion.chemistry.wrapper.MoleculeInfo.restrict_active_space"]], "two_body_integrals (qat.fermion.chemistry.wrapper.moleculeinfo attribute)": [[170, "qat.fermion.chemistry.wrapper.MoleculeInfo.two_body_integrals"]], "perform_phase_estimation (class in qat.fermion.phase_estimation)": [[171, "qat.fermion.phase_estimation.perform_phase_estimation"]], "perform_pyscf_computation() (in module qat.fermion.chemistry.pyscf_tools)": [[172, "qat.fermion.chemistry.pyscf_tools.perform_pyscf_computation"]], "select_active_orbitals() (in module qat.fermion.chemistry.ucc)": [[173, "qat.fermion.chemistry.ucc.select_active_orbitals"]], "spinhamiltonian (class in qat.fermion.hamiltonians)": [[174, "qat.fermion.hamiltonians.SpinHamiltonian"]], "constant_coeff (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[174, "qat.fermion.hamiltonians.SpinHamiltonian.constant_coeff"]], "copy() (qat.fermion.hamiltonians.spinhamiltonian method)": [[174, "qat.fermion.hamiltonians.SpinHamiltonian.copy"]], "dag() (qat.fermion.hamiltonians.spinhamiltonian method)": [[174, "qat.fermion.hamiltonians.SpinHamiltonian.dag"]], "get_matrix() (qat.fermion.hamiltonians.spinhamiltonian method)": [[174, "qat.fermion.hamiltonians.SpinHamiltonian.get_matrix"]], "matrix (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[174, "qat.fermion.hamiltonians.SpinHamiltonian.matrix"]], "nbqbits (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[174, "qat.fermion.hamiltonians.SpinHamiltonian.nbqbits"]], "terms (qat.fermion.hamiltonians.spinhamiltonian attribute)": [[174, "qat.fermion.hamiltonians.SpinHamiltonian.terms"]], "transform_integrals_to_new_basis() (in module qat.fermion.chemistry.ucc)": [[175, "qat.fermion.chemistry.ucc.transform_integrals_to_new_basis"]], "transform_to_bk_basis() (in module qat.fermion.transforms)": [[176, "qat.fermion.transforms.transform_to_bk_basis"]], "transform_to_jw_basis() (in module qat.fermion.transforms)": [[177, "qat.fermion.transforms.transform_to_jw_basis"]], "transform_to_parity_basis() (in module qat.fermion.transforms)": [[178, "qat.fermion.transforms.transform_to_parity_basis"]], "qat.generators": [[179, "module-qat.generators"]], "abstractgenerator (class in qat.generators)": [[180, "qat.generators.AbstractGenerator"]], "generate() (qat.generators.abstractgenerator method)": [[180, "qat.generators.AbstractGenerator.generate"]], "serve() (qat.generators.abstractgenerator method)": [[180, "qat.generators.AbstractGenerator.serve"]], "wrapper_post_process() (qat.generators.abstractgenerator method)": [[180, "qat.generators.AbstractGenerator.wrapper_post_process"]], "combinatorialoptimizergenerator (class in qat.generators)": [[181, "qat.generators.CombinatorialOptimizerGenerator"]], "generate() (qat.generators.combinatorialoptimizergenerator method)": [[181, "qat.generators.CombinatorialOptimizerGenerator.generate"]], "post_process() (qat.generators.combinatorialoptimizergenerator method)": [[181, "qat.generators.CombinatorialOptimizerGenerator.post_process"]], "graphcolouringgenerator (class in qat.generators)": [[182, "qat.generators.GraphColouringGenerator"]], "generate() (qat.generators.graphcolouringgenerator method)": [[182, "qat.generators.GraphColouringGenerator.generate"]], "graphpartitioninggenerator (class in qat.generators)": [[183, "qat.generators.GraphPartitioningGenerator"]], "generate() (qat.generators.graphpartitioninggenerator method)": [[183, "qat.generators.GraphPartitioningGenerator.generate"]], "kcliquegenerator (class in qat.generators)": [[184, "qat.generators.KCliqueGenerator"]], "generate() (qat.generators.kcliquegenerator method)": [[184, "qat.generators.KCliqueGenerator.generate"]], "maxcutgenerator (class in qat.generators)": [[185, "qat.generators.MaxCutGenerator"]], "generate() (qat.generators.maxcutgenerator method)": [[185, "qat.generators.MaxCutGenerator.generate"]], "remotebatchgenerator (class in qat.generators)": [[186, "qat.generators.RemoteBatchGenerator"]], "generate() (qat.generators.remotebatchgenerator method)": [[186, "qat.generators.RemoteBatchGenerator.generate"]], "post_process() (qat.generators.remotebatchgenerator method)": [[186, "qat.generators.RemoteBatchGenerator.post_process"]], "vertexcovergenerator (class in qat.generators)": [[187, "qat.generators.VertexCoverGenerator"]], "generate() (qat.generators.vertexcovergenerator method)": [[187, "qat.generators.VertexCoverGenerator.generate"]], "qat.hardware": [[188, "module-qat.hardware"]], "defaultgatesspecification (class in qat.hardware)": [[189, "qat.hardware.DefaultGatesSpecification"]], "gate_times (qat.hardware.defaultgatesspecification attribute)": [[189, "qat.hardware.DefaultGatesSpecification.gate_times"]], "get_gate_time() (qat.hardware.defaultgatesspecification method)": [[189, "qat.hardware.DefaultGatesSpecification.get_gate_time"]], "get_quantum_channel() (qat.hardware.defaultgatesspecification method)": [[189, "qat.hardware.DefaultGatesSpecification.get_quantum_channel"]], "meas (qat.hardware.defaultgatesspecification attribute)": [[189, "qat.hardware.DefaultGatesSpecification.meas"]], "quantum_channels (qat.hardware.defaultgatesspecification attribute)": [[189, "qat.hardware.DefaultGatesSpecification.quantum_channels"]], "state_prep (qat.hardware.defaultgatesspecification attribute)": [[189, "qat.hardware.DefaultGatesSpecification.state_prep"]], "defaulthardwaremodel (class in qat.hardware)": [[190, "qat.hardware.DefaultHardwareModel"]], "gate_noise (qat.hardware.defaulthardwaremodel attribute)": [[190, "qat.hardware.DefaultHardwareModel.gate_noise"]], "gates_specification (qat.hardware.defaulthardwaremodel attribute)": [[190, "qat.hardware.DefaultHardwareModel.gates_specification"]], "idle_noise (qat.hardware.defaulthardwaremodel attribute)": [[190, "qat.hardware.DefaultHardwareModel.idle_noise"]], "jump_operators (qat.hardware.defaulthardwaremodel attribute)": [[190, "qat.hardware.DefaultHardwareModel.jump_operators"]], "params_specification (qat.hardware.defaulthardwaremodel attribute)": [[190, "qat.hardware.DefaultHardwareModel.params_specification"]], "gatesspecification (class in qat.hardware)": [[191, "qat.hardware.GatesSpecification"]], "gate_times (qat.hardware.gatesspecification attribute)": [[191, "qat.hardware.GatesSpecification.gate_times"]], "get_gate_time() (qat.hardware.gatesspecification method)": [[191, "qat.hardware.GatesSpecification.get_gate_time"]], "get_quantum_channel() (qat.hardware.gatesspecification method)": [[191, "qat.hardware.GatesSpecification.get_quantum_channel"]], "meas (qat.hardware.gatesspecification attribute)": [[191, "qat.hardware.GatesSpecification.meas"]], "quantum_channels (qat.hardware.gatesspecification attribute)": [[191, "qat.hardware.GatesSpecification.quantum_channels"]], "state_prep (qat.hardware.gatesspecification attribute)": [[191, "qat.hardware.GatesSpecification.state_prep"]], "hardwaremodel (class in qat.hardware)": [[192, "qat.hardware.HardwareModel"]], "gate_noise (qat.hardware.hardwaremodel attribute)": [[192, "qat.hardware.HardwareModel.gate_noise"]], "gates_specification (qat.hardware.hardwaremodel attribute)": [[192, "qat.hardware.HardwareModel.gates_specification"]], "idle_noise (qat.hardware.hardwaremodel attribute)": [[192, "qat.hardware.HardwareModel.idle_noise"]], "jump_operators (qat.hardware.hardwaremodel attribute)": [[192, "qat.hardware.HardwareModel.jump_operators"]], "params_specification (qat.hardware.hardwaremodel attribute)": [[192, "qat.hardware.HardwareModel.params_specification"]], "make_depolarizing_hardware_model() (in module qat.hardware)": [[193, "qat.hardware.make_depolarizing_hardware_model"]], "qat.lang": [[194, "module-qat.lang"]], "qat.lang.algorithms": [[194, "module-qat.lang.algorithms"]], "abstractgate (class in qat.lang)": [[195, "qat.lang.AbstractGate"]], "set_dag() (qat.lang.abstractgate method)": [[195, "qat.lang.AbstractGate.set_dag"]], "amplification_step() (in module qat.lang.algorithms)": [[196, "qat.lang.algorithms.amplification_step"]], "boolformula (class in qat.lang.aqasm.bits)": [[197, "qat.lang.AQASM.bits.BoolFormula"]], "build_gate() (in module qat.lang)": [[198, "qat.lang.build_gate"]], "cbit (class in qat.lang.aqasm.bits)": [[199, "qat.lang.AQASM.bits.Cbit"]], "cregister (class in qat.lang.aqasm.bits)": [[200, "qat.lang.AQASM.bits.CRegister"]], "gate (class in qat.lang.aqasm.gates)": [[201, "qat.lang.AQASM.gates.Gate"]], "generate_gate_set() (in module qat.lang.aqasm.misc)": [[202, "qat.lang.AQASM.misc.generate_gate_set"]], "grover_diffusion() (in module qat.lang.algorithms.amplification)": [[203, "qat.lang.algorithms.amplification.grover_diffusion"]], "householder() (in module qat.lang.algorithms.amplification)": [[204, "qat.lang.algorithms.amplification.householder"]], "kptree (class in qat.lang.models)": [[205, "qat.lang.models.KPTree"]], "get_routine() (qat.lang.models.kptree method)": [[205, "qat.lang.models.KPTree.get_routine"]], "linker (class in qat.lang.linking)": [[206, "qat.lang.linking.Linker"]], "add_signature() (qat.lang.linking.linker method)": [[206, "qat.lang.linking.Linker.add_signature"]], "clear_gate_set() (qat.lang.linking.linker method)": [[206, "qat.lang.linking.Linker.clear_gate_set"]], "compile() (qat.lang.linking.linker method)": [[206, "qat.lang.linking.Linker.compile"]], "link() (qat.lang.linking.linker method)": [[206, "qat.lang.linking.Linker.link"]], "link_gates() (qat.lang.linking.linker method)": [[206, "qat.lang.linking.Linker.link_gates"]], "link_matrices() (qat.lang.linking.linker method)": [[206, "qat.lang.linking.Linker.link_matrices"]], "set_gate_set() (qat.lang.linking.linker method)": [[206, "qat.lang.linking.Linker.set_gate_set"]], "qat.lang.aqasm.arithmetic": [[207, "module-qat.lang.AQASM.arithmetic"]], "add_const_mod() (in module qat.lang.aqasm.arithmetic)": [[208, "qat.lang.AQASM.arithmetic.add_const_mod"]], "add_mod() (in module qat.lang.aqasm.arithmetic)": [[209, "qat.lang.AQASM.arithmetic.add_mod"]], "modular_exp() (in module qat.lang.aqasm.arithmetic)": [[210, "qat.lang.AQASM.arithmetic.modular_exp"]], "mult_const() (in module qat.lang.aqasm.arithmetic)": [[211, "qat.lang.AQASM.arithmetic.mult_const"]], "mult_const_mod() (in module qat.lang.aqasm.arithmetic)": [[212, "qat.lang.AQASM.arithmetic.mult_const_mod"]], "qat.lang.aqasm.classarith": [[213, "module-qat.lang.AQASM.classarith"]], "add() (in module qat.lang.aqasm.classarith)": [[214, "qat.lang.AQASM.classarith.add"]], "add_const() (in module qat.lang.aqasm.classarith)": [[215, "qat.lang.AQASM.classarith.add_const"]], "cuccaro_add() (in module qat.lang.aqasm.classarith)": [[216, "qat.lang.AQASM.classarith.cuccaro_add"]], "qat.lang.aqasm.qftarith": [[217, "module-qat.lang.AQASM.qftarith"]], "add() (in module qat.lang.aqasm.qftarith)": [[218, "qat.lang.AQASM.qftarith.add"]], "add_const() (in module qat.lang.aqasm.qftarith)": [[219, "qat.lang.AQASM.qftarith.add_const"]], "mult() (in module qat.lang.aqasm.qftarith)": [[220, "qat.lang.AQASM.qftarith.mult"]], "mult_const() (in module qat.lang.aqasm.qftarith)": [[221, "qat.lang.AQASM.qftarith.mult_const"]], "qft() (in module qat.lang.aqasm.qftarith)": [[222, "qat.lang.AQASM.qftarith.QFT"]], "paramgate (class in qat.lang.aqasm.gates)": [[223, "qat.lang.AQASM.gates.ParamGate"]], "bind_variables() (qat.lang.aqasm.gates.paramgate method)": [[223, "qat.lang.AQASM.gates.ParamGate.bind_variables"]], "dag() (qat.lang.aqasm.gates.paramgate method)": [[223, "qat.lang.AQASM.gates.ParamGate.dag"]], "display() (qat.lang.aqasm.gates.paramgate method)": [[223, "qat.lang.AQASM.gates.ParamGate.display"]], "get_variables() (qat.lang.aqasm.gates.paramgate method)": [[223, "qat.lang.AQASM.gates.ParamGate.get_variables"]], "phase_estimation() (in module qat.lang.algorithms)": [[224, "qat.lang.algorithms.phase_estimation"]], "program (class in qat.lang)": [[225, "qat.lang.Program"]], "apply() (qat.lang.program method)": [[225, "qat.lang.Program.apply"]], "calloc() (qat.lang.program method)": [[225, "qat.lang.Program.calloc"]], "cbreak() (qat.lang.program method)": [[225, "qat.lang.Program.cbreak"]], "cc_apply() (qat.lang.program method)": [[225, "qat.lang.Program.cc_apply"]], "comment() (qat.lang.program method)": [[225, "qat.lang.Program.comment"]], "conjugate() (qat.lang.program method)": [[225, "qat.lang.Program.conjugate"]], "display() (qat.lang.program method)": [[225, "qat.lang.Program.display"]], "export() (qat.lang.program method)": [[225, "qat.lang.Program.export"]], "free_ancillae() (qat.lang.program method)": [[225, "qat.lang.Program.free_ancillae"]], "get_free_ancillae() (qat.lang.program method)": [[225, "qat.lang.Program.get_free_ancillae"]], "logic() (qat.lang.program method)": [[225, "qat.lang.Program.logic"]], "measure() (qat.lang.program method)": [[225, "qat.lang.Program.measure"]], "new_var() (qat.lang.program method)": [[225, "qat.lang.Program.new_var"]], "qalloc() (qat.lang.program method)": [[225, "qat.lang.Program.qalloc"]], "reset() (qat.lang.program method)": [[225, "qat.lang.Program.reset"]], "run() (qat.lang.program method)": [[225, "qat.lang.Program.run"]], "to_circ() (qat.lang.program method)": [[225, "qat.lang.Program.to_circ"]], "qarithexp (class in qat.lang.aqasm.qint)": [[226, "qat.lang.AQASM.qint.QArithExp"]], "evaluate() (qat.lang.aqasm.qint.qarithexp method)": [[226, "qat.lang.AQASM.qint.QArithExp.evaluate"]], "qbit (class in qat.lang.aqasm.bits)": [[227, "qat.lang.AQASM.bits.Qbit"]], "qbool (class in qat.lang.aqasm.qbool)": [[228, "qat.lang.AQASM.qbool.QBool"]], "cast() (qat.lang.aqasm.qbool.qbool method)": [[228, "qat.lang.AQASM.qbool.QBool.cast"]], "cast_to() (qat.lang.aqasm.qbool.qbool method)": [[228, "qat.lang.AQASM.qbool.QBool.cast_to"]], "evaluate() (qat.lang.aqasm.qbool.qbool method)": [[228, "qat.lang.AQASM.qbool.QBool.evaluate"]], "phase() (qat.lang.aqasm.qbool.qbool method)": [[228, "qat.lang.AQASM.qbool.QBool.phase"]], "qbits_list() (qat.lang.aqasm.qbool.qbool method)": [[228, "qat.lang.AQASM.qbool.QBool.qbits_list"]], "qboolarray (class in qat.lang.aqasm.qbool)": [[229, "qat.lang.AQASM.qbool.QBoolArray"]], "cast() (qat.lang.aqasm.qbool.qboolarray method)": [[229, "qat.lang.AQASM.qbool.QBoolArray.cast"]], "evaluate() (qat.lang.aqasm.qbool.qboolarray method)": [[229, "qat.lang.AQASM.qbool.QBoolArray.evaluate"]], "qbits_list() (qat.lang.aqasm.qbool.qboolarray method)": [[229, "qat.lang.AQASM.qbool.QBoolArray.qbits_list"]], "qclause (class in qat.lang.aqasm.qbool)": [[230, "qat.lang.AQASM.qbool.QClause"]], "evaluate() (qat.lang.aqasm.qbool.qclause method)": [[230, "qat.lang.AQASM.qbool.QClause.evaluate"]], "phase() (qat.lang.aqasm.qbool.qclause method)": [[230, "qat.lang.AQASM.qbool.QClause.phase"]], "qbits_list() (qat.lang.aqasm.qbool.qclause method)": [[230, "qat.lang.AQASM.qbool.QClause.qbits_list"]], "qcompexp (class in qat.lang.aqasm.qint)": [[231, "qat.lang.AQASM.qint.QCompExp"]], "evaluate() (qat.lang.aqasm.qint.qcompexp method)": [[231, "qat.lang.AQASM.qint.QCompExp.evaluate"]], "phase() (qat.lang.aqasm.qint.qcompexp method)": [[231, "qat.lang.AQASM.qint.QCompExp.phase"]], "qbits_list() (qat.lang.aqasm.qint.qcompexp method)": [[231, "qat.lang.AQASM.qint.QCompExp.qbits_list"]], "qfunc() (in module qat.lang)": [[232, "qat.lang.qfunc"]], "qint (class in qat.lang.aqasm.qint)": [[233, "qat.lang.AQASM.qint.QInt"]], "cast() (qat.lang.aqasm.qint.qint method)": [[233, "qat.lang.AQASM.qint.QInt.cast"]], "evaluate() (qat.lang.aqasm.qint.qint method)": [[233, "qat.lang.AQASM.qint.QInt.evaluate"]], "qbits_list() (qat.lang.aqasm.qint.qint method)": [[233, "qat.lang.AQASM.qint.QInt.qbits_list"]], "set_value() (qat.lang.aqasm.qint.qint method)": [[233, "qat.lang.AQASM.qint.QInt.set_value"]], "qregister (class in qat.lang.aqasm.bits)": [[234, "qat.lang.AQASM.bits.QRegister"]], "qrout() (in module qat.lang)": [[235, "qat.lang.qrout"]], "qroutine (class in qat.lang)": [[236, "qat.lang.QRoutine"]], "apply() (qat.lang.qroutine method)": [[236, "qat.lang.QRoutine.apply"]], "compute() (qat.lang.qroutine method)": [[236, "qat.lang.QRoutine.compute"]], "free_ancillae() (qat.lang.qroutine method)": [[236, "qat.lang.QRoutine.free_ancillae"]], "get_free_ancillae() (qat.lang.qroutine method)": [[236, "qat.lang.QRoutine.get_free_ancillae"]], "new_wires() (qat.lang.qroutine method)": [[236, "qat.lang.QRoutine.new_wires"]], "set_ancillae() (qat.lang.qroutine method)": [[236, "qat.lang.QRoutine.set_ancillae"]], "uncompute() (qat.lang.qroutine method)": [[236, "qat.lang.QRoutine.uncompute"]], "quantum_counting() (in module qat.lang.algorithms)": [[237, "qat.lang.algorithms.quantum_counting"]], "uniform_distribution() (in module qat.lang.algorithms.amplification)": [[238, "qat.lang.algorithms.amplification.uniform_distribution"]], "qat.opt": [[239, "module-qat.opt"]], "ansatzfactory (class in qat.vsolve.ansatz)": [[240, "qat.vsolve.ansatz.AnsatzFactory"]], "qaoa_circuit() (qat.vsolve.ansatz.ansatzfactory static method)": [[240, "qat.vsolve.ansatz.AnsatzFactory.qaoa_circuit"]], "bilp (class in qat.opt)": [[241, "qat.opt.BILP"]], "get_best_parameters() (qat.opt.bilp method)": [[241, "qat.opt.BILP.get_best_parameters"]], "produce_q_and_offset() (in module qat.opt.binary_linear_integer_programming)": [[241, "qat.opt.binary_linear_integer_programming.produce_q_and_offset"]], "circuitgenerator (class in qat.opt.circuit_generator)": [[242, "qat.opt.circuit_generator.CircuitGenerator"]], "get_observable() (qat.opt.circuit_generator.circuitgenerator method)": [[242, "qat.opt.circuit_generator.CircuitGenerator.get_observable"]], "qaoa_ansatz() (qat.opt.circuit_generator.circuitgenerator method)": [[242, "qat.opt.circuit_generator.CircuitGenerator.qaoa_ansatz"]], "clause (class in qat.opt.boolexpr)": [[243, "qat.opt.boolexpr.Clause"]], "and_clause() (qat.opt.boolexpr.clause static method)": [[243, "qat.opt.boolexpr.Clause.and_clause"]], "evaluate() (qat.opt.boolexpr.clause method)": [[243, "qat.opt.boolexpr.Clause.evaluate"]], "get_observable() (qat.opt.boolexpr.clause method)": [[243, "qat.opt.boolexpr.Clause.get_observable"]], "get_variables() (qat.opt.boolexpr.clause method)": [[243, "qat.opt.boolexpr.Clause.get_variables"]], "neg_clause() (qat.opt.boolexpr.clause static method)": [[243, "qat.opt.boolexpr.Clause.neg_clause"]], "or_clause() (qat.opt.boolexpr.clause static method)": [[243, "qat.opt.boolexpr.Clause.or_clause"]], "xor_clause() (qat.opt.boolexpr.clause static method)": [[243, "qat.opt.boolexpr.Clause.xor_clause"]], "combinatorialproblem (class in qat.opt)": [[244, "qat.opt.CombinatorialProblem"]], "add_clause() (qat.opt.combinatorialproblem method)": [[244, "qat.opt.CombinatorialProblem.add_clause"]], "get_observable() (qat.opt.combinatorialproblem method)": [[244, "qat.opt.CombinatorialProblem.get_observable"]], "new_var() (qat.opt.combinatorialproblem method)": [[244, "qat.opt.CombinatorialProblem.new_var"]], "new_vars() (qat.opt.combinatorialproblem method)": [[244, "qat.opt.CombinatorialProblem.new_vars"]], "to_bqm() (qat.opt.combinatorialproblem method)": [[244, "qat.opt.CombinatorialProblem.to_bqm"]], "to_ising() (qat.opt.combinatorialproblem method)": [[244, "qat.opt.CombinatorialProblem.to_ising"]], "to_qubo() (qat.opt.combinatorialproblem method)": [[244, "qat.opt.CombinatorialProblem.to_qubo"]], "graphcolouring (class in qat.opt)": [[245, "qat.opt.GraphColouring"]], "get_best_parameters() (qat.opt.graphcolouring method)": [[245, "qat.opt.GraphColouring.get_best_parameters"]], "parse_result() (qat.opt.graphcolouring method)": [[245, "qat.opt.GraphColouring.parse_result"]], "produce_q_and_offset() (in module qat.opt.graph_colouring)": [[245, "qat.opt.graph_colouring.produce_q_and_offset"]], "graphpartitioning (class in qat.opt)": [[246, "qat.opt.GraphPartitioning"]], "get_best_parameters() (qat.opt.graphpartitioning method)": [[246, "qat.opt.GraphPartitioning.get_best_parameters"]], "parse_result() (qat.opt.graphpartitioning method)": [[246, "qat.opt.GraphPartitioning.parse_result"]], "produce_j_h_and_offset() (in module qat.opt.graph_partitioning)": [[246, "qat.opt.graph_partitioning.produce_j_h_and_offset"]], "ising (class in qat.opt)": [[247, "qat.opt.Ising"]], "dump() (qat.opt.ising method)": [[247, "qat.opt.Ising.dump"]], "from_thrift() (qat.opt.ising class method)": [[247, "qat.opt.Ising.from_thrift"]], "get_best_parameters() (qat.opt.ising method)": [[247, "qat.opt.Ising.get_best_parameters"]], "get_j_h_and_offset() (qat.opt.ising method)": [[247, "qat.opt.Ising.get_j_h_and_offset"]], "get_observable() (qat.opt.ising method)": [[247, "qat.opt.Ising.get_observable"]], "j_coupling_matrix (qat.opt.ising property)": [[247, "qat.opt.Ising.j_coupling_matrix"]], "load() (qat.opt.ising class method)": [[247, "qat.opt.Ising.load"]], "magnetic_field_h (qat.opt.ising property)": [[247, "qat.opt.Ising.magnetic_field_h"]], "to_bqm() (qat.opt.ising method)": [[247, "qat.opt.Ising.to_bqm"]], "to_combinatorial_problem() (qat.opt.ising method)": [[247, "qat.opt.Ising.to_combinatorial_problem"]], "to_job() (qat.opt.ising method)": [[247, "qat.opt.Ising.to_job"]], "to_qubo() (qat.opt.ising method)": [[247, "qat.opt.Ising.to_qubo"]], "kclique (class in qat.opt)": [[248, "qat.opt.KClique"]], "get_best_parameters() (qat.opt.kclique method)": [[248, "qat.opt.KClique.get_best_parameters"]], "parse_result() (qat.opt.kclique method)": [[248, "qat.opt.KClique.parse_result"]], "produce_q_and_offset() (in module qat.opt.k_clique)": [[248, "qat.opt.k_clique.produce_q_and_offset"]], "maxcut (class in qat.opt)": [[249, "qat.opt.MaxCut"]], "get_best_parameters() (qat.opt.maxcut method)": [[249, "qat.opt.MaxCut.get_best_parameters"]], "parse_result() (qat.opt.maxcut method)": [[249, "qat.opt.MaxCut.parse_result"]], "produce_j_h_and_offset() (in module qat.opt.max_cut)": [[249, "qat.opt.max_cut.produce_j_h_and_offset"]], "mixingfactory (class in qat.opt)": [[250, "qat.opt.MixingFactory"]], "bit_flip() (qat.opt.mixingfactory static method)": [[250, "qat.opt.MixingFactory.bit_flip"]], "bit_move() (qat.opt.mixingfactory static method)": [[250, "qat.opt.MixingFactory.bit_move"]], "qat.opt.mixing_factory": [[251, "module-qat.opt.mixing_factory"]], "independentannealing (class in qat.opt.mixing_factory)": [[252, "qat.opt.mixing_factory.IndependentAnnealing"]], "inject_initial_state() (qat.opt.mixing_factory.independentannealing method)": [[252, "qat.opt.mixing_factory.IndependentAnnealing.inject_initial_state"]], "initialstatebuilder (class in qat.opt.mixing_factory)": [[253, "qat.opt.mixing_factory.InitialStateBuilder"]], "inject_initial_state() (qat.opt.mixing_factory.initialstatebuilder method)": [[253, "qat.opt.mixing_factory.InitialStateBuilder.inject_initial_state"]], "simpleinitialstate (class in qat.opt.mixing_factory)": [[254, "qat.opt.mixing_factory.SimpleInitialState"]], "inject_initial_state() (qat.opt.mixing_factory.simpleinitialstate method)": [[254, "qat.opt.mixing_factory.SimpleInitialState.inject_initial_state"]], "qat.opt.results": [[255, "module-qat.opt.results"]], "combinatorialresult (class in qat.opt.results)": [[256, "qat.opt.results.CombinatorialResult"]], "graphpartitioningresult (class in qat.opt.results)": [[257, "qat.opt.results.GraphPartitioningResult"]], "display() (qat.opt.results.graphpartitioningresult method)": [[257, "qat.opt.results.GraphPartitioningResult.display"]], "kcliqueresult (class in qat.opt.results)": [[258, "qat.opt.results.KCliqueResult"]], "clique (qat.opt.results.kcliqueresult property)": [[258, "qat.opt.results.KCliqueResult.clique"]], "vertexcoverresult (class in qat.opt.results)": [[259, "qat.opt.results.VertexCoverResult"]], "cover (qat.opt.results.vertexcoverresult property)": [[259, "qat.opt.results.VertexCoverResult.cover"]], "numberpartitioning (class in qat.opt)": [[260, "qat.opt.NumberPartitioning"]], "get_best_parameters() (qat.opt.numberpartitioning method)": [[260, "qat.opt.NumberPartitioning.get_best_parameters"]], "produce_j_h_and_offset() (in module qat.opt.number_partitioning)": [[260, "qat.opt.number_partitioning.produce_j_h_and_offset"]], "qubo (class in qat.opt)": [[261, "qat.opt.QUBO"]], "get_best_parameters() (qat.opt.qubo method)": [[261, "qat.opt.QUBO.get_best_parameters"]], "get_observable() (qat.opt.qubo method)": [[261, "qat.opt.QUBO.get_observable"]], "get_q_and_offset() (qat.opt.qubo method)": [[261, "qat.opt.QUBO.get_q_and_offset"]], "q_matrix (qat.opt.qubo property)": [[261, "qat.opt.QUBO.q_matrix"]], "to_bqm() (qat.opt.qubo method)": [[261, "qat.opt.QUBO.to_bqm"]], "to_combinatorial_problem() (qat.opt.qubo method)": [[261, "qat.opt.QUBO.to_combinatorial_problem"]], "to_ising() (qat.opt.qubo method)": [[261, "qat.opt.QUBO.to_ising"]], "to_job() (qat.opt.qubo method)": [[261, "qat.opt.QUBO.to_job"]], "schedulegenerator (class in qat.opt.schedule_generator)": [[262, "qat.opt.schedule_generator.ScheduleGenerator"]], "annealing_job() (qat.opt.schedule_generator.schedulegenerator method)": [[262, "qat.opt.schedule_generator.ScheduleGenerator.annealing_job"]], "get_observable() (qat.opt.schedule_generator.schedulegenerator method)": [[262, "qat.opt.schedule_generator.ScheduleGenerator.get_observable"]], "var (class in qat.opt.boolexpr)": [[263, "qat.opt.boolexpr.Var"]], "evaluate() (qat.opt.boolexpr.var method)": [[263, "qat.opt.boolexpr.Var.evaluate"]], "get_observable() (qat.opt.boolexpr.var method)": [[263, "qat.opt.boolexpr.Var.get_observable"]], "get_variables() (qat.opt.boolexpr.var method)": [[263, "qat.opt.boolexpr.Var.get_variables"]], "index (qat.opt.boolexpr.var attribute)": [[263, "qat.opt.boolexpr.Var.index"]], "vertexcover (class in qat.opt)": [[264, "qat.opt.VertexCover"]], "get_best_parameters() (qat.opt.vertexcover method)": [[264, "qat.opt.VertexCover.get_best_parameters"]], "parse_result() (qat.opt.vertexcover method)": [[264, "qat.opt.VertexCover.parse_result"]], "produce_q_and_offset() (in module qat.opt.vertex_cover)": [[264, "qat.opt.vertex_cover.produce_q_and_offset"]], "qat.plugins": [[265, "module-qat.plugins"]], "abstractplugin (class in qat.plugins)": [[266, "qat.plugins.AbstractPlugin"]], "compile() (qat.plugins.abstractplugin method)": [[266, "qat.plugins.AbstractPlugin.compile"]], "do_post_processing() (qat.plugins.abstractplugin method)": [[266, "qat.plugins.AbstractPlugin.do_post_processing"]], "post_process() (qat.plugins.abstractplugin method)": [[266, "qat.plugins.AbstractPlugin.post_process"]], "serve() (qat.plugins.abstractplugin method)": [[266, "qat.plugins.AbstractPlugin.serve"]], "adaptvqeplugin (class in qat.plugins)": [[267, "qat.plugins.AdaptVQEPlugin"]], "compile() (qat.plugins.adaptvqeplugin method)": [[267, "qat.plugins.AdaptVQEPlugin.compile"]], "circuitinliner (class in qat.plugins)": [[268, "qat.plugins.CircuitInliner"]], "compile() (qat.plugins.circuitinliner method)": [[268, "qat.plugins.CircuitInliner.compile"]], "costfunctionplugin (class in qat.plugins)": [[269, "qat.plugins.CostFunctionPlugin"]], "compile() (qat.plugins.costfunctionplugin method)": [[269, "qat.plugins.CostFunctionPlugin.compile"]], "display (class in qat.plugins)": [[270, "qat.plugins.Display"]], "compile() (qat.plugins.display method)": [[270, "qat.plugins.Display.compile"]], "gradientdescentoptimizer (class in qat.plugins)": [[271, "qat.plugins.GradientDescentOptimizer"]], "compile() (qat.plugins.gradientdescentoptimizer method)": [[271, "qat.plugins.GradientDescentOptimizer.compile"]], "junction (class in qat.plugins)": [[272, "qat.plugins.Junction"]], "execute() (qat.plugins.junction method)": [[272, "qat.plugins.Junction.execute"]], "run() (qat.plugins.junction method)": [[272, "qat.plugins.Junction.run"]], "multiplelaunchesanalyzer (class in qat.plugins)": [[273, "qat.plugins.MultipleLaunchesAnalyzer"]], "compile() (qat.plugins.multiplelaunchesanalyzer method)": [[273, "qat.plugins.MultipleLaunchesAnalyzer.compile"]], "observablesplitter (class in qat.plugins)": [[274, "qat.plugins.ObservableSplitter"]], "compile() (qat.plugins.observablesplitter method)": [[274, "qat.plugins.ObservableSplitter.compile"]], "optimizer (class in qat.plugins)": [[275, "qat.plugins.Optimizer"]], "compile() (qat.plugins.optimizer method)": [[275, "qat.plugins.Optimizer.compile"]], "psominimizeplugin (class in qat.plugins)": [[276, "qat.plugins.PSOMinimizePlugin"]], "compile() (qat.plugins.psominimizeplugin method)": [[276, "qat.plugins.PSOMinimizePlugin.compile"]], "quameleonplugin (class in qat.plugins)": [[277, "qat.plugins.QuameleonPlugin"]], "compile() (qat.plugins.quameleonplugin method)": [[277, "qat.plugins.QuameleonPlugin.compile"]], "remoteplugin (class in qat.plugins)": [[278, "qat.plugins.RemotePlugin"]], "compile() (qat.plugins.remoteplugin method)": [[278, "qat.plugins.RemotePlugin.compile"]], "scipyminimizeplugin (class in qat.plugins)": [[279, "qat.plugins.ScipyMinimizePlugin"]], "compile() (qat.plugins.scipyminimizeplugin method)": [[279, "qat.plugins.ScipyMinimizePlugin.compile"]], "set_options() (qat.plugins.scipyminimizeplugin method)": [[279, "qat.plugins.ScipyMinimizePlugin.set_options"]], "seqoptim (class in qat.plugins)": [[280, "qat.plugins.SeqOptim"]], "compile() (qat.plugins.seqoptim method)": [[280, "qat.plugins.SeqOptim.compile"]], "spsaminimizeplugin (class in qat.plugins)": [[281, "qat.plugins.SPSAMinimizePlugin"]], "compile() (qat.plugins.spsaminimizeplugin method)": [[281, "qat.plugins.SPSAMinimizePlugin.compile"]], "transformobservable (class in qat.plugins)": [[282, "qat.plugins.TransformObservable"]], "compile() (qat.plugins.transformobservable method)": [[282, "qat.plugins.TransformObservable.compile"]], "zeronoiseextrapolator (class in qat.plugins)": [[283, "qat.plugins.ZeroNoiseExtrapolator"]], "compile() (qat.plugins.zeronoiseextrapolator method)": [[283, "qat.plugins.ZeroNoiseExtrapolator.compile"]], "qat.qpus": [[284, "module-qat.qpus"]], "clinalg (class in qat.qpus)": [[285, "qat.qpus.CLinalg"]], "submit() (qat.qpus.clinalg method)": [[285, "qat.qpus.CLinalg.submit"]], "pylinalg (class in qat.qpus)": [[286, "qat.qpus.PyLinalg"]], "serve() (qat.qpus.pylinalg method)": [[286, "qat.qpus.PyLinalg.serve"]], "submit() (qat.qpus.pylinalg method)": [[286, "qat.qpus.PyLinalg.submit"]], "submit_job() (qat.qpus.pylinalg method)": [[286, "qat.qpus.PyLinalg.submit_job"]], "simulatedannealing (class in qat.qpus)": [[287, "qat.qpus.SimulatedAnnealing"]], "extract_j_and_h_from_obs() (in module qat.simulated_annealing.service)": [[287, "qat.simulated_annealing.service.extract_j_and_h_from_obs"]], "submit_job() (qat.qpus.simulatedannealing method)": [[287, "qat.qpus.SimulatedAnnealing.submit_job"]], "classicalqpu (class in qat.qpus)": [[288, "qat.qpus.ClassicalQPU"]], "get_current_qpu() (in module qat.qpus)": [[289, "qat.qpus.get_current_qpu"]], "get_default_qpu() (in module qat.qpus)": [[290, "qat.qpus.get_default_qpu"]], "qpuhandler (class in qat.qpus)": [[291, "qat.qpus.QPUHandler"]], "apply_resource_consumption_limits() (qat.qpus.qpuhandler method)": [[291, "qat.qpus.QPUHandler.apply_resource_consumption_limits"]], "estimate_resources_for_batch() (qat.qpus.qpuhandler method)": [[291, "qat.qpus.QPUHandler.estimate_resources_for_batch"]], "get_specs() (qat.qpus.qpuhandler method)": [[291, "qat.qpus.QPUHandler.get_specs"]], "serve() (qat.qpus.qpuhandler method)": [[291, "qat.qpus.QPUHandler.serve"]], "submit() (qat.qpus.qpuhandler method)": [[291, "qat.qpus.QPUHandler.submit"]], "submit_job() (qat.qpus.qpuhandler method)": [[291, "qat.qpus.QPUHandler.submit_job"]], "remoteqpu (class in qat.qpus)": [[292, "qat.qpus.RemoteQPU"]], "qat.quops": [[293, "module-qat.quops"]], "qat.quops.metrics": [[293, "module-qat.quops.metrics"]], "are_equal_up_to_phase() (in module qat.quops.math_util)": [[294, "qat.quops.math_util.are_equal_up_to_phase"]], "channelrepresentations (class in qat.quops)": [[295, "qat.quops.ChannelRepresentations"]], "convert_density_mat_to_pauli_vec() (in module qat.quops.math_util)": [[296, "qat.quops.math_util.convert_density_mat_to_pauli_vec"]], "convert_pauli_vec_to_density_mat() (in module qat.quops.math_util)": [[297, "qat.quops.math_util.convert_pauli_vec_to_density_mat"]], "get_average_process_fidelity() (in module qat.quops.metrics)": [[298, "qat.quops.metrics.get_average_process_fidelity"]], "get_diamond_norm() (in module qat.quops.metrics)": [[299, "qat.quops.metrics.get_diamond_norm"]], "get_entanglement_process_fidelity() (in module qat.quops.metrics)": [[300, "qat.quops.metrics.get_entanglement_process_fidelity"]], "get_process_distance() (in module qat.quops.metrics)": [[301, "qat.quops.metrics.get_process_distance"]], "get_state_fidelity() (in module qat.quops.metrics)": [[302, "qat.quops.metrics.get_state_fidelity"]], "get_trace_distance() (in module qat.quops.metrics)": [[303, "qat.quops.metrics.get_trace_distance"]], "is_completely_positive() (in module qat.quops)": [[304, "qat.quops.is_completely_positive"]], "is_trace_preserving() (in module qat.quops)": [[305, "qat.quops.is_trace_preserving"]], "is_trace_reducing() (in module qat.quops)": [[306, "qat.quops.is_trace_reducing"]], "is_unital() (in module qat.quops)": [[307, "qat.quops.is_unital"]], "make_avg_fid_equiv_depol_channel() (in module qat.quops)": [[308, "qat.quops.make_avg_fid_equiv_depol_channel"]], "make_depolarizing_channel() (in module qat.quops)": [[309, "qat.quops.make_depolarizing_channel"]], "make_generalized_amplitude_damping() (in module qat.quops)": [[310, "qat.quops.make_generalized_amplitude_damping"]], "make_pauli_matrix_basis() (in module qat.quops.math_util)": [[311, "qat.quops.math_util.make_pauli_matrix_basis"]], "make_standard_matrix_basis() (in module qat.quops.math_util)": [[312, "qat.quops.math_util.make_standard_matrix_basis"]], "make_standard_vector_basis() (in module qat.quops.math_util)": [[313, "qat.quops.math_util.make_standard_vector_basis"]], "multikron() (in module qat.quops.math_util)": [[314, "qat.quops.math_util.multikron"]], "parametricamplitudedamping (class in qat.quops)": [[315, "qat.quops.ParametricAmplitudeDamping"]], "t_1 (qat.quops.parametricamplitudedamping attribute)": [[315, "qat.quops.ParametricAmplitudeDamping.T_1"]], "name (qat.quops.parametricamplitudedamping attribute)": [[315, "qat.quops.ParametricAmplitudeDamping.name"]], "prob() (qat.quops.parametricamplitudedamping method)": [[315, "qat.quops.ParametricAmplitudeDamping.prob"]], "parametricgatenoise (class in qat.quops)": [[316, "qat.quops.ParametricGateNoise"]], "parametricpuredephasing (class in qat.quops)": [[317, "qat.quops.ParametricPureDephasing"]], "t_phi (qat.quops.parametricpuredephasing attribute)": [[317, "qat.quops.ParametricPureDephasing.T_phi"]], "name (qat.quops.parametricpuredephasing attribute)": [[317, "qat.quops.ParametricPureDephasing.name"]], "prob() (qat.quops.parametricpuredephasing method)": [[317, "qat.quops.ParametricPureDephasing.prob"]], "ptilde() (qat.quops.parametricpuredephasing method)": [[317, "qat.quops.ParametricPureDephasing.ptilde"]], "parametricquantumchannel (class in qat.quops)": [[318, "qat.quops.ParametricQuantumChannel"]], "partial_trace() (in module qat.quops.math_util)": [[319, "qat.quops.math_util.partial_trace"]], "quantumchannel (class in qat.quops)": [[320, "qat.quops.QuantumChannel"]], "quantumchannelchi (class in qat.quops)": [[321, "qat.quops.QuantumChannelChi"]], "apply_to() (qat.quops.quantumchannelchi method)": [[321, "qat.quops.QuantumChannelChi.apply_to"]], "arity (qat.quops.quantumchannelchi attribute)": [[321, "qat.quops.QuantumChannelChi.arity"]], "matrix (qat.quops.quantumchannelchi attribute)": [[321, "qat.quops.QuantumChannelChi.matrix"]], "matrix_basis (qat.quops.quantumchannelchi attribute)": [[321, "qat.quops.QuantumChannelChi.matrix_basis"]], "name (qat.quops.quantumchannelchi attribute)": [[321, "qat.quops.QuantumChannelChi.name"]], "to_kraus() (qat.quops.quantumchannelchi method)": [[321, "qat.quops.QuantumChannelChi.to_kraus"]], "quantumchannelchoi (class in qat.quops)": [[322, "qat.quops.QuantumChannelChoi"]], "arity (qat.quops.quantumchannelchoi attribute)": [[322, "qat.quops.QuantumChannelChoi.arity"]], "matrix (qat.quops.quantumchannelchoi attribute)": [[322, "qat.quops.QuantumChannelChoi.matrix"]], "name (qat.quops.quantumchannelchoi attribute)": [[322, "qat.quops.QuantumChannelChoi.name"]], "to_kraus() (qat.quops.quantumchannelchoi method)": [[322, "qat.quops.QuantumChannelChoi.to_kraus"]], "to_ptm() (qat.quops.quantumchannelchoi method)": [[322, "qat.quops.QuantumChannelChoi.to_ptm"]], "quantumchannelkraus (class in qat.quops)": [[323, "qat.quops.QuantumChannelKraus"]], "apply_to() (qat.quops.quantumchannelkraus method)": [[323, "qat.quops.QuantumChannelKraus.apply_to"]], "apply_to_vector() (qat.quops.quantumchannelkraus method)": [[323, "qat.quops.QuantumChannelKraus.apply_to_vector"]], "kraus_operators (qat.quops.quantumchannelkraus attribute)": [[323, "qat.quops.QuantumChannelKraus.kraus_operators"]], "kraus_rank (qat.quops.quantumchannelkraus attribute)": [[323, "qat.quops.QuantumChannelKraus.kraus_rank"]], "kraus_rank() (qat.quops.quantumchannelkraus method)": [[323, "id0"]], "name (qat.quops.quantumchannelkraus attribute)": [[323, "qat.quops.QuantumChannelKraus.name"]], "to_chi() (qat.quops.quantumchannelkraus method)": [[323, "qat.quops.QuantumChannelKraus.to_chi"]], "to_choi() (qat.quops.quantumchannelkraus method)": [[323, "qat.quops.QuantumChannelKraus.to_choi"]], "to_ptm() (qat.quops.quantumchannelkraus method)": [[323, "qat.quops.QuantumChannelKraus.to_ptm"]], "quantumchannelptm (class in qat.quops)": [[324, "qat.quops.QuantumChannelPTM"]], "apply_to() (qat.quops.quantumchannelptm method)": [[324, "qat.quops.QuantumChannelPTM.apply_to"]], "arity (qat.quops.quantumchannelptm attribute)": [[324, "qat.quops.QuantumChannelPTM.arity"]], "matrix (qat.quops.quantumchannelptm attribute)": [[324, "qat.quops.QuantumChannelPTM.matrix"]], "matrix (qat.quops.quantumchannelptm property)": [[324, "id0"]], "name (qat.quops.quantumchannelptm attribute)": [[324, "qat.quops.QuantumChannelPTM.name"]], "ptm (qat.quops.quantumchannelptm property)": [[324, "qat.quops.QuantumChannelPTM.ptm"]], "tensor (qat.quops.quantumchannelptm property)": [[324, "qat.quops.QuantumChannelPTM.tensor"]], "to_choi() (qat.quops.quantumchannelptm method)": [[324, "qat.quops.QuantumChannelPTM.to_choi"]], "to_kraus() (qat.quops.quantumchannelptm method)": [[324, "qat.quops.QuantumChannelPTM.to_kraus"]]}})