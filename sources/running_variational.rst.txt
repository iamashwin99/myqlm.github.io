.. _variational:

Running variational algorithms
=================================

QLM comes with a collection of tools to efficiently describe and run variational quantum algorithm.
This page introduces the basic mechanics allowing you to write and run adaptive variational schemes.

For a more advanced usage :ref:`combinatorial_optimization` describes a high-level interface to described combinatorial optimization problems and automatically
generate parametrized Ans√§tze. 


Variational jobs
_____________________

When running a variational quantum algorithm, we are, most of the time, interested in minimizing the energy of some observable :math:`H` over some
parametrized quantum state :math:`|\psi(\theta)\rangle`, i.e minimizing :math:`\langle \psi(\theta)| H |\psi(\theta) \rangle`.

In the QLM, it is possible to build a variational quantum circuit by introducing open parameters in a pyAQASM `Program`:

.. run-block:: python

    from qat.lang.AQASM import Program, RY, RZ

    prog = Program()
    qbits = prog.qalloc(1)

    variable = prog.new_var(float, "a")
    RY(variable)(qbits)
    RZ(4 * variable)(qbits)

    circuit = prog.to_circ()

    print("Variables:", circuit.get_variables())

    job = circuit.to_job()
    print("Job variables:", job.get_variables())


Additionally, the sampled observable itself can have parametrized coefficients:


.. run-block:: python

    from qat.core import Observable, Term, Variable

    t = Variable("t")

    obs = Observable(3)
    # Obs = \sum_i \sigma_x^i
    for i in range(3):
        obs += (1 - t) * Observable.sigma_x(i, 3)

    print(obs)
    print("Observable variables:", obs.get_variables())

    from qat.lang.AQASM import Program, RY, RZ

    prog = Program()
    qbits = prog.qalloc(3)

    variable = prog.new_var(float, "a")
    for qbit in qbits:
        RY(variable)(qbit)
        RZ(4 * variable)(qbit)

    circuit = prog.to_circ()

    print("Circuit variables:", circuit.get_variables())

    job = circuit.to_job(observable=obs)
    print("Job variables:", job.get_variables())


This allows to have layered parametrized optimization, or even compilation tradeoffs where some variational parameters end up in the sampled observable.


Binding variables
________________________


Once we've built a parametrized job, its variables can be instantiated using the overloaded `__call__` operator:

.. run-block:: python

    import numpy as np
    from qat.lang.AQASM import Program, RY, RZ
    from qat.core import Observable, Term, Variable

    t = Variable("t")

    obs = Observable(3)
    for i in range(3):
        obs += (1 - t) * Observable.sigma_x(i, 3)

    prog = Program()
    qbits = prog.qalloc(3)

    variable = prog.new_var(float, "a")
    for qbit in qbits:
        RY(variable)(qbit)
        RZ(4 * variable)(qbit)
    job = prog.to_circ().to_job(observable=obs)

    job_2 = job(t=0.5)

    print(job_2.observable)

    job_3 = job(** {v: np.random.random() for v in job.get_variables()})

    print(job_3.observable)
    for op in job_3.circuit.iterate_simple():
        print(op)


.. warning::

    When binding variables used inside a custom parametrized gate, a gate set containing the custom gate should be provided
    via the `gate_set` kwargs.

    .. run-block:: python

        from qat.lang.AQASM import Program, AbstractGate

        XX = AbstractGate("XX", [float], arity=2)

        prog = Program()
        qbits = prog.qalloc(2)
        XX(prog.new_var(float, "theta"))(qbits)
        circuit = prog.to_circ()

        try:
            circuit_2 = circuit(theta=0.3)
        except Exception as e:
            print("Caught: {}".format(e))

        circuit_2 = circuit(theta=0.3, gate_set=prog.gate_set)
        for op in circuit_2.iterate_simple():
            print(op)

Running variational algorithms
___________________________________

The simplest way to run a variational algorithm is to use a dedicated Plugin that will take care of the energy minimization.

The default variational Plugin wraps the `scipy.optimize.minimize` function: :class:`qat.plugins.ScipyMinimizePlugin`. 

.. run-block:: python


    import numpy as np
    from qat.lang.AQASM import Program, RY, RZ
    from qat.core import Observable, Term, Variable

    t = Variable("t")

    obs = Observable(3)
    for i in range(3):
        obs += (1 - t) * Observable.sigma_x(i, 3)

    prog = Program()
    qbits = prog.qalloc(3)

    variable = prog.new_var(float, "a")
    for qbit in qbits:
        RY(variable)(qbit)
        RZ(4 * variable)(qbit)
    job = prog.to_circ().to_job(observable=obs)

    from qat.plugins import ScipyMinimizePlugin

    optimize = ScipyMinimizePlugin(method="COBYLA", tol=1e-3, options={"maxiter": 150})

    from qat.qpus import get_default_qpu

    stack = optimize | get_default_qpu()

    result = stack.submit(job)

    print('final energy:', result.value)
    print('best parameters:', result.meta_data['parameters'])
    print('trace:', result.meta_data['optimization_trace'])



This plugin also supports a nice feature: it can read optimization parameters directly from the job's meta data or directly from the result. This allows you to build a stack with no particular choice of optimization parameters and attach these parameters directly to the job when submitting it. In this setting, the previous example becomes:


.. run-block:: python

    import numpy as np
    import json
    from qat.lang.AQASM import Program, RY, RZ
    from qat.core import Observable, Term, Variable
    t = Variable("t")

    obs = Observable(3)
    for i in range(3):
        obs += (1 - t) * Observable.sigma_x(i, 3)

    prog = Program()
    qbits = prog.qalloc(3)

    variable = prog.new_var(float, "a")
    for qbit in qbits:
        RY(variable)(qbit)
        RZ(4 * variable)(qbit)
    job = prog.to_circ().to_job(observable=obs)

    from qat.plugins import ScipyMinimizePlugin

    optimize = ScipyMinimizePlugin()
    


    from qat.qpus import get_default_qpu

    stack = optimize | get_default_qpu()
    
    optimizer_args = {
        "method": "COBYLA", 
        "tol": 1e-3, 
        "options": {"maxiter": 150}
    }
    result = stack.submit(job, meta_data={"ScipyMinimizePlugin": json.dumps(optimizer_args)})

    print('final energy:', result.value)
    print('best parameters:', result.meta_data['parameters'])
    print('best parameters (dictionary):', result.parameter_map)
    print('trace:', result.meta_data['optimization_trace'])

An alternative is the :class:`qat.plugins.SeqOptim` Plugin, which only works for a certain class of circuits but stands out for its shot-noise resilience.

Differentiating jobs
_____________________

Many variational algorithms require computing the gradient of the cost function :math:`E(\vec{\theta}) = \langle \psi(\vec{\theta}) | H | \psi(\vec{\theta})\rangle`.
The gradient can be used in gradient-based optimization methods.
QLM jobs come with methods to compute the derivative of :math:`E(\vec{\theta})` automically: :func:`~qat.core.Job.differentiate` and :func:`~qat.core.Job.gradient`.

Examples of use of this feature are given in :notebook:`(this notebook)[differentiating_jobs.ipynb]`.

Testing for several initializations of the parameters
______________________________________________________
Variational optimization tends to be sensitive to the initial parameters it started from. You can insert the :class:`qat.plugins.MultipleLaunchesAnalyzer` Plugin before a VQE optimizer to automatically perform several VQE runs and keep the lowest-energy result. This is illustrated in the notebook :notebook:`(Making several VQE runs and keeping the best result with the MultipleLaunchesAnalyzer plugin)[multiple_launches_analyzer_plugin.ipynb]`.
