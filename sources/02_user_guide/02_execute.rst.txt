.. _executing:

Executing / Simulating quantum programs
=======================================

A quantum algorithm described using a quantum :class:`~qat.lang.Program` can be executed on a :ref:`Quantum Processing Units (QPUs) <qpu>`,
and the corresponding result will be returned. In this user guide, we will introduce this each step of this process, from
:ref:`submitting a job <job>` to the QPU, up to :ref:`retrieving the result <result>` of the execution. 

.. parseonly:: qlm

    We will also introduce the different types of the :ref:`QPUs <qpu>` available in Qaptiva, and showcase an example of their use case.
    Some of them differ in their fundamental paradigm (digital, analog or annealing), and others have more specific use case for certain
    types of simulation (ideal or noisy and exact or approximate).

    In Qaptiva, it is also possible to extend the capabilities of a QPU through the use of a :ref:`plugin <plugin>`. This powerful semantics
    represents a core feature in Qaptiva, allowing the users to manipulate more advanced jobs, and is very useful when 
    :ref:`designing a variational algorithm <running_variational>` for example.

.. parseonly:: distributed

    We will also introduce the different types of the :ref:`QPUs <qpu>` available in Distributed Qaptiva, and showcase an example of their use case.

    In Distributed Qaptiva, it is also possible to extend the capabilities of a QPU through the use of a :ref:`plugin <plugin>`. This
    powerful semantics represents a core feature in Distributed Qaptiva, allowing the users to manipulate more advanced jobs, and is
    very useful when :ref:`designing a variational algorithm <running_variational>` for example.

.. parseonly:: myqlm

    We will also introduce the different types of the :ref:`QPUs <qpu>` available in myQLM, and showcase an example of their use case.

    In myQLM, it is also possible to extend the capabilities of a QPU through the use of a :ref:`plugin <plugin>`. This powerful semantics
    represents a core feature in Qaptiva, allowing the users to manipulate more advanced jobs, and is very useful when 
    :ref:`designing a variational algorithm <running_variational>` for example.

.. autocard::
