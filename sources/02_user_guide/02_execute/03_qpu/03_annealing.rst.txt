Annealing computing
===================

.. only:: qlm

    .. _simulated_quantum_annealing:

    Qaptiva is equipped with a simulated quantum annealer (SQA), which can solve combinatorial optimization problems encoded in an :ref:`Ising <ising_description>` or Quadratic Unconstrained Binary Optimization (:ref:`QUBO <qubo_description>`) formalism - take a look at an :notebook:`(Introductory notebook)[introduction_combinatorial_optimization.ipynb]`. It can also handle a general :ref:`Combinatorial Problem <comb_prob_description>` with clauses and variables, as long as each of its :class:`~qat.opt.boolexpr.Clause` contains no more than two :class:`~qat.opt.boolexpr.Var`, such that it is translatable to :class:`~qat.opt.Ising` or :class:`~qat.opt.QUBO`.

    The SQA solver is inside the class :class:`~qat.qpus.SQAQPU` which receives a :class:`~qat.core.Job` created via the :func:`~qat.opt.Ising.to_job()` method of the special purpose :class:`~qat.opt.Ising` or :class:`~qat.opt.QUBO` classes (or :class:`~qat.opt.CombinatorialProblem`, if applicable).

    Inner workings
    --------------

    SQA is built upon a heuristic which aims to minimize quantum :ref:`Ising Hamiltonians <ising_description>`.

    The questions of whether SQA performs such minimizations more efficiently than physical quantum annealing machines, and whether SQA
    can be called 'emulation' of those machines is still under scientific discussion with some more recent advances being :cite:`konz_2021`, :cite:`bando_nishimori_2021`, :cite:`king_and_many_2021`, along with :cite:`ronnow2014defining`,
    :cite:`denchev2016computational`, :cite:`hen2015probing` or :cite:`andriyash2017can`, for instance.

    Formally, our SQA implementation is based on a discrete-time path integral Monte Carlo formulation of quantum annealing, as derived
    in :cite:`martovnak2002quantum`.

    In short, instead of sampling the equilibrium distribution, at finite temperature of the quantum Ising Hamiltonian:

    .. math::

        H = -\sum_{i,j} J_{i,j}\sigma_{z}^{i}\sigma_{z}^{j}-\sum_{i} h_{i}\sigma_{z}^{i} - \Gamma\sum_{i}\sigma_{x}^{i}

    one samples from the equivalent classical Ising Hamiltonian:

    .. math::

        H = -\sum_{k=1}^{n_{trotters}}\left( \sum_{i,j} J_{i,j} s_{i}^{k}s_{j}^{k} + \sum_{i} h_{i} s_{i}^{k} + J^{\perp}s_{l}^{k}s_{l}^{k+1} \right) 

    with :math:`J^{\perp} = - n_{trotters}\cdot \log\left(\tanh(\frac{\Gamma}{n_{trotters}T})\right)` and :math:`n` quantum spins are replaced with :math:`n_{trotters}\times n` classical spins.

    In quantum annealing, :math:`\Gamma` is typically gradually decreased
    from a high value to :math:`0`, such that, if the system is prepared in the
    ground state of :math:`\sum_{i}\Gamma\sigma_{x}^{i}`, it ends up 
    in the ground state of the Ising Hamiltonian at the end of the transition.

    The idea of simulated quantum annealing is to sample from the equilibrium
    distribution of the equivalent classical Hamiltonian at several
    points :math:`\{\Gamma_{l}\}` along that transition. 
    The configuration resulting from sampling at :math:`\Gamma_{l}`
    is kept at the starting configuration for :math:`\Gamma_{l+1}`.

    The following picture describes in pseudo-code how SQA works.

    .. image:: images/simulated_quantum_annealing_algoritm_latex.png
        :width: 600px
        :align: center

    .. note::

        * The quality of the solutions returned by SQA will depend on the parameters given to the algorithm (minimum and maximum `gamma` and temperature, number of Monte Carlo steps, etc).
        * The **memory requirements** of simulated quantum annealing are **polynomial in the number of spins**. There is **no hard memory limit** as to how many spins can be represented and manipulated with this technique.


    Bibliography
    ------------

    .. bibliography:: biblio_annealing.bib


.. only:: myqlm

    .. _simulated_annealing:

    myQLM is equipped with a simulated annealer (SA), which can solve combinatorial problems encoded in an :ref:`Ising <ising_description>` or Quadratic Unconstrained Binary Optimization (:ref:`QUBO <qubo_description>`) formalism - take a look at an 
    :notebook:`(Introductory notebook)[introduction_combinatorial_optimization_myqlm.ipynb]`. It could also handle a general :class:`~qat.opt.CombinatorialProblem` with clauses and variables, as long as each of its :class:`~qat.opt.boolexpr.Clause` contains no more than two :class:`~qat.opt.boolexpr.Var`, such that it is translatable to :class:`~qat.opt.Ising` or :class:`~qat.opt.QUBO`.

    Albeit not quantum, the simulated annealing solver is wrapped with a Quantum Processing Unit (QPU) interface which is made to resemble the rest of the QPUs on myQLM. It therefore consists of an implementation of the submit method of :class:`~qat.qpus.SimulatedAnnealing`, which receives a :class:`~qat.core.Job` and returns a :class:`~qat.core.Result`. The :class:`~qat.core.Job` is created via the :func:`~qat.opt.Ising.to_job()` method of the special purpose :class:`~qat.opt.Ising` or :class:`~qat.opt.QUBO` classes (or :class:`~qat.opt.CombinatorialProblem`, if applicable).

    .. note::

        The full Qaptiva appliance includes the even more powerful Simulated Quantum Annealing (SQA) solver which has been tested on a variety of benchmarks for the :ref:`NP problems <np_problems_annealing>` supported for annealing. The quality of the solutions is :math:`> 98 \%` - see
        :ref:`SQA benchmarking and performance <sqa_benchmarking>` for more details.


    Inner workings
    --------------

    Simulated annealing (SA) is a well-known, historical heuristic for combinatorial optimization. It aims at finding low energy-states of a classical :ref:`Ising <ising_description>` system with a Markov Chain over spin configurations, with decreasing stochasticity.

    Stochasticity is specified by a temperature. In practice, a decreasing temperature schedule is given to the algorithm. At the beginning of the execution, large temperature values allow to jump over energy barriers to escape local optima. When temperature settles to lower values, the Markov chain will hopefully settle to the global optimum of the cost function.

    Mathematically, simulated annealing tries to find, given :math:`h` and :math:`J`, the global minimum configuration of: 

    .. math::

        H(s_{1},...,s_{n}) = -\sum_{i,j=1}^{n} J_{ij}s_{i}s_{j}-\sum_{i=1} h_{i}s_{i}

    It does so by first choosing a random configuration, which then evolves by applying updates. In the case of simulated annealing, 
    an update consists in flipping the value :math:`s_{i}` of a single spin.

    An update is accepted with probability:

    .. math::

        P_{flip} = min(1, e^{-\Delta H / T})

    with :math:`\Delta H` is the energy change incurred by switching from :math:`s_{i}` to :math:`-s_{i}`. A change decreasing the energy of the system is always accepted, whereas a change which increases it needs a temperature high enough to have a non-negligible probability of being accepted.

    The following picture explains in pseudo-code how simulated annealing works.

    .. image:: images/simulated_annealing_algoritm_latex.png
        :width: 600px
        :align: center

    A basic example of the use of SA - to solve the Antiferromagnetic Ising Model, is presented in the notebook :notebook:`(Getting started with SA)[getting_started_with_sa.ipynb]`. Some more involved examples where SA solves some of the :ref:`NP-hard problems <np_problems_annealing>` have also been implemented in the following :notebook:`(notebooks)[overview_combinatorial_optimization_myqlm.ipynb]`.
