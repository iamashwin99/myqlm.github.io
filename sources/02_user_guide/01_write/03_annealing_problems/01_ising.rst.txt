.. _ising_description:

Ising Hamiltonians
==================

Given :math:`n` qubits, a **2-local Ising Hamiltonian** is an operator of the
form:

.. math::

    H = - \sum_{i=1}^{n} h_{i}\sigma_{z}^{i} - \sum_{i,j=1}^{n} J_{ij}\sigma_{z}^{i}\sigma_{z}^{j}

where :math:`\sigma_{z}^{i} = \begin{pmatrix}1 & 0 \\ 0 & -1 \end{pmatrix}`, 
:math:`h` is a vector of real coefficients usually referred to as the **local magnetic field**,
and :math:`J` is a **real symmetric matrix with a zero diagonal**, usually referred to as the **coupling matrix**.

This Hamiltonian is the direct **quantization** of the following **classical Ising cost
function**:

.. math::

    H(s_{1},...,s_{n}) = - \sum_{i=1}^{n} h_{i}s_{i} - \sum_{i,j=1}^{n} J_{ij}s_{i}s_{j}

where :math:`s_{i}\in \{-1,1\}`.

.. note::

    * In the **interaction term**, we do **not** restrict the sum to, e.g., :math:`i < j`. This is to make the computation of the Ising cost function more straightforward to write using, for instance, standard numpy functions.

    * For clarity and readability, we do not include any **offset constant term** in the definitions above. A definition including this term would be: :math:`- \sum_{i=1}^{n} h_{i}s_{i} - \sum_{i,j=1}^{n} J_{ij}s_{i}s_{j} + o`, with :math:`o` the offset. Such a term does not change the **optimization landscape**, but might be needed if one wants to **match values** when **converting Ising cost functions into     QUBO instances and vice versa**.

    * In the context of Ising Hamiltonians, qubits are also called **spins**.

Quantum annealing machines are typically designed to try and reach the **minimum energy state
of Ising Hamiltonians**, also called **ground state**, relying on the **Adiabatic Theorem**.
See for instance :cite:`albash2018adiabatic` for a general reference on adiabatic quantum computation.

.. only:: qlm

    Our **classical annealing codes** (see :ref:`Simulated Quantum Annealing (SQA) <simulated_quantum_annealing>`) try and do the same thing: Given :math:`h` and :math:`J` as input, they will, starting from a random configuration,  try to apply **updates**, as part of **Markov chain over the configuration space**, in order to look for **low energy states**, where "energy" is defined by the formulas above.

.. only:: myqlm

    **Classical annealing codes** like Simulated Quantum Annealing (:ref:`SA <simulated_annealing>`) try and do the same thing: Given :math:`h` and :math:`J` as input, they will, starting from a random configuration, try to apply **updates**, as part of **Markov chain over the configuration space**, in order to look for **low energy states**, where "energy" is defined by the formulas above.

.. note::

    A coupling value :math:`J > 0` between two spins :math:`\sigma_{i}` and 
    :math:`\sigma_{j}` can sometimes be called, in our convention, a **ferromagnetic coupling**,
    as the alignment of the two spins onto a same value will tend to **lower the energy** of the system
    making it closer to its **ground state**.

.. only:: qlm

    In other words, **quantum annealing machines** and, consequently, **classical annealing codes**, :ref:`SQA <simulated_quantum_annealing>`, aim at tackling the following optimization problem:

.. only:: myqlm

    In other words, **quantum annealing machines** and, consequently, **classical annealing codes**, :ref:`SA <simulated_annealing>`, aim at tackling the following optimization problem:

.. math::

    \min_{s_{1}...s_{n}\in \{-1,1\}} \left(- \sum_{i=1}^{n} h_{i}s_{i} - \sum_{i,j=1}^{n} J_{ij}s_{i}s_{j}\right)

given :math:`h` and :math:`J` as input.

To produce such Ising-formulated problems, one can use the :class:`qat.opt.Ising` class:

.. only:: qlm

    .. run-block:: python

        import numpy as np
        from qat.opt import Ising
        from qat.core.variables import Variable

        problem_size = 6  # number of qubits for annealing, can reach to 100s even 1000s

        # Problem-specific parameters for Ising
        # Magnetic field h
        np.random.seed(248)
        h_field = np.random.rand(problem_size)

        # J-coupling matrix
        any_mat = np.random.rand(problem_size, problem_size)
        j_mat = ((any_mat + np.transpose(any_mat)) / 2  # make it symmetric
                 - np.diag(np.diag(any_mat)))  # make it with 0s as the diagonal elements

        # Offset - can be 0
        offset = 2.18

        # Create an Ising problem
        problem_Ising = Ising(J=j_mat,
                              h=h_field,
                              offset_i=offset)

        print("Magnetic field h:")
        print(problem_Ising.magnetic_field_h, "\n")
        print("J-coupling matrix:")
        print(problem_Ising.j_coupling_matrix)

        # Create a job by specifying the gamma function (needed for SQA)
        t_var = Variable("t")
        tmax = 1.23
        gamma_max = 170.89 # it is usually problem-specific
        gamma_t_fun = gamma_max * (1 - t_var / tmax)  # linear decrease to 0 at t=tmax
        problem_Ising_job = problem_Ising.to_job(gamma_t=gamma_t_fun, tmax=tmax)

        print("\nAn Ising Job has been created - ready to run on an annealing QPU.")

.. only:: myqlm

    .. run-block:: python

        import numpy as np
        from qat.opt import Ising

        problem_size = 6  # number of qubits for annealing, can reach to 100s even 1000s

        # Problem-specific parameters for Ising
        # Magnetic field h
        np.random.seed(248)
        h_field = np.random.rand(problem_size)

        # J-coupling matrix
        any_mat = np.random.rand(problem_size, problem_size)
        j_mat = ((any_mat + np.transpose(any_mat)) / 2  # make it symmetric
                 - np.diag(np.diag(any_mat)))  # make it with 0s as the diagonal elements

        # Offset - can be 0
        offset = 2.18

        # Create an Ising problem
        problem_Ising = Ising(J=j_mat,
                              h=h_field,
                              offset_i=offset)

        print("Magnetic field h:")
        print(problem_Ising.magnetic_field_h, "\n")
        print("J-coupling matrix:")
        print(problem_Ising.j_coupling_matrix)

        # Create a job
        problem_Ising_job = problem_Ising.to_job(gamma_t=gamma_t_fun, tmax=tmax)
        print("\nAn Ising Job has been created - ready to run on an annealing QPU.")


It is also possible to translate the Ising problem to :class:`qat.opt.QUBO` via :meth:`~qat.opt.Ising.to_qubo` or to :class:`~qat.opt.CombinatorialProblem` via :meth:`~qat.opt.Ising.to_combinatorial_problem`.

Bibliography
____________

.. bibliography:: biblio_ising.bib
