myQLM Power Access - Source code documentation
==============================================

.. toctree:: 
    :hidden:

    asyncresult
    remote_qpu_plugin

These objects are designed to behave -- partly, at least -- as facades. They are mainly instanciated and used on a client
machine.

Submitting a job to a QLMaaS server
-----------------------------------

QLMaaS provides classes to connect to QLMaaS server and defining a remote
stack:

 - The :ref:`QLMaaSConnection class <qlmaasconnection>` is used to connect
   to a QLMaaS server
 - The :ref:`remote Plugin <remote_plugin>` and :ref:`remote QPU <remote_qpu>`
   classes are used to define, using myQLM, a stack that will be
   built on the remote QLMaaS server
 - The :ref:`asynchronous result <async_result>` is a class used to get
   information on a job that have already been submitted


Getting information from the server
-----------------------------------

Classes :class:`~qat.qlmaas.QLMaaSConnection` (using the method
:func:`~qat.qlmaas.QLMaaSConnection.get_job_infos`) and
:class:`~qat.qlmaas.result.AsyncResult` (using the method
:func:`~qat.qlmaas.result.AsyncResult.get_info`) can be used to get
information on a list of jobs or a specific job.

All these meta data are wrapped in a data structure called
:class:`~qat.comm.qlmaas.ttypes.JobInfo`. A standard use of QLMaaS doesn't
require to instanciate these objects manually.


.. class:: qat.comm.qlmaas.ttypes.JobInfo

    :class:`~qat.comm.qlmaas.ttypes.JobInfo` is an object storing various
    information regarding a QLMaaS job. The
    :class:`~qat.comm.qlmaas.ttypes.JobInfo` of a job can be accessed with the
    methods :func:`~qat.qlmaas.result.AsyncResult.get_info` and
    :func:`~qat.qlmaas.QLMaaSConnection.get_job_infos`.
    This object contains the following fields:

    **Parameters:**

     - **id** (*str*): job ID
     - **status** (:class:`~qat.comm.qlmaas.ttypes.JobStatus`): status of a job
     - **submission_date** (*str*): submission date
     - **starting_date** (*str*): date on which the job execution started - can be *None*
     - **ending_date** (*str*): date on which the job execution ended - can be *None*
     - **owner** (*str*): username of the user who submitted the job
     - **type** (*AsyncBatchType*)
     - **job_file** (*str*): path to the file containing the job
     - **result_file** (*str*): path to the file containing the result of the job's result
     - **resources** (*ResourceModel*): resources needed for the job
     - **session_id** (*str*)
     - **message** (*str*): message describing an issue, if needed


.. class:: qat.comm.qlmaas.ttypes.JobStatus

    :class:`~qat.comm.qlmaas.ttypes.JobStatus` is an enumeration
    describing the status of a QLMaaS job.
    This object has the following enumerators:

     - **WAITING** = 1
     - **RUNNING** = 2
     - **DONE** = 3
     - **CANCELLED** = 4
     - **UNKNOWN_JOB** = 5
     - **IN_BUCKET** = 6
     - **DELETED** = 7
     - **STOPPED** = 8
     - **FAILED** = 9

    .. run-block:: python

        from qat.comm.qlmaas.ttypes import JobStatus

        print(JobStatus.WAITING)

.. module:: qlmaas

The *qlmaas* module
-------------------

The *qlmaas* module is used to instantiate a remote QPU or a remote Plugin
in a easier way. This module require a configuration file (please refer
to :ref:`this section to create a configuration file <qlmaas_connecting>`).

This module is used to instantiate **Plugins** and **QPUs** using a code
very close to something you may have written directly using a QLM.

.. note::

    Please note that creating a :class:`~qat.qlmaas.QLMaaSConnection` object,
    even if there is no configuration file on your computer, will enable the
    :mod:`qlmaas` module.

.. module:: qlmaas.qpus

The *qpus* module
.................

This module is used to instantiate remote QPUs. This module will internally
call the method :func:`~qat.qlmaas.QLMaaSConnection.get_qpus` to get the list
of QPUs that are available on the server. Each QPU could be imported using the name
of the class, but if two QPUs have the same name, only the first QPU returned
by :func:`~qat.qlmaas.QLMaaSConnection.get_qpus` will be present in this module.

.. code-block:: python

    # Import a remote class
    from qlmaas.qpus import LinAlg

.. module:: qlmaas.plugins

The *plugins* module
....................

This module is used to instantiate remote Plugins. This module will internally
call the method :func:`~qat.qlmaas.QLMaaSConnection.get_plugins` to get the list
of Plugins that are available on the server. Each Plugin could be imported using the name
of the class, but if two Plugins have the same name, only the first Plugin returned
by :func:`~qat.qlmaas.QLMaaSConnection.get_plugins` will be present in this module.

.. code-block:: python

    # Import a remote class
    from qlmaas.plugins import Nnizer

.. module:: qlmaas.jobs

The *jobs* module
.................

Jobs could be imported easily using the module :mod:`~qlmaas.jobs`. A job could
be imported using its identifier.

.. code-block:: python

    # Import an AsyncResult
    from qlmaas.jobs import Job17
