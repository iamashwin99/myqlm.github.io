.. _variational-programs:

Plugins for variational algorithms
====================================

The following plugins inherit from the :class:`~qat.plugins.Optimizer` class and provide an easy way
to include your favorite classical optimizer inside a QLM stack.

These plugins require the input job to have abstract parameters
(i.e the circuit and/or the observable should be parametrized).

We can, for instance, build a very simple variational job as follows:

.. run-block:: python

        from qat.plugins import ScipyMinimizePlugin
        from qat.qpus import get_default_qpu
        from qat.lang.AQASM import Program, RY
        from qat.core import Observable

        prog = Program()
        qbits = prog.qalloc(1)
        RY(prog.new_var(float, "a"))(qbits)
        job = prog.to_circ().to_job(observable=Observable.sigma_z(0, 1))

        stack = ScipyMinimizePlugin(method="COBYLA") | get_default_qpu()
        
        result = stack.submit(job)

        print("Final energy:", result.value)
        print("Minimization trace:", result.meta_data["optimization_trace"])
        print("Best parameters:", result.meta_data["parameters"])

.. autonotebook:: variational

Below is the detailed documentation of the available plugins:

.. toggle-header::
    :header: **Scipy Minimizers**

    .. autoclass:: qat.plugins.ScipyMinimizePlugin
       :members: set_options

.. toggle-header::
    :header: **Simultaneous Perturbation Stochastic Approximation**

    .. autoclass:: qat.plugins.SPSAMinimizePlugin

.. toggle-header::
    :header: **Particle Swarm Optimization**

    .. autoclass:: qat.plugins.PSOMinimizePlugin
    
.. toggle-header::
    :header: **Sequential Optimization**
    
    .. autoclass:: qat.plugins.SeqOptim

