.. module:: qat.core.variables

qat.core.variables
==================

.. autoapi::

    [:class:`qat.core.variables.ArithExpression`] Represents arithmetic expressions
    [:class:`qat.core.variables.Symbol`] Describes a given label in the AST on an :class:`~qat.core.variables.ArithExpression`


This framework provides a set of symbols:

.. autoapi::

    [:func:`qat.core.variables.sqrt`] Square root function
    [:func:`qat.core.variables.sin`] Sinus function
    [:func:`qat.core.variables.cos`] Cosinus function
    [:func:`qat.core.variables.atan2`] The atan2 function from the `math` library
    [:func:`qat.core.variables.exp`] Natural exponential function
    [:func:`qat.core.variables.ln`] Natural logarithm function
    [:func:`qat.core.variables.real`] Real part extraction function
    [:func:`qat.core.variables.imag`] Imaginary part extraction function
    [:func:`qat.core.variables.angle`] Angle in the complex plane of a complex number
    [:func:`qat.core.variables.abso`] Absolute value of a (complex) number
    [:func:`qat.core.variables.heaviside`] Heaviside function
    [:func:`qat.core.variables.vmax`] Maximum of two numbers
    [:func:`qat.core.variables.get_item`] A function extracting a number by its position in an array


User defined symbols can be created using the class :class:`~qat.core.variables.Symbol`.
For instance, the following piece of code adds a new symbol that represents the min between two numeric values.

.. run-block:: python

    from qat.core.variables import Variable, Symbol

    # token will "min"
    # underlying function is the standard `min`
    # it has arity 2
    # it is not an infix operator
    my_min = Symbol("min", min, 2, infix=False)

    a, b = Variable("a"), Variable("b")

    expr = my_min(a, b)
    print(expr)
    print(expr(a=3))
    print(expr(a=3, b=4))


.. warning::

    If you create a Symbol in your environment, but choose to send it for evaluation to a remote Qaptiva appliance,
    the remote environment will not be aware of this new Symbol and the expression evaluation might fail.


.. dropdown:: Listing defined symbols and getting their arity

    Defined symbols can be accessed via the `ALL_SYMBOLS` module variable. The only constraint
    is that the new symbols should have a fixed arity that is known in advance.

    .. run-block:: python

        from qat.core.variables import ALL_SYMBOLS

        for token, symbol in ALL_SYMBOLS.items():
            print(f"Symbol {token!r} takes {symbol.arity} argument(s)")
