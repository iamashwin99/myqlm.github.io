qat.qpus.PyLinalg
=================

.. _reference_qat_qpus_pylinalg:

The quantum state is stored as an
`ndarray <https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html>`_ of shape
:math:`\left(2,...,2\right)`, with one 2-valued index per qubit:

.. math::

    \vert\psi\rangle = \sum_{i_{1},\dots,i_{N}\in \{0,1\}^{N}}
    a_{i_{1} \dots i_{N}}|i_{1} \dots i_{N}\rangle


where :math:`|i_{1}\dots i_{N}\rangle` represents a computational basis state.

Quantum gates are also manipulated as ndarrays, with :math:`2\times \text{arity}`
2-valued indices. Half of the indices are **input indices** and the other half
**output indices**.

Applying a gate consists in contracting the input indices with the indices
corresponding to the qubits on which the gate is applied:

.. figure:: images/tensordot.png

The main point of using ndarrays is that this operation can be easily written with the
`np.tensordot <https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.tensordot.html>`_
function.


Within myQLM, this simulator is contained in the :mod:`qat.pylinalg` module.


Quantum Processing Unit
-----------------------

This high-level class wrapping the simulator follows the convention
of the :class:`qat.qpus.QPUHandler` structure.

.. autoclass:: qat.qpus.PyLinalg
    :members: serve, submit_job, submit

.. note:: The :func:`~qat.qpus.PyLinalg.submit_job` method above basically consists of two
   imbricated if statements.

   The first one looks at the :code:`type` attribute of the job, which can take
   two values:

    - :code:`OBSERVABLE` (cf. :class:`~qat.comm.shared.ttypes.ProcessingType`): the job consists in evaluating an observable at
      the end of the circuit. Currently, the attribute **nbshots** has no effect if the **type** is :code:`OBSERVABLE`
    - :code:`SAMPLING` (cf. :class:`~qat.comm.shared.ttypes.ProcessingType`): the job consists in sampling the output probability
      distribution of the quantum circuit. This is where the second if loop comes in, depending on the **number of shots** which is asked (:code:`job.nbshots`):

        - if **nbshots=0** then the simulator/quantum-processor returns *the best it can do*. In our case, of a linear-algebra-based simulator, this is the entire probability distribution.

        - else, the simulator samples the output probability distribution *nbshots* times.
