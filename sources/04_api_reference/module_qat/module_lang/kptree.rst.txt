qat.lang.models.KPTree
======================

PyAQASM comes with a KP-tree implementation that generates real states using RY multiplexors.

The implementation is located in :class:`qat.lang.models.KPTree`. It implements the Kerenidis-Prakash tree structure to describe an arbitrary tensor (see :cite:`kerenidis2017quantum` for more details).


This class can be used to either prepare an arbitrary (real) state or to perform calls to a QRAM (with arbitrary dimension, see below).

It is constructed using a numpy array of arbitrary shape :math:`(k_1, ..., k_n)`. If the :math:`k_i` are not power of two, the array will be padded with :math:`0`.
The resulting tree will generate circuits over :math:`\sum_i \log_2{k'_i}` qubits where :math:`k'_i` are the padded dimensions.
This information can be retrieved in the `.qubits` attribute of the object.

.. run-block:: python

   import numpy as np
   from qat.lang.models import KPTree

   data = np.random.random((2, 4, 8))
   tree = KPTree(data)
   print(tree.qubits)


Once a :class:`~qat.lang.models.KPTree` is built, the object can be used to generate :class:`~qat.lang.AQASM.routines.QRoutine` objects that perform either a QRAM load or a full state preparation.

An input data :math:`\alpha` (once normalized) with :math:`k` axis is understood as the following quantum state:

.. math::

    |\alpha\rangle = \sum_{i_1,...,i_k}\alpha_{i_1 ... i_k}|i_1\rangle...|i_k\rangle

The same piece of data :math:`\alpha` can also be understood as an adressable QRAM. In that case, we assume that some of the first :math:`l` registers already carry a non trivial quantum state of shape:

.. math::

    |\beta\rangle = \sum_{i_1,..,i_l} \beta_{i_1...i_l} |i_1\rangle...|i_l\rangle

Then one can "load" the remaining :math:`k-l` registers thus producing the following quantum state:

.. math::

    \sum_{i_1,...,i_l} \frac{\beta_{i_1...i_l}}{|| D_{i_{1}..i_{l}} ||} |i_1\rangle...|i_l\rangle |D_{i_{1}...i_{l}}\rangle

where :math:`|D_{i_1 ... i_l}\rangle = \sum_{i_{l+1},...,i_k}\alpha_{i_1 ... i_k}|i_{l+1}\rangle...|i_k\rangle`



The :class:`~qat.lang.models.KPTree` class supports all type of QRAM load of this shape. These are accessible through the :meth:`~qat.lang.models.KPTree.get_routine` method. This method takes a single optional argument specifying the number of axis to use as address (i.e :math:`l` in the example above).

.. run-block:: python

   import numpy as np
   from qat.lang.models import KPTree

   data = np.random.random((2, 4, 8))
   tree = KPTree(data)

   # This routine prepares a state corresponding to flatten(data)
   rout_0 = tree.get_routine(0)

   # This one uses the first qubit as an address
   rout_1 = tree.get_routine(1)
    
   # This one uses the first 3 qubits as address (i.e the first 2 axis)
   rout_2 = tree.get_routine(2)


.. autoclass:: qat.lang.models.KPTree
   :members:

References
----------

.. bibliography:: biblio_sp.bib
