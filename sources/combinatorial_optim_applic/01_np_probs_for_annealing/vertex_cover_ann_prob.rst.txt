.. _vertex_cover_ann_prob:

Vertex Cover
============

Given an undirected graph with vertex set :math:`V` and edge set :math:`E`, the problem consists in finding the smallest number of
nodes to be coloured, such that every edge has a coloured vertex. As an addition, we want to know which these vertices are. To anneal
this problem we would need our :class:`~qat.opt.vertex_cover.VertexCover` class (or :class:`~qat.opt.generators.VertexCoverGenerator`)
with :math:`\#V` spins (one spin per vertex).

.. parseonly:: qlm

    Solving this problem using the simulated quantum annealing method requires :class:`~qat.qpus.SQAQPU`.

.. parseonly:: myqlm distributed

    Solving this problem using the simulated annealing method requires the :class:`~qat.qpus.SimulatedAnnealing` QPU.

.. parseonly:: qlm

    .. run-block:: python

        import networkx as nx
        import numpy as np
        from qat.opt import VertexCover
        from qat.qpus import SQAQPU
        from qat.core import Variable
        from qat.core.spins import integer_to_spins

        # Specify the graph
        graph = nx.Graph()
        graph.add_nodes_from(np.arange(6))
        graph.add_edges_from([(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 5)])

        # Impose constraints for the right encoding
        B = 1
        A = B + 1
        vertex_cover_problem = VertexCover(graph, A=A, B=B)

        # Extract parameters for SQA
        problem_parameters_dict = vertex_cover_problem.get_best_parameters()
        n_monte_carlo_updates = problem_parameters_dict["n_monte_carlo_updates"]
        n_trotters = problem_parameters_dict["n_trotters"]
        n_steps = int(n_monte_carlo_updates /
                    (n_trotters * len(graph.nodes()))) # the last one is the number of spins, i.e. the problem size
        temp_max = problem_parameters_dict["temp_max"]
        temp_min = problem_parameters_dict["temp_min"]
        gamma_max = problem_parameters_dict["gamma_max"]
        gamma_min = problem_parameters_dict["gamma_min"]

        # Create a temperature and a gamma schedule
        tmax = 1.0
        t = Variable("t", float)
        temp_t = temp_min * (t / tmax) + temp_max * (1 - t / tmax)
        gamma_t = gamma_min * (t / tmax) + gamma_max * (1 - t / tmax)

        # Create a job and send it to a QPU
        problem_job = vertex_cover_problem.to_job('sqa', gamma_t=gamma_t, tmax=tmax, nbshots=1)
        sqa_qpu = SQAQPU(temp_t=temp_t, n_steps=n_steps, n_trotters=n_trotters)
        problem_result = sqa_qpu.submit(problem_job)

        # Present best configuration
        state_int = problem_result.raw_data[0].state.int  # raw_data is a list of Samples - one per shot
        solution_configuration = integer_to_spins(state_int, len(graph.nodes()))
        print("Solution configuration: \n" + str(solution_configuration) + "\n")
        indices_spin_1 = np.where(solution_configuration == 1)[0]
        number_of_colours = len(indices_spin_1)
        print("One would need to colour " + str(number_of_colours) + " vertices, which are:\n" + str(indices_spin_1) + "\n")

.. parseonly:: myqlm distributed

    .. run-block:: python

        import networkx as nx
        import numpy as np
        from qat.opt import VertexCover
        from qat.qpus import SimulatedAnnealing
        from qat.simulated_annealing import integer_to_spins
        from qat.core import Variable

        # Specify the graph
        graph = nx.Graph()
        graph.add_nodes_from(np.arange(6))
        graph.add_edges_from([(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 5)])

        # Impose constraints for the right encoding
        B = 1
        A = B + 0.01
        vertex_cover_problem = VertexCover(graph, A=A, B=B)

        # Extract parameters for SA
        problem_parameters_dict = vertex_cover_problem.get_best_parameters()
        n_steps = problem_parameters_dict["n_steps"]
        temp_max = problem_parameters_dict["temp_max"]
        temp_min = problem_parameters_dict["temp_min"]

        # Create a temperature schedule and a QPU
        tmax = 1.0
        t = Variable("t", float)
        temp_t = temp_min * (t / tmax) + temp_max * (1 - t / tmax)
        sa_qpu = SimulatedAnnealing(temp_t=temp_t, n_steps=n_steps)

        # Create a job and send it to the QPU
        problem_job = vertex_cover_problem.to_job('sqa', tmax=tmax)
        problem_result = sa_qpu.submit(problem_job)

        # Extract and print the solution configuration
        state = problem_result.raw_data[0].state.int  # raw_data is a list of Samples - one per computation
        solution_configuration = integer_to_spins(state, len(graph.nodes()))
        print("Solution configuration: \n" + str(solution_configuration) + "\n")
        indices_spin_1 = np.where(solution_configuration == 1)[0]
        number_of_colours = len(indices_spin_1)
        print("One would need to colour " + str(number_of_colours) + " vertices, which are:\n" + str(indices_spin_1) + "\n")

.. parseonly:: qlm

    This example is also detailed in this notebook on solving :notebook:`(Vertex Cover)[vertex_cover.ipynb]` problems with :ref:`SQA <simulated_quantum_annealing>`.

.. parseonly:: distributed

    This example is also detailed in this notebook on solving :notebook:`(Vertex Cover)[vertex_cover_distributed.ipynb]` problems with :ref:`SA <simulated_annealing>`.

.. parseonly:: myqlm

    This example is also detailed in this notebook on solving :notebook:`(Vertex Cover)[vertex_cover_myqlm.ipynb]` problems with :ref:`SA <simulated_annealing>`.
