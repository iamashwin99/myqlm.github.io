.. _graph_colouring_ann_prob:

Graph Colouring
===============

Given an undirected graph with vertex set :math:`V` and edge set :math:`E` and a a set of :math:`n` colours, the problem consists in
finding whether we can colour every node of the graph in one of these :math:`n` colours such that no edge connects nodes of the same
colour. We therefore need :math:`nN` spins to anneal the problem with our :class:`~qat.opt.graph_colouring.GraphColouring` class
(or :class:`~qat.opt.generators.GraphColouringGenerator` class), where :math:`N` is the number of vertices of the graph.
The classical complexity of the best known approximate algorithm for this problem is :math:`O(N(\log \log N)^2 (\log N)^3)`.

.. only:: qlm

    Solving this problem using the :ref:`simulated quantum annealing <simulated_quantum_annealing>` method requires :class:`~qat.qpus.SQAQPU`.

.. only:: myqlm

    Solving this problem using the simulated quantum annealing method requires the Simulated Quantum Annealing QPU, that is 
    available in the full Qaptiva appliance.

.. only:: qlm

    .. run-block:: python

        import networkx as nx
        import numpy as np
        import random
        from qat.opt import GraphColouring
        from qat.qpus import SQAQPU
        from qat.core import Variable
        from qat.core.spins import integer_to_spins

        # Specify the graph 
        graph = nx.Graph()
        graph.add_nodes_from(np.arange(4))
        graph.add_edges_from([(0, 1), (0, 2), (1, 2), (1, 3), (2, 3)])

        # Specify the number of colours
        number_of_colours = 3
        number_of_nodes = len(graph.nodes())
        number_of_spins = number_of_colours * number_of_nodes
        graph_colouring_problem = GraphColouring(graph, number_of_colours)

        # Extract parameters for SQA
        problem_parameters_dict = graph_colouring_problem.get_best_parameters()
        n_monte_carlo_updates = problem_parameters_dict["n_monte_carlo_updates"]
        n_trotters = problem_parameters_dict["n_trotters"]
        n_steps = int(n_monte_carlo_updates /
                    (n_trotters * number_of_spins)) # the last one is the number of spins, i.e. the problem size
        temp_max = problem_parameters_dict["temp_max"]
        temp_min = problem_parameters_dict["temp_min"]
        gamma_max = problem_parameters_dict["gamma_max"]
        gamma_min = problem_parameters_dict["gamma_min"]

        # Create a temperature and a gamma schedule
        tmax = 1.0
        t = Variable("t", float)
        temp_t = temp_min * (t / tmax) + temp_max * (1 - t / tmax)
        gamma_t = gamma_min * (t / tmax) + gamma_max * (1 - t / tmax)

        # Create a job and send it to a QPU
        problem_job = graph_colouring_problem.to_job(gamma_t=gamma_t, tmax=tmax, nbshots=1)
        sqa_qpu = SQAQPU(temp_t=temp_t, n_steps=n_steps, n_trotters=n_trotters)
        problem_result = sqa_qpu.submit(problem_job)

        # Present best configuration
        state_int = problem_result.raw_data[0].state.int  # raw_data is a list of Samples - one per shot
        solution_configuration = integer_to_spins(state_int, number_of_spins)
        solution_configuration_reshaped = solution_configuration.reshape((number_of_nodes, number_of_colours))
        print("Solution configuration: \n" + str(solution_configuration_reshaped) + "\n")

        # Show a list of nodes for each colour
        from itertools import product
        vertices_dictionary = {colour:[] for colour in range(number_of_colours)}
        for row, col in product(range(number_of_nodes), range(number_of_colours)):
            if solution_configuration[row * number_of_colours + col] == 1:
                vertices_dictionary[col].append(row)
        print("Dictionary of vertices for each colour:\n" + str(vertices_dictionary) + "\n")

    This example is also detailed in this notebook on solving :notebook:`(Graph Colouring)[graph_colouring.ipynb]` problems with :ref:`SQA <simulated_quantum_annealing>`.
