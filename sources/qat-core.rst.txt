.. module:: qat.core

.. _qat-core:

qat-core: Core data structures and Abstract classes
===================================================

Abstract classes
----------------

Following classes may be used to define new Plugins
or QPUs.

.. autoclass:: qat.plugins.AbstractPlugin
    :members:

.. autoclass:: qat.core.qpu.QPUHandler
    :members: submit, submit_job, serve

.. autoclass:: qat.core.generator.AbstractGenerator
    :members: generate, serve

.. autoclass:: qat.core.application.Application
    :members: execute, serve


Remote interfaces
----------------------

QPUs and Plugins can be used in client/server mode. Any Plugin or QPU, once constructed, can be published via their *serve* method (see right above).

Once published, a client can connect and interact with them via one of the two following classes:

.. autoclass:: qat.core.qpu.RemoteQPU

.. autoclass:: qat.core.plugins.RemotePlugin

.. autoclass:: qat.core.generator.RemoteBatchGenerator

.. autoclass:: qat.core.application.RemoteApplication


Batch and Job
-------------

Following are used to send a circuit or a set of circuit
to a plugin or to a QPU. The circuit is then compiled or
executed.
The :class:`~qat.core.Job` class is used to send
a single :class:`~qat.core.Circuit` to a QPU whereas
the :class:`~qat.core.Batch` class is used to send
several :class:`~qat.core.Circuit` objects at the
same time.

.. autoclass:: qat.core.Job
    :members:

Processing types for jobs are defined via an enum class:

.. autoclass:: qat.comm.shared.ttypes.ProcessingType


.. autoclass:: qat.core.Batch
    :members:

Observables
------------
Observables are objects implementing the concept of a quantum mechanical observable :math:`\hat{O}`. They can be written in qubit (Pauli matrices) representation as well as others (fermions, bosons).

.. module:: qat.core.wrappers.observable

.. autoclass:: qat.core.Observable

Check :notebook:`(this notebook)[observables.ipynb]` for an example of use and manipulation of observables.

.. autoclass:: qat.core.Term


.. _schedules_section:

Schedules
----------

On the QLM, the way to represent Hamiltonians is via the class :class:`~qat.core.Schedule`. The following sections present examples on how one can encode Schedules, use arithmetic operations between them and send them to a dedicated :ref:`analog QPU<analog_qpus>` for simulation.

1. `Building schedules`_
2. `Manipulating schedules`_
3. `Analog Jobs`_

.. autoclass:: qat.core.Schedule
   :members: load, dump, get_variables, to_job


Building schedules
^^^^^^^^^^^^^^^^^^^^^

:class:`~qat.core.Schedule` objects are specified using a collection of pairs of time-dependent coefficients and :class:`~qat.core.Observable` objects.
Time dependent coefficients are simply arithmetic expressions (built from :class:`~qat.core.variables.Variable`), with a possible open parameter representing the time dependence (usually a variable `t`).
This collection of pairs is called a "drive".

Here is a simple example that constructs a schedule containing the time-dependent Hamiltonian:

.. math::

    H(t) = (1 - t) \sigma_z^{(0)} + t \sigma_x^{(0)}

.. run-block:: python

    from qat.core import Variable, Schedule, Observable, Term

    t_variable = Variable("t")
    schedule = Schedule(drive=[(1 - t_variable, Observable(1, pauli_terms=[Term(1, 'Z', [0])])),
                               (t_variable, Observable(1, pauli_terms=[Term(1, 'X', [0])]))],
                        tmax=23.0)

    print(schedule)

As you can see, one also needs to provide the time during which the schedule is defined (the `tmax` parameter).

All scalars (i.e coefficients, tmax, etc) can be abstract arithmetic expressions:

.. run-block:: python

    from qat.core import Variable, Schedule, Observable, Term

    t_variable = Variable("t")
    tmax_variable = 15 * Variable("tmax") - 5
    schedule = Schedule(drive=[(1 - t_variable, Observable(1, pauli_terms=[Term(1, 'Z', [0])])),
                               (t_variable, Observable(1, pauli_terms=[Term(1, 'X', [0])]))],
                        tmax=tmax_variable)

    print(schedule, "\n")
    print(schedule(tmax=10))

Drives can also be declared using an :class:`~qat.core.Observable` with time-dependent coefficients:

.. run-block:: python

    from qat.core import Variable, Schedule, Observable, Term

    t_variable = Variable("t")
    hamiltonian = (1 - t_variable) * Observable(1, pauli_terms=[Term(1, 'Z', [0])]) + \
        t_variable * Observable(1, pauli_terms=[Term(1, 'X', [0])])
    schedule = Schedule(drive=hamiltonian,
                        tmax=23.0)
    print(schedule)


Manipulating schedules
^^^^^^^^^^^^^^^^^^^^^^^^^

The :class:`~qat.core.Schedule` class has some overloaded operators which allow you to manipulate them efficiently.

Temporal composition
"""""""""""""""""""""""

Two schedules can be temporally composed using the pipe/or operator:

.. run-block:: python

    from qat.core import Variable, Observable, Schedule, Term

    t_variable = Variable("t")
    schedule1 = Schedule(drive=(1 - t_variable) * Observable(1, pauli_terms=[Term(1, 'Z', [0])]),
                         tmax=2.0)
    schedule2 = Schedule(drive=t_variable * Observable(1, pauli_terms=[Term(1, 'X', [0])]),
                         tmax=3.0)

    print(schedule1 | schedule2)


Note how the coefficients are ponderated by a `heaviside` signal to filter the ranges of the two schedules.


Parallel composition
""""""""""""""""""""""

Two schedules can be merged into a single schedule containing the sum of the two drives using an addition.

.. run-block:: python

    from qat.core import Variable, Observable, Schedule, Term

    t_variable = Variable("t")
    schedule1 = Schedule(drive=(1 - t_variable) * Observable(1, pauli_terms=[Term(1, 'Z', [0])]),
                         tmax=2.0)
    schedule2 = Schedule(drive= t_variable * Observable(1, pauli_terms=[Term(1, 'X', [0])]),
                         tmax=3.0)

    print(schedule1 + schedule2)



Rescaling a schedule
"""""""""""""""""""""

Schedule can be rescaled by multiplication by a scalar:

.. run-block:: python

    from qat.core import Variable, Observable, Schedule, Term

    t_variable = Variable("t")
    schedule1 = Schedule(drive=(1 - t_variable) * Observable(1, pauli_terms=[Term(1, 'Z', [0])]),
                         tmax=2.0)

    print(45 * schedule1, "\n")
    print(Variable("foo") * schedule1)

Time translation of a schedule
"""""""""""""""""""""""""""""""""

Schedule can be delayed (in the past or the future) by using the bit shift operators `<<` and `>>`:


.. run-block:: python

    from qat.core import Variable, Observable, Schedule, Term

    t_variable = Variable("t")
    schedule1 = Schedule(drive=(1 - t_variable) * Observable(1, pauli_terms=[Term(1, 'Z', [0])]),
                         tmax=2.0)

    print(schedule1 >> 3)
    print(schedule1 << Variable('bar'))


Analog Jobs
^^^^^^^^^^^^

Similarly to quantum circuits, schedules can be turned into jobs using the `to_job` method:

.. run-block:: python

    from qat.core import Variable, Observable, Schedule, Term

    t_variable = Variable("t")
    schedule = Schedule(drive=(1 - t_variable) * Observable(1, pauli_terms=[Term(1, 'Z', [0])]),
                        tmax=2.0)

    # To simply sample the final state in the computational basis
    job = schedule.to_job()

    # To evaluate some observable at the end of the computation
    job = schedule.to_job(observable=Observable(1, pauli_terms=[Term(1, 'Z', [0])]))

This method takes more or less the same arguments as the quantum circuit's method with the same name.

One important difference to notice: it is possible to change the starting state of the computation using the `psi_0` argument:

.. run-block:: python

    import numpy as np
    from qat.core import Variable, Observable, Schedule, Term

    t_variable = Variable("t")
    schedule = Schedule(drive=(1 - t_variable) * (Observable(2, pauli_terms=[Term(1, 'Z', [0])]) +
                                                  Observable(2, pauli_terms=[Term(1, 'Z', [1])])),
                        tmax=2.0)

    # Starting from |++> state
    job = schedule.to_job(psi_0='++')

    # Starting from |+1> state
    job = schedule.to_job(psi_0='+1')

    # Starting from a random initial state (simulator only)
    vec = np.random.random(4)
    vec /= np.linalg.norm(vec)
    job = schedule.to_job(psi_0=vec)

Results
-------

A result is composed of several samples or, if an observable is measured,
of a scalar. The result data structure is :class:`~qat.core.Result`

.. autoclass:: qat.core.Result
    :members:

.. autoclass:: qat.core.wrappers.result.Sample
    :members:
    :exclude-members: to_dict

.. autoclass:: qat.core.wrappers.result.State
    :members:

.. autoclass:: qat.comm.shared.ttypes.IntermediateMeasurement

.. autoclass:: qat.core.BatchResult
    :members:

Circuits
--------

Here is the basic interface of the circuit class.
For more information on the various attributes of the circuit object, please refer to :ref:`circuit_full_description`.
For instance, one can easily concatenate two :class:`~qat.core.Circuit` objects (as long as they have the same number of qubits):

.. code-block:: python

    cat_circuit = circuit1 + circuit2
    
Tensorial composition is implemented via an overloading of the :code:`__mult__` operator:

.. code-block:: python

    kron_circuit = circuit1 * circuit2

Among the other useful methods, we can find:

* the direct generation of a :class:`~qat.core.Job` object from a circuit using various parameters:

    .. code-block:: python

        job = circuit.to_job(job_type="SAMPLE", nbshots=1024, qubits=[0, 3, 7])

* (de)serialization of a circuit:

    .. code-block:: python

        circuit.dump("my_circuit.circ")
        circuit = Circuit.load("my_circuit.circ")

* binding of an abstract variable:

    .. code-block:: python

        new_circuit = circuit(theta=0.34)
        # or, equivalently
        new_circuit = circuit.bind_variables({theta: 0.34})


.. autoclass:: qat.core.Circuit
    :members:


Displaying circuits
----------------------

Circuits could be displayed in a notebook or inside
a terminal. To display a circuit in a terminal, you
can use the function :func:`qat.core.console.display`

.. autofunction:: qat.core.console.display

.. warning::

    Only `GATETYPE` operators can be visualized in a terminal.
    An exception is raised if your circuit contains measures,
    gates controlled classically, logic operators, ...

Function :func:`~qat.core.printer.plot_in_notebook` can be used to display
a circuit inside a Jupyter notebook

.. autofunction:: qat.core.printer.plot_in_notebook

The :func:`~qat.core.Circuit.display` method can be used to display a circuit in
a notebook or in an IPython terminal (this function will detect automatically
if :func:`qat.core.console.display` or :func:`~qat.core.printer.plot_in_notebook`
must be used).

Hardware specifications
-----------------------

Hardware specifications are described by a the class
:class:`~qat.core.HardwareSpecs`

.. autoclass:: qat.core.HardwareSpecs
    :members:

.. autoclass:: qat.core.Topology
    :members:

.. autoclass:: qat.core.TopologyType

    This class is an enumeration describing the type of a
    :class:`~qat.core.Topology`. Currently, there are
    three types of topologies:

    .. toggle-header::
       :header: **All To All** (ALL_TO_ALL)

        This type describes topologies for which two-qubit
        gates can be applied on any pair of qubits

        .. run-block:: python

            from qat.core import Topology, TopologyType

            all_to_all = Topology(type=TopologyType.ALL_TO_ALL)

    .. toggle-header::
       :header: **Linear** (LNN)

        This type describes topologies for which two-qubit gates can only be
        applied on qubits having consecutive indexes (i.e. a two-qubit gate can
        only be applied on the qubits of indexes :math:`i` and :math:`i \pm 1`)

        .. run-block:: python

            from qat.core import Topology, TopologyType

            lnn = Topology(type=TopologyType.LNN)

    .. toggle-header::
       :header: **Custom** (CUSTOM)

        This type describes a custom topology. Objects of type
        :class:`~qat.core.Topology` having a custom topology type must have
        a graph

        .. run-block:: python

            from qat.core import Topology, TopologyType

            # Init topology
            custom = Topology(type=TopologyType.CUSTOM)

            # Graph definition
            custom.add_edge(0, 1)
            custom.add_edge(0, 2)

Gate set and gate signatures
----------------------------

These classes are core classes hidden behind :class:`qat.lang.AQASM.gates.AbstractGate` class.

.. autoclass:: qat.core.gate_set.GateSignature
    :members: set_matrix_generator, set_circuit_generator, get_matrix, get_circuit 

.. autoclass:: qat.core.gate_set.GateSet
    :members: add_signature, union

.. autoclass:: qat.core.gate_set.GateSyntaxRedefinition

Variables and expressions
----------------------------

When defining a variational circuit, pyAQASM provides its own way to declare variables (via the :meth:`qat.lang.AQASM.Program.new_var` method).
However, it is possible to turn most parts of a Job into a parametrized quantity using :class:`qat.core.Variable` objects. 

.. autoclass:: qat.core.Variable
    :members:


.. autoclass:: qat.core.variables.ArithExpression
    :members:


It is possible to extend the set of symbols supported by this abstract expression mechanics by extending the
list of a symbols with a new :class:`qat.core.variables.Symbol`. The only constraint is that the new symbols should have a fixed arity that is known in advance. 

.. autoclass:: qat.core.variables.Symbol

Defined symbols can be accessed via the `ALL_SYMBOLS` module variable:

.. run-block:: python

    from qat.core.variables import ALL_SYMBOLS

    for token, symbol in ALL_SYMBOLS.items():
        print(token, symbol.evaluator, symbol.arity)


For instance, the following piece of code adds a new symbol that represents the min between two numeric values.

.. run-block:: python

    from qat.core.variables import Variable, Symbol, ALL_SYMBOLS

    # token will "min"
    # underlying function is the standard `min`
    # it has arity 2
    # it is not an infix operator
    my_min = Symbol("min", min, 2, infix=False)

    # This step is necessary if we want to be able to bind variables in expressions containing min
    ALL_SYMBOLS["min"] = my_min

    a, b = Variable("a"), Variable("b")
    
    expr = my_min(a, b)
    print(expr)
    print(expr(a=3))
    print(expr(a=3, b=4))

.. warning::

    If you create a Symbol in your environment, but choose to send it for evaluation to a remote QLM,
    the remote environment will not be aware of this new Symbol and the expression evaluation might fail.


Various methods and tools
----------------------------

.. autofunction:: qat.core.formula_eval.evaluate

.. autofunction:: qat.core.circuit_builder.matrix_util.get_predef_generator

.. autofunction:: qat.core.circuit_builder.matrix_util.get_param_generator

.. autofunction:: qat.core.circuit_builder.matrix_util.default_gate_set


Plugins & Junctions
----------------------

.. autoclass:: qat.plugins.Junction
    :members: run, execute


.. autoclass:: qat.plugins.Optimizer
    :members: optimize, evaluate
