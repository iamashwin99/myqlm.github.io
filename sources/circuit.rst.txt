
The high-level wrapper
__________________________

Most of the standard manipulations can be handled via the high-level interface of the circuit:

* iterating over the instructions using the :meth:`qat.core.Circuit.iterate_simple` method

.. run-block::  python

    from qat.lang.AQASM import Program
    from qat.lang.AQASM.qftarith import QFT

    prog = Program()
    qbits = prog.qalloc(4)
    prog.apply(QFT(4), qbits)
    prog.measure([qbits[0], qbits[3]])
    prog.reset(qbits[2])
    circuit = prog.to_circ()

    for instruction in circuit.iterate_simple():
        print(instruction)

* iterating over raw instructions (for advanced usage):

.. run-block:: python

    from qat.lang.AQASM import Program
    from qat.lang.AQASM.qftarith import QFT

    prog = Program()
    qbits = prog.qalloc(4)
    prog.apply(QFT(4), qbits)
    prog.measure([qbits[0], qbits[3]])
    prog.reset(qbits[2])
    circuit = prog.to_circ()

    for instruction in circuit:
        print(instruction)


* concatenation using the overloaded :code:`__add__` operator

* tensor product using the overloaded :code:`__mult__` operator

* serialization/deserialization using the :meth:`~qat.core.Circuit.dump` and :meth:`~qat.core.Circuit.load` methods

* abstract variables binding using the :meth:`~qat.core.Circuit.bind_variables` method

* easy job generation using the :meth:`~qat.core.Circuit.to_job` method

Qubits and cbits
___________________

The number of qubits and classical bits declared in the circuit can be accessed like so:

.. code-block:: python

    circuit.nbqbits
    circuit.nbcbits

At circuit generation, the convention is to extend the number of classical bits to match the number of declared qubits. So it might be that your didn't declare any cbits in pyAQASM, and still end up with a non-zero number of classical bits.

The field `nbqbits` might also be extended to match the total number of qbits used by the circuit (for instance if a sub-routine is using some ancillae that are dynamically allocated at inlining/emulation/execution).

This extension requires to emulate the flow of the circuit.

All quantum registers declared in pyAQASM can be found in the `.qregs` field.
The type of these registers is also stored in the QReg structure:

.. code-block:: python

    for qreg in circuit.qregs:
        print("Register of length {} starting at {}".format(qreg.length, qreg.start))


Please refer to the section :ref:`Quantum types <quantum-types>` to get more information on
registers.


Instruction list
_____________________

The main 'body' of a :class:`~qat.core.Circuit` is described as a list of operations - :class:`~qat.comm.datamodel.ttypes.Op`.

Here is the formal documentation of these `Op` objects:

.. autoclass:: qat.comm.datamodel.ttypes.Op


More precisely the field `.type` in :class:`~qat.comm.datamodel.ttypes.Op` can be:

.. program-output:: python3 -c "from qat.comm.datamodel.ttypes import OpType;print(list(dir(OpType))[:7])"

Once the type is set, various attributes of the :class:`~qat.comm.datamodel.ttypes.Op` object are used to store relevant pieces of information.

- **GATETYPE** corresponds to a quantum gate application (without classical control). In that case:

    - `op.gate` will contain the name of the gate (see below the gate dictionary section for detailed use of this name)
    - `op.qbits` will contain the list of the target qubits

- **CLASSICCTRL** corresponds to a quantum gate application with classical control. In addition to the fields used in the **GATETYPE** case, here we also have:

    - `op.cbits` will contain a list of size 1 with a single cbit to be used as control classical bit

- **MEASURE** corresponds to a measure operation:

 - `op.qbits` will contain a list of qubits to measure
 - `op.cbits` will contain a list of cbits to store the results. The two lists will have the exact same size.

- **BREAK** corresponds to a break operation:

    - `op.formula` will contain a (prefix formatted) string containing a boolean formula to evaluate over the current values of the cbits in order to determine if the computation should be aborted or not. :py:mod:`qat.core.formula_eval.evaluate` provides an implementation of this evaluation, if required.

    .. run-block:: python

        from qat.core.formula_eval import evaluate

        formula = "AND 1 OR 0 2"
        cbit_values = [True, False, True]
        evaluate(formula, cbit_values) #should return False

- **RESET** corresponds to reset operations.

    - `op.qbits` will contain a list of qubits to reset
    - `op.cbits` will contain a list of cbits to reset

- **REMAP** corresponds to classical remaps/rewiring of the qubits. These can be seen as permutations of the index of the qubits. 

    - `op.qbits` will contain a list of qubits that are to be rewired
    - `op.remap` will contain a list of integers describing the way the qubits are remapped

- **CLASSIC** corresponds to a classical operation between cbits.

    - `op.cbits` will contain the cbit receiving a new value
    - `op.formula` will contain a (prefix formatted) string containing a boolean formula to evaluate over the current values of the cbits


Quantum gates and gate dictionary
__________________________________

All quantum gates names (the `op.gate` field) are in fact keys of a dictionary stored in the `circuit.gateDic` field of the circuit.
Entries in this dictionary are of the type :class:`~qat.comm.datamodel.ttypes.GateDefinition`.

.. run-block:: python

    from qat.lang.AQASM import Program
    prog = Program()
    circuit = prog.to_circ()
    print(circuit.gateDic["H"])
    
.. toggle-header::
   :header: *Toggle to get the documentation of* :class:`~qat.comm.datamodel.ttypes.GateDefinition`

    .. note::

        Class :class:`~qat.comm.datamodel.ttypes.GateDefinition` is not designed to be instantiated manually.
        Please refer to the :ref:`Writting quantum circuits <programming>` section or the
        :mod:`qat.lang` module to create your own circuits

    .. class:: qat.comm.datamodel.ttypes.GateDefinition

        A gate definition describes the implementation of a quantum gate. A quantum gate can be defined
        by:

         * a unitary matrix
         * a function of another gate (i.e. control of a subgate, dagger of a subgate, ...)
         * a subcircuit

        Instance attributes:
         * **matrix** (*optional*): the matrix implementation of the gate. A matrix
           is defined with the following attributes:

            * **nCols** (*int*): the number of columns in the matrix
            * **nRows** (*int*): the number of rows in the matrix
            * **data** (*list*): list of complex numbers describing the content of this matrix
         * **is_ctrl** (*bool, optional*, **deprecated**): indicates if the gate is a controled version of another gate
         * **is_dag** (*bool, optional*): indicates if the gate is a dagger version of another gate
         * **is_conj** (*bool, optional*): indicates if the gate is a conjugate version of another gate
         * **is_trans** (*bool, optional*): indicates if the gate is a transpose version of another gate
         * **nbctrls** (*int, optional*): signifies that the gate is a multiple controled version of another gate. If set to a non-zero number, `subgate` will store the corresponding subgate.
         * **subgate** (*str, optional*): will store the name of the subgate if any one of the `.is_ctrl`, `.is_dag`, `.is_conj`, `.is_trans` is true, or
           if `.nbctrls` is a strict positive integer.
         * **arity** (*int*): an integer representing the number of qubits on which this gate can be applied
         * **syntax** (*optional*): the syntax of the gate (if any). A syntax is defined
           with the following attributes:

            * **name** (*str*): name of the gate (e.g. "H", "RZ", etc.)
            * **parameters** (*list*): parameters used to build the gate
         * **circuit_implementation** (*optional*): if the gate has an implementation in the form of a subroutine, this
           attribute contains the subcircuit corresponding to the gate. Definitions of gates generated with an
           :class:`~qat.lang.AQASM.gates.AbstractGate` may have this attribute defined. A circuit implementation is defined
           by the following attributes:

            * **ops** (*list*): list of :class:`~qat.comm.datamodel.ttypes.Op`
            * **ancillas** (*int*): number of ancillas
            * **nbqbits** (*int*): number of qubits used by the subroutine

There are three different ways to define the implementation of
a gate:

.. toggle-header::
   :header: **Using a matrix**

    The definition of a gate is given by a matrix. The attribute :code:`matrix`
    of :class:`~qat.comm.datamodel.ttypes.GateDefinition` will contain the matrix.

    .. run-block:: python

        from qat.lang.AQASM import Program, H

        # Create a circuit
        prog = Program()
        qbit = prog.qalloc(1)
        prog.apply(H, qbit)
        circ = prog.to_circ()

        # Extract the definition of the gate H
        print(f"The ID of the first gate is {circ.ops[0].gate}")
        print(circ.gateDic["H"].matrix)

.. toggle-header::
   :header: **Using a subgate**

    The definition of a gate is given by a subgate and a transformation. The attribute
    :code:`subgate` of :class:`~qat.comm.datamodel.ttypes.GateDefinition` will contain
    the name of the subgate.

    .. run-block:: python

       from qat.lang.AQASM import Program, H

       # Create a circuit
       prog = Program()
       qbits = prog.qalloc(2)
       prog.apply(H.ctrl(), qbits)
       circ = prog.to_circ()

       # Extract the definition of the gate C-H
       print(f"The ID of the first gate is {circ.ops[0].gate}")
       definition = circ.gateDic["_0"]
       print(f"This gate '_0' controls {definition.nbctrls} time the gate {definition.subgate}")

.. toggle-header::
   :header: **Using a circuit implementation**

    The definition of a gate is given by a circuit implementation. The attribute
    :code:`circuit_implementation` of :class:`~qat.comm.datamodel.ttypes.GateDefinition`
    contains the definition of the gate.

    .. run-block:: python

        from qat.lang.AQASM import Program
        from qat.lang.AQASM.qftarith import QFT

        # Create a circuit
        prog = Program()
        qbits = prog.qalloc(2)
        prog.apply(QFT(2), qbits)
        circ = prog.to_circ()

        # Extract the definition of QFT(2)
        print(f"The circuit is composed of {len(circ.ops)} gate")
        print("The definition of the gate is given by the subcircuit:")
        print(circ.gateDic["_0"].circuit_implementation.ops)
