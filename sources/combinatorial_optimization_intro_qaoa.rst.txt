Quantum Approximate Optimization Algorithm (QAOA)
_________________________________________________

The **Quantum Approximate Optimization Algorithm (QAOA)** is a heuristic to design variational Ans√§tze for combinatorial optimization. It is inspired from the digitalization of an analog evolution using a linear ramp, starting from a simple initial Hamiltonian :math:`H_0 = - \sum_i \sigma_x^i` to a diagonal Hamiltonian whose ground state encodes the solution to our problem. 

The circuits produced by this method have the following shape:

.. figure:: qaoa_circuit.PNG

where :math:`H_0 = - \sum_i \sigma_x^i`, and :math:`H_C` is an (efficiently generated) classical cost Hamiltonian that encodes the cost function to optimize. The propagator :math:`e^{i\gamma H_C}` is usually simple to implement from a problem specification. :math:`e^{i\beta H_0}` simply corresponds to a collection of :math:`R_X` rotations of angle :math:`2\beta`.

Once such a circuit is produced, one can use a QPU, along with a classical optimizer, to minimize the quantity:
:math:`\langle 0|C(\gamma, \beta)^\dagger H_C C(\gamma, \beta)|0 \rangle`
in order to produce a quantum state with the lowest possible energy (i.e that overlaps well with the proper ground state of :math:`H_C`, which, by construction, corresponds to the optimal solution of our problem). This can be handled via a variational plugin in the QLM, see :ref:`this section <variational-programs>` for more details.

As you can see, the circuit is also parametrized by a depth :math:`d` corresponding to the number of alternating variational layers. The larger the depth, the better the approximation of the solution (at least in theory). In practice, increasing this parameter yields a larger circuit with greater number of parameters to optimize, which can slow down the convergence of the algorithm.

The algorithm is fully described in :cite:`farhi2014quantum`.

It is possible to directly generate ready to run QAOA jobs (containing an Ansatz and the target Hamiltonian) from an instance of :class:`~qat.opt.CombinatorialProblem`/:class:`~qat.opt.QUBO`/:class:`~qat.opt.Ising` via the :class:`~qat.opt.circuit_generator.CircuitGenerator` class. In that case the qlm will take care of generating a cost Hamiltonian for the problem (depending on how you specified it).

If you need a lower level interface, the :class:`qat.vsolve.ansatz.AnsatzFactory` provides a recipe to produce such a variational circuit from a target Hamiltonian. In both cases, the Ansatz factory allows you to pick between (at least) three different circuit synthesis strategies, yielding functionally equivalent circuits with different shapes.