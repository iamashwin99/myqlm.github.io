
.. _introduction:


Main objects: Jobs, Observables, Circuits...
=============================================

.. only:: myqlm

    MyQLM comes in the shape of a series of Python libraries. These libraries
    are all articulated around a common set of classes, data structures,
    and services. This page describes the main classes of myQLM as well as their
    usefulness. These structures are all defined in the Python namespace
    :mod:`qat.core` so please refer to :ref:`qat-core` to read the source code
    documentation of these structures.

.. only:: qlm

    The QLM comes in the shape of a series of Python libraries. These libraries
    are all articulated around a common set of classes, data structures,
    and services. This page describes the main classes of the QLM as well as their
    usefulness. These structures are all defined in the Python namespace
    :mod:`qat.core` so please refer to :ref:`qat-core` to read the source code
    documentation of these structures.


Job and Batch
.............

In the QLM, quantum circuits are viewed as routines preparing a quantum memory in a particular state.
Hence, some additional sampling information should be provided next to the quantum circuit. 
The :class:`~qat.core.Job` class fits this purpose. To define a :class:`~qat.core.Job`, we will
provide various pieces of information such as:

    - The type of sampling we would like to perform : standard computational basis sampling, sampling of an observable, etc.
    - The number of samples, or "shots", to perform
    - Which qubits should be measured
    - The format of the returned data

A :class:`~qat.core.Batch` object contains a list of jobs that allows to send several
circuits to a QPU with only a single request to the QPU.

An example using a batch to simulate a circuit:


.. only:: myqlm

    .. code-block:: python

        # Import and instantiate a QPU
        from qat.pylinalg import PyLinalg
        qpu = PyLinalg()
        # Create a job from a circuit
        job = circuit.to_job(nbshots=1024, qubits=[1,7])

        # Submit the job
        result = qpu.submit(job)

        # To iterate over final state vector produce by the circuit:
        for sample in result:
            print(sample)


.. only:: qlm

    .. code-block:: python

        # Import and instantiate a QPU
        from qat.qpus import LinAlg
        qpu = LinAlg()

        # Create a job from a circuit
        job = circuit.to_job(nbshots=1024, qubits=[1,7])

        # Submit the job
        result = qpu.submit(job)

        # To iterate over final state vector produce by the circuit:
        for sample in result:
            print(sample)



.. warning::
    The state vector could be large, saving it into an array may lead to
    memory issues.

.. note::
    The job is defined by :py:class:`qat.core.Job`.
    The batch is defined by :py:class:`qat.core.Batch`.


Observables
.............

As mentioned above, it is possible to construct a :class:`~qat.core.Job` requiring the sampling of some observable on the final state produced by a quantum circuit. The :class:`~qat.core.Observable` class provides a basic interface to declare observables.

.. run-block:: python

    from qat.core import Observable, Term

    my_observable = Observable(4, # A 4 qubits observable
                               pauli_terms=[
                                   Term(1., "ZZ", [0, 1]),
                                   Term(4., "XZ", [2, 0]),
                                   Term(3., "ZXZX", [0, 1, 2, 3])
                               ],
                               constant_coeff=23.)
    print(my_observable)


Observables can be added and multiplied by a scalar:


.. run-block:: python

    from qat.core import Observable, Term

    obs1 = Observable(2, pauli_terms=[Term(1., "ZZ", [0, 1])])
    obs2 = Observable(2, pauli_terms=[Term(1., "X", [0])])

    print(obs1 + obs2)


.. run-block:: python

    from qat.core import Observable, Term

    obs1 = Observable(2, pauli_terms=[Term(1., "ZZ", [0, 1])])

    print(4 * obs1)

They can be composed via tensor product using the `__xor__` operator:

.. run-block:: python

    from qat.core import Observable, Term

    obs1 = Observable(2, pauli_terms=[Term(1., "ZZ", [0, 1])])
    obs2 = Observable(2, pauli_terms=[Term(1., "X", [0])])

    print(obs1 ^ obs2)

The commutator of two observables can be computed using the `__or__` operator:

.. run-block:: python

    from qat.core import Observable, Term

    obs1 = Observable(2, pauli_terms=[Term(1., "ZZ", [0, 1])])
    obs2 = Observable(2, pauli_terms=[Term(1., "X", [0])])

    print(obs1 | obs2)




And last but not least, observables can be attached to a circuit to form an observable sampling job:

.. code-block:: python

    from qat.core import Observable, Term

    obs = Observable(2, pauli_terms=[Term(1., "ZZ", [0, 1])])
    job = circuit.to_job(observable=obs, nbshots=2048)


Results
................

After sending a Job on a QPU, the returned results are
encapsulated in an object :py:class:`qat.core.Result`.

Attributes of :class:`~qat.core.Result`:

    - **raw_data** is a list of Sample (cf. :class:`~qat.core.wrappers.result.Sample`)
    - **value** scalar output (when sampling an observable)
    - **value_data** informations on the scalar output
    - **meta_data** any information the quantum processor might want to transmit to the user.

Attributes of :class:`~qat.core.wrappers.result.Sample`:

    - **amplitude** the amplitude of the measured state
    - **probability** is a float in [0,1] representing the probability of getting this state
    - **intermediate_measurements** is a list summarizing the results of intermediate measurements
    - **err** the sampling error

.. _circuit_full_description:




Circuits
.......................

Inside the environment of Python libraries offered by the QLM, quantum circuits are described using the :class:`~qat.core.Circuit` class. This class is in fact a wrapper of a serializable object. This wrapper provides and overloads various methods for an active manipulation of these objects.


.. include:: circuit.rst


Exceptions
.............

All exceptions raised by QPUs and Plugins are Thrift exceptions. This is particularly usefull when using a remote QPU/Plugin, since it allows the server to cleanly catch the exception and transmit it to the client. Upon receiving the exception, the client will raise it, thus emulating a 'local' behavior.

.. toggle-header::
   :header: *Toggle to get the documentation of exceptions classes*

    .. class:: qat.comm.exceptions.ttypes.QPUException

        A QPU is supposed to raise an exception of type
        :class:`~qat.comm.exceptions.ttypes.QPUException`

        Parameters:
         * **code** (*int*): error code
         * **modulename** (*str, optional*): module in which the exception is
           raised
         * **message** (*str, optional*): error message
         * **file** (*str, optional*): file in which the exception is raised
         * **line** (*int, optional*): line index

    .. class:: qat.comm.exceptions.ttypes.PluginException

        A Plugin is supposed to raise an exception of type
        :class:`~qat.comm.exceptions.ttypes.PluginException`

        Parameters:
         * **code** (*int*): error code
         * **modulename** (*str, optional*): module in which the exception is
           raised
         * **message** (*str, optional*): error message
         * **file** (*str, optional*): file in which the exception is raised
         * **line** (*int, optional*): line index

QPUs will raise exceptions called :class:`~qat.comm.exceptions.ttypes.QPUException`,
while Plugins will raise :class:`~qat.comm.exceptions.ttypes.PluginException`.
Usually, the exception will contain a message that should be clear enough for you to understand what went wrong.

Some additional information is packed inside the exception, taking the form of a file name and a line number.

.. toggle-header::
   :header: *Toggle to get the list of error codes*

    Each error code is defined in the enumeration
    :class:`~qat.comm.exceptions.ttypes.ErrorType`. This enumeration is composed
    of the following items:

     * Error **ABORT** (code :math:`1`) raised when the execution is
       stopped
     * Error **INVALID_ARGS** (code :math:`2`) raised when arguments
       are invalid
     * Error **NONRESULT** (code :math:`5`) raised when the result is not
       available
     * Error **BREAK** (code :math:`10`) raised by a *BREAK* gate in the circuit
     * Error **ILLEGAL_GATES** (code :math:`11`) raised when the circuit contains
       a gate unknown for the QPU
     * Error **NBQBITS** (code :math:`12`) raised when the number of qubits
       composing the circuit is not compatible with the QPU
     * Error **NBCBITS** (code :math:`13`) raised when the number of cbits
       composing the circuit is not compatible with the QPU
     * Error **NOT_SIMULATABLE** (code :math:`14`) raised when a job is
       not simulatable

    .. class:: qat.comm.exceptions.ttypes.ErrorType

        Enumeration containing all the defined error code

        .. run-block:: python

            from qat.comm.exceptions.ttypes import ErrorType

            abort_code = ErrorType.ABORT

        The error codes are:

         * **ABORT** = 1
         * **INVALID_ARGS** = 3
         * **NONRESULT** = 5
         * **BREAK** = 10
         * **ILLEGAL_GATES** = 11
         * **NBQBITS** = 12
         * **NBCBITS** = 13
         * **NOT_SIMULATABLE** = 14

Additionally, exceptions come with an error code that characterizes the type of error that appeared inside the Plugin/QPU:

.. only:: qlm

    .. run-block:: python

        from qat.lang.AQASM import Program, RZ
        from qat.qpus import LinAlg
        from qat.comm.exceptions.ttypes import QPUException

        prog = Program()
        qbits = prog.qalloc(1)
        prog.apply(RZ(0.4), qbits)
        circuit = prog.to_circ(include_matrices=False)
        job = circuit.to_job()
        
        try:
            result = LinAlg().submit(job)
        except QPUException as excp:
            print(excp)

.. only:: myqlm

    .. run-block:: python

        from qat.lang.AQASM import Program, RZ
        from qat.qpus import PyLinalg
        from qat.comm.exceptions.ttypes import QPUException

        prog = Program()
        qbits = prog.qalloc(1)
        prog.apply(RZ(0.4), qbits)
        circuit = prog.to_circ(include_matrices=False)
        job = circuit.to_job()
        
        try:
            result = PyLinalg().submit(job)
        except QPUException as excp:
            print(excp)


Here code :math:`14` means that the simulator encountered a non supported gate (here a gate with no matrix).

Another useful code is the one raised when a break instruction is triggered:

.. only:: qlm

    .. run-block:: python

        from qat.lang.AQASM import Program
        from qat.qpus import LinAlg
        from qat.comm.exceptions.ttypes import QPUException

        prog = Program()
        qbits = prog.qalloc(1)
        cbits = prog.calloc(1)
        prog.measure(qbits[0], cbits[0])
        prog.cbreak(~cbits[0])
        circuit = prog.to_circ()
        job = circuit.to_job()
        
        try:
            result = LinAlg().submit(job)
        except QPUException as excp:
            print(excp)

.. only:: myqlm

    .. run-block:: python

        from qat.lang.AQASM import Program
        from qat.qpus import PyLinalg
        from qat.comm.exceptions.ttypes import QPUException

        prog = Program()
        qbits = prog.qalloc(1)
        cbits = prog.calloc(1)
        prog.measure(qbits[0], cbits[0])
        prog.cbreak(~cbits[0])
        circuit = prog.to_circ()
        job = circuit.to_job()
        
        try:
            result = PyLinalg().submit(job)
        except QPUException as excp:
            print(excp)

Code :math:`10` will always refer to a triggered break instruction.
