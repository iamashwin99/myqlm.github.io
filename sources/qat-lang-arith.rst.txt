Arithmetic routines
=====================

pyAQASM comes with a pre-implemented set of arithmetic routines.
Since there are different approaches to implement arithmetic routines, we provide various implementation of some low-level routines such as additions and additions by a classical constant.
Higher level routines are then implemented by calling some implementation of these lower level routines.

The following diagram sums up the various routines and their implementation. Arrows mean "uses", green boxes indicates the implementation strategy:

    - QFT means QFT-based arithmetic
    - CARRY means ripple-carry based arithmetic
    - INDEP means agnostic. These routines call lower level routines, indepentently from their implementation.


.. figure:: arithmetic.png
    :scale: 50 %


The routines are separated into three distinct namespaces according to these three types of implementation strategy: QFT, CARRY, INDEP.

.. warning::

    All methods are decorated using `@build_gate` which turn them into `AbstractGates`.
    To access the underlying routine instead of the wrapping gates, the method name
    can be prefixed with '~'.

    .. code-block:: python

        # will generate a call to an AbstractGate having the QFT as circuit
        # implementation
        QFT(3)

        # will generate a QRoutine object
        (~QFT)(3)

    The two behaviors are comparable, except that using the U notation allows to
    skip the inlining step when extracting the circuit (.to_circ method with
    inline=False) and to link another implementation of gate U later on. Using (~U) will 
    effectively inline the gate no matter what.

QFT-based arithmetic
-------------------------

.. py:currentmodule:: qat.lang.AQASM.qftarith

.. automodule:: qat.lang.AQASM.qftarith

.. autofunction:: QFT(reg_size)

.. autofunction:: add(reg_size, reg_size_2)

.. autofunction:: add_const(reg_size, constant)

.. autofunction:: mult(reg_size, reg_size_2, res_reg_size)

.. autofunction:: mult_const(reg_size, reg_size_2, constant)

Carry-based arithmetic
---------------------------

.. py:currentmodule:: qat.lang.AQASM.classarith

.. automodule:: qat.lang.AQASM.classarith

.. autofunction:: cuccaro_add(reg_size, reg_size_2)

.. autofunction:: add(reg_size, reg_size_2)

.. autofunction:: add_const(reg_size, constant)

Agnostic/High-level arithmetic
---------------------------------
.. py:currentmodule:: qat.lang.AQASM.arithmetic

.. automodule:: qat.lang.AQASM.arithmetic

.. autofunction:: modular_exp(reg_size, acc_size, constant, modulus)

.. autofunction:: mult_const_mod(reg_size, acc_size, constant, modulus)

.. autofunction:: add_const_mod(reg_size, constant, modulus)

.. autofunction:: mult_const(reg_size, acc_size, constant)

.. autofunction:: add_mod(reg_size, modulus)
