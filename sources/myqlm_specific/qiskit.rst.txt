Qiskit interoperability
=======================

Translating quantum circuits
----------------------------
.. automodule:: qat.interop.qiskit.converters


Connecting to a QPU/Backend
---------------------------

.. tab-set::

    .. tab-item:: Using Qiskit Runtime
        :sync: runtime

        .. automodule:: qat.interop.qiskit.runtime

    .. tab-item:: Using a Qiskit backend
        :sync: backend

        .. warning::

            Qiskit Runtime is designed to replace the Backend API. Please consider
            using the new Qiskit Runtime API

        .. automodule:: qat.interop.qiskit.providers


Source code documentation
-------------------------

Circuit translation
*******************

.. autofunction:: qat.interop.qiskit.qiskit_to_qlm

.. autofunction:: qat.interop.qiskit.qlm_to_qiskit

Using a Qiskit QPU in myQLM
***************************

myQLM-interop can use two APIs to wrap a Qiskit QPU within a myQLM QPU. These two
APIs are:

 - **Qiskit Runtime:** the new Qiskit API, supporting both *Sampling* and *Observable* measurements
 - **Qiskit Backend:** the old Qiskit API. This API can be used either in:

    - *Synchronous mode:* The QPU waits until the result are available
    - *Asynchronous mode:* The QPU returns a "future"

.. tab-set::

    .. tab-item:: Using Qiskit Runtime
        :sync: runtime

        Like the other myQLM QPUs, :class:`~qat.interop.qiskit.runtime.QiskitRuntimeQPU`
        is synchronous: after having submitted a job to a QPU, the process waits
        until the result is available an returns the result. In other words, the output of
        method :code:`submit()` is a :class:`~qat.core.Result`

        .. note::

            Any Plugin, any BatchGenerator available in myQLM can be piped to this
            QPU

        .. autoclass:: qat.interop.qiskit.runtime.QiskitRuntimeQPU
            :members: submit

    .. tab-item:: Using a Qiskit backend
       :sync: backend

       .. warning::

           Qiskit Runtime is designed to replace the Backend API. Please consider
           using the new Qiskit Runtime API

       .. card::

           .. tab-set::

               .. tab-item:: Synchronous mode
                   :sync: backend-sync

                   Like the other myQLM QPUs, :class:`~qat.interop.qiskit.BackendToQPU` is synchronous:
                   after having submitted a job to a QPU, the process waits until the result is available
                   an returns the result. In other words, the output of method :code:`submit()` is a
                   :class:`~qat.core.Result`

                   .. note::

                       Any Plugin, any BatchGenerator available in myQLM can be piped to this
                       QPU

                   .. autoclass:: qat.interop.qiskit.BackendToQPU
                       :members: submit

               .. tab-item:: Asynchronous mode
                   :sync: backend-async

                   Qiskit backends are asynchronous: submitting a job to a QPU returns a "future". This
                   "future" allow the user to download the result later, once available. In other words,
                   the output of method :code:`submit()` is a promise (i.e. a
                   :class:`~qat.interop.qiskit.QiskitJob` object in myQLM)

                   .. autoclass:: qat.interop.qiskit.AsyncBackendToQPU
                       :members: submit, retrieve_job

                   .. autoclass:: qat.interop.qiskit.QiskitJob
                       :members: job_id, status, cancel, result, dump

Using a myQLM QPU in Qiskit
***************************

myQLM interop provides tools to wrap an Atos QPU inside a Qiskit Backend

.. tab-set::

    .. tab-item:: Using Qiskit Runtime
       :sync: runtime

        .. warning::

            myQLM QPUs could not be cast into a Qiskit QPU using the Runtime API. Please
            use the "backend" API to wrap a myQLM QPU inside a Qiskit backend

    .. tab-item:: Using a Qiskit backend
       :sync: backend

        .. autoclass:: qat.interop.qiskit.QPUToBackend
            :members: set_qpu
